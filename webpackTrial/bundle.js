/******/
(function (modules) {
  // webpackBootstrap
  /******/
  // The module cache
  /******/
  var installedModules = {};
  /******/
  // The require function
  /******/
  function __webpack_require__(moduleId) {
    /******/
    // Check if module is in cache
    /******/
    if (installedModules[moduleId])
      /******/
      return installedModules[moduleId].exports;
    /******/
    // Create a new module (and put it into the cache)
    /******/
    var module = installedModules[moduleId] = {
        exports: {},
        id: moduleId,
        loaded: false
      };
    /******/
    // Execute the module function
    /******/
    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    // Flag the module as loaded
    /******/
    module.loaded = true;
    /******/
    // Return the exports of the module
    /******/
    return module.exports;  /******/
  }
  /******/
  // expose the modules object (__webpack_modules__)
  /******/
  __webpack_require__.m = modules;
  /******/
  // expose the module cache
  /******/
  __webpack_require__.c = installedModules;
  /******/
  // __webpack_public_path__
  /******/
  __webpack_require__.p = '';
  /******/
  // Load entry module and return exports
  /******/
  return __webpack_require__(0);  /******/
}([
  function (module, exports, __webpack_require__) {
    /** @jsx React.DOM */
    __webpack_require__(1);
    __webpack_require__(5);
    var ReactDOM = __webpack_require__(11);
    document.write('It works entryjs .');
    var React = __webpack_require__(157);
    var ReactHighcharts = __webpack_require__(169);
    var config = {
        chart: { type: 'bar' },
        title: { text: 'Fruit Consumption' },
        xAxis: {
          categories: [
            'Apples',
            'Bananas',
            'Oranges'
          ]
        },
        yAxis: { title: { text: 'Fruit eaten' } },
        series: [
          {
            name: 'Jane',
            data: [
              1,
              0,
              4
            ]
          },
          {
            name: 'John',
            data: [
              5,
              7,
              3
            ]
          }
        ]
      };
    var config1 = {
        xAxis: {
          categories: [
            'Jan',
            'Feb',
            'Mar',
            'Apr',
            'May',
            'Jun',
            'Jul',
            'Aug',
            'Sep',
            'Oct',
            'Nov',
            'Dec'
          ]
        },
        series: [
          {
            name: 'Jane',
            data: [
              29.9,
              71.5,
              106.4,
              129.2,
              144,
              176,
              135.6,
              148.5,
              216.4,
              194.1,
              95.6,
              54.4
            ]
          },
          {
            data: [
              129.9,
              171.5,
              106.4,
              129.2,
              244,
              176,
              135.6,
              148.5,
              216.4,
              194.1,
              95.6,
              54.4
            ]
          }
        ]
      };
    ReactDOM.render(React.createElement('div', null, React.createElement(ReactHighcharts, { config: config }), React.createElement(ReactHighcharts, { config: config1 })), document.body);  /***/
  },
  function (module, exports, __webpack_require__) {
    // style-loader: Adds some css to the DOM by adding a <style> tag
    // load the styles
    var content = __webpack_require__(2);
    if (typeof content === 'string')
      content = [[
          module.id,
          content,
          ''
        ]];
    // add the styles to the DOM
    var update = __webpack_require__(4)(content, {});
    if (content.locals)
      module.exports = content.locals;
    // Hot Module Replacement
    if (false) {
      // When the styles change, update the <style> tags
      if (!content.locals) {
        module.hot.accept('!!./../node_modules/css-loader/index.js!./style.css', function () {
          var newContent = require('!!./../node_modules/css-loader/index.js!./style.css');
          if (typeof newContent === 'string')
            newContent = [[
                module.id,
                newContent,
                ''
              ]];
          update(newContent);
        });
      }
      // When the module is disposed, remove the <style> tags
      module.hot.dispose(function () {
        update();
      });
    }  /***/
  },
  function (module, exports, __webpack_require__) {
    exports = module.exports = __webpack_require__(3)();
    // imports
    // module
    exports.push([
      module.id,
      '',
      ''
    ]);  // exports
         /***/
  },
  function (module, exports) {
    /*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
    // css base code, injected by the css-loader
    module.exports = function () {
      var list = [];
      // return the list of modules as css string
      list.toString = function toString() {
        var result = [];
        for (var i = 0; i < this.length; i++) {
          var item = this[i];
          if (item[2]) {
            result.push('@media ' + item[2] + '{' + item[1] + '}');
          } else {
            result.push(item[1]);
          }
        }
        return result.join('');
      };
      // import a list of modules into the list
      list.i = function (modules, mediaQuery) {
        if (typeof modules === 'string')
          modules = [[
              null,
              modules,
              ''
            ]];
        var alreadyImportedModules = {};
        for (var i = 0; i < this.length; i++) {
          var id = this[i][0];
          if (typeof id === 'number')
            alreadyImportedModules[id] = true;
        }
        for (i = 0; i < modules.length; i++) {
          var item = modules[i];
          // skip already imported module
          // this implementation is not 100% perfect for weird media query combinations
          //  when a module is imported multiple times with different media queries.
          //  I hope this will never occur (Hey this way we have smaller bundles)
          if (typeof item[0] !== 'number' || !alreadyImportedModules[item[0]]) {
            if (mediaQuery && !item[2]) {
              item[2] = mediaQuery;
            } else if (mediaQuery) {
              item[2] = '(' + item[2] + ') and (' + mediaQuery + ')';
            }
            list.push(item);
          }
        }
      };
      return list;
    };  /***/
  },
  function (module, exports, __webpack_require__) {
    /*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
    var stylesInDom = {}, memoize = function (fn) {
        var memo;
        return function () {
          if (typeof memo === 'undefined')
            memo = fn.apply(this, arguments);
          return memo;
        };
      }, isOldIE = memoize(function () {
        return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
      }), getHeadElement = memoize(function () {
        return document.head || document.getElementsByTagName('head')[0];
      }), singletonElement = null, singletonCounter = 0, styleElementsInsertedAtTop = [];
    module.exports = function (list, options) {
      if (true) {
        if (typeof document !== 'object')
          throw new Error('The style-loader cannot be used in a non-browser environment');
      }
      options = options || {};
      // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
      // tags it will allow on a page
      if (typeof options.singleton === 'undefined')
        options.singleton = isOldIE();
      // By default, add <style> tags to the bottom of <head>.
      if (typeof options.insertAt === 'undefined')
        options.insertAt = 'bottom';
      var styles = listToStyles(list);
      addStylesToDom(styles, options);
      return function update(newList) {
        var mayRemove = [];
        for (var i = 0; i < styles.length; i++) {
          var item = styles[i];
          var domStyle = stylesInDom[item.id];
          domStyle.refs--;
          mayRemove.push(domStyle);
        }
        if (newList) {
          var newStyles = listToStyles(newList);
          addStylesToDom(newStyles, options);
        }
        for (var i = 0; i < mayRemove.length; i++) {
          var domStyle = mayRemove[i];
          if (domStyle.refs === 0) {
            for (var j = 0; j < domStyle.parts.length; j++)
              domStyle.parts[j]();
            delete stylesInDom[domStyle.id];
          }
        }
      };
    };
    function addStylesToDom(styles, options) {
      for (var i = 0; i < styles.length; i++) {
        var item = styles[i];
        var domStyle = stylesInDom[item.id];
        if (domStyle) {
          domStyle.refs++;
          for (var j = 0; j < domStyle.parts.length; j++) {
            domStyle.parts[j](item.parts[j]);
          }
          for (; j < item.parts.length; j++) {
            domStyle.parts.push(addStyle(item.parts[j], options));
          }
        } else {
          var parts = [];
          for (var j = 0; j < item.parts.length; j++) {
            parts.push(addStyle(item.parts[j], options));
          }
          stylesInDom[item.id] = {
            id: item.id,
            refs: 1,
            parts: parts
          };
        }
      }
    }
    function listToStyles(list) {
      var styles = [];
      var newStyles = {};
      for (var i = 0; i < list.length; i++) {
        var item = list[i];
        var id = item[0];
        var css = item[1];
        var media = item[2];
        var sourceMap = item[3];
        var part = {
            css: css,
            media: media,
            sourceMap: sourceMap
          };
        if (!newStyles[id])
          styles.push(newStyles[id] = {
            id: id,
            parts: [part]
          });
        else
          newStyles[id].parts.push(part);
      }
      return styles;
    }
    function insertStyleElement(options, styleElement) {
      var head = getHeadElement();
      var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
      if (options.insertAt === 'top') {
        if (!lastStyleElementInsertedAtTop) {
          head.insertBefore(styleElement, head.firstChild);
        } else if (lastStyleElementInsertedAtTop.nextSibling) {
          head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
        } else {
          head.appendChild(styleElement);
        }
        styleElementsInsertedAtTop.push(styleElement);
      } else if (options.insertAt === 'bottom') {
        head.appendChild(styleElement);
      } else {
        throw new Error('Invalid value for parameter \'insertAt\'. Must be \'top\' or \'bottom\'.');
      }
    }
    function removeStyleElement(styleElement) {
      styleElement.parentNode.removeChild(styleElement);
      var idx = styleElementsInsertedAtTop.indexOf(styleElement);
      if (idx >= 0) {
        styleElementsInsertedAtTop.splice(idx, 1);
      }
    }
    function createStyleElement(options) {
      var styleElement = document.createElement('style');
      styleElement.type = 'text/css';
      insertStyleElement(options, styleElement);
      return styleElement;
    }
    function createLinkElement(options) {
      var linkElement = document.createElement('link');
      linkElement.rel = 'stylesheet';
      insertStyleElement(options, linkElement);
      return linkElement;
    }
    function addStyle(obj, options) {
      var styleElement, update, remove;
      if (options.singleton) {
        var styleIndex = singletonCounter++;
        styleElement = singletonElement || (singletonElement = createStyleElement(options));
        update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
        remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
      } else if (obj.sourceMap && typeof URL === 'function' && typeof URL.createObjectURL === 'function' && typeof URL.revokeObjectURL === 'function' && typeof Blob === 'function' && typeof btoa === 'function') {
        styleElement = createLinkElement(options);
        update = updateLink.bind(null, styleElement);
        remove = function () {
          removeStyleElement(styleElement);
          if (styleElement.href)
            URL.revokeObjectURL(styleElement.href);
        };
      } else {
        styleElement = createStyleElement(options);
        update = applyToTag.bind(null, styleElement);
        remove = function () {
          removeStyleElement(styleElement);
        };
      }
      update(obj);
      return function updateStyle(newObj) {
        if (newObj) {
          if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
            return;
          update(obj = newObj);
        } else {
          remove();
        }
      };
    }
    var replaceText = function () {
        var textStore = [];
        return function (index, replacement) {
          textStore[index] = replacement;
          return textStore.filter(Boolean).join('\n');
        };
      }();
    function applyToSingletonTag(styleElement, index, remove, obj) {
      var css = remove ? '' : obj.css;
      if (styleElement.styleSheet) {
        styleElement.styleSheet.cssText = replaceText(index, css);
      } else {
        var cssNode = document.createTextNode(css);
        var childNodes = styleElement.childNodes;
        if (childNodes[index])
          styleElement.removeChild(childNodes[index]);
        if (childNodes.length) {
          styleElement.insertBefore(cssNode, childNodes[index]);
        } else {
          styleElement.appendChild(cssNode);
        }
      }
    }
    function applyToTag(styleElement, obj) {
      var css = obj.css;
      var media = obj.media;
      var sourceMap = obj.sourceMap;
      if (media) {
        styleElement.setAttribute('media', media);
      }
      if (styleElement.styleSheet) {
        styleElement.styleSheet.cssText = css;
      } else {
        while (styleElement.firstChild) {
          styleElement.removeChild(styleElement.firstChild);
        }
        styleElement.appendChild(document.createTextNode(css));
      }
    }
    function updateLink(linkElement, obj) {
      var css = obj.css;
      var media = obj.media;
      var sourceMap = obj.sourceMap;
      if (sourceMap) {
        // http://stackoverflow.com/a/26603875
        css += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */';
      }
      var blob = new Blob([css], { type: 'text/css' });
      var oldSrc = linkElement.href;
      linkElement.href = URL.createObjectURL(blob);
      if (oldSrc)
        URL.revokeObjectURL(oldSrc);
    }  /***/
  },
  function (module, exports, __webpack_require__) {
    var angular = __webpack_require__(6);
    __webpack_require__(8);
    var angularDirective = __webpack_require__(10);
    var angularApp = angular.module('sampleApp', []);
    angularDirective(angularApp);
    angularApp.controller('sampleController', [
      '$scope',
      '$http',
      function ($scope, $http) {
        $scope.component = 'diode';
        $scope.newComp = 'dummyValue';
        getComponents();
        $scope.getTreeData = function () {
          console.log('ctrl');
          $scope.component = 'resistor';
          var request = $http({
              method: 'get',
              url: 'public/dummy.json',
              data: { name: 'pradeep' }
            });
          request.then(function (res) {
            $scope.components = res.data.components;
          }, function (err) {
            debugger;
          });
        };
        function getComponents() {
          var request = $http({
              method: 'get',
              url: 'public/dummy.json',
              data: { name: 'pradeep' }
            });
          request.then(function (res) {
            $scope.newComp = res.data.components;
          }, function (err) {
            debugger;
          });
        }
      }
    ]);  /***/
  },
  function (module, exports, __webpack_require__) {
    __webpack_require__(7);
    module.exports = angular;  /***/
  },
  function (module, exports) {
    /**
	 * @license AngularJS v1.4.7
	 * (c) 2010-2015 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
    (function (window, document, undefined) {
      'use strict';
      /**
	 * @description
	 *
	 * This object provides a utility for producing rich Error messages within
	 * Angular. It can be called as follows:
	 *
	 * var exampleMinErr = minErr('example');
	 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
	 *
	 * The above creates an instance of minErr in the example namespace. The
	 * resulting error will have a namespaced error code of example.one.  The
	 * resulting error will replace {0} with the value of foo, and {1} with the
	 * value of bar. The object is not restricted in the number of arguments it can
	 * take.
	 *
	 * If fewer arguments are specified than necessary for interpolation, the extra
	 * interpolation markers will be preserved in the final string.
	 *
	 * Since data will be parsed statically during a build step, some restrictions
	 * are applied with respect to how minErr instances are created and called.
	 * Instances should have names of the form namespaceMinErr for a minErr created
	 * using minErr('namespace') . Error codes, namespaces and template strings
	 * should all be static strings, not variables or general expressions.
	 *
	 * @param {string} module The namespace to use for the new minErr instance.
	 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
	 *   error from returned function, for cases when a particular type of error is useful.
	 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
	 */
      function minErr(module, ErrorConstructor) {
        ErrorConstructor = ErrorConstructor || Error;
        return function () {
          var SKIP_INDEXES = 2;
          var templateArgs = arguments, code = templateArgs[0], message = '[' + (module ? module + ':' : '') + code + '] ', template = templateArgs[1], paramPrefix, i;
          message += template.replace(/\{\d+\}/g, function (match) {
            var index = +match.slice(1, -1), shiftedIndex = index + SKIP_INDEXES;
            if (shiftedIndex < templateArgs.length) {
              return toDebugString(templateArgs[shiftedIndex]);
            }
            return match;
          });
          message += '\nhttp://errors.angularjs.org/1.4.7/' + (module ? module + '/' : '') + code;
          for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {
            message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' + encodeURIComponent(toDebugString(templateArgs[i]));
          }
          return new ErrorConstructor(message);
        };
      }
      /* We need to tell jshint what variables are being exported */
      /* global angular: true,
	  msie: true,
	  jqLite: true,
	  jQuery: true,
	  slice: true,
	  splice: true,
	  push: true,
	  toString: true,
	  ngMinErr: true,
	  angularModule: true,
	  uid: true,
	  REGEX_STRING_REGEXP: true,
	  VALIDITY_STATE_PROPERTY: true,

	  lowercase: true,
	  uppercase: true,
	  manualLowercase: true,
	  manualUppercase: true,
	  nodeName_: true,
	  isArrayLike: true,
	  forEach: true,
	  forEachSorted: true,
	  reverseParams: true,
	  nextUid: true,
	  setHashKey: true,
	  extend: true,
	  toInt: true,
	  inherit: true,
	  merge: true,
	  noop: true,
	  identity: true,
	  valueFn: true,
	  isUndefined: true,
	  isDefined: true,
	  isObject: true,
	  isBlankObject: true,
	  isString: true,
	  isNumber: true,
	  isDate: true,
	  isArray: true,
	  isFunction: true,
	  isRegExp: true,
	  isWindow: true,
	  isScope: true,
	  isFile: true,
	  isFormData: true,
	  isBlob: true,
	  isBoolean: true,
	  isPromiseLike: true,
	  trim: true,
	  escapeForRegexp: true,
	  isElement: true,
	  makeMap: true,
	  includes: true,
	  arrayRemove: true,
	  copy: true,
	  shallowCopy: true,
	  equals: true,
	  csp: true,
	  jq: true,
	  concat: true,
	  sliceArgs: true,
	  bind: true,
	  toJsonReplacer: true,
	  toJson: true,
	  fromJson: true,
	  convertTimezoneToLocal: true,
	  timezoneToOffset: true,
	  startingTag: true,
	  tryDecodeURIComponent: true,
	  parseKeyValue: true,
	  toKeyValue: true,
	  encodeUriSegment: true,
	  encodeUriQuery: true,
	  angularInit: true,
	  bootstrap: true,
	  getTestability: true,
	  snake_case: true,
	  bindJQuery: true,
	  assertArg: true,
	  assertArgFn: true,
	  assertNotHasOwnProperty: true,
	  getter: true,
	  getBlockNodes: true,
	  hasOwnProperty: true,
	  createMap: true,

	  NODE_TYPE_ELEMENT: true,
	  NODE_TYPE_ATTRIBUTE: true,
	  NODE_TYPE_TEXT: true,
	  NODE_TYPE_COMMENT: true,
	  NODE_TYPE_DOCUMENT: true,
	  NODE_TYPE_DOCUMENT_FRAGMENT: true,
	*/
      ////////////////////////////////////
      /**
	 * @ngdoc module
	 * @name ng
	 * @module ng
	 * @description
	 *
	 * # ng (core module)
	 * The ng module is loaded by default when an AngularJS application is started. The module itself
	 * contains the essential components for an AngularJS application to function. The table below
	 * lists a high level breakdown of each of the services/factories, filters, directives and testing
	 * components available within this core module.
	 *
	 * <div doc-module-components="ng"></div>
	 */
      var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;
      // The name of a form control's ValidityState property.
      // This is used so that it's possible for internal tests to create mock ValidityStates.
      var VALIDITY_STATE_PROPERTY = 'validity';
      /**
	 * @ngdoc function
	 * @name angular.lowercase
	 * @module ng
	 * @kind function
	 *
	 * @description Converts the specified string to lowercase.
	 * @param {string} string String to be converted to lowercase.
	 * @returns {string} Lowercased string.
	 */
      var lowercase = function (string) {
        return isString(string) ? string.toLowerCase() : string;
      };
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      /**
	 * @ngdoc function
	 * @name angular.uppercase
	 * @module ng
	 * @kind function
	 *
	 * @description Converts the specified string to uppercase.
	 * @param {string} string String to be converted to uppercase.
	 * @returns {string} Uppercased string.
	 */
      var uppercase = function (string) {
        return isString(string) ? string.toUpperCase() : string;
      };
      var manualLowercase = function (s) {
        /* jshint bitwise: false */
        return isString(s) ? s.replace(/[A-Z]/g, function (ch) {
          return String.fromCharCode(ch.charCodeAt(0) | 32);
        }) : s;
      };
      var manualUppercase = function (s) {
        /* jshint bitwise: false */
        return isString(s) ? s.replace(/[a-z]/g, function (ch) {
          return String.fromCharCode(ch.charCodeAt(0) & ~32);
        }) : s;
      };
      // String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
      // locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
      // with correct but slower alternatives.
      if ('i' !== 'I'.toLowerCase()) {
        lowercase = manualLowercase;
        uppercase = manualUppercase;
      }
      var msie,
        // holds major version number for IE, or NaN if UA is not IE.
        jqLite,
        // delay binding since jQuery could be loaded after us.
        jQuery,
        // delay binding
        slice = [].slice, splice = [].splice, push = [].push, toString = Object.prototype.toString, getPrototypeOf = Object.getPrototypeOf, ngMinErr = minErr('ng'),
        /** @name angular */
        angular = window.angular || (window.angular = {}), angularModule, uid = 0;
      /**
	 * documentMode is an IE-only property
	 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
	 */
      msie = document.documentMode;
      /**
	 * @private
	 * @param {*} obj
	 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
	 *                   String ...)
	 */
      function isArrayLike(obj) {
        if (obj == null || isWindow(obj)) {
          return false;
        }
        // Support: iOS 8.2 (not reproducible in simulator)
        // "length" in obj used to prevent JIT error (gh-11508)
        var length = 'length' in Object(obj) && obj.length;
        if (obj.nodeType === NODE_TYPE_ELEMENT && length) {
          return true;
        }
        return isString(obj) || isArray(obj) || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
      }
      /**
	 * @ngdoc function
	 * @name angular.forEach
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
	 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
	 * is the value of an object property or an array element, `key` is the object property key or
	 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
	 *
	 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
	 * using the `hasOwnProperty` method.
	 *
	 * Unlike ES262's
	 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
	 * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
	 * return the value provided.
	 *
	   ```js
	     var values = {name: 'misko', gender: 'male'};
	     var log = [];
	     angular.forEach(values, function(value, key) {
	       this.push(key + ': ' + value);
	     }, log);
	     expect(log).toEqual(['name: misko', 'gender: male']);
	   ```
	 *
	 * @param {Object|Array} obj Object to iterate over.
	 * @param {Function} iterator Iterator function.
	 * @param {Object=} context Object to become context (`this`) for the iterator function.
	 * @returns {Object|Array} Reference to `obj`.
	 */
      function forEach(obj, iterator, context) {
        var key, length;
        if (obj) {
          if (isFunction(obj)) {
            for (key in obj) {
              // Need to check if hasOwnProperty exists,
              // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
              if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
                iterator.call(context, obj[key], key, obj);
              }
            }
          } else if (isArray(obj) || isArrayLike(obj)) {
            var isPrimitive = typeof obj !== 'object';
            for (key = 0, length = obj.length; key < length; key++) {
              if (isPrimitive || key in obj) {
                iterator.call(context, obj[key], key, obj);
              }
            }
          } else if (obj.forEach && obj.forEach !== forEach) {
            obj.forEach(iterator, context, obj);
          } else if (isBlankObject(obj)) {
            // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
            for (key in obj) {
              iterator.call(context, obj[key], key, obj);
            }
          } else if (typeof obj.hasOwnProperty === 'function') {
            // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
            for (key in obj) {
              if (obj.hasOwnProperty(key)) {
                iterator.call(context, obj[key], key, obj);
              }
            }
          } else {
            // Slow path for objects which do not have a method `hasOwnProperty`
            for (key in obj) {
              if (hasOwnProperty.call(obj, key)) {
                iterator.call(context, obj[key], key, obj);
              }
            }
          }
        }
        return obj;
      }
      function forEachSorted(obj, iterator, context) {
        var keys = Object.keys(obj).sort();
        for (var i = 0; i < keys.length; i++) {
          iterator.call(context, obj[keys[i]], keys[i]);
        }
        return keys;
      }
      /**
	 * when using forEach the params are value, key, but it is often useful to have key, value.
	 * @param {function(string, *)} iteratorFn
	 * @returns {function(*, string)}
	 */
      function reverseParams(iteratorFn) {
        return function (value, key) {
          iteratorFn(key, value);
        };
      }
      /**
	 * A consistent way of creating unique IDs in angular.
	 *
	 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
	 * we hit number precision issues in JavaScript.
	 *
	 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
	 *
	 * @returns {number} an unique alpha-numeric string
	 */
      function nextUid() {
        return ++uid;
      }
      /**
	 * Set or clear the hashkey for an object.
	 * @param obj object
	 * @param h the hashkey (!truthy to delete the hashkey)
	 */
      function setHashKey(obj, h) {
        if (h) {
          obj.$$hashKey = h;
        } else {
          delete obj.$$hashKey;
        }
      }
      function baseExtend(dst, objs, deep) {
        var h = dst.$$hashKey;
        for (var i = 0, ii = objs.length; i < ii; ++i) {
          var obj = objs[i];
          if (!isObject(obj) && !isFunction(obj))
            continue;
          var keys = Object.keys(obj);
          for (var j = 0, jj = keys.length; j < jj; j++) {
            var key = keys[j];
            var src = obj[key];
            if (deep && isObject(src)) {
              if (isDate(src)) {
                dst[key] = new Date(src.valueOf());
              } else if (isRegExp(src)) {
                dst[key] = new RegExp(src);
              } else {
                if (!isObject(dst[key]))
                  dst[key] = isArray(src) ? [] : {};
                baseExtend(dst[key], [src], true);
              }
            } else {
              dst[key] = src;
            }
          }
        }
        setHashKey(dst, h);
        return dst;
      }
      /**
	 * @ngdoc function
	 * @name angular.extend
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
	 *
	 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
	 * {@link angular.merge} for this.
	 *
	 * @param {Object} dst Destination object.
	 * @param {...Object} src Source object(s).
	 * @returns {Object} Reference to `dst`.
	 */
      function extend(dst) {
        return baseExtend(dst, slice.call(arguments, 1), false);
      }
      /**
	* @ngdoc function
	* @name angular.merge
	* @module ng
	* @kind function
	*
	* @description
	* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
	*
	* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
	* objects, performing a deep copy.
	*
	* @param {Object} dst Destination object.
	* @param {...Object} src Source object(s).
	* @returns {Object} Reference to `dst`.
	*/
      function merge(dst) {
        return baseExtend(dst, slice.call(arguments, 1), true);
      }
      function toInt(str) {
        return parseInt(str, 10);
      }
      function inherit(parent, extra) {
        return extend(Object.create(parent), extra);
      }
      /**
	 * @ngdoc function
	 * @name angular.noop
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that performs no operations. This function can be useful when writing code in the
	 * functional style.
	   ```js
	     function foo(callback) {
	       var result = calculateResult();
	       (callback || angular.noop)(result);
	     }
	   ```
	 */
      function noop() {
      }
      noop.$inject = [];
      /**
	 * @ngdoc function
	 * @name angular.identity
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that returns its first argument. This function is useful when writing code in the
	 * functional style.
	 *
	   ```js
	     function transformer(transformationFn, value) {
	       return (transformationFn || angular.identity)(value);
	     };
	   ```
	  * @param {*} value to be returned.
	  * @returns {*} the value passed in.
	 */
      function identity($) {
        return $;
      }
      identity.$inject = [];
      function valueFn(value) {
        return function () {
          return value;
        };
      }
      function hasCustomToString(obj) {
        return isFunction(obj.toString) && obj.toString !== Object.prototype.toString;
      }
      /**
	 * @ngdoc function
	 * @name angular.isUndefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is undefined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is undefined.
	 */
      function isUndefined(value) {
        return typeof value === 'undefined';
      }
      /**
	 * @ngdoc function
	 * @name angular.isDefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is defined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is defined.
	 */
      function isDefined(value) {
        return typeof value !== 'undefined';
      }
      /**
	 * @ngdoc function
	 * @name angular.isObject
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
	 * considered to be objects. Note that JavaScript arrays are objects.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Object` but not `null`.
	 */
      function isObject(value) {
        // http://jsperf.com/isobject4
        return value !== null && typeof value === 'object';
      }
      /**
	 * Determine if a value is an object with a null prototype
	 *
	 * @returns {boolean} True if `value` is an `Object` with a null prototype
	 */
      function isBlankObject(value) {
        return value !== null && typeof value === 'object' && !getPrototypeOf(value);
      }
      /**
	 * @ngdoc function
	 * @name angular.isString
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `String`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `String`.
	 */
      function isString(value) {
        return typeof value === 'string';
      }
      /**
	 * @ngdoc function
	 * @name angular.isNumber
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Number`.
	 *
	 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
	 *
	 * If you wish to exclude these then you can use the native
	 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
	 * method.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Number`.
	 */
      function isNumber(value) {
        return typeof value === 'number';
      }
      /**
	 * @ngdoc function
	 * @name angular.isDate
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a value is a date.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Date`.
	 */
      function isDate(value) {
        return toString.call(value) === '[object Date]';
      }
      /**
	 * @ngdoc function
	 * @name angular.isArray
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Array`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Array`.
	 */
      var isArray = Array.isArray;
      /**
	 * @ngdoc function
	 * @name angular.isFunction
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Function`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Function`.
	 */
      function isFunction(value) {
        return typeof value === 'function';
      }
      /**
	 * Determines if a value is a regular expression object.
	 *
	 * @private
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `RegExp`.
	 */
      function isRegExp(value) {
        return toString.call(value) === '[object RegExp]';
      }
      /**
	 * Checks if `obj` is a window object.
	 *
	 * @private
	 * @param {*} obj Object to check
	 * @returns {boolean} True if `obj` is a window obj.
	 */
      function isWindow(obj) {
        return obj && obj.window === obj;
      }
      function isScope(obj) {
        return obj && obj.$evalAsync && obj.$watch;
      }
      function isFile(obj) {
        return toString.call(obj) === '[object File]';
      }
      function isFormData(obj) {
        return toString.call(obj) === '[object FormData]';
      }
      function isBlob(obj) {
        return toString.call(obj) === '[object Blob]';
      }
      function isBoolean(value) {
        return typeof value === 'boolean';
      }
      function isPromiseLike(obj) {
        return obj && isFunction(obj.then);
      }
      var TYPED_ARRAY_REGEXP = /^\[object (Uint8(Clamped)?)|(Uint16)|(Uint32)|(Int8)|(Int16)|(Int32)|(Float(32)|(64))Array\]$/;
      function isTypedArray(value) {
        return TYPED_ARRAY_REGEXP.test(toString.call(value));
      }
      var trim = function (value) {
        return isString(value) ? value.trim() : value;
      };
      // Copied from:
      // http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
      // Prereq: s is a string.
      var escapeForRegexp = function (s) {
        return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').replace(/\x08/g, '\\x08');
      };
      /**
	 * @ngdoc function
	 * @name angular.isElement
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a DOM element (or wrapped jQuery element).
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
	 */
      function isElement(node) {
        return !!(node && (node.nodeName || node.prop && node.attr && node.find));  // we have an on and find method part of jQuery API
      }
      /**
	 * @param str 'key1,key2,...'
	 * @returns {object} in the form of {key1:true, key2:true, ...}
	 */
      function makeMap(str) {
        var obj = {}, items = str.split(','), i;
        for (i = 0; i < items.length; i++) {
          obj[items[i]] = true;
        }
        return obj;
      }
      function nodeName_(element) {
        return lowercase(element.nodeName || element[0] && element[0].nodeName);
      }
      function includes(array, obj) {
        return Array.prototype.indexOf.call(array, obj) != -1;
      }
      function arrayRemove(array, value) {
        var index = array.indexOf(value);
        if (index >= 0) {
          array.splice(index, 1);
        }
        return index;
      }
      /**
	 * @ngdoc function
	 * @name angular.copy
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Creates a deep copy of `source`, which should be an object or an array.
	 *
	 * * If no destination is supplied, a copy of the object or array is created.
	 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
	 *   are deleted and then all elements/properties from the source are copied to it.
	 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
	 * * If `source` is identical to 'destination' an exception will be thrown.
	 *
	 * @param {*} source The source that will be used to make a copy.
	 *                   Can be any type, including primitives, `null`, and `undefined`.
	 * @param {(Object|Array)=} destination Destination into which the source is copied. If
	 *     provided, must be of the same type as `source`.
	 * @returns {*} The copy or updated `destination`, if `destination` was specified.
	 *
	 * @example
	 <example module="copyExample">
	 <file name="index.html">
	 <div ng-controller="ExampleController">
	 <form novalidate class="simple-form">
	 Name: <input type="text" ng-model="user.name" /><br />
	 E-mail: <input type="email" ng-model="user.email" /><br />
	 Gender: <input type="radio" ng-model="user.gender" value="male" />male
	 <input type="radio" ng-model="user.gender" value="female" />female<br />
	 <button ng-click="reset()">RESET</button>
	 <button ng-click="update(user)">SAVE</button>
	 </form>
	 <pre>form = {{user | json}}</pre>
	 <pre>master = {{master | json}}</pre>
	 </div>

	 <script>
	  angular.module('copyExample', [])
	    .controller('ExampleController', ['$scope', function($scope) {
	      $scope.master= {};

	      $scope.update = function(user) {
	        // Example with 1 argument
	        $scope.master= angular.copy(user);
	      };

	      $scope.reset = function() {
	        // Example with 2 arguments
	        angular.copy($scope.master, $scope.user);
	      };

	      $scope.reset();
	    }]);
	 </script>
	 </file>
	 </example>
	 */
      function copy(source, destination, stackSource, stackDest) {
        if (isWindow(source) || isScope(source)) {
          throw ngMinErr('cpws', 'Can\'t copy! Making copies of Window or Scope instances is not supported.');
        }
        if (isTypedArray(destination)) {
          throw ngMinErr('cpta', 'Can\'t copy! TypedArray destination cannot be mutated.');
        }
        if (!destination) {
          destination = source;
          if (isObject(source)) {
            var index;
            if (stackSource && (index = stackSource.indexOf(source)) !== -1) {
              return stackDest[index];
            }
            // TypedArray, Date and RegExp have specific copy functionality and must be
            // pushed onto the stack before returning.
            // Array and other objects create the base object and recurse to copy child
            // objects. The array/object will be pushed onto the stack when recursed.
            if (isArray(source)) {
              return copy(source, [], stackSource, stackDest);
            } else if (isTypedArray(source)) {
              destination = new source.constructor(source);
            } else if (isDate(source)) {
              destination = new Date(source.getTime());
            } else if (isRegExp(source)) {
              destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
              destination.lastIndex = source.lastIndex;
            } else if (isFunction(source.cloneNode)) {
              destination = source.cloneNode(true);
            } else {
              var emptyObject = Object.create(getPrototypeOf(source));
              return copy(source, emptyObject, stackSource, stackDest);
            }
            if (stackDest) {
              stackSource.push(source);
              stackDest.push(destination);
            }
          }
        } else {
          if (source === destination)
            throw ngMinErr('cpi', 'Can\'t copy! Source and destination are identical.');
          stackSource = stackSource || [];
          stackDest = stackDest || [];
          if (isObject(source)) {
            stackSource.push(source);
            stackDest.push(destination);
          }
          var result, key;
          if (isArray(source)) {
            destination.length = 0;
            for (var i = 0; i < source.length; i++) {
              destination.push(copy(source[i], null, stackSource, stackDest));
            }
          } else {
            var h = destination.$$hashKey;
            if (isArray(destination)) {
              destination.length = 0;
            } else {
              forEach(destination, function (value, key) {
                delete destination[key];
              });
            }
            if (isBlankObject(source)) {
              // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
              for (key in source) {
                destination[key] = copy(source[key], null, stackSource, stackDest);
              }
            } else if (source && typeof source.hasOwnProperty === 'function') {
              // Slow path, which must rely on hasOwnProperty
              for (key in source) {
                if (source.hasOwnProperty(key)) {
                  destination[key] = copy(source[key], null, stackSource, stackDest);
                }
              }
            } else {
              // Slowest path --- hasOwnProperty can't be called as a method
              for (key in source) {
                if (hasOwnProperty.call(source, key)) {
                  destination[key] = copy(source[key], null, stackSource, stackDest);
                }
              }
            }
            setHashKey(destination, h);
          }
        }
        return destination;
      }
      /**
	 * Creates a shallow copy of an object, an array or a primitive.
	 *
	 * Assumes that there are no proto properties for objects.
	 */
      function shallowCopy(src, dst) {
        if (isArray(src)) {
          dst = dst || [];
          for (var i = 0, ii = src.length; i < ii; i++) {
            dst[i] = src[i];
          }
        } else if (isObject(src)) {
          dst = dst || {};
          for (var key in src) {
            if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
              dst[key] = src[key];
            }
          }
        }
        return dst || src;
      }
      /**
	 * @ngdoc function
	 * @name angular.equals
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if two objects or two values are equivalent. Supports value types, regular
	 * expressions, arrays and objects.
	 *
	 * Two objects or values are considered equivalent if at least one of the following is true:
	 *
	 * * Both objects or values pass `===` comparison.
	 * * Both objects or values are of the same type and all of their properties are equal by
	 *   comparing them with `angular.equals`.
	 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
	 * * Both values represent the same regular expression (In JavaScript,
	 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
	 *   representation matches).
	 *
	 * During a property comparison, properties of `function` type and properties with names
	 * that begin with `$` are ignored.
	 *
	 * Scope and DOMWindow objects are being compared only by identify (`===`).
	 *
	 * @param {*} o1 Object or value to compare.
	 * @param {*} o2 Object or value to compare.
	 * @returns {boolean} True if arguments are equal.
	 */
      function equals(o1, o2) {
        if (o1 === o2)
          return true;
        if (o1 === null || o2 === null)
          return false;
        if (o1 !== o1 && o2 !== o2)
          return true;
        // NaN === NaN
        var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
        if (t1 == t2) {
          if (t1 == 'object') {
            if (isArray(o1)) {
              if (!isArray(o2))
                return false;
              if ((length = o1.length) == o2.length) {
                for (key = 0; key < length; key++) {
                  if (!equals(o1[key], o2[key]))
                    return false;
                }
                return true;
              }
            } else if (isDate(o1)) {
              if (!isDate(o2))
                return false;
              return equals(o1.getTime(), o2.getTime());
            } else if (isRegExp(o1)) {
              return isRegExp(o2) ? o1.toString() == o2.toString() : false;
            } else {
              if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2) || isDate(o2) || isRegExp(o2))
                return false;
              keySet = createMap();
              for (key in o1) {
                if (key.charAt(0) === '$' || isFunction(o1[key]))
                  continue;
                if (!equals(o1[key], o2[key]))
                  return false;
                keySet[key] = true;
              }
              for (key in o2) {
                if (!(key in keySet) && key.charAt(0) !== '$' && isDefined(o2[key]) && !isFunction(o2[key]))
                  return false;
              }
              return true;
            }
          }
        }
        return false;
      }
      var csp = function () {
        if (!isDefined(csp.rules)) {
          var ngCspElement = document.querySelector('[ng-csp]') || document.querySelector('[data-ng-csp]');
          if (ngCspElement) {
            var ngCspAttribute = ngCspElement.getAttribute('ng-csp') || ngCspElement.getAttribute('data-ng-csp');
            csp.rules = {
              noUnsafeEval: !ngCspAttribute || ngCspAttribute.indexOf('no-unsafe-eval') !== -1,
              noInlineStyle: !ngCspAttribute || ngCspAttribute.indexOf('no-inline-style') !== -1
            };
          } else {
            csp.rules = {
              noUnsafeEval: noUnsafeEval(),
              noInlineStyle: false
            };
          }
        }
        return csp.rules;
        function noUnsafeEval() {
          try {
            /* jshint -W031, -W054 */
            new Function('');
            /* jshint +W031, +W054 */
            return false;
          } catch (e) {
            return true;
          }
        }
      };
      /**
	 * @ngdoc directive
	 * @module ng
	 * @name ngJq
	 *
	 * @element ANY
	 * @param {string=} ngJq the name of the library available under `window`
	 * to be used for angular.element
	 * @description
	 * Use this directive to force the angular.element library.  This should be
	 * used to force either jqLite by leaving ng-jq blank or setting the name of
	 * the jquery variable under window (eg. jQuery).
	 *
	 * Since angular looks for this directive when it is loaded (doesn't wait for the
	 * DOMContentLoaded event), it must be placed on an element that comes before the script
	 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
	 * others ignored.
	 *
	 * @example
	 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq>
	 ...
	 ...
	 </html>
	 ```
	 * @example
	 * This example shows how to use a jQuery based library of a different name.
	 * The library name must be available at the top most 'window'.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq="jQueryLib">
	 ...
	 ...
	 </html>
	 ```
	 */
      var jq = function () {
        if (isDefined(jq.name_))
          return jq.name_;
        var el;
        var i, ii = ngAttrPrefixes.length, prefix, name;
        for (i = 0; i < ii; ++i) {
          prefix = ngAttrPrefixes[i];
          if (el = document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')) {
            name = el.getAttribute(prefix + 'jq');
            break;
          }
        }
        return jq.name_ = name;
      };
      function concat(array1, array2, index) {
        return array1.concat(slice.call(array2, index));
      }
      function sliceArgs(args, startIndex) {
        return slice.call(args, startIndex || 0);
      }
      /* jshint -W101 */
      /**
	 * @ngdoc function
	 * @name angular.bind
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
	 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
	 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
	 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
	 *
	 * @param {Object} self Context which `fn` should be evaluated in.
	 * @param {function()} fn Function to be bound.
	 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
	 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
	 */
      /* jshint +W101 */
      function bind(self, fn) {
        var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
        if (isFunction(fn) && !(fn instanceof RegExp)) {
          return curryArgs.length ? function () {
            return arguments.length ? fn.apply(self, concat(curryArgs, arguments, 0)) : fn.apply(self, curryArgs);
          } : function () {
            return arguments.length ? fn.apply(self, arguments) : fn.call(self);
          };
        } else {
          // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
          return fn;
        }
      }
      function toJsonReplacer(key, value) {
        var val = value;
        if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
          val = undefined;
        } else if (isWindow(value)) {
          val = '$WINDOW';
        } else if (value && document === value) {
          val = '$DOCUMENT';
        } else if (isScope(value)) {
          val = '$SCOPE';
        }
        return val;
      }
      /**
	 * @ngdoc function
	 * @name angular.toJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
	 * stripped since angular uses this notation internally.
	 *
	 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
	 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
	 *    If set to an integer, the JSON output will contain that many spaces per indentation.
	 * @returns {string|undefined} JSON-ified string representing `obj`.
	 */
      function toJson(obj, pretty) {
        if (typeof obj === 'undefined')
          return undefined;
        if (!isNumber(pretty)) {
          pretty = pretty ? 2 : null;
        }
        return JSON.stringify(obj, toJsonReplacer, pretty);
      }
      /**
	 * @ngdoc function
	 * @name angular.fromJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Deserializes a JSON string.
	 *
	 * @param {string} json JSON string to deserialize.
	 * @returns {Object|Array|string|number} Deserialized JSON string.
	 */
      function fromJson(json) {
        return isString(json) ? JSON.parse(json) : json;
      }
      function timezoneToOffset(timezone, fallback) {
        var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
        return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
      }
      function addDateMinutes(date, minutes) {
        date = new Date(date.getTime());
        date.setMinutes(date.getMinutes() + minutes);
        return date;
      }
      function convertTimezoneToLocal(date, timezone, reverse) {
        reverse = reverse ? -1 : 1;
        var timezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());
        return addDateMinutes(date, reverse * (timezoneOffset - date.getTimezoneOffset()));
      }
      /**
	 * @returns {string} Returns the string representation of the element.
	 */
      function startingTag(element) {
        element = jqLite(element).clone();
        try {
          // turns out IE does not let you set .html() on elements which
          // are not allowed to have children. So we just ignore it.
          element.empty();
        } catch (e) {
        }
        var elemHtml = jqLite('<div>').append(element).html();
        try {
          return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) : elemHtml.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/, function (match, nodeName) {
            return '<' + lowercase(nodeName);
          });
        } catch (e) {
          return lowercase(elemHtml);
        }
      }
      /////////////////////////////////////////////////
      /**
	 * Tries to decode the URI component without throwing an exception.
	 *
	 * @private
	 * @param str value potential URI component to check.
	 * @returns {boolean} True if `value` can be decoded
	 * with the decodeURIComponent function.
	 */
      function tryDecodeURIComponent(value) {
        try {
          return decodeURIComponent(value);
        } catch (e) {
        }
      }
      /**
	 * Parses an escaped url query string into key-value pairs.
	 * @returns {Object.<string,boolean|Array>}
	 */
      function parseKeyValue(keyValue) {
        var obj = {};
        forEach((keyValue || '').split('&'), function (keyValue) {
          var splitPoint, key, val;
          if (keyValue) {
            key = keyValue = keyValue.replace(/\+/g, '%20');
            splitPoint = keyValue.indexOf('=');
            if (splitPoint !== -1) {
              key = keyValue.substring(0, splitPoint);
              val = keyValue.substring(splitPoint + 1);
            }
            key = tryDecodeURIComponent(key);
            if (isDefined(key)) {
              val = isDefined(val) ? tryDecodeURIComponent(val) : true;
              if (!hasOwnProperty.call(obj, key)) {
                obj[key] = val;
              } else if (isArray(obj[key])) {
                obj[key].push(val);
              } else {
                obj[key] = [
                  obj[key],
                  val
                ];
              }
            }
          }
        });
        return obj;
      }
      function toKeyValue(obj) {
        var parts = [];
        forEach(obj, function (value, key) {
          if (isArray(value)) {
            forEach(value, function (arrayValue) {
              parts.push(encodeUriQuery(key, true) + (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
            });
          } else {
            parts.push(encodeUriQuery(key, true) + (value === true ? '' : '=' + encodeUriQuery(value, true)));
          }
        });
        return parts.length ? parts.join('&') : '';
      }
      /**
	 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
	 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
	 * segments:
	 *    segment       = *pchar
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
      function encodeUriSegment(val) {
        return encodeUriQuery(val, true).replace(/%26/gi, '&').replace(/%3D/gi, '=').replace(/%2B/gi, '+');
      }
      /**
	 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
	 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
	 * encoded per http://tools.ietf.org/html/rfc3986:
	 *    query       = *( pchar / "/" / "?" )
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
      function encodeUriQuery(val, pctEncodeSpaces) {
        return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%20/g, pctEncodeSpaces ? '%20' : '+');
      }
      var ngAttrPrefixes = [
          'ng-',
          'data-ng-',
          'ng:',
          'x-ng-'
        ];
      function getNgAttribute(element, ngAttr) {
        var attr, i, ii = ngAttrPrefixes.length;
        for (i = 0; i < ii; ++i) {
          attr = ngAttrPrefixes[i] + ngAttr;
          if (isString(attr = element.getAttribute(attr))) {
            return attr;
          }
        }
        return null;
      }
      /**
	 * @ngdoc directive
	 * @name ngApp
	 * @module ng
	 *
	 * @element ANY
	 * @param {angular.Module} ngApp an optional application
	 *   {@link angular.module module} name to load.
	 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
	 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
	 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
	 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
	 *   tracking down the root of these bugs.
	 *
	 * @description
	 *
	 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
	 * designates the **root element** of the application and is typically placed near the root element
	 * of the page - e.g. on the `<body>` or `<html>` tags.
	 *
	 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
	 * found in the document will be used to define the root element to auto-bootstrap as an
	 * application. To run multiple applications in an HTML document you must manually bootstrap them using
	 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
	 *
	 * You can specify an **AngularJS module** to be used as the root module for the application.  This
	 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
	 * should contain the application code needed or have dependencies on other modules that will
	 * contain the code. See {@link angular.module} for more information.
	 *
	 * In the example below if the `ngApp` directive were not placed on the `html` element then the
	 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
	 * would not be resolved to `3`.
	 *
	 * `ngApp` is the easiest, and most common way to bootstrap an application.
	 *
	 <example module="ngAppDemo">
	   <file name="index.html">
	   <div ng-controller="ngAppDemoController">
	     I can add: {{a}} + {{b}} =  {{ a+b }}
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
	     $scope.a = 1;
	     $scope.b = 2;
	   });
	   </file>
	 </example>
	 *
	 * Using `ngStrictDi`, you would see something like this:
	 *
	 <example ng-app-included="true">
	   <file name="index.html">
	   <div ng-app="ngAppStrictDemo" ng-strict-di>
	       <div ng-controller="GoodController1">
	           I can add: {{a}} + {{b}} =  {{ a+b }}

	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style (see
	              script.js for details)
	           </p>
	       </div>

	       <div ng-controller="GoodController2">
	           Name: <input ng-model="name"><br />
	           Hello, {{name}}!

	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style
	              (see script.js for details)
	           </p>
	       </div>

	       <div ng-controller="BadController">
	           I can add: {{a}} + {{b}} =  {{ a+b }}

	           <p>The controller could not be instantiated, due to relying
	              on automatic function annotations (which are disabled in
	              strict mode). As such, the content of this section is not
	              interpolated, and there should be an error in your web console.
	           </p>
	       </div>
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppStrictDemo', [])
	     // BadController will fail to instantiate, due to relying on automatic function annotation,
	     // rather than an explicit annotation
	     .controller('BadController', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     })
	     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
	     // due to using explicit annotations using the array style and $inject property, respectively.
	     .controller('GoodController1', ['$scope', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     }])
	     .controller('GoodController2', GoodController2);
	     function GoodController2($scope) {
	       $scope.name = "World";
	     }
	     GoodController2.$inject = ['$scope'];
	   </file>
	   <file name="style.css">
	   div[ng-controller] {
	       margin-bottom: 1em;
	       -webkit-border-radius: 4px;
	       border-radius: 4px;
	       border: 1px solid;
	       padding: .5em;
	   }
	   div[ng-controller^=Good] {
	       border-color: #d6e9c6;
	       background-color: #dff0d8;
	       color: #3c763d;
	   }
	   div[ng-controller^=Bad] {
	       border-color: #ebccd1;
	       background-color: #f2dede;
	       color: #a94442;
	       margin-bottom: 0;
	   }
	   </file>
	 </example>
	 */
      function angularInit(element, bootstrap) {
        var appElement, module, config = {};
        // The element `element` has priority over any other element
        forEach(ngAttrPrefixes, function (prefix) {
          var name = prefix + 'app';
          if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
            appElement = element;
            module = element.getAttribute(name);
          }
        });
        forEach(ngAttrPrefixes, function (prefix) {
          var name = prefix + 'app';
          var candidate;
          if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
            appElement = candidate;
            module = candidate.getAttribute(name);
          }
        });
        if (appElement) {
          config.strictDi = getNgAttribute(appElement, 'strict-di') !== null;
          bootstrap(appElement, module ? [module] : [], config);
        }
      }
      /**
	 * @ngdoc function
	 * @name angular.bootstrap
	 * @module ng
	 * @description
	 * Use this function to manually start up angular application.
	 *
	 * See: {@link guide/bootstrap Bootstrap}
	 *
	 * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.
	 * They must use {@link ng.directive:ngApp ngApp}.
	 *
	 * Angular will detect if it has been loaded into the browser more than once and only allow the
	 * first loaded script to be bootstrapped and will report a warning to the browser console for
	 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
	 * multiple instances of Angular try to work on the DOM.
	 *
	 * ```html
	 * <!doctype html>
	 * <html>
	 * <body>
	 * <div ng-controller="WelcomeController">
	 *   {{greeting}}
	 * </div>
	 *
	 * <script src="angular.js"></script>
	 * <script>
	 *   var app = angular.module('demo', [])
	 *   .controller('WelcomeController', function($scope) {
	 *       $scope.greeting = 'Welcome!';
	 *   });
	 *   angular.bootstrap(document, ['demo']);
	 * </script>
	 * </body>
	 * </html>
	 * ```
	 *
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
	 *     Each item in the array should be the name of a predefined module or a (DI annotated)
	 *     function that will be invoked by the injector as a `config` block.
	 *     See: {@link angular.module modules}
	 * @param {Object=} config an object for defining configuration options for the application. The
	 *     following keys are supported:
	 *
	 * * `strictDi` - disable automatic function annotation for the application. This is meant to
	 *   assist in finding bugs which break minified code. Defaults to `false`.
	 *
	 * @returns {auto.$injector} Returns the newly created injector for this app.
	 */
      function bootstrap(element, modules, config) {
        if (!isObject(config))
          config = {};
        var defaultConfig = { strictDi: false };
        config = extend(defaultConfig, config);
        var doBootstrap = function () {
          element = jqLite(element);
          if (element.injector()) {
            var tag = element[0] === document ? 'document' : startingTag(element);
            //Encode angle brackets to prevent input from being sanitized to empty string #8683
            throw ngMinErr('btstrpd', 'App Already Bootstrapped with this Element \'{0}\'', tag.replace(/</, '&lt;').replace(/>/, '&gt;'));
          }
          modules = modules || [];
          modules.unshift([
            '$provide',
            function ($provide) {
              $provide.value('$rootElement', element);
            }
          ]);
          if (config.debugInfoEnabled) {
            // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
            modules.push([
              '$compileProvider',
              function ($compileProvider) {
                $compileProvider.debugInfoEnabled(true);
              }
            ]);
          }
          modules.unshift('ng');
          var injector = createInjector(modules, config.strictDi);
          injector.invoke([
            '$rootScope',
            '$rootElement',
            '$compile',
            '$injector',
            function bootstrapApply(scope, element, compile, injector) {
              scope.$apply(function () {
                element.data('$injector', injector);
                compile(element)(scope);
              });
            }
          ]);
          return injector;
        };
        var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
        var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;
        if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
          config.debugInfoEnabled = true;
          window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
        }
        if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
          return doBootstrap();
        }
        window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
        angular.resumeBootstrap = function (extraModules) {
          forEach(extraModules, function (module) {
            modules.push(module);
          });
          return doBootstrap();
        };
        if (isFunction(angular.resumeDeferredBootstrap)) {
          angular.resumeDeferredBootstrap();
        }
      }
      /**
	 * @ngdoc function
	 * @name angular.reloadWithDebugInfo
	 * @module ng
	 * @description
	 * Use this function to reload the current application with debug information turned on.
	 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
	 *
	 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
	 */
      function reloadWithDebugInfo() {
        window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
        window.location.reload();
      }
      /**
	 * @name angular.getTestability
	 * @module ng
	 * @description
	 * Get the testability service for the instance of Angular on the given
	 * element.
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 */
      function getTestability(rootElement) {
        var injector = angular.element(rootElement).injector();
        if (!injector) {
          throw ngMinErr('test', 'no injector found for element argument to getTestability');
        }
        return injector.get('$$testability');
      }
      var SNAKE_CASE_REGEXP = /[A-Z]/g;
      function snake_case(name, separator) {
        separator = separator || '_';
        return name.replace(SNAKE_CASE_REGEXP, function (letter, pos) {
          return (pos ? separator : '') + letter.toLowerCase();
        });
      }
      var bindJQueryFired = false;
      var skipDestroyOnNextJQueryCleanData;
      function bindJQuery() {
        var originalCleanData;
        if (bindJQueryFired) {
          return;
        }
        // bind to jQuery if present;
        var jqName = jq();
        jQuery = isUndefined(jqName) ? window.jQuery : !jqName ? undefined : window[jqName];
        // use jQuery specified by `ngJq`
        // Use jQuery if it exists with proper functionality, otherwise default to us.
        // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
        // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
        // versions. It will not work for sure with jQuery <1.7, though.
        if (jQuery && jQuery.fn.on) {
          jqLite = jQuery;
          extend(jQuery.fn, {
            scope: JQLitePrototype.scope,
            isolateScope: JQLitePrototype.isolateScope,
            controller: JQLitePrototype.controller,
            injector: JQLitePrototype.injector,
            inheritedData: JQLitePrototype.inheritedData
          });
          // All nodes removed from the DOM via various jQuery APIs like .remove()
          // are passed through jQuery.cleanData. Monkey-patch this method to fire
          // the $destroy event on all removed nodes.
          originalCleanData = jQuery.cleanData;
          jQuery.cleanData = function (elems) {
            var events;
            if (!skipDestroyOnNextJQueryCleanData) {
              for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                events = jQuery._data(elem, 'events');
                if (events && events.$destroy) {
                  jQuery(elem).triggerHandler('$destroy');
                }
              }
            } else {
              skipDestroyOnNextJQueryCleanData = false;
            }
            originalCleanData(elems);
          };
        } else {
          jqLite = JQLite;
        }
        angular.element = jqLite;
        // Prevent double-proxying.
        bindJQueryFired = true;
      }
      /**
	 * throw error if the argument is falsy.
	 */
      function assertArg(arg, name, reason) {
        if (!arg) {
          throw ngMinErr('areq', 'Argument \'{0}\' is {1}', name || '?', reason || 'required');
        }
        return arg;
      }
      function assertArgFn(arg, name, acceptArrayAnnotation) {
        if (acceptArrayAnnotation && isArray(arg)) {
          arg = arg[arg.length - 1];
        }
        assertArg(isFunction(arg), name, 'not a function, got ' + (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
        return arg;
      }
      /**
	 * throw error if the name given is hasOwnProperty
	 * @param  {String} name    the name to test
	 * @param  {String} context the context in which the name is used, such as module or directive
	 */
      function assertNotHasOwnProperty(name, context) {
        if (name === 'hasOwnProperty') {
          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
        }
      }
      /**
	 * Return the value accessible from the object by path. Any undefined traversals are ignored
	 * @param {Object} obj starting object
	 * @param {String} path path to traverse
	 * @param {boolean} [bindFnToScope=true]
	 * @returns {Object} value as accessible by path
	 */
      //TODO(misko): this function needs to be removed
      function getter(obj, path, bindFnToScope) {
        if (!path)
          return obj;
        var keys = path.split('.');
        var key;
        var lastInstance = obj;
        var len = keys.length;
        for (var i = 0; i < len; i++) {
          key = keys[i];
          if (obj) {
            obj = (lastInstance = obj)[key];
          }
        }
        if (!bindFnToScope && isFunction(obj)) {
          return bind(lastInstance, obj);
        }
        return obj;
      }
      /**
	 * Return the DOM siblings between the first and last node in the given array.
	 * @param {Array} array like object
	 * @returns {Array} the inputted object or a jqLite collection containing the nodes
	 */
      function getBlockNodes(nodes) {
        // TODO(perf): update `nodes` instead of creating a new object?
        var node = nodes[0];
        var endNode = nodes[nodes.length - 1];
        var blockNodes;
        for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {
          if (blockNodes || nodes[i] !== node) {
            if (!blockNodes) {
              blockNodes = jqLite(slice.call(nodes, 0, i));
            }
            blockNodes.push(node);
          }
        }
        return blockNodes || nodes;
      }
      /**
	 * Creates a new object without a prototype. This object is useful for lookup without having to
	 * guard against prototypically inherited properties via hasOwnProperty.
	 *
	 * Related micro-benchmarks:
	 * - http://jsperf.com/object-create2
	 * - http://jsperf.com/proto-map-lookup/2
	 * - http://jsperf.com/for-in-vs-object-keys2
	 *
	 * @returns {Object}
	 */
      function createMap() {
        return Object.create(null);
      }
      var NODE_TYPE_ELEMENT = 1;
      var NODE_TYPE_ATTRIBUTE = 2;
      var NODE_TYPE_TEXT = 3;
      var NODE_TYPE_COMMENT = 8;
      var NODE_TYPE_DOCUMENT = 9;
      var NODE_TYPE_DOCUMENT_FRAGMENT = 11;
      /**
	 * @ngdoc type
	 * @name angular.Module
	 * @module ng
	 * @description
	 *
	 * Interface for configuring angular {@link angular.module modules}.
	 */
      function setupModuleLoader(window) {
        var $injectorMinErr = minErr('$injector');
        var ngMinErr = minErr('ng');
        function ensure(obj, name, factory) {
          return obj[name] || (obj[name] = factory());
        }
        var angular = ensure(window, 'angular', Object);
        // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
        angular.$$minErr = angular.$$minErr || minErr;
        return ensure(angular, 'module', function () {
          /** @type {Object.<string, angular.Module>} */
          var modules = {};
          /**
	     * @ngdoc function
	     * @name angular.module
	     * @module ng
	     * @description
	     *
	     * The `angular.module` is a global place for creating, registering and retrieving Angular
	     * modules.
	     * All modules (angular core or 3rd party) that should be available to an application must be
	     * registered using this mechanism.
	     *
	     * Passing one argument retrieves an existing {@link angular.Module},
	     * whereas passing more than one argument creates a new {@link angular.Module}
	     *
	     *
	     * # Module
	     *
	     * A module is a collection of services, directives, controllers, filters, and configuration information.
	     * `angular.module` is used to configure the {@link auto.$injector $injector}.
	     *
	     * ```js
	     * // Create a new module
	     * var myModule = angular.module('myModule', []);
	     *
	     * // register a new service
	     * myModule.value('appName', 'MyCoolApp');
	     *
	     * // configure existing services inside initialization blocks.
	     * myModule.config(['$locationProvider', function($locationProvider) {
	     *   // Configure existing providers
	     *   $locationProvider.hashPrefix('!');
	     * }]);
	     * ```
	     *
	     * Then you can create an injector and load your modules like this:
	     *
	     * ```js
	     * var injector = angular.injector(['ng', 'myModule'])
	     * ```
	     *
	     * However it's more likely that you'll just use
	     * {@link ng.directive:ngApp ngApp} or
	     * {@link angular.bootstrap} to simplify this process for you.
	     *
	     * @param {!string} name The name of the module to create or retrieve.
	     * @param {!Array.<string>=} requires If specified then new module is being created. If
	     *        unspecified then the module is being retrieved for further configuration.
	     * @param {Function=} configFn Optional configuration function for the module. Same as
	     *        {@link angular.Module#config Module#config()}.
	     * @returns {module} new module with the {@link angular.Module} api.
	     */
          return function module(name, requires, configFn) {
            var assertNotHasOwnProperty = function (name, context) {
              if (name === 'hasOwnProperty') {
                throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
              }
            };
            assertNotHasOwnProperty(name, 'module');
            if (requires && modules.hasOwnProperty(name)) {
              modules[name] = null;
            }
            return ensure(modules, name, function () {
              if (!requires) {
                throw $injectorMinErr('nomod', 'Module \'{0}\' is not available! You either misspelled ' + 'the module name or forgot to load it. If registering a module ensure that you ' + 'specify the dependencies as the second argument.', name);
              }
              /** @type {!Array.<Array.<*>>} */
              var invokeQueue = [];
              /** @type {!Array.<Function>} */
              var configBlocks = [];
              /** @type {!Array.<Function>} */
              var runBlocks = [];
              var config = invokeLater('$injector', 'invoke', 'push', configBlocks);
              /** @type {angular.Module} */
              var moduleInstance = {
                  _invokeQueue: invokeQueue,
                  _configBlocks: configBlocks,
                  _runBlocks: runBlocks,
                  requires: requires,
                  name: name,
                  provider: invokeLaterAndSetModuleName('$provide', 'provider'),
                  factory: invokeLaterAndSetModuleName('$provide', 'factory'),
                  service: invokeLaterAndSetModuleName('$provide', 'service'),
                  value: invokeLater('$provide', 'value'),
                  constant: invokeLater('$provide', 'constant', 'unshift'),
                  decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),
                  animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),
                  filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),
                  controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),
                  directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),
                  config: config,
                  run: function (block) {
                    runBlocks.push(block);
                    return this;
                  }
                };
              if (configFn) {
                config(configFn);
              }
              return moduleInstance;
              /**
	         * @param {string} provider
	         * @param {string} method
	         * @param {String=} insertMethod
	         * @returns {angular.Module}
	         */
              function invokeLater(provider, method, insertMethod, queue) {
                if (!queue)
                  queue = invokeQueue;
                return function () {
                  queue[insertMethod || 'push']([
                    provider,
                    method,
                    arguments
                  ]);
                  return moduleInstance;
                };
              }
              /**
	         * @param {string} provider
	         * @param {string} method
	         * @returns {angular.Module}
	         */
              function invokeLaterAndSetModuleName(provider, method) {
                return function (recipeName, factoryFunction) {
                  if (factoryFunction && isFunction(factoryFunction))
                    factoryFunction.$$moduleName = name;
                  invokeQueue.push([
                    provider,
                    method,
                    arguments
                  ]);
                  return moduleInstance;
                };
              }
            });
          };
        });
      }
      /* global: toDebugString: true */
      function serializeObject(obj) {
        var seen = [];
        return JSON.stringify(obj, function (key, val) {
          val = toJsonReplacer(key, val);
          if (isObject(val)) {
            if (seen.indexOf(val) >= 0)
              return '...';
            seen.push(val);
          }
          return val;
        });
      }
      function toDebugString(obj) {
        if (typeof obj === 'function') {
          return obj.toString().replace(/ \{[\s\S]*$/, '');
        } else if (isUndefined(obj)) {
          return 'undefined';
        } else if (typeof obj !== 'string') {
          return serializeObject(obj);
        }
        return obj;
      }
      /* global angularModule: true,
	  version: true,

	  $CompileProvider,

	  htmlAnchorDirective,
	  inputDirective,
	  inputDirective,
	  formDirective,
	  scriptDirective,
	  selectDirective,
	  styleDirective,
	  optionDirective,
	  ngBindDirective,
	  ngBindHtmlDirective,
	  ngBindTemplateDirective,
	  ngClassDirective,
	  ngClassEvenDirective,
	  ngClassOddDirective,
	  ngCloakDirective,
	  ngControllerDirective,
	  ngFormDirective,
	  ngHideDirective,
	  ngIfDirective,
	  ngIncludeDirective,
	  ngIncludeFillContentDirective,
	  ngInitDirective,
	  ngNonBindableDirective,
	  ngPluralizeDirective,
	  ngRepeatDirective,
	  ngShowDirective,
	  ngStyleDirective,
	  ngSwitchDirective,
	  ngSwitchWhenDirective,
	  ngSwitchDefaultDirective,
	  ngOptionsDirective,
	  ngTranscludeDirective,
	  ngModelDirective,
	  ngListDirective,
	  ngChangeDirective,
	  patternDirective,
	  patternDirective,
	  requiredDirective,
	  requiredDirective,
	  minlengthDirective,
	  minlengthDirective,
	  maxlengthDirective,
	  maxlengthDirective,
	  ngValueDirective,
	  ngModelOptionsDirective,
	  ngAttributeAliasDirectives,
	  ngEventDirectives,

	  $AnchorScrollProvider,
	  $AnimateProvider,
	  $CoreAnimateCssProvider,
	  $$CoreAnimateQueueProvider,
	  $$CoreAnimateRunnerProvider,
	  $BrowserProvider,
	  $CacheFactoryProvider,
	  $ControllerProvider,
	  $DocumentProvider,
	  $ExceptionHandlerProvider,
	  $FilterProvider,
	  $$ForceReflowProvider,
	  $InterpolateProvider,
	  $IntervalProvider,
	  $$HashMapProvider,
	  $HttpProvider,
	  $HttpParamSerializerProvider,
	  $HttpParamSerializerJQLikeProvider,
	  $HttpBackendProvider,
	  $xhrFactoryProvider,
	  $LocationProvider,
	  $LogProvider,
	  $ParseProvider,
	  $RootScopeProvider,
	  $QProvider,
	  $$QProvider,
	  $$SanitizeUriProvider,
	  $SceProvider,
	  $SceDelegateProvider,
	  $SnifferProvider,
	  $TemplateCacheProvider,
	  $TemplateRequestProvider,
	  $$TestabilityProvider,
	  $TimeoutProvider,
	  $$RAFProvider,
	  $WindowProvider,
	  $$jqLiteProvider,
	  $$CookieReaderProvider
	*/
      /**
	 * @ngdoc object
	 * @name angular.version
	 * @module ng
	 * @description
	 * An object that contains information about the current AngularJS version.
	 *
	 * This object has the following properties:
	 *
	 * - `full` – `{string}` – Full version string, such as "0.9.18".
	 * - `major` – `{number}` – Major version number, such as "0".
	 * - `minor` – `{number}` – Minor version number, such as "9".
	 * - `dot` – `{number}` – Dot version number, such as "18".
	 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
	 */
      var version = {
          full: '1.4.7',
          major: 1,
          minor: 4,
          dot: 7,
          codeName: 'dark-luminescence'
        };
      function publishExternalAPI(angular) {
        extend(angular, {
          'bootstrap': bootstrap,
          'copy': copy,
          'extend': extend,
          'merge': merge,
          'equals': equals,
          'element': jqLite,
          'forEach': forEach,
          'injector': createInjector,
          'noop': noop,
          'bind': bind,
          'toJson': toJson,
          'fromJson': fromJson,
          'identity': identity,
          'isUndefined': isUndefined,
          'isDefined': isDefined,
          'isString': isString,
          'isFunction': isFunction,
          'isObject': isObject,
          'isNumber': isNumber,
          'isElement': isElement,
          'isArray': isArray,
          'version': version,
          'isDate': isDate,
          'lowercase': lowercase,
          'uppercase': uppercase,
          'callbacks': { counter: 0 },
          'getTestability': getTestability,
          '$$minErr': minErr,
          '$$csp': csp,
          'reloadWithDebugInfo': reloadWithDebugInfo
        });
        angularModule = setupModuleLoader(window);
        angularModule('ng', ['ngLocale'], [
          '$provide',
          function ngModule($provide) {
            // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
            $provide.provider({ $$sanitizeUri: $$SanitizeUriProvider });
            $provide.provider('$compile', $CompileProvider).directive({
              a: htmlAnchorDirective,
              input: inputDirective,
              textarea: inputDirective,
              form: formDirective,
              script: scriptDirective,
              select: selectDirective,
              style: styleDirective,
              option: optionDirective,
              ngBind: ngBindDirective,
              ngBindHtml: ngBindHtmlDirective,
              ngBindTemplate: ngBindTemplateDirective,
              ngClass: ngClassDirective,
              ngClassEven: ngClassEvenDirective,
              ngClassOdd: ngClassOddDirective,
              ngCloak: ngCloakDirective,
              ngController: ngControllerDirective,
              ngForm: ngFormDirective,
              ngHide: ngHideDirective,
              ngIf: ngIfDirective,
              ngInclude: ngIncludeDirective,
              ngInit: ngInitDirective,
              ngNonBindable: ngNonBindableDirective,
              ngPluralize: ngPluralizeDirective,
              ngRepeat: ngRepeatDirective,
              ngShow: ngShowDirective,
              ngStyle: ngStyleDirective,
              ngSwitch: ngSwitchDirective,
              ngSwitchWhen: ngSwitchWhenDirective,
              ngSwitchDefault: ngSwitchDefaultDirective,
              ngOptions: ngOptionsDirective,
              ngTransclude: ngTranscludeDirective,
              ngModel: ngModelDirective,
              ngList: ngListDirective,
              ngChange: ngChangeDirective,
              pattern: patternDirective,
              ngPattern: patternDirective,
              required: requiredDirective,
              ngRequired: requiredDirective,
              minlength: minlengthDirective,
              ngMinlength: minlengthDirective,
              maxlength: maxlengthDirective,
              ngMaxlength: maxlengthDirective,
              ngValue: ngValueDirective,
              ngModelOptions: ngModelOptionsDirective
            }).directive({ ngInclude: ngIncludeFillContentDirective }).directive(ngAttributeAliasDirectives).directive(ngEventDirectives);
            $provide.provider({
              $anchorScroll: $AnchorScrollProvider,
              $animate: $AnimateProvider,
              $animateCss: $CoreAnimateCssProvider,
              $$animateQueue: $$CoreAnimateQueueProvider,
              $$AnimateRunner: $$CoreAnimateRunnerProvider,
              $browser: $BrowserProvider,
              $cacheFactory: $CacheFactoryProvider,
              $controller: $ControllerProvider,
              $document: $DocumentProvider,
              $exceptionHandler: $ExceptionHandlerProvider,
              $filter: $FilterProvider,
              $$forceReflow: $$ForceReflowProvider,
              $interpolate: $InterpolateProvider,
              $interval: $IntervalProvider,
              $http: $HttpProvider,
              $httpParamSerializer: $HttpParamSerializerProvider,
              $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
              $httpBackend: $HttpBackendProvider,
              $xhrFactory: $xhrFactoryProvider,
              $location: $LocationProvider,
              $log: $LogProvider,
              $parse: $ParseProvider,
              $rootScope: $RootScopeProvider,
              $q: $QProvider,
              $$q: $$QProvider,
              $sce: $SceProvider,
              $sceDelegate: $SceDelegateProvider,
              $sniffer: $SnifferProvider,
              $templateCache: $TemplateCacheProvider,
              $templateRequest: $TemplateRequestProvider,
              $$testability: $$TestabilityProvider,
              $timeout: $TimeoutProvider,
              $window: $WindowProvider,
              $$rAF: $$RAFProvider,
              $$jqLite: $$jqLiteProvider,
              $$HashMap: $$HashMapProvider,
              $$cookieReader: $$CookieReaderProvider
            });
          }
        ]);
      }
      /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
      /* global JQLitePrototype: true,
	  addEventListenerFn: true,
	  removeEventListenerFn: true,
	  BOOLEAN_ATTR: true,
	  ALIASED_ATTR: true,
	*/
      //////////////////////////////////
      //JQLite
      //////////////////////////////////
      /**
	 * @ngdoc function
	 * @name angular.element
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
	 *
	 * If jQuery is available, `angular.element` is an alias for the
	 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
	 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."
	 *
	 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows
	 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most
	 * commonly needed functionality with the goal of having a very small footprint.</div>
	 *
	 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file.
	 *
	 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or
	 * jqLite; they are never raw DOM references.</div>
	 *
	 * ## Angular's jqLite
	 * jqLite provides only the following jQuery methods:
	 *
	 * - [`addClass()`](http://api.jquery.com/addClass/)
	 * - [`after()`](http://api.jquery.com/after/)
	 * - [`append()`](http://api.jquery.com/append/)
	 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
	 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
	 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
	 * - [`clone()`](http://api.jquery.com/clone/)
	 * - [`contents()`](http://api.jquery.com/contents/)
	 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`. As a setter, does not convert numbers to strings or append 'px'.
	 * - [`data()`](http://api.jquery.com/data/)
	 * - [`detach()`](http://api.jquery.com/detach/)
	 * - [`empty()`](http://api.jquery.com/empty/)
	 * - [`eq()`](http://api.jquery.com/eq/)
	 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
	 * - [`hasClass()`](http://api.jquery.com/hasClass/)
	 * - [`html()`](http://api.jquery.com/html/)
	 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
	 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
	 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
	 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
	 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
	 * - [`prepend()`](http://api.jquery.com/prepend/)
	 * - [`prop()`](http://api.jquery.com/prop/)
	 * - [`ready()`](http://api.jquery.com/ready/)
	 * - [`remove()`](http://api.jquery.com/remove/)
	 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
	 * - [`removeClass()`](http://api.jquery.com/removeClass/)
	 * - [`removeData()`](http://api.jquery.com/removeData/)
	 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
	 * - [`text()`](http://api.jquery.com/text/)
	 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
	 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
	 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces or event object as parameter
	 * - [`val()`](http://api.jquery.com/val/)
	 * - [`wrap()`](http://api.jquery.com/wrap/)
	 *
	 * ## jQuery/jqLite Extras
	 * Angular also provides the following additional methods and events to both jQuery and jqLite:
	 *
	 * ### Events
	 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
	 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
	 *    element before it is removed.
	 *
	 * ### Methods
	 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
	 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
	 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
	 *   `'ngModel'`).
	 * - `injector()` - retrieves the injector of the current element or its parent.
	 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
	 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
	 *   be enabled.
	 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
	 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
	 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
	 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
	 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
	 *   parent element is reached.
	 *
	 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
	 * @returns {Object} jQuery object.
	 */
      JQLite.expando = 'ng339';
      var jqCache = JQLite.cache = {}, jqId = 1, addEventListenerFn = function (element, type, fn) {
          element.addEventListener(type, fn, false);
        }, removeEventListenerFn = function (element, type, fn) {
          element.removeEventListener(type, fn, false);
        };
      /*
	 * !!! This is an undocumented "private" function !!!
	 */
      JQLite._data = function (node) {
        //jQuery always returns an object on cache miss
        return this.cache[node[this.expando]] || {};
      };
      function jqNextId() {
        return ++jqId;
      }
      var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
      var MOZ_HACK_REGEXP = /^moz([A-Z])/;
      var MOUSE_EVENT_MAP = {
          mouseleave: 'mouseout',
          mouseenter: 'mouseover'
        };
      var jqLiteMinErr = minErr('jqLite');
      /**
	 * Converts snake_case to camelCase.
	 * Also there is special case for Moz prefix starting with upper case letter.
	 * @param name Name to normalize
	 */
      function camelCase(name) {
        return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
          return offset ? letter.toUpperCase() : letter;
        }).replace(MOZ_HACK_REGEXP, 'Moz$1');
      }
      var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
      var HTML_REGEXP = /<|&#?\w+;/;
      var TAG_NAME_REGEXP = /<([\w:-]+)/;
      var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;
      var wrapMap = {
          'option': [
            1,
            '<select multiple="multiple">',
            '</select>'
          ],
          'thead': [
            1,
            '<table>',
            '</table>'
          ],
          'col': [
            2,
            '<table><colgroup>',
            '</colgroup></table>'
          ],
          'tr': [
            2,
            '<table><tbody>',
            '</tbody></table>'
          ],
          'td': [
            3,
            '<table><tbody><tr>',
            '</tr></tbody></table>'
          ],
          '_default': [
            0,
            '',
            ''
          ]
        };
      wrapMap.optgroup = wrapMap.option;
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      wrapMap.th = wrapMap.td;
      function jqLiteIsTextNode(html) {
        return !HTML_REGEXP.test(html);
      }
      function jqLiteAcceptsData(node) {
        // The window object can accept data but has no nodeType
        // Otherwise we are only interested in elements (1) and documents (9)
        var nodeType = node.nodeType;
        return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
      }
      function jqLiteHasData(node) {
        for (var key in jqCache[node.ng339]) {
          return true;
        }
        return false;
      }
      function jqLiteBuildFragment(html, context) {
        var tmp, tag, wrap, fragment = context.createDocumentFragment(), nodes = [], i;
        if (jqLiteIsTextNode(html)) {
          // Convert non-html into a text node
          nodes.push(context.createTextNode(html));
        } else {
          // Convert html into DOM nodes
          tmp = tmp || fragment.appendChild(context.createElement('div'));
          tag = (TAG_NAME_REGEXP.exec(html) || [
            '',
            ''
          ])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, '<$1></$2>') + wrap[2];
          // Descend through wrappers to the right content
          i = wrap[0];
          while (i--) {
            tmp = tmp.lastChild;
          }
          nodes = concat(nodes, tmp.childNodes);
          tmp = fragment.firstChild;
          tmp.textContent = '';
        }
        // Remove wrapper from fragment
        fragment.textContent = '';
        fragment.innerHTML = '';
        // Clear inner HTML
        forEach(nodes, function (node) {
          fragment.appendChild(node);
        });
        return fragment;
      }
      function jqLiteParseHTML(html, context) {
        context = context || document;
        var parsed;
        if (parsed = SINGLE_TAG_REGEXP.exec(html)) {
          return [context.createElement(parsed[1])];
        }
        if (parsed = jqLiteBuildFragment(html, context)) {
          return parsed.childNodes;
        }
        return [];
      }
      /////////////////////////////////////////////
      function JQLite(element) {
        if (element instanceof JQLite) {
          return element;
        }
        var argIsString;
        if (isString(element)) {
          element = trim(element);
          argIsString = true;
        }
        if (!(this instanceof JQLite)) {
          if (argIsString && element.charAt(0) != '<') {
            throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
          }
          return new JQLite(element);
        }
        if (argIsString) {
          jqLiteAddNodes(this, jqLiteParseHTML(element));
        } else {
          jqLiteAddNodes(this, element);
        }
      }
      function jqLiteClone(element) {
        return element.cloneNode(true);
      }
      function jqLiteDealoc(element, onlyDescendants) {
        if (!onlyDescendants)
          jqLiteRemoveData(element);
        if (element.querySelectorAll) {
          var descendants = element.querySelectorAll('*');
          for (var i = 0, l = descendants.length; i < l; i++) {
            jqLiteRemoveData(descendants[i]);
          }
        }
      }
      function jqLiteOff(element, type, fn, unsupported) {
        if (isDefined(unsupported))
          throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');
        var expandoStore = jqLiteExpandoStore(element);
        var events = expandoStore && expandoStore.events;
        var handle = expandoStore && expandoStore.handle;
        if (!handle)
          return;
        //no listeners registered
        if (!type) {
          for (type in events) {
            if (type !== '$destroy') {
              removeEventListenerFn(element, type, handle);
            }
            delete events[type];
          }
        } else {
          forEach(type.split(' '), function (type) {
            if (isDefined(fn)) {
              var listenerFns = events[type];
              arrayRemove(listenerFns || [], fn);
              if (listenerFns && listenerFns.length > 0) {
                return;
              }
            }
            removeEventListenerFn(element, type, handle);
            delete events[type];
          });
        }
      }
      function jqLiteRemoveData(element, name) {
        var expandoId = element.ng339;
        var expandoStore = expandoId && jqCache[expandoId];
        if (expandoStore) {
          if (name) {
            delete expandoStore.data[name];
            return;
          }
          if (expandoStore.handle) {
            if (expandoStore.events.$destroy) {
              expandoStore.handle({}, '$destroy');
            }
            jqLiteOff(element);
          }
          delete jqCache[expandoId];
          element.ng339 = undefined;  // don't delete DOM expandos. IE and Chrome don't like it
        }
      }
      function jqLiteExpandoStore(element, createIfNecessary) {
        var expandoId = element.ng339, expandoStore = expandoId && jqCache[expandoId];
        if (createIfNecessary && !expandoStore) {
          element.ng339 = expandoId = jqNextId();
          expandoStore = jqCache[expandoId] = {
            events: {},
            data: {},
            handle: undefined
          };
        }
        return expandoStore;
      }
      function jqLiteData(element, key, value) {
        if (jqLiteAcceptsData(element)) {
          var isSimpleSetter = isDefined(value);
          var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
          var massGetter = !key;
          var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
          var data = expandoStore && expandoStore.data;
          if (isSimpleSetter) {
            // data('key', value)
            data[key] = value;
          } else {
            if (massGetter) {
              // data()
              return data;
            } else {
              if (isSimpleGetter) {
                // data('key')
                // don't force creation of expandoStore if it doesn't exist yet
                return data && data[key];
              } else {
                // mass-setter: data({key1: val1, key2: val2})
                extend(data, key);
              }
            }
          }
        }
      }
      function jqLiteHasClass(element, selector) {
        if (!element.getAttribute)
          return false;
        return (' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ').indexOf(' ' + selector + ' ') > -1;
      }
      function jqLiteRemoveClass(element, cssClasses) {
        if (cssClasses && element.setAttribute) {
          forEach(cssClasses.split(' '), function (cssClass) {
            element.setAttribute('class', trim((' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ').replace(' ' + trim(cssClass) + ' ', ' ')));
          });
        }
      }
      function jqLiteAddClass(element, cssClasses) {
        if (cssClasses && element.setAttribute) {
          var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ');
          forEach(cssClasses.split(' '), function (cssClass) {
            cssClass = trim(cssClass);
            if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
              existingClasses += cssClass + ' ';
            }
          });
          element.setAttribute('class', trim(existingClasses));
        }
      }
      function jqLiteAddNodes(root, elements) {
        // THIS CODE IS VERY HOT. Don't make changes without benchmarking.
        if (elements) {
          // if a Node (the most common case)
          if (elements.nodeType) {
            root[root.length++] = elements;
          } else {
            var length = elements.length;
            // if an Array or NodeList and not a Window
            if (typeof length === 'number' && elements.window !== elements) {
              if (length) {
                for (var i = 0; i < length; i++) {
                  root[root.length++] = elements[i];
                }
              }
            } else {
              root[root.length++] = elements;
            }
          }
        }
      }
      function jqLiteController(element, name) {
        return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
      }
      function jqLiteInheritedData(element, name, value) {
        // if element is the document object work with the html element instead
        // this makes $(document).scope() possible
        if (element.nodeType == NODE_TYPE_DOCUMENT) {
          element = element.documentElement;
        }
        var names = isArray(name) ? name : [name];
        while (element) {
          for (var i = 0, ii = names.length; i < ii; i++) {
            if (isDefined(value = jqLite.data(element, names[i])))
              return value;
          }
          // If dealing with a document fragment node with a host element, and no parent, use the host
          // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
          // to lookup parent controllers.
          element = element.parentNode || element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host;
        }
      }
      function jqLiteEmpty(element) {
        jqLiteDealoc(element, true);
        while (element.firstChild) {
          element.removeChild(element.firstChild);
        }
      }
      function jqLiteRemove(element, keepData) {
        if (!keepData)
          jqLiteDealoc(element);
        var parent = element.parentNode;
        if (parent)
          parent.removeChild(element);
      }
      function jqLiteDocumentLoaded(action, win) {
        win = win || window;
        if (win.document.readyState === 'complete') {
          // Force the action to be run async for consistent behaviour
          // from the action's point of view
          // i.e. it will definitely not be in a $apply
          win.setTimeout(action);
        } else {
          // No need to unbind this handler as load is only ever called once
          jqLite(win).on('load', action);
        }
      }
      //////////////////////////////////////////
      // Functions which are declared directly.
      //////////////////////////////////////////
      var JQLitePrototype = JQLite.prototype = {
          ready: function (fn) {
            var fired = false;
            function trigger() {
              if (fired)
                return;
              fired = true;
              fn();
            }
            // check if document is already loaded
            if (document.readyState === 'complete') {
              setTimeout(trigger);
            } else {
              this.on('DOMContentLoaded', trigger);
              // works for modern browsers and IE9
              // we can not use jqLite since we are not done loading and jQuery could be loaded later.
              // jshint -W064
              JQLite(window).on('load', trigger);  // fallback to window.onload for others
                                                   // jshint +W064
            }
          },
          toString: function () {
            var value = [];
            forEach(this, function (e) {
              value.push('' + e);
            });
            return '[' + value.join(', ') + ']';
          },
          eq: function (index) {
            return index >= 0 ? jqLite(this[index]) : jqLite(this[this.length + index]);
          },
          length: 0,
          push: push,
          sort: [].sort,
          splice: [].splice
        };
      //////////////////////////////////////////
      // Functions iterating getter/setters.
      // these functions return self on setter and
      // value on get.
      //////////////////////////////////////////
      var BOOLEAN_ATTR = {};
      forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function (value) {
        BOOLEAN_ATTR[lowercase(value)] = value;
      });
      var BOOLEAN_ELEMENTS = {};
      forEach('input,select,option,textarea,button,form,details'.split(','), function (value) {
        BOOLEAN_ELEMENTS[value] = true;
      });
      var ALIASED_ATTR = {
          'ngMinlength': 'minlength',
          'ngMaxlength': 'maxlength',
          'ngMin': 'min',
          'ngMax': 'max',
          'ngPattern': 'pattern'
        };
      function getBooleanAttrName(element, name) {
        // check dom last since we will most likely fail on name
        var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];
        // booleanAttr is here twice to minimize DOM access
        return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
      }
      function getAliasedAttrName(name) {
        return ALIASED_ATTR[name];
      }
      forEach({
        data: jqLiteData,
        removeData: jqLiteRemoveData,
        hasData: jqLiteHasData
      }, function (fn, name) {
        JQLite[name] = fn;
      });
      forEach({
        data: jqLiteData,
        inheritedData: jqLiteInheritedData,
        scope: function (element) {
          // Can't use jqLiteData here directly so we stay compatible with jQuery!
          return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, [
            '$isolateScope',
            '$scope'
          ]);
        },
        isolateScope: function (element) {
          // Can't use jqLiteData here directly so we stay compatible with jQuery!
          return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
        },
        controller: jqLiteController,
        injector: function (element) {
          return jqLiteInheritedData(element, '$injector');
        },
        removeAttr: function (element, name) {
          element.removeAttribute(name);
        },
        hasClass: jqLiteHasClass,
        css: function (element, name, value) {
          name = camelCase(name);
          if (isDefined(value)) {
            element.style[name] = value;
          } else {
            return element.style[name];
          }
        },
        attr: function (element, name, value) {
          var nodeType = element.nodeType;
          if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {
            return;
          }
          var lowercasedName = lowercase(name);
          if (BOOLEAN_ATTR[lowercasedName]) {
            if (isDefined(value)) {
              if (!!value) {
                element[name] = true;
                element.setAttribute(name, lowercasedName);
              } else {
                element[name] = false;
                element.removeAttribute(lowercasedName);
              }
            } else {
              return element[name] || (element.attributes.getNamedItem(name) || noop).specified ? lowercasedName : undefined;
            }
          } else if (isDefined(value)) {
            element.setAttribute(name, value);
          } else if (element.getAttribute) {
            // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
            // some elements (e.g. Document) don't have get attribute, so return undefined
            var ret = element.getAttribute(name, 2);
            // normalize non-existing attributes to undefined (as jQuery)
            return ret === null ? undefined : ret;
          }
        },
        prop: function (element, name, value) {
          if (isDefined(value)) {
            element[name] = value;
          } else {
            return element[name];
          }
        },
        text: function () {
          getText.$dv = '';
          return getText;
          function getText(element, value) {
            if (isUndefined(value)) {
              var nodeType = element.nodeType;
              return nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT ? element.textContent : '';
            }
            element.textContent = value;
          }
        }(),
        val: function (element, value) {
          if (isUndefined(value)) {
            if (element.multiple && nodeName_(element) === 'select') {
              var result = [];
              forEach(element.options, function (option) {
                if (option.selected) {
                  result.push(option.value || option.text);
                }
              });
              return result.length === 0 ? null : result;
            }
            return element.value;
          }
          element.value = value;
        },
        html: function (element, value) {
          if (isUndefined(value)) {
            return element.innerHTML;
          }
          jqLiteDealoc(element, true);
          element.innerHTML = value;
        },
        empty: jqLiteEmpty
      }, function (fn, name) {
        /**
	   * Properties: writes return selection, reads return first value
	   */
        JQLite.prototype[name] = function (arg1, arg2) {
          var i, key;
          var nodeCount = this.length;
          // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
          // in a way that survives minification.
          // jqLiteEmpty takes no arguments but is a setter.
          if (fn !== jqLiteEmpty && isUndefined(fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController) ? arg1 : arg2)) {
            if (isObject(arg1)) {
              // we are a write, but the object properties are the key/values
              for (i = 0; i < nodeCount; i++) {
                if (fn === jqLiteData) {
                  // data() takes the whole object in jQuery
                  fn(this[i], arg1);
                } else {
                  for (key in arg1) {
                    fn(this[i], key, arg1[key]);
                  }
                }
              }
              // return self for chaining
              return this;
            } else {
              // we are a read, so read the first child.
              // TODO: do we still need this?
              var value = fn.$dv;
              // Only if we have $dv do we iterate over all, otherwise it is just the first element.
              var jj = isUndefined(value) ? Math.min(nodeCount, 1) : nodeCount;
              for (var j = 0; j < jj; j++) {
                var nodeValue = fn(this[j], arg1, arg2);
                value = value ? value + nodeValue : nodeValue;
              }
              return value;
            }
          } else {
            // we are a write, so apply to all children
            for (i = 0; i < nodeCount; i++) {
              fn(this[i], arg1, arg2);
            }
            // return self for chaining
            return this;
          }
        };
      });
      function createEventHandler(element, events) {
        var eventHandler = function (event, type) {
          // jQuery specific api
          event.isDefaultPrevented = function () {
            return event.defaultPrevented;
          };
          var eventFns = events[type || event.type];
          var eventFnsLength = eventFns ? eventFns.length : 0;
          if (!eventFnsLength)
            return;
          if (isUndefined(event.immediatePropagationStopped)) {
            var originalStopImmediatePropagation = event.stopImmediatePropagation;
            event.stopImmediatePropagation = function () {
              event.immediatePropagationStopped = true;
              if (event.stopPropagation) {
                event.stopPropagation();
              }
              if (originalStopImmediatePropagation) {
                originalStopImmediatePropagation.call(event);
              }
            };
          }
          event.isImmediatePropagationStopped = function () {
            return event.immediatePropagationStopped === true;
          };
          // Copy event handlers in case event handlers array is modified during execution.
          if (eventFnsLength > 1) {
            eventFns = shallowCopy(eventFns);
          }
          for (var i = 0; i < eventFnsLength; i++) {
            if (!event.isImmediatePropagationStopped()) {
              eventFns[i].call(element, event);
            }
          }
        };
        // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
        //       events on `element`
        eventHandler.elem = element;
        return eventHandler;
      }
      //////////////////////////////////////////
      // Functions iterating traversal.
      // These functions chain results into a single
      // selector.
      //////////////////////////////////////////
      forEach({
        removeData: jqLiteRemoveData,
        on: function jqLiteOn(element, type, fn, unsupported) {
          if (isDefined(unsupported))
            throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');
          // Do not add event handlers to non-elements because they will not be cleaned up.
          if (!jqLiteAcceptsData(element)) {
            return;
          }
          var expandoStore = jqLiteExpandoStore(element, true);
          var events = expandoStore.events;
          var handle = expandoStore.handle;
          if (!handle) {
            handle = expandoStore.handle = createEventHandler(element, events);
          }
          // http://jsperf.com/string-indexof-vs-split
          var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
          var i = types.length;
          while (i--) {
            type = types[i];
            var eventFns = events[type];
            if (!eventFns) {
              events[type] = [];
              if (type === 'mouseenter' || type === 'mouseleave') {
                // Refer to jQuery's implementation of mouseenter & mouseleave
                // Read about mouseenter and mouseleave:
                // http://www.quirksmode.org/js/events_mouse.html#link8
                jqLiteOn(element, MOUSE_EVENT_MAP[type], function (event) {
                  var target = this, related = event.relatedTarget;
                  // For mousenter/leave call the handler if related is outside the target.
                  // NB: No relatedTarget if the mouse left/entered the browser window
                  if (!related || related !== target && !target.contains(related)) {
                    handle(event, type);
                  }
                });
              } else {
                if (type !== '$destroy') {
                  addEventListenerFn(element, type, handle);
                }
              }
              eventFns = events[type];
            }
            eventFns.push(fn);
          }
        },
        off: jqLiteOff,
        one: function (element, type, fn) {
          element = jqLite(element);
          //add the listener twice so that when it is called
          //you can remove the original function and still be
          //able to call element.off(ev, fn) normally
          element.on(type, function onFn() {
            element.off(type, fn);
            element.off(type, onFn);
          });
          element.on(type, fn);
        },
        replaceWith: function (element, replaceNode) {
          var index, parent = element.parentNode;
          jqLiteDealoc(element);
          forEach(new JQLite(replaceNode), function (node) {
            if (index) {
              parent.insertBefore(node, index.nextSibling);
            } else {
              parent.replaceChild(node, element);
            }
            index = node;
          });
        },
        children: function (element) {
          var children = [];
          forEach(element.childNodes, function (element) {
            if (element.nodeType === NODE_TYPE_ELEMENT) {
              children.push(element);
            }
          });
          return children;
        },
        contents: function (element) {
          return element.contentDocument || element.childNodes || [];
        },
        append: function (element, node) {
          var nodeType = element.nodeType;
          if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT)
            return;
          node = new JQLite(node);
          for (var i = 0, ii = node.length; i < ii; i++) {
            var child = node[i];
            element.appendChild(child);
          }
        },
        prepend: function (element, node) {
          if (element.nodeType === NODE_TYPE_ELEMENT) {
            var index = element.firstChild;
            forEach(new JQLite(node), function (child) {
              element.insertBefore(child, index);
            });
          }
        },
        wrap: function (element, wrapNode) {
          wrapNode = jqLite(wrapNode).eq(0).clone()[0];
          var parent = element.parentNode;
          if (parent) {
            parent.replaceChild(wrapNode, element);
          }
          wrapNode.appendChild(element);
        },
        remove: jqLiteRemove,
        detach: function (element) {
          jqLiteRemove(element, true);
        },
        after: function (element, newElement) {
          var index = element, parent = element.parentNode;
          newElement = new JQLite(newElement);
          for (var i = 0, ii = newElement.length; i < ii; i++) {
            var node = newElement[i];
            parent.insertBefore(node, index.nextSibling);
            index = node;
          }
        },
        addClass: jqLiteAddClass,
        removeClass: jqLiteRemoveClass,
        toggleClass: function (element, selector, condition) {
          if (selector) {
            forEach(selector.split(' '), function (className) {
              var classCondition = condition;
              if (isUndefined(classCondition)) {
                classCondition = !jqLiteHasClass(element, className);
              }
              (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
            });
          }
        },
        parent: function (element) {
          var parent = element.parentNode;
          return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
        },
        next: function (element) {
          return element.nextElementSibling;
        },
        find: function (element, selector) {
          if (element.getElementsByTagName) {
            return element.getElementsByTagName(selector);
          } else {
            return [];
          }
        },
        clone: jqLiteClone,
        triggerHandler: function (element, event, extraParameters) {
          var dummyEvent, eventFnsCopy, handlerArgs;
          var eventName = event.type || event;
          var expandoStore = jqLiteExpandoStore(element);
          var events = expandoStore && expandoStore.events;
          var eventFns = events && events[eventName];
          if (eventFns) {
            // Create a dummy event to pass to the handlers
            dummyEvent = {
              preventDefault: function () {
                this.defaultPrevented = true;
              },
              isDefaultPrevented: function () {
                return this.defaultPrevented === true;
              },
              stopImmediatePropagation: function () {
                this.immediatePropagationStopped = true;
              },
              isImmediatePropagationStopped: function () {
                return this.immediatePropagationStopped === true;
              },
              stopPropagation: noop,
              type: eventName,
              target: element
            };
            // If a custom event was provided then extend our dummy event with it
            if (event.type) {
              dummyEvent = extend(dummyEvent, event);
            }
            // Copy event handlers in case event handlers array is modified during execution.
            eventFnsCopy = shallowCopy(eventFns);
            handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];
            forEach(eventFnsCopy, function (fn) {
              if (!dummyEvent.isImmediatePropagationStopped()) {
                fn.apply(element, handlerArgs);
              }
            });
          }
        }
      }, function (fn, name) {
        /**
	   * chaining functions
	   */
        JQLite.prototype[name] = function (arg1, arg2, arg3) {
          var value;
          for (var i = 0, ii = this.length; i < ii; i++) {
            if (isUndefined(value)) {
              value = fn(this[i], arg1, arg2, arg3);
              if (isDefined(value)) {
                // any function which returns a value needs to be wrapped
                value = jqLite(value);
              }
            } else {
              jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
            }
          }
          return isDefined(value) ? value : this;
        };
        // bind legacy bind/unbind to on/off
        JQLite.prototype.bind = JQLite.prototype.on;
        JQLite.prototype.unbind = JQLite.prototype.off;
      });
      // Provider for private $$jqLite service
      function $$jqLiteProvider() {
        this.$get = function $$jqLite() {
          return extend(JQLite, {
            hasClass: function (node, classes) {
              if (node.attr)
                node = node[0];
              return jqLiteHasClass(node, classes);
            },
            addClass: function (node, classes) {
              if (node.attr)
                node = node[0];
              return jqLiteAddClass(node, classes);
            },
            removeClass: function (node, classes) {
              if (node.attr)
                node = node[0];
              return jqLiteRemoveClass(node, classes);
            }
          });
        };
      }
      /**
	 * Computes a hash of an 'obj'.
	 * Hash of a:
	 *  string is string
	 *  number is number as string
	 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
	 *         that is also assigned to the $$hashKey property of the object.
	 *
	 * @param obj
	 * @returns {string} hash string such that the same input will have the same hash string.
	 *         The resulting string key is in 'type:hashKey' format.
	 */
      function hashKey(obj, nextUidFn) {
        var key = obj && obj.$$hashKey;
        if (key) {
          if (typeof key === 'function') {
            key = obj.$$hashKey();
          }
          return key;
        }
        var objType = typeof obj;
        if (objType == 'function' || objType == 'object' && obj !== null) {
          key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
        } else {
          key = objType + ':' + obj;
        }
        return key;
      }
      /**
	 * HashMap which can use objects as keys
	 */
      function HashMap(array, isolatedUid) {
        if (isolatedUid) {
          var uid = 0;
          this.nextUid = function () {
            return ++uid;
          };
        }
        forEach(array, this.put, this);
      }
      HashMap.prototype = {
        put: function (key, value) {
          this[hashKey(key, this.nextUid)] = value;
        },
        get: function (key) {
          return this[hashKey(key, this.nextUid)];
        },
        remove: function (key) {
          var value = this[key = hashKey(key, this.nextUid)];
          delete this[key];
          return value;
        }
      };
      var $$HashMapProvider = [function () {
            this.$get = [function () {
                return HashMap;
              }];
          }];
      /**
	 * @ngdoc function
	 * @module ng
	 * @name angular.injector
	 * @kind function
	 *
	 * @description
	 * Creates an injector object that can be used for retrieving services as well as for
	 * dependency injection (see {@link guide/di dependency injection}).
	 *
	 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
	 *     {@link angular.module}. The `ng` module must be explicitly added.
	 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
	 *     disallows argument name annotation inference.
	 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
	 *
	 * @example
	 * Typical usage
	 * ```js
	 *   // create an injector
	 *   var $injector = angular.injector(['ng']);
	 *
	 *   // use the injector to kick off your application
	 *   // use the type inference to auto inject arguments, or use implicit injection
	 *   $injector.invoke(function($rootScope, $compile, $document) {
	 *     $compile($document)($rootScope);
	 *     $rootScope.$digest();
	 *   });
	 * ```
	 *
	 * Sometimes you want to get access to the injector of a currently running Angular app
	 * from outside Angular. Perhaps, you want to inject and compile some markup after the
	 * application has been bootstrapped. You can do this using the extra `injector()` added
	 * to JQuery/jqLite elements. See {@link angular.element}.
	 *
	 * *This is fairly rare but could be the case if a third party library is injecting the
	 * markup.*
	 *
	 * In the following example a new block of HTML containing a `ng-controller`
	 * directive is added to the end of the document body by JQuery. We then compile and link
	 * it into the current AngularJS scope.
	 *
	 * ```js
	 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
	 * $(document.body).append($div);
	 *
	 * angular.element(document).injector().invoke(function($compile) {
	 *   var scope = angular.element($div).scope();
	 *   $compile($div)(scope);
	 * });
	 * ```
	 */
      /**
	 * @ngdoc module
	 * @name auto
	 * @description
	 *
	 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
	 */
      var FN_ARGS = /^[^\(]*\(\s*([^\)]*)\)/m;
      var FN_ARG_SPLIT = /,/;
      var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
      var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm;
      var $injectorMinErr = minErr('$injector');
      function anonFn(fn) {
        // For anonymous functions, showing at the very least the function signature can help in
        // debugging.
        var fnText = fn.toString().replace(STRIP_COMMENTS, ''), args = fnText.match(FN_ARGS);
        if (args) {
          return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
        }
        return 'fn';
      }
      function annotate(fn, strictDi, name) {
        var $inject, fnText, argDecl, last;
        if (typeof fn === 'function') {
          if (!($inject = fn.$inject)) {
            $inject = [];
            if (fn.length) {
              if (strictDi) {
                if (!isString(name) || !name) {
                  name = fn.name || anonFn(fn);
                }
                throw $injectorMinErr('strictdi', '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
              }
              fnText = fn.toString().replace(STRIP_COMMENTS, '');
              argDecl = fnText.match(FN_ARGS);
              forEach(argDecl[1].split(FN_ARG_SPLIT), function (arg) {
                arg.replace(FN_ARG, function (all, underscore, name) {
                  $inject.push(name);
                });
              });
            }
            fn.$inject = $inject;
          }
        } else if (isArray(fn)) {
          last = fn.length - 1;
          assertArgFn(fn[last], 'fn');
          $inject = fn.slice(0, last);
        } else {
          assertArgFn(fn, 'fn', true);
        }
        return $inject;
      }
      ///////////////////////////////////////
      /**
	 * @ngdoc service
	 * @name $injector
	 *
	 * @description
	 *
	 * `$injector` is used to retrieve object instances as defined by
	 * {@link auto.$provide provider}, instantiate types, invoke methods,
	 * and load modules.
	 *
	 * The following always holds true:
	 *
	 * ```js
	 *   var $injector = angular.injector();
	 *   expect($injector.get('$injector')).toBe($injector);
	 *   expect($injector.invoke(function($injector) {
	 *     return $injector;
	 *   })).toBe($injector);
	 * ```
	 *
	 * # Injection Function Annotation
	 *
	 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
	 * following are all valid ways of annotating function with injection arguments and are equivalent.
	 *
	 * ```js
	 *   // inferred (only works if code not minified/obfuscated)
	 *   $injector.invoke(function(serviceA){});
	 *
	 *   // annotated
	 *   function explicit(serviceA) {};
	 *   explicit.$inject = ['serviceA'];
	 *   $injector.invoke(explicit);
	 *
	 *   // inline
	 *   $injector.invoke(['serviceA', function(serviceA){}]);
	 * ```
	 *
	 * ## Inference
	 *
	 * In JavaScript calling `toString()` on a function returns the function definition. The definition
	 * can then be parsed and the function arguments can be extracted. This method of discovering
	 * annotations is disallowed when the injector is in strict mode.
	 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
	 * argument names.
	 *
	 * ## `$inject` Annotation
	 * By adding an `$inject` property onto a function the injection parameters can be specified.
	 *
	 * ## Inline
	 * As an array of injection names, where the last item in the array is the function to call.
	 */
      /**
	 * @ngdoc method
	 * @name $injector#get
	 *
	 * @description
	 * Return an instance of the service.
	 *
	 * @param {string} name The name of the instance to retrieve.
	 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
	 * @return {*} The instance.
	 */
      /**
	 * @ngdoc method
	 * @name $injector#invoke
	 *
	 * @description
	 * Invoke the method and supply the method arguments from the `$injector`.
	 *
	 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
	 *   injected according to the {@link guide/di $inject Annotation} rules.
	 * @param {Object=} self The `this` for the invoked method.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 *                         object first, before the `$injector` is consulted.
	 * @returns {*} the value returned by the invoked `fn` function.
	 */
      /**
	 * @ngdoc method
	 * @name $injector#has
	 *
	 * @description
	 * Allows the user to query if the particular service exists.
	 *
	 * @param {string} name Name of the service to query.
	 * @returns {boolean} `true` if injector has given service.
	 */
      /**
	 * @ngdoc method
	 * @name $injector#instantiate
	 * @description
	 * Create a new instance of JS type. The method takes a constructor function, invokes the new
	 * operator, and supplies all of the arguments to the constructor function as specified by the
	 * constructor annotation.
	 *
	 * @param {Function} Type Annotated constructor function.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 * object first, before the `$injector` is consulted.
	 * @returns {Object} new instance of `Type`.
	 */
      /**
	 * @ngdoc method
	 * @name $injector#annotate
	 *
	 * @description
	 * Returns an array of service names which the function is requesting for injection. This API is
	 * used by the injector to determine which services need to be injected into the function when the
	 * function is invoked. There are three ways in which the function can be annotated with the needed
	 * dependencies.
	 *
	 * # Argument names
	 *
	 * The simplest form is to extract the dependencies from the arguments of the function. This is done
	 * by converting the function into a string using `toString()` method and extracting the argument
	 * names.
	 * ```js
	 *   // Given
	 *   function MyController($scope, $route) {
	 *     // ...
	 *   }
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * You can disallow this method by using strict injection mode.
	 *
	 * This method does not work with code minification / obfuscation. For this reason the following
	 * annotation strategies are supported.
	 *
	 * # The `$inject` property
	 *
	 * If a function has an `$inject` property and its value is an array of strings, then the strings
	 * represent names of services to be injected into the function.
	 * ```js
	 *   // Given
	 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
	 *     // ...
	 *   }
	 *   // Define function dependencies
	 *   MyController['$inject'] = ['$scope', '$route'];
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * # The array notation
	 *
	 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
	 * is very inconvenient. In these situations using the array notation to specify the dependencies in
	 * a way that survives minification is a better choice:
	 *
	 * ```js
	 *   // We wish to write this (not minification / obfuscation safe)
	 *   injector.invoke(function($compile, $rootScope) {
	 *     // ...
	 *   });
	 *
	 *   // We are forced to write break inlining
	 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
	 *     // ...
	 *   };
	 *   tmpFn.$inject = ['$compile', '$rootScope'];
	 *   injector.invoke(tmpFn);
	 *
	 *   // To better support inline function the inline annotation is supported
	 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
	 *     // ...
	 *   }]);
	 *
	 *   // Therefore
	 *   expect(injector.annotate(
	 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
	 *    ).toEqual(['$compile', '$rootScope']);
	 * ```
	 *
	 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
	 * be retrieved as described above.
	 *
	 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
	 *
	 * @returns {Array.<string>} The names of the services which the function requires.
	 */
      /**
	 * @ngdoc service
	 * @name $provide
	 *
	 * @description
	 *
	 * The {@link auto.$provide $provide} service has a number of methods for registering components
	 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
	 * {@link angular.Module}.
	 *
	 * An Angular **service** is a singleton object created by a **service factory**.  These **service
	 * factories** are functions which, in turn, are created by a **service provider**.
	 * The **service providers** are constructor functions. When instantiated they must contain a
	 * property called `$get`, which holds the **service factory** function.
	 *
	 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
	 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
	 * function to get the instance of the **service**.
	 *
	 * Often services have no configuration options and there is no need to add methods to the service
	 * provider.  The provider will be no more than a constructor function with a `$get` property. For
	 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
	 * services without specifying a provider.
	 *
	 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
	 *     {@link auto.$injector $injector}
	 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
	 *     providers and services.
	 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
	 *     services, not providers.
	 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
	 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
	 *     given factory function.
	 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
	 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
	 *      a new object using the given constructor function.
	 *
	 * See the individual methods for more information and examples.
	 */
      /**
	 * @ngdoc method
	 * @name $provide#provider
	 * @description
	 *
	 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
	 * are constructor functions, whose instances are responsible for "providing" a factory for a
	 * service.
	 *
	 * Service provider names start with the name of the service they provide followed by `Provider`.
	 * For example, the {@link ng.$log $log} service has a provider called
	 * {@link ng.$logProvider $logProvider}.
	 *
	 * Service provider objects can have additional methods which allow configuration of the provider
	 * and its service. Importantly, you can configure what kind of service is created by the `$get`
	 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
	 * method {@link ng.$logProvider#debugEnabled debugEnabled}
	 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
	 * console or not.
	 *
	 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
	                        'Provider'` key.
	 * @param {(Object|function())} provider If the provider is:
	 *
	 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
	 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
	 *   - `Constructor`: a new instance of the provider will be created using
	 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
	 *
	 * @returns {Object} registered provider instance

	 * @example
	 *
	 * The following example shows how to create a simple event tracking service and register it using
	 * {@link auto.$provide#provider $provide.provider()}.
	 *
	 * ```js
	 *  // Define the eventTracker provider
	 *  function EventTrackerProvider() {
	 *    var trackingUrl = '/track';
	 *
	 *    // A provider method for configuring where the tracked events should been saved
	 *    this.setTrackingUrl = function(url) {
	 *      trackingUrl = url;
	 *    };
	 *
	 *    // The service factory function
	 *    this.$get = ['$http', function($http) {
	 *      var trackedEvents = {};
	 *      return {
	 *        // Call this to track an event
	 *        event: function(event) {
	 *          var count = trackedEvents[event] || 0;
	 *          count += 1;
	 *          trackedEvents[event] = count;
	 *          return count;
	 *        },
	 *        // Call this to save the tracked events to the trackingUrl
	 *        save: function() {
	 *          $http.post(trackingUrl, trackedEvents);
	 *        }
	 *      };
	 *    }];
	 *  }
	 *
	 *  describe('eventTracker', function() {
	 *    var postSpy;
	 *
	 *    beforeEach(module(function($provide) {
	 *      // Register the eventTracker provider
	 *      $provide.provider('eventTracker', EventTrackerProvider);
	 *    }));
	 *
	 *    beforeEach(module(function(eventTrackerProvider) {
	 *      // Configure eventTracker provider
	 *      eventTrackerProvider.setTrackingUrl('/custom-track');
	 *    }));
	 *
	 *    it('tracks events', inject(function(eventTracker) {
	 *      expect(eventTracker.event('login')).toEqual(1);
	 *      expect(eventTracker.event('login')).toEqual(2);
	 *    }));
	 *
	 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
	 *      postSpy = spyOn($http, 'post');
	 *      eventTracker.event('login');
	 *      eventTracker.save();
	 *      expect(postSpy).toHaveBeenCalled();
	 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
	 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
	 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
	 *    }));
	 *  });
	 * ```
	 */
      /**
	 * @ngdoc method
	 * @name $provide#factory
	 * @description
	 *
	 * Register a **service factory**, which will be called to return the service instance.
	 * This is short for registering a service where its provider consists of only a `$get` property,
	 * which is the given service factory function.
	 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
	 * configure your service in a provider.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
	 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service
	 * ```js
	 *   $provide.factory('ping', ['$http', function($http) {
	 *     return function ping() {
	 *       return $http.send('/ping');
	 *     };
	 *   }]);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping();
	 *   }]);
	 * ```
	 */
      /**
	 * @ngdoc method
	 * @name $provide#service
	 * @description
	 *
	 * Register a **service constructor**, which will be invoked with `new` to create the service
	 * instance.
	 * This is short for registering a service where its provider's `$get` property is the service
	 * constructor function that will be used to instantiate the service instance.
	 *
	 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
	 * as a type/class.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
	 *     that will be instantiated.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service using
	 * {@link auto.$provide#service $provide.service(class)}.
	 * ```js
	 *   var Ping = function($http) {
	 *     this.$http = $http;
	 *   };
	 *
	 *   Ping.$inject = ['$http'];
	 *
	 *   Ping.prototype.send = function() {
	 *     return this.$http.get('/ping');
	 *   };
	 *   $provide.service('ping', Ping);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping.send();
	 *   }]);
	 * ```
	 */
      /**
	 * @ngdoc method
	 * @name $provide#value
	 * @description
	 *
	 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
	 * number, an array, an object or a function.  This is short for registering a service where its
	 * provider's `$get` property is a factory function that takes no arguments and returns the **value
	 * service**.
	 *
	 * Value services are similar to constant services, except that they cannot be injected into a
	 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
	 * an Angular
	 * {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the instance.
	 * @param {*} value The value.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here are some examples of creating value services.
	 * ```js
	 *   $provide.value('ADMIN_USER', 'admin');
	 *
	 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
	 *
	 *   $provide.value('halfOf', function(value) {
	 *     return value / 2;
	 *   });
	 * ```
	 */
      /**
	 * @ngdoc method
	 * @name $provide#constant
	 * @description
	 *
	 * Register a **constant service**, such as a string, a number, an array, an object or a function,
	 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be
	 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
	 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the constant.
	 * @param {*} value The constant value.
	 * @returns {Object} registered instance
	 *
	 * @example
	 * Here a some examples of creating constants:
	 * ```js
	 *   $provide.constant('SHARD_HEIGHT', 306);
	 *
	 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
	 *
	 *   $provide.constant('double', function(value) {
	 *     return value * 2;
	 *   });
	 * ```
	 */
      /**
	 * @ngdoc method
	 * @name $provide#decorator
	 * @description
	 *
	 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
	 * intercepts the creation of a service, allowing it to override or modify the behaviour of the
	 * service. The object returned by the decorator may be the original service, or a new service
	 * object which replaces or wraps and delegates to the original service.
	 *
	 * @param {string} name The name of the service to decorate.
	 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
	 *    instantiated and should return the decorated service instance. The function is called using
	 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
	 *    Local injection arguments:
	 *
	 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
	 *      decorated or delegated to.
	 *
	 * @example
	 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
	 * calls to {@link ng.$log#error $log.warn()}.
	 * ```js
	 *   $provide.decorator('$log', ['$delegate', function($delegate) {
	 *     $delegate.warn = $delegate.error;
	 *     return $delegate;
	 *   }]);
	 * ```
	 */
      function createInjector(modulesToLoad, strictDi) {
        strictDi = strictDi === true;
        var INSTANTIATING = {}, providerSuffix = 'Provider', path = [], loadedModules = new HashMap([], true), providerCache = {
            $provide: {
              provider: supportObject(provider),
              factory: supportObject(factory),
              service: supportObject(service),
              value: supportObject(value),
              constant: supportObject(constant),
              decorator: decorator
            }
          }, providerInjector = providerCache.$injector = createInternalInjector(providerCache, function (serviceName, caller) {
            if (angular.isString(caller)) {
              path.push(caller);
            }
            throw $injectorMinErr('unpr', 'Unknown provider: {0}', path.join(' <- '));
          }), instanceCache = {}, instanceInjector = instanceCache.$injector = createInternalInjector(instanceCache, function (serviceName, caller) {
            var provider = providerInjector.get(serviceName + providerSuffix, caller);
            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);
          });
        forEach(loadModules(modulesToLoad), function (fn) {
          if (fn)
            instanceInjector.invoke(fn);
        });
        return instanceInjector;
        ////////////////////////////////////
        // $provider
        ////////////////////////////////////
        function supportObject(delegate) {
          return function (key, value) {
            if (isObject(key)) {
              forEach(key, reverseParams(delegate));
            } else {
              return delegate(key, value);
            }
          };
        }
        function provider(name, provider_) {
          assertNotHasOwnProperty(name, 'service');
          if (isFunction(provider_) || isArray(provider_)) {
            provider_ = providerInjector.instantiate(provider_);
          }
          if (!provider_.$get) {
            throw $injectorMinErr('pget', 'Provider \'{0}\' must define $get factory method.', name);
          }
          return providerCache[name + providerSuffix] = provider_;
        }
        function enforceReturnValue(name, factory) {
          return function enforcedReturnValue() {
            var result = instanceInjector.invoke(factory, this);
            if (isUndefined(result)) {
              throw $injectorMinErr('undef', 'Provider \'{0}\' must return a value from $get factory method.', name);
            }
            return result;
          };
        }
        function factory(name, factoryFn, enforce) {
          return provider(name, { $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn });
        }
        function service(name, constructor) {
          return factory(name, [
            '$injector',
            function ($injector) {
              return $injector.instantiate(constructor);
            }
          ]);
        }
        function value(name, val) {
          return factory(name, valueFn(val), false);
        }
        function constant(name, value) {
          assertNotHasOwnProperty(name, 'constant');
          providerCache[name] = value;
          instanceCache[name] = value;
        }
        function decorator(serviceName, decorFn) {
          var origProvider = providerInjector.get(serviceName + providerSuffix), orig$get = origProvider.$get;
          origProvider.$get = function () {
            var origInstance = instanceInjector.invoke(orig$get, origProvider);
            return instanceInjector.invoke(decorFn, null, { $delegate: origInstance });
          };
        }
        ////////////////////////////////////
        // Module Loading
        ////////////////////////////////////
        function loadModules(modulesToLoad) {
          assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');
          var runBlocks = [], moduleFn;
          forEach(modulesToLoad, function (module) {
            if (loadedModules.get(module))
              return;
            loadedModules.put(module, true);
            function runInvokeQueue(queue) {
              var i, ii;
              for (i = 0, ii = queue.length; i < ii; i++) {
                var invokeArgs = queue[i], provider = providerInjector.get(invokeArgs[0]);
                provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
              }
            }
            try {
              if (isString(module)) {
                moduleFn = angularModule(module);
                runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
                runInvokeQueue(moduleFn._invokeQueue);
                runInvokeQueue(moduleFn._configBlocks);
              } else if (isFunction(module)) {
                runBlocks.push(providerInjector.invoke(module));
              } else if (isArray(module)) {
                runBlocks.push(providerInjector.invoke(module));
              } else {
                assertArgFn(module, 'module');
              }
            } catch (e) {
              if (isArray(module)) {
                module = module[module.length - 1];
              }
              if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
                // Safari & FF's stack traces don't contain error.message content
                // unlike those of Chrome and IE
                // So if stack doesn't contain message, we create a new string that contains both.
                // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
                /* jshint -W022 */
                e = e.message + '\n' + e.stack;
              }
              throw $injectorMinErr('modulerr', 'Failed to instantiate module {0} due to:\n{1}', module, e.stack || e.message || e);
            }
          });
          return runBlocks;
        }
        ////////////////////////////////////
        // internal Injector
        ////////////////////////////////////
        function createInternalInjector(cache, factory) {
          function getService(serviceName, caller) {
            if (cache.hasOwnProperty(serviceName)) {
              if (cache[serviceName] === INSTANTIATING) {
                throw $injectorMinErr('cdep', 'Circular dependency found: {0}', serviceName + ' <- ' + path.join(' <- '));
              }
              return cache[serviceName];
            } else {
              try {
                path.unshift(serviceName);
                cache[serviceName] = INSTANTIATING;
                return cache[serviceName] = factory(serviceName, caller);
              } catch (err) {
                if (cache[serviceName] === INSTANTIATING) {
                  delete cache[serviceName];
                }
                throw err;
              } finally {
                path.shift();
              }
            }
          }
          function invoke(fn, self, locals, serviceName) {
            if (typeof locals === 'string') {
              serviceName = locals;
              locals = null;
            }
            var args = [], $inject = createInjector.$$annotate(fn, strictDi, serviceName), length, i, key;
            for (i = 0, length = $inject.length; i < length; i++) {
              key = $inject[i];
              if (typeof key !== 'string') {
                throw $injectorMinErr('itkn', 'Incorrect injection token! Expected service name as string, got {0}', key);
              }
              args.push(locals && locals.hasOwnProperty(key) ? locals[key] : getService(key, serviceName));
            }
            if (isArray(fn)) {
              fn = fn[length];
            }
            // http://jsperf.com/angularjs-invoke-apply-vs-switch
            // #5388
            return fn.apply(self, args);
          }
          function instantiate(Type, locals, serviceName) {
            // Check if Type is annotated and use just the given function at n-1 as parameter
            // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
            // Object creation: http://jsperf.com/create-constructor/2
            var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);
            var returnedValue = invoke(Type, instance, locals, serviceName);
            return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
          }
          return {
            invoke: invoke,
            instantiate: instantiate,
            get: getService,
            annotate: createInjector.$$annotate,
            has: function (name) {
              return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
            }
          };
        }
      }
      createInjector.$$annotate = annotate;
      /**
	 * @ngdoc provider
	 * @name $anchorScrollProvider
	 *
	 * @description
	 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
	 * {@link ng.$location#hash $location.hash()} changes.
	 */
      function $AnchorScrollProvider() {
        var autoScrollingEnabled = true;
        /**
	   * @ngdoc method
	   * @name $anchorScrollProvider#disableAutoScrolling
	   *
	   * @description
	   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
	   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
	   * Use this method to disable automatic scrolling.
	   *
	   * If automatic scrolling is disabled, one must explicitly call
	   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
	   * current hash.
	   */
        this.disableAutoScrolling = function () {
          autoScrollingEnabled = false;
        };
        /**
	   * @ngdoc service
	   * @name $anchorScroll
	   * @kind function
	   * @requires $window
	   * @requires $location
	   * @requires $rootScope
	   *
	   * @description
	   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
	   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
	   * in the
	   * [HTML5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).
	   *
	   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
	   * match any anchor whenever it changes. This can be disabled by calling
	   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
	   *
	   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
	   * vertical scroll-offset (either fixed or dynamic).
	   *
	   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
	   *                       {@link ng.$location#hash $location.hash()} will be used.
	   *
	   * @property {(number|function|jqLite)} yOffset
	   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
	   * positioned elements at the top of the page, such as navbars, headers etc.
	   *
	   * `yOffset` can be specified in various ways:
	   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
	   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
	   *   a number representing the offset (in pixels).<br /><br />
	   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
	   *   the top of the page to the element's bottom will be used as offset.<br />
	   *   **Note**: The element will be taken into account only as long as its `position` is set to
	   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
	   *   their height and/or positioning according to the viewport's size.
	   *
	   * <br />
	   * <div class="alert alert-warning">
	   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
	   * not some child element.
	   * </div>
	   *
	   * @example
	     <example module="anchorScrollExample">
	       <file name="index.html">
	         <div id="scrollArea" ng-controller="ScrollController">
	           <a ng-click="gotoBottom()">Go to bottom</a>
	           <a id="bottom"></a> You're at the bottom!
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollExample', [])
	           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
	             function ($scope, $location, $anchorScroll) {
	               $scope.gotoBottom = function() {
	                 // set the location.hash to the id of
	                 // the element you wish to scroll to.
	                 $location.hash('bottom');

	                 // call $anchorScroll()
	                 $anchorScroll();
	               };
	             }]);
	       </file>
	       <file name="style.css">
	         #scrollArea {
	           height: 280px;
	           overflow: auto;
	         }

	         #bottom {
	           display: block;
	           margin-top: 2000px;
	         }
	       </file>
	     </example>
	   *
	   * <hr />
	   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
	   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
	   *
	   * @example
	     <example module="anchorScrollOffsetExample">
	       <file name="index.html">
	         <div class="fixed-header" ng-controller="headerCtrl">
	           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
	             Go to anchor {{x}}
	           </a>
	         </div>
	         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
	           Anchor {{x}} of 5
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollOffsetExample', [])
	           .run(['$anchorScroll', function($anchorScroll) {
	             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
	           }])
	           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
	             function ($anchorScroll, $location, $scope) {
	               $scope.gotoAnchor = function(x) {
	                 var newHash = 'anchor' + x;
	                 if ($location.hash() !== newHash) {
	                   // set the $location.hash to `newHash` and
	                   // $anchorScroll will automatically scroll to it
	                   $location.hash('anchor' + x);
	                 } else {
	                   // call $anchorScroll() explicitly,
	                   // since $location.hash hasn't changed
	                   $anchorScroll();
	                 }
	               };
	             }
	           ]);
	       </file>
	       <file name="style.css">
	         body {
	           padding-top: 50px;
	         }

	         .anchor {
	           border: 2px dashed DarkOrchid;
	           padding: 10px 10px 200px 10px;
	         }

	         .fixed-header {
	           background-color: rgba(0, 0, 0, 0.2);
	           height: 50px;
	           position: fixed;
	           top: 0; left: 0; right: 0;
	         }

	         .fixed-header > a {
	           display: inline-block;
	           margin: 5px 15px;
	         }
	       </file>
	     </example>
	   */
        this.$get = [
          '$window',
          '$location',
          '$rootScope',
          function ($window, $location, $rootScope) {
            var document = $window.document;
            // Helper function to get first anchor from a NodeList
            // (using `Array#some()` instead of `angular#forEach()` since it's more performant
            //  and working in all supported browsers.)
            function getFirstAnchor(list) {
              var result = null;
              Array.prototype.some.call(list, function (element) {
                if (nodeName_(element) === 'a') {
                  result = element;
                  return true;
                }
              });
              return result;
            }
            function getYOffset() {
              var offset = scroll.yOffset;
              if (isFunction(offset)) {
                offset = offset();
              } else if (isElement(offset)) {
                var elem = offset[0];
                var style = $window.getComputedStyle(elem);
                if (style.position !== 'fixed') {
                  offset = 0;
                } else {
                  offset = elem.getBoundingClientRect().bottom;
                }
              } else if (!isNumber(offset)) {
                offset = 0;
              }
              return offset;
            }
            function scrollTo(elem) {
              if (elem) {
                elem.scrollIntoView();
                var offset = getYOffset();
                if (offset) {
                  // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
                  // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
                  // top of the viewport.
                  //
                  // IF the number of pixels from the top of `elem` to the end of the page's content is less
                  // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
                  // way down the page.
                  //
                  // This is often the case for elements near the bottom of the page.
                  //
                  // In such cases we do not need to scroll the whole `offset` up, just the difference between
                  // the top of the element and the offset, which is enough to align the top of `elem` at the
                  // desired position.
                  var elemTop = elem.getBoundingClientRect().top;
                  $window.scrollBy(0, elemTop - offset);
                }
              } else {
                $window.scrollTo(0, 0);
              }
            }
            function scroll(hash) {
              hash = isString(hash) ? hash : $location.hash();
              var elm;
              // empty hash, scroll to the top of the page
              if (!hash)
                scrollTo(null);  // element with given id
              else if (elm = document.getElementById(hash))
                scrollTo(elm);  // first anchor with given name :-D
              else if (elm = getFirstAnchor(document.getElementsByName(hash)))
                scrollTo(elm);  // no element and hash == 'top', scroll to the top of the page
              else if (hash === 'top')
                scrollTo(null);
            }
            // does not scroll when user clicks on anchor link that is currently on
            // (no url change, no $location.hash() change), browser native does scroll
            if (autoScrollingEnabled) {
              $rootScope.$watch(function autoScrollWatch() {
                return $location.hash();
              }, function autoScrollWatchAction(newVal, oldVal) {
                // skip the initial scroll if $location.hash is empty
                if (newVal === oldVal && newVal === '')
                  return;
                jqLiteDocumentLoaded(function () {
                  $rootScope.$evalAsync(scroll);
                });
              });
            }
            return scroll;
          }
        ];
      }
      var $animateMinErr = minErr('$animate');
      var ELEMENT_NODE = 1;
      var NG_ANIMATE_CLASSNAME = 'ng-animate';
      function mergeClasses(a, b) {
        if (!a && !b)
          return '';
        if (!a)
          return b;
        if (!b)
          return a;
        if (isArray(a))
          a = a.join(' ');
        if (isArray(b))
          b = b.join(' ');
        return a + ' ' + b;
      }
      function extractElementNode(element) {
        for (var i = 0; i < element.length; i++) {
          var elm = element[i];
          if (elm.nodeType === ELEMENT_NODE) {
            return elm;
          }
        }
      }
      function splitClasses(classes) {
        if (isString(classes)) {
          classes = classes.split(' ');
        }
        // Use createMap() to prevent class assumptions involving property names in
        // Object.prototype
        var obj = createMap();
        forEach(classes, function (klass) {
          // sometimes the split leaves empty string values
          // incase extra spaces were applied to the options
          if (klass.length) {
            obj[klass] = true;
          }
        });
        return obj;
      }
      // if any other type of options value besides an Object value is
      // passed into the $animate.method() animation then this helper code
      // will be run which will ignore it. While this patch is not the
      // greatest solution to this, a lot of existing plugins depend on
      // $animate to either call the callback (< 1.2) or return a promise
      // that can be changed. This helper function ensures that the options
      // are wiped clean incase a callback function is provided.
      function prepareAnimateOptions(options) {
        return isObject(options) ? options : {};
      }
      var $$CoreAnimateRunnerProvider = function () {
        this.$get = [
          '$q',
          '$$rAF',
          function ($q, $$rAF) {
            function AnimateRunner() {
            }
            AnimateRunner.all = noop;
            AnimateRunner.chain = noop;
            AnimateRunner.prototype = {
              end: noop,
              cancel: noop,
              resume: noop,
              pause: noop,
              complete: noop,
              then: function (pass, fail) {
                return $q(function (resolve) {
                  $$rAF(function () {
                    resolve();
                  });
                }).then(pass, fail);
              }
            };
            return AnimateRunner;
          }
        ];
      };
      // this is prefixed with Core since it conflicts with
      // the animateQueueProvider defined in ngAnimate/animateQueue.js
      var $$CoreAnimateQueueProvider = function () {
        var postDigestQueue = new HashMap();
        var postDigestElements = [];
        this.$get = [
          '$$AnimateRunner',
          '$rootScope',
          function ($$AnimateRunner, $rootScope) {
            return {
              enabled: noop,
              on: noop,
              off: noop,
              pin: noop,
              push: function (element, event, options, domOperation) {
                domOperation && domOperation();
                options = options || {};
                options.from && element.css(options.from);
                options.to && element.css(options.to);
                if (options.addClass || options.removeClass) {
                  addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
                }
                return new $$AnimateRunner();  // jshint ignore:line
              }
            };
            function updateData(data, classes, value) {
              var changed = false;
              if (classes) {
                classes = isString(classes) ? classes.split(' ') : isArray(classes) ? classes : [];
                forEach(classes, function (className) {
                  if (className) {
                    changed = true;
                    data[className] = value;
                  }
                });
              }
              return changed;
            }
            function handleCSSClassChanges() {
              forEach(postDigestElements, function (element) {
                var data = postDigestQueue.get(element);
                if (data) {
                  var existing = splitClasses(element.attr('class'));
                  var toAdd = '';
                  var toRemove = '';
                  forEach(data, function (status, className) {
                    var hasClass = !!existing[className];
                    if (status !== hasClass) {
                      if (status) {
                        toAdd += (toAdd.length ? ' ' : '') + className;
                      } else {
                        toRemove += (toRemove.length ? ' ' : '') + className;
                      }
                    }
                  });
                  forEach(element, function (elm) {
                    toAdd && jqLiteAddClass(elm, toAdd);
                    toRemove && jqLiteRemoveClass(elm, toRemove);
                  });
                  postDigestQueue.remove(element);
                }
              });
              postDigestElements.length = 0;
            }
            function addRemoveClassesPostDigest(element, add, remove) {
              var data = postDigestQueue.get(element) || {};
              var classesAdded = updateData(data, add, true);
              var classesRemoved = updateData(data, remove, false);
              if (classesAdded || classesRemoved) {
                postDigestQueue.put(element, data);
                postDigestElements.push(element);
                if (postDigestElements.length === 1) {
                  $rootScope.$$postDigest(handleCSSClassChanges);
                }
              }
            }
          }
        ];
      };
      /**
	 * @ngdoc provider
	 * @name $animateProvider
	 *
	 * @description
	 * Default implementation of $animate that doesn't perform any animations, instead just
	 * synchronously performs DOM updates and resolves the returned runner promise.
	 *
	 * In order to enable animations the `ngAnimate` module has to be loaded.
	 *
	 * To see the functional implementation check out `src/ngAnimate/animate.js`.
	 */
      var $AnimateProvider = [
          '$provide',
          function ($provide) {
            var provider = this;
            this.$$registeredAnimations = Object.create(null);
            /**
	   * @ngdoc method
	   * @name $animateProvider#register
	   *
	   * @description
	   * Registers a new injectable animation factory function. The factory function produces the
	   * animation object which contains callback functions for each event that is expected to be
	   * animated.
	   *
	   *   * `eventFn`: `function(element, ... , doneFunction, options)`
	   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
	   *   on the type of animation additional arguments will be injected into the animation function. The
	   *   list below explains the function signatures for the different animation methods:
	   *
	   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
	   *   - addClass: function(element, addedClasses, doneFunction, options)
	   *   - removeClass: function(element, removedClasses, doneFunction, options)
	   *   - enter, leave, move: function(element, doneFunction, options)
	   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
	   *
	   *   Make sure to trigger the `doneFunction` once the animation is fully complete.
	   *
	   * ```js
	   *   return {
	   *     //enter, leave, move signature
	   *     eventFn : function(element, done, options) {
	   *       //code to run the animation
	   *       //once complete, then run done()
	   *       return function endFunction(wasCancelled) {
	   *         //code to cancel the animation
	   *       }
	   *     }
	   *   }
	   * ```
	   *
	   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
	   * @param {Function} factory The factory function that will be executed to return the animation
	   *                           object.
	   */
            this.register = function (name, factory) {
              if (name && name.charAt(0) !== '.') {
                throw $animateMinErr('notcsel', 'Expecting class selector starting with \'.\' got \'{0}\'.', name);
              }
              var key = name + '-animation';
              provider.$$registeredAnimations[name.substr(1)] = key;
              $provide.factory(key, factory);
            };
            /**
	   * @ngdoc method
	   * @name $animateProvider#classNameFilter
	   *
	   * @description
	   * Sets and/or returns the CSS class regular expression that is checked when performing
	   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
	   * therefore enable $animate to attempt to perform an animation on any element that is triggered.
	   * When setting the `classNameFilter` value, animations will only be performed on elements
	   * that successfully match the filter expression. This in turn can boost performance
	   * for low-powered devices as well as applications containing a lot of structural operations.
	   * @param {RegExp=} expression The className expression which will be checked against all animations
	   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
	   */
            this.classNameFilter = function (expression) {
              if (arguments.length === 1) {
                this.$$classNameFilter = expression instanceof RegExp ? expression : null;
                if (this.$$classNameFilter) {
                  var reservedRegex = new RegExp('(\\s+|\\/)' + NG_ANIMATE_CLASSNAME + '(\\s+|\\/)');
                  if (reservedRegex.test(this.$$classNameFilter.toString())) {
                    throw $animateMinErr('nongcls', '$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);
                  }
                }
              }
              return this.$$classNameFilter;
            };
            this.$get = [
              '$$animateQueue',
              function ($$animateQueue) {
                function domInsert(element, parentElement, afterElement) {
                  // if for some reason the previous element was removed
                  // from the dom sometime before this code runs then let's
                  // just stick to using the parent element as the anchor
                  if (afterElement) {
                    var afterNode = extractElementNode(afterElement);
                    if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
                      afterElement = null;
                    }
                  }
                  afterElement ? afterElement.after(element) : parentElement.prepend(element);
                }
                /**
	     * @ngdoc service
	     * @name $animate
	     * @description The $animate service exposes a series of DOM utility methods that provide support
	     * for animation hooks. The default behavior is the application of DOM operations, however,
	     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
	     * to ensure that animation runs with the triggered DOM operation.
	     *
	     * By default $animate doesn't trigger an animations. This is because the `ngAnimate` module isn't
	     * included and only when it is active then the animation hooks that `$animate` triggers will be
	     * functional. Once active then all structural `ng-` directives will trigger animations as they perform
	     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
	     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
	     *
	     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
	     *
	     * To learn more about enabling animation support, click here to visit the
	     * {@link ngAnimate ngAnimate module page}.
	     */
                return {
                  on: $$animateQueue.on,
                  off: $$animateQueue.off,
                  pin: $$animateQueue.pin,
                  enabled: $$animateQueue.enabled,
                  cancel: function (runner) {
                    runner.end && runner.end();
                  },
                  enter: function (element, parent, after, options) {
                    parent = parent && jqLite(parent);
                    after = after && jqLite(after);
                    parent = parent || after.parent();
                    domInsert(element, parent, after);
                    return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));
                  },
                  move: function (element, parent, after, options) {
                    parent = parent && jqLite(parent);
                    after = after && jqLite(after);
                    parent = parent || after.parent();
                    domInsert(element, parent, after);
                    return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));
                  },
                  leave: function (element, options) {
                    return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function () {
                      element.remove();
                    });
                  },
                  addClass: function (element, className, options) {
                    options = prepareAnimateOptions(options);
                    options.addClass = mergeClasses(options.addclass, className);
                    return $$animateQueue.push(element, 'addClass', options);
                  },
                  removeClass: function (element, className, options) {
                    options = prepareAnimateOptions(options);
                    options.removeClass = mergeClasses(options.removeClass, className);
                    return $$animateQueue.push(element, 'removeClass', options);
                  },
                  setClass: function (element, add, remove, options) {
                    options = prepareAnimateOptions(options);
                    options.addClass = mergeClasses(options.addClass, add);
                    options.removeClass = mergeClasses(options.removeClass, remove);
                    return $$animateQueue.push(element, 'setClass', options);
                  },
                  animate: function (element, from, to, className, options) {
                    options = prepareAnimateOptions(options);
                    options.from = options.from ? extend(options.from, from) : from;
                    options.to = options.to ? extend(options.to, to) : to;
                    className = className || 'ng-inline-animate';
                    options.tempClasses = mergeClasses(options.tempClasses, className);
                    return $$animateQueue.push(element, 'animate', options);
                  }
                };
              }
            ];
          }
        ];
      /**
	 * @ngdoc service
	 * @name $animateCss
	 * @kind object
	 *
	 * @description
	 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,
	 * then the `$animateCss` service will actually perform animations.
	 *
	 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.
	 */
      var $CoreAnimateCssProvider = function () {
        this.$get = [
          '$$rAF',
          '$q',
          function ($$rAF, $q) {
            var RAFPromise = function () {
            };
            RAFPromise.prototype = {
              done: function (cancel) {
                this.defer && this.defer[cancel === true ? 'reject' : 'resolve']();
              },
              end: function () {
                this.done();
              },
              cancel: function () {
                this.done(true);
              },
              getPromise: function () {
                if (!this.defer) {
                  this.defer = $q.defer();
                }
                return this.defer.promise;
              },
              then: function (f1, f2) {
                return this.getPromise().then(f1, f2);
              },
              'catch': function (f1) {
                return this.getPromise()['catch'](f1);
              },
              'finally': function (f1) {
                return this.getPromise()['finally'](f1);
              }
            };
            return function (element, options) {
              // there is no point in applying the styles since
              // there is no animation that goes on at all in
              // this version of $animateCss.
              if (options.cleanupStyles) {
                options.from = options.to = null;
              }
              if (options.from) {
                element.css(options.from);
                options.from = null;
              }
              var closed, runner = new RAFPromise();
              return {
                start: run,
                end: run
              };
              function run() {
                $$rAF(function () {
                  close();
                  if (!closed) {
                    runner.done();
                  }
                  closed = true;
                });
                return runner;
              }
              function close() {
                if (options.addClass) {
                  element.addClass(options.addClass);
                  options.addClass = null;
                }
                if (options.removeClass) {
                  element.removeClass(options.removeClass);
                  options.removeClass = null;
                }
                if (options.to) {
                  element.css(options.to);
                  options.to = null;
                }
              }
            };
          }
        ];
      };
      /* global stripHash: true */
      /**
	 * ! This is a private undocumented service !
	 *
	 * @name $browser
	 * @requires $log
	 * @description
	 * This object has two goals:
	 *
	 * - hide all the global state in the browser caused by the window object
	 * - abstract away all the browser specific features and inconsistencies
	 *
	 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
	 * service, which can be used for convenient testing of the application without the interaction with
	 * the real browser apis.
	 */
      /**
	 * @param {object} window The global window object.
	 * @param {object} document jQuery wrapped document.
	 * @param {object} $log window.console or an object with the same interface.
	 * @param {object} $sniffer $sniffer service
	 */
      function Browser(window, document, $log, $sniffer) {
        var self = this, rawDocument = document[0], location = window.location, history = window.history, setTimeout = window.setTimeout, clearTimeout = window.clearTimeout, pendingDeferIds = {};
        self.isMock = false;
        var outstandingRequestCount = 0;
        var outstandingRequestCallbacks = [];
        // TODO(vojta): remove this temporary api
        self.$$completeOutstandingRequest = completeOutstandingRequest;
        self.$$incOutstandingRequestCount = function () {
          outstandingRequestCount++;
        };
        /**
	   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
	   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
	   */
        function completeOutstandingRequest(fn) {
          try {
            fn.apply(null, sliceArgs(arguments, 1));
          } finally {
            outstandingRequestCount--;
            if (outstandingRequestCount === 0) {
              while (outstandingRequestCallbacks.length) {
                try {
                  outstandingRequestCallbacks.pop()();
                } catch (e) {
                  $log.error(e);
                }
              }
            }
          }
        }
        function getHash(url) {
          var index = url.indexOf('#');
          return index === -1 ? '' : url.substr(index);
        }
        /**
	   * @private
	   * Note: this method is used only by scenario runner
	   * TODO(vojta): prefix this method with $$ ?
	   * @param {function()} callback Function that will be called when no outstanding request
	   */
        self.notifyWhenNoOutstandingRequests = function (callback) {
          if (outstandingRequestCount === 0) {
            callback();
          } else {
            outstandingRequestCallbacks.push(callback);
          }
        };
        //////////////////////////////////////////////////////////////
        // URL API
        //////////////////////////////////////////////////////////////
        var cachedState, lastHistoryState, lastBrowserUrl = location.href, baseElement = document.find('base'), pendingLocation = null;
        cacheState();
        lastHistoryState = cachedState;
        /**
	   * @name $browser#url
	   *
	   * @description
	   * GETTER:
	   * Without any argument, this method just returns current value of location.href.
	   *
	   * SETTER:
	   * With at least one argument, this method sets url to new value.
	   * If html5 history api supported, pushState/replaceState is used, otherwise
	   * location.href/location.replace is used.
	   * Returns its own instance to allow chaining
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to change url.
	   *
	   * @param {string} url New url (when used as setter)
	   * @param {boolean=} replace Should new url replace current history record?
	   * @param {object=} state object to use with pushState/replaceState
	   */
        self.url = function (url, replace, state) {
          // In modern browsers `history.state` is `null` by default; treating it separately
          // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
          // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
          if (isUndefined(state)) {
            state = null;
          }
          // Android Browser BFCache causes location, history reference to become stale.
          if (location !== window.location)
            location = window.location;
          if (history !== window.history)
            history = window.history;
          // setter
          if (url) {
            var sameState = lastHistoryState === state;
            // Don't change anything if previous and current URLs and states match. This also prevents
            // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
            // See https://github.com/angular/angular.js/commit/ffb2701
            if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
              return self;
            }
            var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
            lastBrowserUrl = url;
            lastHistoryState = state;
            // Don't use history API if only the hash changed
            // due to a bug in IE10/IE11 which leads
            // to not firing a `hashchange` nor `popstate` event
            // in some cases (see #9143).
            if ($sniffer.history && (!sameBase || !sameState)) {
              history[replace ? 'replaceState' : 'pushState'](state, '', url);
              cacheState();
              // Do the assignment again so that those two variables are referentially identical.
              lastHistoryState = cachedState;
            } else {
              if (!sameBase || pendingLocation) {
                pendingLocation = url;
              }
              if (replace) {
                location.replace(url);
              } else if (!sameBase) {
                location.href = url;
              } else {
                location.hash = getHash(url);
              }
              if (location.href !== url) {
                pendingLocation = url;
              }
            }
            return self;  // getter
          } else {
            // - pendingLocation is needed as browsers don't allow to read out
            //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
            //   https://openradar.appspot.com/22186109).
            // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
            return pendingLocation || location.href.replace(/%27/g, '\'');
          }
        };
        /**
	   * @name $browser#state
	   *
	   * @description
	   * This method is a getter.
	   *
	   * Return history.state or null if history.state is undefined.
	   *
	   * @returns {object} state
	   */
        self.state = function () {
          return cachedState;
        };
        var urlChangeListeners = [], urlChangeInit = false;
        function cacheStateAndFireUrlChange() {
          pendingLocation = null;
          cacheState();
          fireUrlChange();
        }
        function getCurrentState() {
          try {
            return history.state;
          } catch (e) {
          }
        }
        // This variable should be used *only* inside the cacheState function.
        var lastCachedState = null;
        function cacheState() {
          // This should be the only place in $browser where `history.state` is read.
          cachedState = getCurrentState();
          cachedState = isUndefined(cachedState) ? null : cachedState;
          // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
          if (equals(cachedState, lastCachedState)) {
            cachedState = lastCachedState;
          }
          lastCachedState = cachedState;
        }
        function fireUrlChange() {
          if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
            return;
          }
          lastBrowserUrl = self.url();
          lastHistoryState = cachedState;
          forEach(urlChangeListeners, function (listener) {
            listener(self.url(), cachedState);
          });
        }
        /**
	   * @name $browser#onUrlChange
	   *
	   * @description
	   * Register callback function that will be called, when url changes.
	   *
	   * It's only called when the url is changed from outside of angular:
	   * - user types different url into address bar
	   * - user clicks on history (forward/back) button
	   * - user clicks on a link
	   *
	   * It's not called when url is changed by $browser.url() method
	   *
	   * The listener gets called with new url as parameter.
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to monitor url changes in angular apps.
	   *
	   * @param {function(string)} listener Listener function to be called when url changes.
	   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
	   */
        self.onUrlChange = function (callback) {
          // TODO(vojta): refactor to use node's syntax for events
          if (!urlChangeInit) {
            // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
            // don't fire popstate when user change the address bar and don't fire hashchange when url
            // changed by push/replaceState
            // html5 history api - popstate event
            if ($sniffer.history)
              jqLite(window).on('popstate', cacheStateAndFireUrlChange);
            // hashchange event
            jqLite(window).on('hashchange', cacheStateAndFireUrlChange);
            urlChangeInit = true;
          }
          urlChangeListeners.push(callback);
          return callback;
        };
        /**
	   * @private
	   * Remove popstate and hashchange handler from window.
	   *
	   * NOTE: this api is intended for use only by $rootScope.
	   */
        self.$$applicationDestroyed = function () {
          jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);
        };
        /**
	   * Checks whether the url has changed outside of Angular.
	   * Needs to be exported to be able to check for changes that have been done in sync,
	   * as hashchange/popstate events fire in async.
	   */
        self.$$checkUrlChange = fireUrlChange;
        //////////////////////////////////////////////////////////////
        // Misc API
        //////////////////////////////////////////////////////////////
        /**
	   * @name $browser#baseHref
	   *
	   * @description
	   * Returns current <base href>
	   * (always relative - without domain)
	   *
	   * @returns {string} The current base href
	   */
        self.baseHref = function () {
          var href = baseElement.attr('href');
          return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
        };
        /**
	   * @name $browser#defer
	   * @param {function()} fn A function, who's execution should be deferred.
	   * @param {number=} [delay=0] of milliseconds to defer the function execution.
	   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
	   *
	   * @description
	   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
	   *
	   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
	   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
	   * via `$browser.defer.flush()`.
	   *
	   */
        self.defer = function (fn, delay) {
          var timeoutId;
          outstandingRequestCount++;
          timeoutId = setTimeout(function () {
            delete pendingDeferIds[timeoutId];
            completeOutstandingRequest(fn);
          }, delay || 0);
          pendingDeferIds[timeoutId] = true;
          return timeoutId;
        };
        /**
	   * @name $browser#defer.cancel
	   *
	   * @description
	   * Cancels a deferred task identified with `deferId`.
	   *
	   * @param {*} deferId Token returned by the `$browser.defer` function.
	   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	   *                    canceled.
	   */
        self.defer.cancel = function (deferId) {
          if (pendingDeferIds[deferId]) {
            delete pendingDeferIds[deferId];
            clearTimeout(deferId);
            completeOutstandingRequest(noop);
            return true;
          }
          return false;
        };
      }
      function $BrowserProvider() {
        this.$get = [
          '$window',
          '$log',
          '$sniffer',
          '$document',
          function ($window, $log, $sniffer, $document) {
            return new Browser($window, $document, $log, $sniffer);
          }
        ];
      }
      /**
	 * @ngdoc service
	 * @name $cacheFactory
	 *
	 * @description
	 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
	 * them.
	 *
	 * ```js
	 *
	 *  var cache = $cacheFactory('cacheId');
	 *  expect($cacheFactory.get('cacheId')).toBe(cache);
	 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
	 *
	 *  cache.put("key", "value");
	 *  cache.put("another key", "another value");
	 *
	 *  // We've specified no options on creation
	 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
	 *
	 * ```
	 *
	 *
	 * @param {string} cacheId Name or id of the newly created cache.
	 * @param {object=} options Options object that specifies the cache behavior. Properties:
	 *
	 *   - `{number=}` `capacity` — turns the cache into LRU cache.
	 *
	 * @returns {object} Newly created cache object with the following set of methods:
	 *
	 * - `{object}` `info()` — Returns id, size, and options of cache.
	 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
	 *   it.
	 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
	 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
	 * - `{void}` `removeAll()` — Removes all cached values.
	 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
	 *
	 * @example
	   <example module="cacheExampleApp">
	     <file name="index.html">
	       <div ng-controller="CacheController">
	         <input ng-model="newCacheKey" placeholder="Key">
	         <input ng-model="newCacheValue" placeholder="Value">
	         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

	         <p ng-if="keys.length">Cached Values</p>
	         <div ng-repeat="key in keys">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="cache.get(key)"></b>
	         </div>

	         <p>Cache Info</p>
	         <div ng-repeat="(key, value) in cache.info()">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="value"></b>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('cacheExampleApp', []).
	         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
	           $scope.keys = [];
	           $scope.cache = $cacheFactory('cacheId');
	           $scope.put = function(key, value) {
	             if (angular.isUndefined($scope.cache.get(key))) {
	               $scope.keys.push(key);
	             }
	             $scope.cache.put(key, angular.isUndefined(value) ? null : value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       p {
	         margin: 10px 0 3px;
	       }
	     </file>
	   </example>
	 */
      function $CacheFactoryProvider() {
        this.$get = function () {
          var caches = {};
          function cacheFactory(cacheId, options) {
            if (cacheId in caches) {
              throw minErr('$cacheFactory')('iid', 'CacheId \'{0}\' is already taken!', cacheId);
            }
            var size = 0, stats = extend({}, options, { id: cacheId }), data = {}, capacity = options && options.capacity || Number.MAX_VALUE, lruHash = {}, freshEnd = null, staleEnd = null;
            /**
	       * @ngdoc type
	       * @name $cacheFactory.Cache
	       *
	       * @description
	       * A cache object used to store and retrieve data, primarily used by
	       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
	       * templates and other data.
	       *
	       * ```js
	       *  angular.module('superCache')
	       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
	       *      return $cacheFactory('super-cache');
	       *    }]);
	       * ```
	       *
	       * Example test:
	       *
	       * ```js
	       *  it('should behave like a cache', inject(function(superCache) {
	       *    superCache.put('key', 'value');
	       *    superCache.put('another key', 'another value');
	       *
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 2
	       *    });
	       *
	       *    superCache.remove('another key');
	       *    expect(superCache.get('another key')).toBeUndefined();
	       *
	       *    superCache.removeAll();
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 0
	       *    });
	       *  }));
	       * ```
	       */
            return caches[cacheId] = {
              put: function (key, value) {
                if (isUndefined(value))
                  return;
                if (capacity < Number.MAX_VALUE) {
                  var lruEntry = lruHash[key] || (lruHash[key] = { key: key });
                  refresh(lruEntry);
                }
                if (!(key in data))
                  size++;
                data[key] = value;
                if (size > capacity) {
                  this.remove(staleEnd.key);
                }
                return value;
              },
              get: function (key) {
                if (capacity < Number.MAX_VALUE) {
                  var lruEntry = lruHash[key];
                  if (!lruEntry)
                    return;
                  refresh(lruEntry);
                }
                return data[key];
              },
              remove: function (key) {
                if (capacity < Number.MAX_VALUE) {
                  var lruEntry = lruHash[key];
                  if (!lruEntry)
                    return;
                  if (lruEntry == freshEnd)
                    freshEnd = lruEntry.p;
                  if (lruEntry == staleEnd)
                    staleEnd = lruEntry.n;
                  link(lruEntry.n, lruEntry.p);
                  delete lruHash[key];
                }
                delete data[key];
                size--;
              },
              removeAll: function () {
                data = {};
                size = 0;
                lruHash = {};
                freshEnd = staleEnd = null;
              },
              destroy: function () {
                data = null;
                stats = null;
                lruHash = null;
                delete caches[cacheId];
              },
              info: function () {
                return extend({}, stats, { size: size });
              }
            };
            /**
	       * makes the `entry` the freshEnd of the LRU linked list
	       */
            function refresh(entry) {
              if (entry != freshEnd) {
                if (!staleEnd) {
                  staleEnd = entry;
                } else if (staleEnd == entry) {
                  staleEnd = entry.n;
                }
                link(entry.n, entry.p);
                link(entry, freshEnd);
                freshEnd = entry;
                freshEnd.n = null;
              }
            }
            /**
	       * bidirectionally links two entries of the LRU linked list
	       */
            function link(nextEntry, prevEntry) {
              if (nextEntry != prevEntry) {
                if (nextEntry)
                  nextEntry.p = prevEntry;
                //p stands for previous, 'prev' didn't minify
                if (prevEntry)
                  prevEntry.n = nextEntry;  //n stands for next, 'next' didn't minify
              }
            }
          }
          /**
	   * @ngdoc method
	   * @name $cacheFactory#info
	   *
	   * @description
	   * Get information about all the caches that have been created
	   *
	   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
	   */
          cacheFactory.info = function () {
            var info = {};
            forEach(caches, function (cache, cacheId) {
              info[cacheId] = cache.info();
            });
            return info;
          };
          /**
	   * @ngdoc method
	   * @name $cacheFactory#get
	   *
	   * @description
	   * Get access to a cache object by the `cacheId` used when it was created.
	   *
	   * @param {string} cacheId Name or id of a cache to access.
	   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
	   */
          cacheFactory.get = function (cacheId) {
            return caches[cacheId];
          };
          return cacheFactory;
        };
      }
      /**
	 * @ngdoc service
	 * @name $templateCache
	 *
	 * @description
	 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
	 * can load templates directly into the cache in a `script` tag, or by consuming the
	 * `$templateCache` service directly.
	 *
	 * Adding via the `script` tag:
	 *
	 * ```html
	 *   <script type="text/ng-template" id="templateId.html">
	 *     <p>This is the content of the template</p>
	 *   </script>
	 * ```
	 *
	 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
	 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
	 * element with ng-app attribute), otherwise the template will be ignored.
	 *
	 * Adding via the `$templateCache` service:
	 *
	 * ```js
	 * var myApp = angular.module('myApp', []);
	 * myApp.run(function($templateCache) {
	 *   $templateCache.put('templateId.html', 'This is the content of the template');
	 * });
	 * ```
	 *
	 * To retrieve the template later, simply use it in your HTML:
	 * ```html
	 * <div ng-include=" 'templateId.html' "></div>
	 * ```
	 *
	 * or get it via Javascript:
	 * ```js
	 * $templateCache.get('templateId.html')
	 * ```
	 *
	 * See {@link ng.$cacheFactory $cacheFactory}.
	 *
	 */
      function $TemplateCacheProvider() {
        this.$get = [
          '$cacheFactory',
          function ($cacheFactory) {
            return $cacheFactory('templates');
          }
        ];
      }
      /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
      /* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
	 *
	 * DOM-related variables:
	 *
	 * - "node" - DOM Node
	 * - "element" - DOM Element or Node
	 * - "$node" or "$element" - jqLite-wrapped node or element
	 *
	 *
	 * Compiler related stuff:
	 *
	 * - "linkFn" - linking fn of a single directive
	 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
	 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
	 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
	 */
      /**
	 * @ngdoc service
	 * @name $compile
	 * @kind function
	 *
	 * @description
	 * Compiles an HTML string or DOM into a template and produces a template function, which
	 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
	 *
	 * The compilation is a process of walking the DOM tree and matching DOM elements to
	 * {@link ng.$compileProvider#directive directives}.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** This document is an in-depth reference of all directive options.
	 * For a gentle introduction to directives with examples of common use cases,
	 * see the {@link guide/directive directive guide}.
	 * </div>
	 *
	 * ## Comprehensive Directive API
	 *
	 * There are many different options for a directive.
	 *
	 * The difference resides in the return value of the factory function.
	 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
	 * or just the `postLink` function (all other properties will have the default values).
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's recommended to use the "directive definition object" form.
	 * </div>
	 *
	 * Here's an example directive declared with a Directive Definition Object:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       priority: 0,
	 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
	 *       // or
	 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
	 *       transclude: false,
	 *       restrict: 'A',
	 *       templateNamespace: 'html',
	 *       scope: false,
	 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
	 *       controllerAs: 'stringIdentifier',
	 *       bindToController: false,
	 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
	 *       compile: function compile(tElement, tAttrs, transclude) {
	 *         return {
	 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *         }
	 *         // or
	 *         // return function postLink( ... ) { ... }
	 *       },
	 *       // or
	 *       // link: {
	 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *       // }
	 *       // or
	 *       // link: function postLink( ... ) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *   });
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Any unspecified options will use the default value. You can see the default values below.
	 * </div>
	 *
	 * Therefore the above can be simplified as:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       link: function postLink(scope, iElement, iAttrs) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *     // or
	 *     // return function postLink(scope, iElement, iAttrs) { ... }
	 *   });
	 * ```
	 *
	 *
	 *
	 * ### Directive Definition Object
	 *
	 * The directive definition object provides instructions to the {@link ng.$compile
	 * compiler}. The attributes are:
	 *
	 * #### `multiElement`
	 * When this property is set to true, the HTML compiler will collect DOM nodes between
	 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
	 * together as the directive elements. It is recommended that this feature be used on directives
	 * which are not strictly behavioural (such as {@link ngClick}), and which
	 * do not manipulate or replace child nodes (such as {@link ngInclude}).
	 *
	 * #### `priority`
	 * When there are multiple directives defined on a single DOM element, sometimes it
	 * is necessary to specify the order in which the directives are applied. The `priority` is used
	 * to sort the directives before their `compile` functions get called. Priority is defined as a
	 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
	 * are also run in priority order, but post-link functions are run in reverse order. The order
	 * of directives with the same priority is undefined. The default priority is `0`.
	 *
	 * #### `terminal`
	 * If set to true then the current `priority` will be the last set of directives
	 * which will execute (any directives at the current priority will still execute
	 * as the order of execution on same `priority` is undefined). Note that expressions
	 * and other directives used in the directive's template will also be excluded from execution.
	 *
	 * #### `scope`
	 * The scope property can be `true`, an object or a falsy value:
	 *
	 * * **falsy:** No scope will be created for the directive. The directive will use its parent's scope.
	 *
	 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for
	 * the directive's element. If multiple directives on the same element request a new scope,
	 * only one new scope is created. The new scope rule does not apply for the root of the template
	 * since the root of the template always gets a new scope.
	 *
	 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's element. The
	 * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent
	 * scope. This is useful when creating reusable components, which should not accidentally read or modify
	 * data in the parent scope.
	 *
	 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the
	 * directive's element. These local properties are useful for aliasing values for templates. The keys in
	 * the object hash map to the name of the property on the isolate scope; the values define how the property
	 * is bound to the parent scope, via matching attributes on the directive's element:
	 *
	 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
	 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the
	 *   attribute name is assumed to be the same as the local name.
	 *   Given `<widget my-attr="hello {{name}}">` and widget definition
	 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect
	 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the
	 *   `localName` property on the widget scope. The `name` is read from the parent scope (not
	 *   component scope).
	 *
	 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the
	 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`
	 *   name is specified then the attribute name is assumed to be the same as the local name.
	 *   Given `<widget my-attr="parentModel">` and widget definition of
	 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the
	 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
	 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent
	 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You
	 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If
	 *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use
	 *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).
	 *
	 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.
	 *   If no `attr` name is specified then the attribute name is assumed to be the same as the
	 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of
	 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to
	 *   a function wrapper for the `count = count + value` expression. Often it's desirable to
	 *   pass data from the isolated scope via an expression to the parent scope, this can be
	 *   done by passing a map of local variable names and values into the expression wrapper fn.
	 *   For example, if the expression is `increment(amount)` then we can specify the amount value
	 *   by calling the `localFn` as `localFn({amount: 22})`.
	 *
	 * In general it's possible to apply more than one directive to one element, but there might be limitations
	 * depending on the type of scope required by the directives. The following points will help explain these limitations.
	 * For simplicity only two directives are taken into account, but it is also applicable for several directives:
	 *
	 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope
	 * * **child scope** + **no scope** =>  Both directives will share one single child scope
	 * * **child scope** + **child scope** =>  Both directives will share one single child scope
	 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
	 * its parent's scope
	 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
	 * be applied to the same element.
	 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
	 * cannot be applied to the same element.
	 *
	 *
	 * #### `bindToController`
	 * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will
	 * allow a component to have its properties bound to the controller, rather than to scope. When the controller
	 * is instantiated, the initial values of the isolate scope bindings are already available.
	 *
	 * #### `controller`
	 * Controller constructor function. The controller is instantiated before the
	 * pre-linking phase and can be accessed by other directives (see
	 * `require` attribute). This allows the directives to communicate with each other and augment
	 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
	 *
	 * * `$scope` - Current scope associated with the element
	 * * `$element` - Current element
	 * * `$attrs` - Current attributes object for the element
	 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
	 *   `function([scope], cloneLinkingFn, futureParentElement)`.
	 *    * `scope`: optional argument to override the scope.
	 *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.
	 *    * `futureParentElement`:
	 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
	 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
	 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
	 *          and when the `cloneLinkinFn` is passed,
	 *          as those elements need to created and cloned in a special way when they are defined outside their
	 *          usual containers (e.g. like `<svg>`).
	 *        * See also the `directive.templateNamespace` property.
	 *
	 *
	 * #### `require`
	 * Require another directive and inject its controller as the fourth argument to the linking function. The
	 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the
	 * injected argument will be an array in corresponding order. If no such directive can be
	 * found, or if the directive does not have a controller, then an error is raised (unless no link function
	 * is specified, in which case error checking is skipped). The name can be prefixed with:
	 *
	 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
	 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
	 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
	 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
	 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
	 *   `null` to the `link` fn if not found.
	 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
	 *   `null` to the `link` fn if not found.
	 *
	 *
	 * #### `controllerAs`
	 * Identifier name for a reference to the controller in the directive's scope.
	 * This allows the controller to be referenced from the directive template. This is especially
	 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible
	 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the
	 * `controllerAs` reference might overwrite a property that already exists on the parent scope.
	 *
	 *
	 * #### `restrict`
	 * String of subset of `EACM` which restricts the directive to a specific directive
	 * declaration style. If omitted, the defaults (elements and attributes) are used.
	 *
	 * * `E` - Element name (default): `<my-directive></my-directive>`
	 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
	 * * `C` - Class: `<div class="my-directive: exp;"></div>`
	 * * `M` - Comment: `<!-- directive: my-directive exp -->`
	 *
	 *
	 * #### `templateNamespace`
	 * String representing the document type used by the markup in the template.
	 * AngularJS needs this information as those elements need to be created and cloned
	 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
	 *
	 * * `html` - All root nodes in the template are HTML. Root nodes may also be
	 *   top-level elements such as `<svg>` or `<math>`.
	 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
	 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
	 *
	 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
	 *
	 * #### `template`
	 * HTML markup that may:
	 * * Replace the contents of the directive's element (default).
	 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
	 * * Wrap the contents of the directive's element (if `transclude` is true).
	 *
	 * Value may be:
	 *
	 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
	 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
	 *   function api below) and returns a string value.
	 *
	 *
	 * #### `templateUrl`
	 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
	 *
	 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
	 * for later when the template has been resolved.  In the meantime it will continue to compile and link
	 * sibling and parent elements as though this element had not contained any directives.
	 *
	 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
	 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
	 * case when only one deeply nested directive has `templateUrl`.
	 *
	 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
	 *
	 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
	 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
	 * a string value representing the url.  In either case, the template URL is passed through {@link
	 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
	 *
	 *
	 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
	 * specify what the template should replace. Defaults to `false`.
	 *
	 * * `true` - the template will replace the directive's element.
	 * * `false` - the template will replace the contents of the directive's element.
	 *
	 * The replacement process migrates all of the attributes / classes from the old element to the new
	 * one. See the {@link guide/directive#template-expanding-directive
	 * Directives Guide} for an example.
	 *
	 * There are very few scenarios where element replacement is required for the application function,
	 * the main one being reusable custom components that are used within SVG contexts
	 * (because SVG doesn't work with custom elements in the DOM tree).
	 *
	 * #### `transclude`
	 * Extract the contents of the element where the directive appears and make it available to the directive.
	 * The contents are compiled and provided to the directive as a **transclusion function**. See the
	 * {@link $compile#transclusion Transclusion} section below.
	 *
	 * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the
	 * directive's element or the entire element:
	 *
	 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
	 * * `'element'` - transclude the whole of the directive's element including any directives on this
	 *   element that defined at a lower priority than this directive. When used, the `template`
	 *   property is ignored.
	 *
	 *
	 * #### `compile`
	 *
	 * ```js
	 *   function compile(tElement, tAttrs, transclude) { ... }
	 * ```
	 *
	 * The compile function deals with transforming the template DOM. Since most directives do not do
	 * template transformation, it is not used often. The compile function takes the following arguments:
	 *
	 *   * `tElement` - template element - The element where the directive has been declared. It is
	 *     safe to do template transformation on the element and child elements only.
	 *
	 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
	 *     between all directive compile functions.
	 *
	 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
	 *
	 * <div class="alert alert-warning">
	 * **Note:** The template instance and the link instance may be different objects if the template has
	 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
	 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
	 * should be done in a linking function rather than in a compile function.
	 * </div>

	 * <div class="alert alert-warning">
	 * **Note:** The compile function cannot handle directives that recursively use themselves in their
	 * own templates or compile functions. Compiling these directives results in an infinite loop and a
	 * stack overflow errors.
	 *
	 * This can be avoided by manually using $compile in the postLink function to imperatively compile
	 * a directive's template instead of relying on automatic template compilation via `template` or
	 * `templateUrl` declaration or manual compilation inside the compile function.
	 * </div>
	 *
	 * <div class="alert alert-danger">
	 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
	 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
	 *   to the link function instead.
	 * </div>

	 * A compile function can have a return value which can be either a function or an object.
	 *
	 * * returning a (post-link) function - is equivalent to registering the linking function via the
	 *   `link` property of the config object when the compile function is empty.
	 *
	 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
	 *   control when a linking function should be called during the linking phase. See info about
	 *   pre-linking and post-linking functions below.
	 *
	 *
	 * #### `link`
	 * This property is used only if the `compile` property is not defined.
	 *
	 * ```js
	 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
	 * ```
	 *
	 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
	 * executed after the template has been cloned. This is where most of the directive logic will be
	 * put.
	 *
	 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
	 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
	 *
	 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
	 *     manipulate the children of the element only in `postLink` function since the children have
	 *     already been linked.
	 *
	 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
	 *     between all directive linking functions.
	 *
	 *   * `controller` - the directive's required controller instance(s) - Instances are shared
	 *     among all directives, which allows the directives to use the controllers as a communication
	 *     channel. The exact value depends on the directive's `require` property:
	 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
	 *       * `string`: the controller instance
	 *       * `array`: array of controller instances
	 *
	 *     If a required controller cannot be found, and it is optional, the instance is `null`,
	 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
	 *
	 *     Note that you can also require the directive's own controller - it will be made available like
	 *     any other controller.
	 *
	 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
	 *     This is the same as the `$transclude`
	 *     parameter of directive controllers, see there for details.
	 *     `function([scope], cloneLinkingFn, futureParentElement)`.
	 *
	 * #### Pre-linking function
	 *
	 * Executed before the child elements are linked. Not safe to do DOM transformation since the
	 * compiler linking function will fail to locate the correct elements for linking.
	 *
	 * #### Post-linking function
	 *
	 * Executed after the child elements are linked.
	 *
	 * Note that child elements that contain `templateUrl` directives will not have been compiled
	 * and linked since they are waiting for their template to load asynchronously and their own
	 * compilation and linking has been suspended until that occurs.
	 *
	 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
	 * for their async templates to be resolved.
	 *
	 *
	 * ### Transclusion
	 *
	 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and
	 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
	 * scope from where they were taken.
	 *
	 * Transclusion is used (often with {@link ngTransclude}) to insert the
	 * original contents of a directive's element into a specified place in the template of the directive.
	 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
	 * content has access to the properties on the scope from which it was taken, even if the directive
	 * has isolated scope.
	 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
	 *
	 * This makes it possible for the widget to have private state for its template, while the transcluded
	 * content has access to its originating scope.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
	 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
	 * Testing Transclusion Directives}.
	 * </div>
	 *
	 * #### Transclusion Functions
	 *
	 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
	 * function** to the directive's `link` function and `controller`. This transclusion function is a special
	 * **linking function** that will return the compiled contents linked to a new transclusion scope.
	 *
	 * <div class="alert alert-info">
	 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
	 * ngTransclude will deal with it for us.
	 * </div>
	 *
	 * If you want to manually control the insertion and removal of the transcluded content in your directive
	 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
	 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
	 *
	 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
	 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
	 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function
	 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
	 * </div>
	 *
	 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
	 * attach function**:
	 *
	 * ```js
	 * var transcludedContent, transclusionScope;
	 *
	 * $transclude(function(clone, scope) {
	 *   element.append(clone);
	 *   transcludedContent = clone;
	 *   transclusionScope = scope;
	 * });
	 * ```
	 *
	 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
	 * associated transclusion scope:
	 *
	 * ```js
	 * transcludedContent.remove();
	 * transclusionScope.$destroy();
	 * ```
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
	 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
	 * then you are also responsible for calling `$destroy` on the transclusion scope.
	 * </div>
	 *
	 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
	 * automatically destroy their transluded clones as necessary so you do not need to worry about this if
	 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
	 *
	 *
	 * #### Transclusion Scopes
	 *
	 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
	 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
	 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
	 * was taken.
	 *
	 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
	 * like this:
	 *
	 * ```html
	 * <div ng-app>
	 *   <div isolate>
	 *     <div transclusion>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * The `$parent` scope hierarchy will look like this:
	 *
	 * ```
	 * - $rootScope
	 *   - isolate
	 *     - transclusion
	 * ```
	 *
	 * but the scopes will inherit prototypically from different scopes to their `$parent`.
	 *
	 * ```
	 * - $rootScope
	 *   - transclusion
	 * - isolate
	 * ```
	 *
	 *
	 * ### Attributes
	 *
	 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
	 * `link()` or `compile()` functions. It has a variety of uses.
	 *
	 * accessing *Normalized attribute names:*
	 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.
	 * the attributes object allows for normalized access to
	 *   the attributes.
	 *
	 * * *Directive inter-communication:* All directives share the same instance of the attributes
	 *   object which allows the directives to use the attributes object as inter directive
	 *   communication.
	 *
	 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
	 *   allowing other directives to read the interpolated value.
	 *
	 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
	 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
	 *   the only way to easily get the actual value because during the linking phase the interpolation
	 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
	 *
	 * ```js
	 * function linkingFn(scope, elm, attrs, ctrl) {
	 *   // get the attribute value
	 *   console.log(attrs.ngModel);
	 *
	 *   // change the attribute
	 *   attrs.$set('ngModel', 'new value');
	 *
	 *   // observe changes to interpolated attribute
	 *   attrs.$observe('ngModel', function(value) {
	 *     console.log('ngModel has changed value to ' + value);
	 *   });
	 * }
	 * ```
	 *
	 * ## Example
	 *
	 * <div class="alert alert-warning">
	 * **Note**: Typically directives are registered with `module.directive`. The example below is
	 * to illustrate how `$compile` works.
	 * </div>
	 *
	 <example module="compileExample">
	   <file name="index.html">
	    <script>
	      angular.module('compileExample', [], function($compileProvider) {
	        // configure new 'compile' directive by passing a directive
	        // factory function. The factory function injects the '$compile'
	        $compileProvider.directive('compile', function($compile) {
	          // directive factory creates a link function
	          return function(scope, element, attrs) {
	            scope.$watch(
	              function(scope) {
	                 // watch the 'compile' expression for changes
	                return scope.$eval(attrs.compile);
	              },
	              function(value) {
	                // when the 'compile' expression changes
	                // assign it into the current DOM
	                element.html(value);

	                // compile the new DOM and link it to the current
	                // scope.
	                // NOTE: we only compile .childNodes so that
	                // we don't get into infinite loop compiling ourselves
	                $compile(element.contents())(scope);
	              }
	            );
	          };
	        });
	      })
	      .controller('GreeterController', ['$scope', function($scope) {
	        $scope.name = 'Angular';
	        $scope.html = 'Hello {{name}}';
	      }]);
	    </script>
	    <div ng-controller="GreeterController">
	      <input ng-model="name"> <br/>
	      <textarea ng-model="html"></textarea> <br/>
	      <div compile="html"></div>
	    </div>
	   </file>
	   <file name="protractor.js" type="protractor">
	     it('should auto compile', function() {
	       var textarea = $('textarea');
	       var output = $('div[compile]');
	       // The initial state reads 'Hello Angular'.
	       expect(output.getText()).toBe('Hello Angular');
	       textarea.clear();
	       textarea.sendKeys('{{name}}!');
	       expect(output.getText()).toBe('Angular!');
	     });
	   </file>
	 </example>

	 *
	 *
	 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
	 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
	 *
	 * <div class="alert alert-danger">
	 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
	 *   e.g. will not use the right outer scope. Please pass the transclude function as a
	 *   `parentBoundTranscludeFn` to the link function instead.
	 * </div>
	 *
	 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
	 *                 root element(s), not their children)
	 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
	 * (a DOM element/tree) to a scope. Where:
	 *
	 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
	 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
	 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
	 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
	 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
	 *
	 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
	 *      * `scope` - is the current scope with which the linking function is working with.
	 *
	 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
	 *  keys may be used to control linking behavior:
	 *
	 *      * `parentBoundTranscludeFn` - the transclude function made available to
	 *        directives; if given, it will be passed through to the link functions of
	 *        directives found in `element` during compilation.
	 *      * `transcludeControllers` - an object hash with keys that map controller names
	 *        to controller instances; if given, it will make the controllers
	 *        available to directives.
	 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
	 *        the cloned elements; only needed for transcludes that are allowed to contain non html
	 *        elements (e.g. SVG elements). See also the directive.controller property.
	 *
	 * Calling the linking function returns the element of the template. It is either the original
	 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
	 *
	 * After linking the view is not updated until after a call to $digest which typically is done by
	 * Angular automatically.
	 *
	 * If you need access to the bound view, there are two ways to do it:
	 *
	 * - If you are not asking the linking function to clone the template, create the DOM element(s)
	 *   before you send them to the compiler and keep this reference around.
	 *   ```js
	 *     var element = $compile('<p>{{total}}</p>')(scope);
	 *   ```
	 *
	 * - if on the other hand, you need the element to be cloned, the view reference from the original
	 *   example would not point to the clone, but rather to the original template that was cloned. In
	 *   this case, you can access the clone via the cloneAttachFn:
	 *   ```js
	 *     var templateElement = angular.element('<p>{{total}}</p>'),
	 *         scope = ....;
	 *
	 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
	 *       //attach the clone to DOM document at the right place
	 *     });
	 *
	 *     //now we have reference to the cloned DOM via `clonedElement`
	 *   ```
	 *
	 *
	 * For information on how the compiler works, see the
	 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
	 */
      var $compileMinErr = minErr('$compile');
      /**
	 * @ngdoc provider
	 * @name $compileProvider
	 *
	 * @description
	 */
      $CompileProvider.$inject = [
        '$provide',
        '$$sanitizeUriProvider'
      ];
      function $CompileProvider($provide, $$sanitizeUriProvider) {
        var hasDirectives = {}, Suffix = 'Directive', COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/, CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/, ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'), REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;
        // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
        // The assumption is that future DOM event attribute names will begin with
        // 'on' and be composed of only English letters.
        var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
        function parseIsolateBindings(scope, directiveName, isController) {
          var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/;
          var bindings = {};
          forEach(scope, function (definition, scopeName) {
            var match = definition.match(LOCAL_REGEXP);
            if (!match) {
              throw $compileMinErr('iscp', 'Invalid {3} for directive \'{0}\'.' + ' Definition: {... {1}: \'{2}\' ...}', directiveName, scopeName, definition, isController ? 'controller bindings definition' : 'isolate scope definition');
            }
            bindings[scopeName] = {
              mode: match[1][0],
              collection: match[2] === '*',
              optional: match[3] === '?',
              attrName: match[4] || scopeName
            };
          });
          return bindings;
        }
        function parseDirectiveBindings(directive, directiveName) {
          var bindings = {
              isolateScope: null,
              bindToController: null
            };
          if (isObject(directive.scope)) {
            if (directive.bindToController === true) {
              bindings.bindToController = parseIsolateBindings(directive.scope, directiveName, true);
              bindings.isolateScope = {};
            } else {
              bindings.isolateScope = parseIsolateBindings(directive.scope, directiveName, false);
            }
          }
          if (isObject(directive.bindToController)) {
            bindings.bindToController = parseIsolateBindings(directive.bindToController, directiveName, true);
          }
          if (isObject(bindings.bindToController)) {
            var controller = directive.controller;
            var controllerAs = directive.controllerAs;
            if (!controller) {
              // There is no controller, there may or may not be a controllerAs property
              throw $compileMinErr('noctrl', 'Cannot bind to controller without directive \'{0}\'s controller.', directiveName);
            } else if (!identifierForController(controller, controllerAs)) {
              // There is a controller, but no identifier or controllerAs property
              throw $compileMinErr('noident', 'Cannot bind to controller without identifier for directive \'{0}\'.', directiveName);
            }
          }
          return bindings;
        }
        function assertValidDirectiveName(name) {
          var letter = name.charAt(0);
          if (!letter || letter !== lowercase(letter)) {
            throw $compileMinErr('baddir', 'Directive name \'{0}\' is invalid. The first character must be a lowercase letter', name);
          }
          if (name !== name.trim()) {
            throw $compileMinErr('baddir', 'Directive name \'{0}\' is invalid. The name should not contain leading or trailing whitespaces', name);
          }
        }
        /**
	   * @ngdoc method
	   * @name $compileProvider#directive
	   * @kind function
	   *
	   * @description
	   * Register a new directive with the compiler.
	   *
	   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
	   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
	   *    names and the values are the factories.
	   * @param {Function|Array} directiveFactory An injectable directive factory function. See
	   *    {@link guide/directive} for more info.
	   * @returns {ng.$compileProvider} Self for chaining.
	   */
        this.directive = function registerDirective(name, directiveFactory) {
          assertNotHasOwnProperty(name, 'directive');
          if (isString(name)) {
            assertValidDirectiveName(name);
            assertArg(directiveFactory, 'directiveFactory');
            if (!hasDirectives.hasOwnProperty(name)) {
              hasDirectives[name] = [];
              $provide.factory(name + Suffix, [
                '$injector',
                '$exceptionHandler',
                function ($injector, $exceptionHandler) {
                  var directives = [];
                  forEach(hasDirectives[name], function (directiveFactory, index) {
                    try {
                      var directive = $injector.invoke(directiveFactory);
                      if (isFunction(directive)) {
                        directive = { compile: valueFn(directive) };
                      } else if (!directive.compile && directive.link) {
                        directive.compile = valueFn(directive.link);
                      }
                      directive.priority = directive.priority || 0;
                      directive.index = index;
                      directive.name = directive.name || name;
                      directive.require = directive.require || directive.controller && directive.name;
                      directive.restrict = directive.restrict || 'EA';
                      var bindings = directive.$$bindings = parseDirectiveBindings(directive, directive.name);
                      if (isObject(bindings.isolateScope)) {
                        directive.$$isolateBindings = bindings.isolateScope;
                      }
                      directive.$$moduleName = directiveFactory.$$moduleName;
                      directives.push(directive);
                    } catch (e) {
                      $exceptionHandler(e);
                    }
                  });
                  return directives;
                }
              ]);
            }
            hasDirectives[name].push(directiveFactory);
          } else {
            forEach(name, reverseParams(registerDirective));
          }
          return this;
        };
        /**
	   * @ngdoc method
	   * @name $compileProvider#aHrefSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
        this.aHrefSanitizationWhitelist = function (regexp) {
          if (isDefined(regexp)) {
            $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
            return this;
          } else {
            return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
          }
        };
        /**
	   * @ngdoc method
	   * @name $compileProvider#imgSrcSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
        this.imgSrcSanitizationWhitelist = function (regexp) {
          if (isDefined(regexp)) {
            $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
            return this;
          } else {
            return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
          }
        };
        /**
	   * @ngdoc method
	   * @name  $compileProvider#debugInfoEnabled
	   *
	   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
	   * current debugInfoEnabled state
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   *
	   * @kind function
	   *
	   * @description
	   * Call this method to enable/disable various debug runtime information in the compiler such as adding
	   * binding information and a reference to the current scope on to DOM elements.
	   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
	   * * `ng-binding` CSS class
	   * * `$binding` data property containing an array of the binding expressions
	   *
	   * You may want to disable this in production for a significant performance boost. See
	   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
	   *
	   * The default value is true.
	   */
        var debugInfoEnabled = true;
        this.debugInfoEnabled = function (enabled) {
          if (isDefined(enabled)) {
            debugInfoEnabled = enabled;
            return this;
          }
          return debugInfoEnabled;
        };
        this.$get = [
          '$injector',
          '$interpolate',
          '$exceptionHandler',
          '$templateRequest',
          '$parse',
          '$controller',
          '$rootScope',
          '$document',
          '$sce',
          '$animate',
          '$$sanitizeUri',
          function ($injector, $interpolate, $exceptionHandler, $templateRequest, $parse, $controller, $rootScope, $document, $sce, $animate, $$sanitizeUri) {
            var Attributes = function (element, attributesToCopy) {
              if (attributesToCopy) {
                var keys = Object.keys(attributesToCopy);
                var i, l, key;
                for (i = 0, l = keys.length; i < l; i++) {
                  key = keys[i];
                  this[key] = attributesToCopy[key];
                }
              } else {
                this.$attr = {};
              }
              this.$$element = element;
            };
            Attributes.prototype = {
              $normalize: directiveNormalize,
              $addClass: function (classVal) {
                if (classVal && classVal.length > 0) {
                  $animate.addClass(this.$$element, classVal);
                }
              },
              $removeClass: function (classVal) {
                if (classVal && classVal.length > 0) {
                  $animate.removeClass(this.$$element, classVal);
                }
              },
              $updateClass: function (newClasses, oldClasses) {
                var toAdd = tokenDifference(newClasses, oldClasses);
                if (toAdd && toAdd.length) {
                  $animate.addClass(this.$$element, toAdd);
                }
                var toRemove = tokenDifference(oldClasses, newClasses);
                if (toRemove && toRemove.length) {
                  $animate.removeClass(this.$$element, toRemove);
                }
              },
              $set: function (key, value, writeAttr, attrName) {
                // TODO: decide whether or not to throw an error if "class"
                //is set through this function since it may cause $updateClass to
                //become unstable.
                var node = this.$$element[0], booleanKey = getBooleanAttrName(node, key), aliasedKey = getAliasedAttrName(key), observer = key, nodeName;
                if (booleanKey) {
                  this.$$element.prop(key, value);
                  attrName = booleanKey;
                } else if (aliasedKey) {
                  this[aliasedKey] = value;
                  observer = aliasedKey;
                }
                this[key] = value;
                // translate normalized key to actual key
                if (attrName) {
                  this.$attr[key] = attrName;
                } else {
                  attrName = this.$attr[key];
                  if (!attrName) {
                    this.$attr[key] = attrName = snake_case(key, '-');
                  }
                }
                nodeName = nodeName_(this.$$element);
                if (nodeName === 'a' && key === 'href' || nodeName === 'img' && key === 'src') {
                  // sanitize a[href] and img[src] values
                  this[key] = value = $$sanitizeUri(value, key === 'src');
                } else if (nodeName === 'img' && key === 'srcset') {
                  // sanitize img[srcset] values
                  var result = '';
                  // first check if there are spaces because it's not the same pattern
                  var trimmedSrcset = trim(value);
                  //                (   999x   ,|   999w   ,|   ,|,   )
                  var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
                  var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;
                  // split srcset into tuple of uri and descriptor except for the last item
                  var rawUris = trimmedSrcset.split(pattern);
                  // for each tuples
                  var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
                  for (var i = 0; i < nbrUrisWith2parts; i++) {
                    var innerIdx = i * 2;
                    // sanitize the uri
                    result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
                    // add the descriptor
                    result += ' ' + trim(rawUris[innerIdx + 1]);
                  }
                  // split the last item into uri and descriptor
                  var lastTuple = trim(rawUris[i * 2]).split(/\s/);
                  // sanitize the last uri
                  result += $$sanitizeUri(trim(lastTuple[0]), true);
                  // and add the last descriptor if any
                  if (lastTuple.length === 2) {
                    result += ' ' + trim(lastTuple[1]);
                  }
                  this[key] = value = result;
                }
                if (writeAttr !== false) {
                  if (value === null || isUndefined(value)) {
                    this.$$element.removeAttr(attrName);
                  } else {
                    this.$$element.attr(attrName, value);
                  }
                }
                // fire observers
                var $$observers = this.$$observers;
                $$observers && forEach($$observers[observer], function (fn) {
                  try {
                    fn(value);
                  } catch (e) {
                    $exceptionHandler(e);
                  }
                });
              },
              $observe: function (key, fn) {
                var attrs = this, $$observers = attrs.$$observers || (attrs.$$observers = createMap()), listeners = $$observers[key] || ($$observers[key] = []);
                listeners.push(fn);
                $rootScope.$evalAsync(function () {
                  if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {
                    // no one registered attribute interpolation function, so lets call it manually
                    fn(attrs[key]);
                  }
                });
                return function () {
                  arrayRemove(listeners, fn);
                };
              }
            };
            function safeAddClass($element, className) {
              try {
                $element.addClass(className);
              } catch (e) {
              }
            }
            var startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), denormalizeTemplate = startSymbol == '{{' || endSymbol == '}}' ? identity : function denormalizeTemplate(template) {
                return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
              }, NG_ATTR_BINDING = /^ngAttr[A-Z]/;
            compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
              var bindings = $element.data('$binding') || [];
              if (isArray(binding)) {
                bindings = bindings.concat(binding);
              } else {
                bindings.push(binding);
              }
              $element.data('$binding', bindings);
            } : noop;
            compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
              safeAddClass($element, 'ng-binding');
            } : noop;
            compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
              var dataName = isolated ? noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope' : '$scope';
              $element.data(dataName, scope);
            } : noop;
            compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
              safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
            } : noop;
            return compile;
            //================================
            function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
              if (!($compileNodes instanceof jqLite)) {
                // jquery always rewraps, whereas we need to preserve the original selector so that we can
                // modify it.
                $compileNodes = jqLite($compileNodes);
              }
              // We can not compile top level text elements since text nodes can be merged and we will
              // not be able to attach scope data to them, so we will wrap them in <span>
              forEach($compileNodes, function (node, index) {
                if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/)) {
                  $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];
                }
              });
              var compositeLinkFn = compileNodes($compileNodes, transcludeFn, $compileNodes, maxPriority, ignoreDirective, previousCompileContext);
              compile.$$addScopeClass($compileNodes);
              var namespace = null;
              return function publicLinkFn(scope, cloneConnectFn, options) {
                assertArg(scope, 'scope');
                options = options || {};
                var parentBoundTranscludeFn = options.parentBoundTranscludeFn, transcludeControllers = options.transcludeControllers, futureParentElement = options.futureParentElement;
                // When `parentBoundTranscludeFn` is passed, it is a
                // `controllersBoundTransclude` function (it was previously passed
                // as `transclude` to directive.link) so we must unwrap it to get
                // its `boundTranscludeFn`
                if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
                  parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
                }
                if (!namespace) {
                  namespace = detectNamespaceForChildElements(futureParentElement);
                }
                var $linkNode;
                if (namespace !== 'html') {
                  // When using a directive with replace:true and templateUrl the $compileNodes
                  // (or a child element inside of them)
                  // might change, so we need to recreate the namespace adapted compileNodes
                  // for call to the link function.
                  // Note: This will already clone the nodes...
                  $linkNode = jqLite(wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html()));
                } else if (cloneConnectFn) {
                  // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
                  // and sometimes changes the structure of the DOM.
                  $linkNode = JQLitePrototype.clone.call($compileNodes);
                } else {
                  $linkNode = $compileNodes;
                }
                if (transcludeControllers) {
                  for (var controllerName in transcludeControllers) {
                    $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
                  }
                }
                compile.$$addScopeInfo($linkNode, scope);
                if (cloneConnectFn)
                  cloneConnectFn($linkNode, scope);
                if (compositeLinkFn)
                  compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
                return $linkNode;
              };
            }
            function detectNamespaceForChildElements(parentElement) {
              // TODO: Make this detect MathML as well...
              var node = parentElement && parentElement[0];
              if (!node) {
                return 'html';
              } else {
                return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';
              }
            }
            /**
	     * Compile function matches each node in nodeList against the directives. Once all directives
	     * for a particular node are collected their compile functions are executed. The compile
	     * functions return values - the linking functions - are combined into a composite linking
	     * function, which is the a linking function for the node.
	     *
	     * @param {NodeList} nodeList an array of nodes or NodeList to compile
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *        scope argument is auto-generated to the new child of the transcluded parent scope.
	     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
	     *        the rootElement must be set the jqLite collection of the compile root. This is
	     *        needed so that the jqLite collection items can be replaced with widgets.
	     * @param {number=} maxPriority Max directive priority.
	     * @returns {Function} A composite linking function of all of the matched directives or null.
	     */
            function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective, previousCompileContext) {
              var linkFns = [], attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;
              for (var i = 0; i < nodeList.length; i++) {
                attrs = new Attributes();
                // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
                directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined, ignoreDirective);
                nodeLinkFn = directives.length ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement, null, [], [], previousCompileContext) : null;
                if (nodeLinkFn && nodeLinkFn.scope) {
                  compile.$$addScopeClass(attrs.$$element);
                }
                childLinkFn = nodeLinkFn && nodeLinkFn.terminal || !(childNodes = nodeList[i].childNodes) || !childNodes.length ? null : compileNodes(childNodes, nodeLinkFn ? (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement) && nodeLinkFn.transclude : transcludeFn);
                if (nodeLinkFn || childLinkFn) {
                  linkFns.push(i, nodeLinkFn, childLinkFn);
                  linkFnFound = true;
                  nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
                }
                //use the previous context only for the first element in the virtual group
                previousCompileContext = null;
              }
              // return a linking function if we have found anything, null otherwise
              return linkFnFound ? compositeLinkFn : null;
              function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
                var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
                var stableNodeList;
                if (nodeLinkFnFound) {
                  // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
                  // offsets don't get screwed up
                  var nodeListLength = nodeList.length;
                  stableNodeList = new Array(nodeListLength);
                  // create a sparse array by only copying the elements which have a linkFn
                  for (i = 0; i < linkFns.length; i += 3) {
                    idx = linkFns[i];
                    stableNodeList[idx] = nodeList[idx];
                  }
                } else {
                  stableNodeList = nodeList;
                }
                for (i = 0, ii = linkFns.length; i < ii;) {
                  node = stableNodeList[linkFns[i++]];
                  nodeLinkFn = linkFns[i++];
                  childLinkFn = linkFns[i++];
                  if (nodeLinkFn) {
                    if (nodeLinkFn.scope) {
                      childScope = scope.$new();
                      compile.$$addScopeInfo(jqLite(node), childScope);
                      var destroyBindings = nodeLinkFn.$$destroyBindings;
                      if (destroyBindings) {
                        nodeLinkFn.$$destroyBindings = null;
                        childScope.$on('$destroyed', destroyBindings);
                      }
                    } else {
                      childScope = scope;
                    }
                    if (nodeLinkFn.transcludeOnThisElement) {
                      childBoundTranscludeFn = createBoundTranscludeFn(scope, nodeLinkFn.transclude, parentBoundTranscludeFn);
                    } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
                      childBoundTranscludeFn = parentBoundTranscludeFn;
                    } else if (!parentBoundTranscludeFn && transcludeFn) {
                      childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);
                    } else {
                      childBoundTranscludeFn = null;
                    }
                    nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn, nodeLinkFn);
                  } else if (childLinkFn) {
                    childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
                  }
                }
              }
            }
            function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {
              var boundTranscludeFn = function (transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {
                if (!transcludedScope) {
                  transcludedScope = scope.$new(false, containingScope);
                  transcludedScope.$$transcluded = true;
                }
                return transcludeFn(transcludedScope, cloneFn, {
                  parentBoundTranscludeFn: previousBoundTranscludeFn,
                  transcludeControllers: controllers,
                  futureParentElement: futureParentElement
                });
              };
              return boundTranscludeFn;
            }
            /**
	     * Looks for directives on the given node and adds them to the directive collection which is
	     * sorted.
	     *
	     * @param node Node to search.
	     * @param directives An array to which the directives are added to. This array is sorted before
	     *        the function returns.
	     * @param attrs The shared attrs object which is used to populate the normalized attributes.
	     * @param {number=} maxPriority Max directive priority.
	     */
            function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
              var nodeType = node.nodeType, attrsMap = attrs.$attr, match, className;
              switch (nodeType) {
              case NODE_TYPE_ELEMENT:
                /* Element */
                // use the node name: <directive>
                addDirective(directives, directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);
                // iterate over the attributes
                for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes, j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
                  var attrStartName = false;
                  var attrEndName = false;
                  attr = nAttrs[j];
                  name = attr.name;
                  value = trim(attr.value);
                  // support ngAttr attribute binding
                  ngAttrName = directiveNormalize(name);
                  if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
                    name = name.replace(PREFIX_REGEXP, '').substr(8).replace(/_(.)/g, function (match, letter) {
                      return letter.toUpperCase();
                    });
                  }
                  var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
                  if (directiveIsMultiElement(directiveNName)) {
                    if (ngAttrName === directiveNName + 'Start') {
                      attrStartName = name;
                      attrEndName = name.substr(0, name.length - 5) + 'end';
                      name = name.substr(0, name.length - 6);
                    }
                  }
                  nName = directiveNormalize(name.toLowerCase());
                  attrsMap[nName] = name;
                  if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                    attrs[nName] = value;
                    if (getBooleanAttrName(node, nName)) {
                      attrs[nName] = true;  // presence means true
                    }
                  }
                  addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
                  addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName, attrEndName);
                }
                // use class as directive
                className = node.className;
                if (isObject(className)) {
                  // Maybe SVGAnimatedString
                  className = className.animVal;
                }
                if (isString(className) && className !== '') {
                  while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
                    nName = directiveNormalize(match[2]);
                    if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                      attrs[nName] = trim(match[3]);
                    }
                    className = className.substr(match.index + match[0].length);
                  }
                }
                break;
              case NODE_TYPE_TEXT:
                /* Text Node */
                if (msie === 11) {
                  // Workaround for #11781
                  while (node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT) {
                    node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;
                    node.parentNode.removeChild(node.nextSibling);
                  }
                }
                addTextInterpolateDirective(directives, node.nodeValue);
                break;
              case NODE_TYPE_COMMENT:
                /* Comment */
                try {
                  match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
                  if (match) {
                    nName = directiveNormalize(match[1]);
                    if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                      attrs[nName] = trim(match[2]);
                    }
                  }
                } catch (e) {
                }
                break;
              }
              directives.sort(byPriority);
              return directives;
            }
            /**
	     * Given a node with an directive-start it collects all of the siblings until it finds
	     * directive-end.
	     * @param node
	     * @param attrStart
	     * @param attrEnd
	     * @returns {*}
	     */
            function groupScan(node, attrStart, attrEnd) {
              var nodes = [];
              var depth = 0;
              if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
                do {
                  if (!node) {
                    throw $compileMinErr('uterdir', 'Unterminated attribute, found \'{0}\' but no matching \'{1}\' found.', attrStart, attrEnd);
                  }
                  if (node.nodeType == NODE_TYPE_ELEMENT) {
                    if (node.hasAttribute(attrStart))
                      depth++;
                    if (node.hasAttribute(attrEnd))
                      depth--;
                  }
                  nodes.push(node);
                  node = node.nextSibling;
                } while (depth > 0);
              } else {
                nodes.push(node);
              }
              return jqLite(nodes);
            }
            /**
	     * Wrapper for linking function which converts normal linking function into a grouped
	     * linking function.
	     * @param linkFn
	     * @param attrStart
	     * @param attrEnd
	     * @returns {Function}
	     */
            function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
              return function (scope, element, attrs, controllers, transcludeFn) {
                element = groupScan(element[0], attrStart, attrEnd);
                return linkFn(scope, element, attrs, controllers, transcludeFn);
              };
            }
            /**
	     * Once the directives have been collected, their compile functions are executed. This method
	     * is responsible for inlining directive templates as well as terminating the application
	     * of the directives if the terminal directive has been reached.
	     *
	     * @param {Array} directives Array of collected directives to execute their compile function.
	     *        this needs to be pre-sorted by priority order.
	     * @param {Node} compileNode The raw DOM node to apply the compile functions to
	     * @param {Object} templateAttrs The shared attribute function
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *                                                  scope argument is auto-generated to the new
	     *                                                  child of the transcluded parent scope.
	     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
	     *                              argument has the root jqLite array so that we can replace nodes
	     *                              on it.
	     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
	     *                                           compiling the transclusion.
	     * @param {Array.<Function>} preLinkFns
	     * @param {Array.<Function>} postLinkFns
	     * @param {Object} previousCompileContext Context used for previous compilation of the current
	     *                                        node
	     * @returns {Function} linkFn
	     */
            function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn, jqCollection, originalReplaceDirective, preLinkFns, postLinkFns, previousCompileContext) {
              previousCompileContext = previousCompileContext || {};
              var terminalPriority = -Number.MAX_VALUE, newScopeDirective = previousCompileContext.newScopeDirective, controllerDirectives = previousCompileContext.controllerDirectives, newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective, templateDirective = previousCompileContext.templateDirective, nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective, hasTranscludeDirective = false, hasTemplate = false, hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective, $compileNode = templateAttrs.$$element = jqLite(compileNode), directive, directiveName, $template, replaceDirective = originalReplaceDirective, childTranscludeFn = transcludeFn, linkFn, directiveValue;
              // executes all directives on the current element
              for (var i = 0, ii = directives.length; i < ii; i++) {
                directive = directives[i];
                var attrStart = directive.$$start;
                var attrEnd = directive.$$end;
                // collect multiblock sections
                if (attrStart) {
                  $compileNode = groupScan(compileNode, attrStart, attrEnd);
                }
                $template = undefined;
                if (terminalPriority > directive.priority) {
                  break;  // prevent further processing of directives
                }
                if (directiveValue = directive.scope) {
                  // skip the check for directives with async templates, we'll check the derived sync
                  // directive when the template arrives
                  if (!directive.templateUrl) {
                    if (isObject(directiveValue)) {
                      // This directive is trying to add an isolated scope.
                      // Check that there is no scope of any kind already
                      assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective, directive, $compileNode);
                      newIsolateScopeDirective = directive;
                    } else {
                      // This directive is trying to add a child scope.
                      // Check that there is no isolated scope already
                      assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive, $compileNode);
                    }
                  }
                  newScopeDirective = newScopeDirective || directive;
                }
                directiveName = directive.name;
                if (!directive.templateUrl && directive.controller) {
                  directiveValue = directive.controller;
                  controllerDirectives = controllerDirectives || createMap();
                  assertNoDuplicate('\'' + directiveName + '\' controller', controllerDirectives[directiveName], directive, $compileNode);
                  controllerDirectives[directiveName] = directive;
                }
                if (directiveValue = directive.transclude) {
                  hasTranscludeDirective = true;
                  // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
                  // This option should only be used by directives that know how to safely handle element transclusion,
                  // where the transcluded nodes are added or replaced after linking.
                  if (!directive.$$tlb) {
                    assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
                    nonTlbTranscludeDirective = directive;
                  }
                  if (directiveValue == 'element') {
                    hasElementTranscludeDirective = true;
                    terminalPriority = directive.priority;
                    $template = $compileNode;
                    $compileNode = templateAttrs.$$element = jqLite(document.createComment(' ' + directiveName + ': ' + templateAttrs[directiveName] + ' '));
                    compileNode = $compileNode[0];
                    replaceWith(jqCollection, sliceArgs($template), compileNode);
                    childTranscludeFn = compile($template, transcludeFn, terminalPriority, replaceDirective && replaceDirective.name, { nonTlbTranscludeDirective: nonTlbTranscludeDirective });
                  } else {
                    $template = jqLite(jqLiteClone(compileNode)).contents();
                    $compileNode.empty();
                    // clear contents
                    childTranscludeFn = compile($template, transcludeFn);
                  }
                }
                if (directive.template) {
                  hasTemplate = true;
                  assertNoDuplicate('template', templateDirective, directive, $compileNode);
                  templateDirective = directive;
                  directiveValue = isFunction(directive.template) ? directive.template($compileNode, templateAttrs) : directive.template;
                  directiveValue = denormalizeTemplate(directiveValue);
                  if (directive.replace) {
                    replaceDirective = directive;
                    if (jqLiteIsTextNode(directiveValue)) {
                      $template = [];
                    } else {
                      $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
                    }
                    compileNode = $template[0];
                    if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
                      throw $compileMinErr('tplrt', 'Template for directive \'{0}\' must have exactly one root element. {1}', directiveName, '');
                    }
                    replaceWith(jqCollection, $compileNode, compileNode);
                    var newTemplateAttrs = { $attr: {} };
                    // combine directives from the original node and from the template:
                    // - take the array of directives for this element
                    // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
                    // - collect directives from the template and sort them by priority
                    // - combine directives as: processed + template + unprocessed
                    var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
                    var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));
                    if (newIsolateScopeDirective) {
                      markDirectivesAsIsolate(templateDirectives);
                    }
                    directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
                    mergeTemplateAttributes(templateAttrs, newTemplateAttrs);
                    ii = directives.length;
                  } else {
                    $compileNode.html(directiveValue);
                  }
                }
                if (directive.templateUrl) {
                  hasTemplate = true;
                  assertNoDuplicate('template', templateDirective, directive, $compileNode);
                  templateDirective = directive;
                  if (directive.replace) {
                    replaceDirective = directive;
                  }
                  nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode, templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                    controllerDirectives: controllerDirectives,
                    newScopeDirective: newScopeDirective !== directive && newScopeDirective,
                    newIsolateScopeDirective: newIsolateScopeDirective,
                    templateDirective: templateDirective,
                    nonTlbTranscludeDirective: nonTlbTranscludeDirective
                  });
                  ii = directives.length;
                } else if (directive.compile) {
                  try {
                    linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
                    if (isFunction(linkFn)) {
                      addLinkFns(null, linkFn, attrStart, attrEnd);
                    } else if (linkFn) {
                      addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
                    }
                  } catch (e) {
                    $exceptionHandler(e, startingTag($compileNode));
                  }
                }
                if (directive.terminal) {
                  nodeLinkFn.terminal = true;
                  terminalPriority = Math.max(terminalPriority, directive.priority);
                }
              }
              nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
              nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
              nodeLinkFn.templateOnThisElement = hasTemplate;
              nodeLinkFn.transclude = childTranscludeFn;
              previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;
              // might be normal or delayed nodeLinkFn depending on if templateUrl is present
              return nodeLinkFn;
              ////////////////////
              function addLinkFns(pre, post, attrStart, attrEnd) {
                if (pre) {
                  if (attrStart)
                    pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
                  pre.require = directive.require;
                  pre.directiveName = directiveName;
                  if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                    pre = cloneAndAnnotateFn(pre, { isolateScope: true });
                  }
                  preLinkFns.push(pre);
                }
                if (post) {
                  if (attrStart)
                    post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
                  post.require = directive.require;
                  post.directiveName = directiveName;
                  if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                    post = cloneAndAnnotateFn(post, { isolateScope: true });
                  }
                  postLinkFns.push(post);
                }
              }
              function getControllers(directiveName, require, $element, elementControllers) {
                var value;
                if (isString(require)) {
                  var match = require.match(REQUIRE_PREFIX_REGEXP);
                  var name = require.substring(match[0].length);
                  var inheritType = match[1] || match[3];
                  var optional = match[2] === '?';
                  //If only parents then start at the parent element
                  if (inheritType === '^^') {
                    $element = $element.parent();  //Otherwise attempt getting the controller from elementControllers in case
                                                   //the element is transcluded (and has no data) and to avoid .data if possible
                  } else {
                    value = elementControllers && elementControllers[name];
                    value = value && value.instance;
                  }
                  if (!value) {
                    var dataName = '$' + name + 'Controller';
                    value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
                  }
                  if (!value && !optional) {
                    throw $compileMinErr('ctreq', 'Controller \'{0}\', required by directive \'{1}\', can\'t be found!', name, directiveName);
                  }
                } else if (isArray(require)) {
                  value = [];
                  for (var i = 0, ii = require.length; i < ii; i++) {
                    value[i] = getControllers(directiveName, require[i], $element, elementControllers);
                  }
                }
                return value || null;
              }
              function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope) {
                var elementControllers = createMap();
                for (var controllerKey in controllerDirectives) {
                  var directive = controllerDirectives[controllerKey];
                  var locals = {
                      $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
                      $element: $element,
                      $attrs: attrs,
                      $transclude: transcludeFn
                    };
                  var controller = directive.controller;
                  if (controller == '@') {
                    controller = attrs[directive.name];
                  }
                  var controllerInstance = $controller(controller, locals, true, directive.controllerAs);
                  // For directives with element transclusion the element is a comment,
                  // but jQuery .data doesn't support attaching data to comment nodes as it's hard to
                  // clean up (http://bugs.jquery.com/ticket/8335).
                  // Instead, we save the controllers for the element in a local hash and attach to .data
                  // later, once we have the actual element.
                  elementControllers[directive.name] = controllerInstance;
                  if (!hasElementTranscludeDirective) {
                    $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
                  }
                }
                return elementControllers;
              }
              function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn, thisLinkFn) {
                var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element, attrs;
                if (compileNode === linkNode) {
                  attrs = templateAttrs;
                  $element = templateAttrs.$$element;
                } else {
                  $element = jqLite(linkNode);
                  attrs = new Attributes($element, templateAttrs);
                }
                if (newIsolateScopeDirective) {
                  isolateScope = scope.$new(true);
                }
                if (boundTranscludeFn) {
                  // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
                  // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
                  transcludeFn = controllersBoundTransclude;
                  transcludeFn.$$boundTransclude = boundTranscludeFn;
                }
                if (controllerDirectives) {
                  elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope);
                }
                if (newIsolateScopeDirective) {
                  // Initialize isolate scope bindings for new isolate scope directive.
                  compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective || templateDirective === newIsolateScopeDirective.$$originalDirective)));
                  compile.$$addScopeClass($element, true);
                  isolateScope.$$isolateBindings = newIsolateScopeDirective.$$isolateBindings;
                  initializeDirectiveBindings(scope, attrs, isolateScope, isolateScope.$$isolateBindings, newIsolateScopeDirective, isolateScope);
                }
                if (elementControllers) {
                  // Initialize bindToController bindings for new/isolate scopes
                  var scopeDirective = newIsolateScopeDirective || newScopeDirective;
                  var bindings;
                  var controllerForBindings;
                  if (scopeDirective && elementControllers[scopeDirective.name]) {
                    bindings = scopeDirective.$$bindings.bindToController;
                    controller = elementControllers[scopeDirective.name];
                    if (controller && controller.identifier && bindings) {
                      controllerForBindings = controller;
                      thisLinkFn.$$destroyBindings = initializeDirectiveBindings(scope, attrs, controller.instance, bindings, scopeDirective);
                    }
                  }
                  for (i in elementControllers) {
                    controller = elementControllers[i];
                    var controllerResult = controller();
                    if (controllerResult !== controller.instance) {
                      // If the controller constructor has a return value, overwrite the instance
                      // from setupControllers and update the element data
                      controller.instance = controllerResult;
                      $element.data('$' + i + 'Controller', controllerResult);
                      if (controller === controllerForBindings) {
                        // Remove and re-install bindToController bindings
                        thisLinkFn.$$destroyBindings();
                        thisLinkFn.$$destroyBindings = initializeDirectiveBindings(scope, attrs, controllerResult, bindings, scopeDirective);
                      }
                    }
                  }
                }
                // PRELINKING
                for (i = 0, ii = preLinkFns.length; i < ii; i++) {
                  linkFn = preLinkFns[i];
                  invokeLinkFn(linkFn, linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
                }
                // RECURSION
                // We only pass the isolate scope, if the isolate directive has a template,
                // otherwise the child elements do not belong to the isolate directive.
                var scopeToChild = scope;
                if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
                  scopeToChild = isolateScope;
                }
                childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);
                // POSTLINKING
                for (i = postLinkFns.length - 1; i >= 0; i--) {
                  linkFn = postLinkFns[i];
                  invokeLinkFn(linkFn, linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
                }
                // This is the function that is injected as `$transclude`.
                // Note: all arguments are optional!
                function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {
                  var transcludeControllers;
                  // No scope passed in:
                  if (!isScope(scope)) {
                    futureParentElement = cloneAttachFn;
                    cloneAttachFn = scope;
                    scope = undefined;
                  }
                  if (hasElementTranscludeDirective) {
                    transcludeControllers = elementControllers;
                  }
                  if (!futureParentElement) {
                    futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
                  }
                  return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
                }
              }
            }
            function markDirectivesAsIsolate(directives) {
              // mark all directives as needing isolate scope.
              for (var j = 0, jj = directives.length; j < jj; j++) {
                directives[j] = inherit(directives[j], { $$isolateScope: true });
              }
            }
            /**
	     * looks up the directive and decorates it with exception handling and proper parameters. We
	     * call this the boundDirective.
	     *
	     * @param {string} name name of the directive to look up.
	     * @param {string} location The directive must be found in specific format.
	     *   String containing any of theses characters:
	     *
	     *   * `E`: element name
	     *   * `A': attribute
	     *   * `C`: class
	     *   * `M`: comment
	     * @returns {boolean} true if directive was added.
	     */
            function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName, endAttrName) {
              if (name === ignoreDirective)
                return null;
              var match = null;
              if (hasDirectives.hasOwnProperty(name)) {
                for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) {
                  try {
                    directive = directives[i];
                    if ((isUndefined(maxPriority) || maxPriority > directive.priority) && directive.restrict.indexOf(location) != -1) {
                      if (startAttrName) {
                        directive = inherit(directive, {
                          $$start: startAttrName,
                          $$end: endAttrName
                        });
                      }
                      tDirectives.push(directive);
                      match = directive;
                    }
                  } catch (e) {
                    $exceptionHandler(e);
                  }
                }
              }
              return match;
            }
            /**
	     * looks up the directive and returns true if it is a multi-element directive,
	     * and therefore requires DOM nodes between -start and -end markers to be grouped
	     * together.
	     *
	     * @param {string} name name of the directive to look up.
	     * @returns true if directive was registered as multi-element.
	     */
            function directiveIsMultiElement(name) {
              if (hasDirectives.hasOwnProperty(name)) {
                for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) {
                  directive = directives[i];
                  if (directive.multiElement) {
                    return true;
                  }
                }
              }
              return false;
            }
            /**
	     * When the element is replaced with HTML template then the new attributes
	     * on the template need to be merged with the existing attributes in the DOM.
	     * The desired effect is to have both of the attributes present.
	     *
	     * @param {object} dst destination attributes (original DOM)
	     * @param {object} src source attributes (from the directive template)
	     */
            function mergeTemplateAttributes(dst, src) {
              var srcAttr = src.$attr, dstAttr = dst.$attr, $element = dst.$$element;
              // reapply the old attributes to the new element
              forEach(dst, function (value, key) {
                if (key.charAt(0) != '$') {
                  if (src[key] && src[key] !== value) {
                    value += (key === 'style' ? ';' : ' ') + src[key];
                  }
                  dst.$set(key, value, true, srcAttr[key]);
                }
              });
              // copy the new attributes on the old attrs object
              forEach(src, function (value, key) {
                if (key == 'class') {
                  safeAddClass($element, value);
                  dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
                } else if (key == 'style') {
                  $element.attr('style', $element.attr('style') + ';' + value);
                  dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;  // `dst` will never contain hasOwnProperty as DOM parser won't let it.
                                                                                    // You will get an "InvalidCharacterError: DOM Exception 5" error if you
                                                                                    // have an attribute like "has-own-property" or "data-has-own-property", etc.
                } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
                  dst[key] = value;
                  dstAttr[key] = srcAttr[key];
                }
              });
            }
            function compileTemplateUrl(directives, $compileNode, tAttrs, $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
              var linkQueue = [], afterTemplateNodeLinkFn, afterTemplateChildLinkFn, beforeTemplateCompileNode = $compileNode[0], origAsyncDirective = directives.shift(), derivedSyncDirective = inherit(origAsyncDirective, {
                  templateUrl: null,
                  transclude: null,
                  replace: null,
                  $$originalDirective: origAsyncDirective
                }), templateUrl = isFunction(origAsyncDirective.templateUrl) ? origAsyncDirective.templateUrl($compileNode, tAttrs) : origAsyncDirective.templateUrl, templateNamespace = origAsyncDirective.templateNamespace;
              $compileNode.empty();
              $templateRequest(templateUrl).then(function (content) {
                var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;
                content = denormalizeTemplate(content);
                if (origAsyncDirective.replace) {
                  if (jqLiteIsTextNode(content)) {
                    $template = [];
                  } else {
                    $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
                  }
                  compileNode = $template[0];
                  if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
                    throw $compileMinErr('tplrt', 'Template for directive \'{0}\' must have exactly one root element. {1}', origAsyncDirective.name, templateUrl);
                  }
                  tempTemplateAttrs = { $attr: {} };
                  replaceWith($rootElement, $compileNode, compileNode);
                  var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);
                  if (isObject(origAsyncDirective.scope)) {
                    markDirectivesAsIsolate(templateDirectives);
                  }
                  directives = templateDirectives.concat(directives);
                  mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
                } else {
                  compileNode = beforeTemplateCompileNode;
                  $compileNode.html(content);
                }
                directives.unshift(derivedSyncDirective);
                afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs, childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns, previousCompileContext);
                forEach($rootElement, function (node, i) {
                  if (node == compileNode) {
                    $rootElement[i] = $compileNode[0];
                  }
                });
                afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);
                while (linkQueue.length) {
                  var scope = linkQueue.shift(), beforeTemplateLinkNode = linkQueue.shift(), linkRootElement = linkQueue.shift(), boundTranscludeFn = linkQueue.shift(), linkNode = $compileNode[0];
                  if (scope.$$destroyed)
                    continue;
                  if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
                    var oldClasses = beforeTemplateLinkNode.className;
                    if (!(previousCompileContext.hasElementTranscludeDirective && origAsyncDirective.replace)) {
                      // it was cloned therefore we have to clone as well.
                      linkNode = jqLiteClone(compileNode);
                    }
                    replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);
                    // Copy in CSS classes from original node
                    safeAddClass(jqLite(linkNode), oldClasses);
                  }
                  if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                    childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
                  } else {
                    childBoundTranscludeFn = boundTranscludeFn;
                  }
                  afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement, childBoundTranscludeFn, afterTemplateNodeLinkFn);
                }
                linkQueue = null;
              });
              return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
                var childBoundTranscludeFn = boundTranscludeFn;
                if (scope.$$destroyed)
                  return;
                if (linkQueue) {
                  linkQueue.push(scope, node, rootElement, childBoundTranscludeFn);
                } else {
                  if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                    childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
                  }
                  afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn, afterTemplateNodeLinkFn);
                }
              };
            }
            /**
	     * Sorting function for bound directives.
	     */
            function byPriority(a, b) {
              var diff = b.priority - a.priority;
              if (diff !== 0)
                return diff;
              if (a.name !== b.name)
                return a.name < b.name ? -1 : 1;
              return a.index - b.index;
            }
            function assertNoDuplicate(what, previousDirective, directive, element) {
              function wrapModuleNameIfDefined(moduleName) {
                return moduleName ? ' (module: ' + moduleName + ')' : '';
              }
              if (previousDirective) {
                throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}', previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName), directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
              }
            }
            function addTextInterpolateDirective(directives, text) {
              var interpolateFn = $interpolate(text, true);
              if (interpolateFn) {
                directives.push({
                  priority: 0,
                  compile: function textInterpolateCompileFn(templateNode) {
                    var templateNodeParent = templateNode.parent(), hasCompileParent = !!templateNodeParent.length;
                    // When transcluding a template that has bindings in the root
                    // we don't have a parent and thus need to add the class during linking fn.
                    if (hasCompileParent)
                      compile.$$addBindingClass(templateNodeParent);
                    return function textInterpolateLinkFn(scope, node) {
                      var parent = node.parent();
                      if (!hasCompileParent)
                        compile.$$addBindingClass(parent);
                      compile.$$addBindingInfo(parent, interpolateFn.expressions);
                      scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                        node[0].nodeValue = value;
                      });
                    };
                  }
                });
              }
            }
            function wrapTemplate(type, template) {
              type = lowercase(type || 'html');
              switch (type) {
              case 'svg':
              case 'math':
                var wrapper = document.createElement('div');
                wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
                return wrapper.childNodes[0].childNodes;
              default:
                return template;
              }
            }
            function getTrustedContext(node, attrNormalizedName) {
              if (attrNormalizedName == 'srcdoc') {
                return $sce.HTML;
              }
              var tag = nodeName_(node);
              // maction[xlink:href] can source SVG.  It's not limited to <maction>.
              if (attrNormalizedName == 'xlinkHref' || tag == 'form' && attrNormalizedName == 'action' || tag != 'img' && (attrNormalizedName == 'src' || attrNormalizedName == 'ngSrc')) {
                return $sce.RESOURCE_URL;
              }
            }
            function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
              var trustedContext = getTrustedContext(node, name);
              allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;
              var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);
              // no interpolation found -> ignore
              if (!interpolateFn)
                return;
              if (name === 'multiple' && nodeName_(node) === 'select') {
                throw $compileMinErr('selmulti', 'Binding to the \'multiple\' attribute is not supported. Element: {0}', startingTag(node));
              }
              directives.push({
                priority: 100,
                compile: function () {
                  return {
                    pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                      var $$observers = attr.$$observers || (attr.$$observers = createMap());
                      if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                        throw $compileMinErr('nodomevents', 'Interpolations for HTML DOM event attributes are disallowed.  Please use the ' + 'ng- versions (such as ng-click instead of onclick) instead.');
                      }
                      // If the attribute has changed since last $interpolate()ed
                      var newValue = attr[name];
                      if (newValue !== value) {
                        // we need to interpolate again since the attribute value has been updated
                        // (e.g. by another directive's compile function)
                        // ensure unset/empty values make interpolateFn falsy
                        interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
                        value = newValue;
                      }
                      // if attribute was updated so that there is no interpolation going on we don't want to
                      // register any observers
                      if (!interpolateFn)
                        return;
                      // initialize attr object so that it's ready in case we need the value for isolate
                      // scope initialization, otherwise the value would not be available from isolate
                      // directive's linking fn during linking phase
                      attr[name] = interpolateFn(scope);
                      ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                      (attr.$$observers && attr.$$observers[name].$$scope || scope).$watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                        //special case for class attribute addition + removal
                        //so that class changes can tap into the animation
                        //hooks provided by the $animate service. Be sure to
                        //skip animations when the first digest occurs (when
                        //both the new and the old values are the same) since
                        //the CSS classes are the non-interpolated values
                        if (name === 'class' && newValue != oldValue) {
                          attr.$updateClass(newValue, oldValue);
                        } else {
                          attr.$set(name, newValue);
                        }
                      });
                    }
                  };
                }
              });
            }
            /**
	     * This is a special jqLite.replaceWith, which can replace items which
	     * have no parents, provided that the containing jqLite collection is provided.
	     *
	     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
	     *                               in the root of the tree.
	     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
	     *                                  the shell, but replace its DOM node reference.
	     * @param {Node} newNode The new DOM node.
	     */
            function replaceWith($rootElement, elementsToRemove, newNode) {
              var firstElementToRemove = elementsToRemove[0], removeCount = elementsToRemove.length, parent = firstElementToRemove.parentNode, i, ii;
              if ($rootElement) {
                for (i = 0, ii = $rootElement.length; i < ii; i++) {
                  if ($rootElement[i] == firstElementToRemove) {
                    $rootElement[i++] = newNode;
                    for (var j = i, j2 = j + removeCount - 1, jj = $rootElement.length; j < jj; j++, j2++) {
                      if (j2 < jj) {
                        $rootElement[j] = $rootElement[j2];
                      } else {
                        delete $rootElement[j];
                      }
                    }
                    $rootElement.length -= removeCount - 1;
                    // If the replaced element is also the jQuery .context then replace it
                    // .context is a deprecated jQuery api, so we should set it only when jQuery set it
                    // http://api.jquery.com/context/
                    if ($rootElement.context === firstElementToRemove) {
                      $rootElement.context = newNode;
                    }
                    break;
                  }
                }
              }
              if (parent) {
                parent.replaceChild(newNode, firstElementToRemove);
              }
              // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?
              var fragment = document.createDocumentFragment();
              fragment.appendChild(firstElementToRemove);
              if (jqLite.hasData(firstElementToRemove)) {
                // Copy over user data (that includes Angular's $scope etc.). Don't copy private
                // data here because there's no public interface in jQuery to do that and copying over
                // event listeners (which is the main use of private data) wouldn't work anyway.
                jqLite(newNode).data(jqLite(firstElementToRemove).data());
                // Remove data of the replaced element. We cannot just call .remove()
                // on the element it since that would deallocate scope that is needed
                // for the new node. Instead, remove the data "manually".
                if (!jQuery) {
                  delete jqLite.cache[firstElementToRemove[jqLite.expando]];
                } else {
                  // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after
                  // the replaced element. The cleanData version monkey-patched by Angular would cause
                  // the scope to be trashed and we do need the very same scope to work with the new
                  // element. However, we cannot just cache the non-patched version and use it here as
                  // that would break if another library patches the method after Angular does (one
                  // example is jQuery UI). Instead, set a flag indicating scope destroying should be
                  // skipped this one time.
                  skipDestroyOnNextJQueryCleanData = true;
                  jQuery.cleanData([firstElementToRemove]);
                }
              }
              for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
                var element = elementsToRemove[k];
                jqLite(element).remove();
                // must do this way to clean up expando
                fragment.appendChild(element);
                delete elementsToRemove[k];
              }
              elementsToRemove[0] = newNode;
              elementsToRemove.length = 1;
            }
            function cloneAndAnnotateFn(fn, annotation) {
              return extend(function () {
                return fn.apply(null, arguments);
              }, fn, annotation);
            }
            function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
              try {
                linkFn(scope, $element, attrs, controllers, transcludeFn);
              } catch (e) {
                $exceptionHandler(e, startingTag($element));
              }
            }
            // Set up $watches for isolate scope and controller bindings. This process
            // only occurs for isolate scopes and new scopes with controllerAs.
            function initializeDirectiveBindings(scope, attrs, destination, bindings, directive, newScope) {
              var onNewScopeDestroyed;
              forEach(bindings, function (definition, scopeName) {
                var attrName = definition.attrName, optional = definition.optional, mode = definition.mode,
                  // @, =, or &
                  lastValue, parentGet, parentSet, compare;
                switch (mode) {
                case '@':
                  if (!optional && !hasOwnProperty.call(attrs, attrName)) {
                    destination[scopeName] = attrs[attrName] = void 0;
                  }
                  attrs.$observe(attrName, function (value) {
                    if (isString(value)) {
                      destination[scopeName] = value;
                    }
                  });
                  attrs.$$observers[attrName].$$scope = scope;
                  if (isString(attrs[attrName])) {
                    // If the attribute has been provided then we trigger an interpolation to ensure
                    // the value is there for use in the link fn
                    destination[scopeName] = $interpolate(attrs[attrName])(scope);
                  }
                  break;
                case '=':
                  if (!hasOwnProperty.call(attrs, attrName)) {
                    if (optional)
                      break;
                    attrs[attrName] = void 0;
                  }
                  if (optional && !attrs[attrName])
                    break;
                  parentGet = $parse(attrs[attrName]);
                  if (parentGet.literal) {
                    compare = equals;
                  } else {
                    compare = function (a, b) {
                      return a === b || a !== a && b !== b;
                    };
                  }
                  parentSet = parentGet.assign || function () {
                    // reset the change, or we will throw this exception on every $digest
                    lastValue = destination[scopeName] = parentGet(scope);
                    throw $compileMinErr('nonassign', 'Expression \'{0}\' used with directive \'{1}\' is non-assignable!', attrs[attrName], directive.name);
                  };
                  lastValue = destination[scopeName] = parentGet(scope);
                  var parentValueWatch = function parentValueWatch(parentValue) {
                    if (!compare(parentValue, destination[scopeName])) {
                      // we are out of sync and need to copy
                      if (!compare(parentValue, lastValue)) {
                        // parent changed and it has precedence
                        destination[scopeName] = parentValue;
                      } else {
                        // if the parent can be assigned then do so
                        parentSet(scope, parentValue = destination[scopeName]);
                      }
                    }
                    return lastValue = parentValue;
                  };
                  parentValueWatch.$stateful = true;
                  var unwatch;
                  if (definition.collection) {
                    unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
                  } else {
                    unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
                  }
                  onNewScopeDestroyed = onNewScopeDestroyed || [];
                  onNewScopeDestroyed.push(unwatch);
                  break;
                case '&':
                  // Don't assign Object.prototype method to scope
                  parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;
                  // Don't assign noop to destination if expression is not valid
                  if (parentGet === noop && optional)
                    break;
                  destination[scopeName] = function (locals) {
                    return parentGet(scope, locals);
                  };
                  break;
                }
              });
              var destroyBindings = onNewScopeDestroyed ? function destroyBindings() {
                  for (var i = 0, ii = onNewScopeDestroyed.length; i < ii; ++i) {
                    onNewScopeDestroyed[i]();
                  }
                } : noop;
              if (newScope && destroyBindings !== noop) {
                newScope.$on('$destroy', destroyBindings);
                return noop;
              }
              return destroyBindings;
            }
          }
        ];
      }
      var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
      /**
	 * Converts all accepted directives format into proper directive name.
	 * @param name Name to normalize
	 */
      function directiveNormalize(name) {
        return camelCase(name.replace(PREFIX_REGEXP, ''));
      }
      /**
	 * @ngdoc type
	 * @name $compile.directive.Attributes
	 *
	 * @description
	 * A shared object between directive compile / linking functions which contains normalized DOM
	 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
	 * needed since all of these are treated as equivalent in Angular:
	 *
	 * ```
	 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
	 * ```
	 */
      /**
	 * @ngdoc property
	 * @name $compile.directive.Attributes#$attr
	 *
	 * @description
	 * A map of DOM element attribute names to the normalized name. This is
	 * needed to do reverse lookup from normalized name back to actual name.
	 */
      /**
	 * @ngdoc method
	 * @name $compile.directive.Attributes#$set
	 * @kind function
	 *
	 * @description
	 * Set DOM element attribute value.
	 *
	 *
	 * @param {string} name Normalized element attribute name of the property to modify. The name is
	 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
	 *          property to the original name.
	 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
	 */
      /**
	 * Closure compiler type information
	 */
      function nodesetLinkingFn(scope, nodeList, rootElement, boundTranscludeFn) {
      }
      function directiveLinkingFn(nodesetLinkingFn, scope, node, rootElement, boundTranscludeFn) {
      }
      function tokenDifference(str1, str2) {
        var values = '', tokens1 = str1.split(/\s+/), tokens2 = str2.split(/\s+/);
        outer:
          for (var i = 0; i < tokens1.length; i++) {
            var token = tokens1[i];
            for (var j = 0; j < tokens2.length; j++) {
              if (token == tokens2[j])
                continue outer;
            }
            values += (values.length > 0 ? ' ' : '') + token;
          }
        return values;
      }
      function removeComments(jqNodes) {
        jqNodes = jqLite(jqNodes);
        var i = jqNodes.length;
        if (i <= 1) {
          return jqNodes;
        }
        while (i--) {
          var node = jqNodes[i];
          if (node.nodeType === NODE_TYPE_COMMENT) {
            splice.call(jqNodes, i, 1);
          }
        }
        return jqNodes;
      }
      var $controllerMinErr = minErr('$controller');
      var CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;
      function identifierForController(controller, ident) {
        if (ident && isString(ident))
          return ident;
        if (isString(controller)) {
          var match = CNTRL_REG.exec(controller);
          if (match)
            return match[3];
        }
      }
      /**
	 * @ngdoc provider
	 * @name $controllerProvider
	 * @description
	 * The {@link ng.$controller $controller service} is used by Angular to create new
	 * controllers.
	 *
	 * This provider allows controller registration via the
	 * {@link ng.$controllerProvider#register register} method.
	 */
      function $ControllerProvider() {
        var controllers = {}, globals = false;
        /**
	   * @ngdoc method
	   * @name $controllerProvider#register
	   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
	   *    the names and the values are the constructors.
	   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
	   *    annotations in the array notation).
	   */
        this.register = function (name, constructor) {
          assertNotHasOwnProperty(name, 'controller');
          if (isObject(name)) {
            extend(controllers, name);
          } else {
            controllers[name] = constructor;
          }
        };
        /**
	   * @ngdoc method
	   * @name $controllerProvider#allowGlobals
	   * @description If called, allows `$controller` to find controller constructors on `window`
	   */
        this.allowGlobals = function () {
          globals = true;
        };
        this.$get = [
          '$injector',
          '$window',
          function ($injector, $window) {
            /**
	     * @ngdoc service
	     * @name $controller
	     * @requires $injector
	     *
	     * @param {Function|string} constructor If called with a function then it's considered to be the
	     *    controller constructor function. Otherwise it's considered to be a string which is used
	     *    to retrieve the controller constructor using the following steps:
	     *
	     *    * check if a controller with given name is registered via `$controllerProvider`
	     *    * check if evaluating the string on the current scope returns a constructor
	     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
	     *      `window` object (not recommended)
	     *
	     *    The string can use the `controller as property` syntax, where the controller instance is published
	     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
	     *    to work correctly.
	     *
	     * @param {Object} locals Injection locals for Controller.
	     * @return {Object} Instance of given controller.
	     *
	     * @description
	     * `$controller` service is responsible for instantiating controllers.
	     *
	     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
	     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
	     */
            return function (expression, locals, later, ident) {
              // PRIVATE API:
              //   param `later` --- indicates that the controller's constructor is invoked at a later time.
              //                     If true, $controller will allocate the object with the correct
              //                     prototype chain, but will not invoke the controller until a returned
              //                     callback is invoked.
              //   param `ident` --- An optional label which overrides the label parsed from the controller
              //                     expression, if any.
              var instance, match, constructor, identifier;
              later = later === true;
              if (ident && isString(ident)) {
                identifier = ident;
              }
              if (isString(expression)) {
                match = expression.match(CNTRL_REG);
                if (!match) {
                  throw $controllerMinErr('ctrlfmt', 'Badly formed controller string \'{0}\'. ' + 'Must match `__name__ as __id__` or `__name__`.', expression);
                }
                constructor = match[1], identifier = identifier || match[3];
                expression = controllers.hasOwnProperty(constructor) ? controllers[constructor] : getter(locals.$scope, constructor, true) || (globals ? getter($window, constructor, true) : undefined);
                assertArgFn(expression, constructor, true);
              }
              if (later) {
                // Instantiate controller later:
                // This machinery is used to create an instance of the object before calling the
                // controller's constructor itself.
                //
                // This allows properties to be added to the controller before the constructor is
                // invoked. Primarily, this is used for isolate scope bindings in $compile.
                //
                // This feature is not intended for use by applications, and is thus not documented
                // publicly.
                // Object creation: http://jsperf.com/create-constructor/2
                var controllerPrototype = (isArray(expression) ? expression[expression.length - 1] : expression).prototype;
                instance = Object.create(controllerPrototype || null);
                if (identifier) {
                  addIdentifier(locals, identifier, instance, constructor || expression.name);
                }
                var instantiate;
                return instantiate = extend(function () {
                  var result = $injector.invoke(expression, instance, locals, constructor);
                  if (result !== instance && (isObject(result) || isFunction(result))) {
                    instance = result;
                    if (identifier) {
                      // If result changed, re-assign controllerAs value to scope.
                      addIdentifier(locals, identifier, instance, constructor || expression.name);
                    }
                  }
                  return instance;
                }, {
                  instance: instance,
                  identifier: identifier
                });
              }
              instance = $injector.instantiate(expression, locals, constructor);
              if (identifier) {
                addIdentifier(locals, identifier, instance, constructor || expression.name);
              }
              return instance;
            };
            function addIdentifier(locals, identifier, instance, name) {
              if (!(locals && isObject(locals.$scope))) {
                throw minErr('$controller')('noscp', 'Cannot export controller \'{0}\' as \'{1}\'! No $scope object provided via `locals`.', name, identifier);
              }
              locals.$scope[identifier] = instance;
            }
          }
        ];
      }
      /**
	 * @ngdoc service
	 * @name $document
	 * @requires $window
	 *
	 * @description
	 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
	 *
	 * @example
	   <example module="documentExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <p>$document title: <b ng-bind="title"></b></p>
	         <p>window.document title: <b ng-bind="windowTitle"></b></p>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('documentExample', [])
	         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
	           $scope.title = $document[0].title;
	           $scope.windowTitle = angular.element(window.document)[0].title;
	         }]);
	     </file>
	   </example>
	 */
      function $DocumentProvider() {
        this.$get = [
          '$window',
          function (window) {
            return jqLite(window.document);
          }
        ];
      }
      /**
	 * @ngdoc service
	 * @name $exceptionHandler
	 * @requires ng.$log
	 *
	 * @description
	 * Any uncaught exception in angular expressions is delegated to this service.
	 * The default implementation simply delegates to `$log.error` which logs it into
	 * the browser console.
	 *
	 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
	 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
	 *
	 * ## Example:
	 *
	 * ```js
	 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {
	 *     return function(exception, cause) {
	 *       exception.message += ' (caused by "' + cause + '")';
	 *       throw exception;
	 *     };
	 *   });
	 * ```
	 *
	 * This example will override the normal action of `$exceptionHandler`, to make angular
	 * exceptions fail hard when they happen, instead of just logging to the console.
	 *
	 * <hr />
	 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
	 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
	 * (unless executed during a digest).
	 *
	 * If you wish, you can manually delegate exceptions, e.g.
	 * `try { ... } catch(e) { $exceptionHandler(e); }`
	 *
	 * @param {Error} exception Exception associated with the error.
	 * @param {string=} cause optional information about the context in which
	 *       the error was thrown.
	 *
	 */
      function $ExceptionHandlerProvider() {
        this.$get = [
          '$log',
          function ($log) {
            return function (exception, cause) {
              $log.error.apply($log, arguments);
            };
          }
        ];
      }
      var $$ForceReflowProvider = function () {
        this.$get = [
          '$document',
          function ($document) {
            return function (domNode) {
              //the line below will force the browser to perform a repaint so
              //that all the animated elements within the animation frame will
              //be properly updated and drawn on screen. This is required to
              //ensure that the preparation animation is properly flushed so that
              //the active state picks up from there. DO NOT REMOVE THIS LINE.
              //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
              //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
              //WILL TAKE YEARS AWAY FROM YOUR LIFE.
              if (domNode) {
                if (!domNode.nodeType && domNode instanceof jqLite) {
                  domNode = domNode[0];
                }
              } else {
                domNode = $document[0].body;
              }
              return domNode.offsetWidth + 1;
            };
          }
        ];
      };
      var APPLICATION_JSON = 'application/json';
      var CONTENT_TYPE_APPLICATION_JSON = { 'Content-Type': APPLICATION_JSON + ';charset=utf-8' };
      var JSON_START = /^\[|^\{(?!\{)/;
      var JSON_ENDS = {
          '[': /]$/,
          '{': /}$/
        };
      var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;
      var $httpMinErr = minErr('$http');
      var $httpMinErrLegacyFn = function (method) {
        return function () {
          throw $httpMinErr('legacy', 'The method `{0}` on the promise returned from `$http` has been disabled.', method);
        };
      };
      function serializeValue(v) {
        if (isObject(v)) {
          return isDate(v) ? v.toISOString() : toJson(v);
        }
        return v;
      }
      function $HttpParamSerializerProvider() {
        /**
	   * @ngdoc service
	   * @name $httpParamSerializer
	   * @description
	   *
	   * Default {@link $http `$http`} params serializer that converts objects to strings
	   * according to the following rules:
	   *
	   * * `{'foo': 'bar'}` results in `foo=bar`
	   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
	   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
	   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D"` (stringified and encoded representation of an object)
	   *
	   * Note that serializer will sort the request parameters alphabetically.
	   * */
        this.$get = function () {
          return function ngParamSerializer(params) {
            if (!params)
              return '';
            var parts = [];
            forEachSorted(params, function (value, key) {
              if (value === null || isUndefined(value))
                return;
              if (isArray(value)) {
                forEach(value, function (v, k) {
                  parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(v)));
                });
              } else {
                parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));
              }
            });
            return parts.join('&');
          };
        };
      }
      function $HttpParamSerializerJQLikeProvider() {
        /**
	   * @ngdoc service
	   * @name $httpParamSerializerJQLike
	   * @description
	   *
	   * Alternative {@link $http `$http`} params serializer that follows
	   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
	   * The serializer will also sort the params alphabetically.
	   *
	   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
	   *
	   * ```js
	   * $http({
	   *   url: myUrl,
	   *   method: 'GET',
	   *   params: myParams,
	   *   paramSerializer: '$httpParamSerializerJQLike'
	   * });
	   * ```
	   *
	   * It is also possible to set it as the default `paramSerializer` in the
	   * {@link $httpProvider#defaults `$httpProvider`}.
	   *
	   * Additionally, you can inject the serializer and use it explicitly, for example to serialize
	   * form data for submission:
	   *
	   * ```js
	   * .controller(function($http, $httpParamSerializerJQLike) {
	   *   //...
	   *
	   *   $http({
	   *     url: myUrl,
	   *     method: 'POST',
	   *     data: $httpParamSerializerJQLike(myData),
	   *     headers: {
	   *       'Content-Type': 'application/x-www-form-urlencoded'
	   *     }
	   *   });
	   *
	   * });
	   * ```
	   *
	   * */
        this.$get = function () {
          return function jQueryLikeParamSerializer(params) {
            if (!params)
              return '';
            var parts = [];
            serialize(params, '', true);
            return parts.join('&');
            function serialize(toSerialize, prefix, topLevel) {
              if (toSerialize === null || isUndefined(toSerialize))
                return;
              if (isArray(toSerialize)) {
                forEach(toSerialize, function (value, index) {
                  serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');
                });
              } else if (isObject(toSerialize) && !isDate(toSerialize)) {
                forEachSorted(toSerialize, function (value, key) {
                  serialize(value, prefix + (topLevel ? '' : '[') + key + (topLevel ? '' : ']'));
                });
              } else {
                parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));
              }
            }
          };
        };
      }
      function defaultHttpResponseTransform(data, headers) {
        if (isString(data)) {
          // Strip json vulnerability protection prefix and trim whitespace
          var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();
          if (tempData) {
            var contentType = headers('Content-Type');
            if (contentType && contentType.indexOf(APPLICATION_JSON) === 0 || isJsonLike(tempData)) {
              data = fromJson(tempData);
            }
          }
        }
        return data;
      }
      function isJsonLike(str) {
        var jsonStart = str.match(JSON_START);
        return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
      }
      /**
	 * Parse headers into key value object
	 *
	 * @param {string} headers Raw headers as a string
	 * @returns {Object} Parsed headers as key value object
	 */
      function parseHeaders(headers) {
        var parsed = createMap(), i;
        function fillInParsed(key, val) {
          if (key) {
            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
          }
        }
        if (isString(headers)) {
          forEach(headers.split('\n'), function (line) {
            i = line.indexOf(':');
            fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
          });
        } else if (isObject(headers)) {
          forEach(headers, function (headerVal, headerKey) {
            fillInParsed(lowercase(headerKey), trim(headerVal));
          });
        }
        return parsed;
      }
      /**
	 * Returns a function that provides access to parsed headers.
	 *
	 * Headers are lazy parsed when first requested.
	 * @see parseHeaders
	 *
	 * @param {(string|Object)} headers Headers to provide access to.
	 * @returns {function(string=)} Returns a getter function which if called with:
	 *
	 *   - if called with single an argument returns a single header value or null
	 *   - if called with no arguments returns an object containing all headers.
	 */
      function headersGetter(headers) {
        var headersObj;
        return function (name) {
          if (!headersObj)
            headersObj = parseHeaders(headers);
          if (name) {
            var value = headersObj[lowercase(name)];
            if (value === void 0) {
              value = null;
            }
            return value;
          }
          return headersObj;
        };
      }
      /**
	 * Chain all given functions
	 *
	 * This function is used for both request and response transforming
	 *
	 * @param {*} data Data to transform.
	 * @param {function(string=)} headers HTTP headers getter fn.
	 * @param {number} status HTTP status code of the response.
	 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
	 * @returns {*} Transformed data.
	 */
      function transformData(data, headers, status, fns) {
        if (isFunction(fns)) {
          return fns(data, headers, status);
        }
        forEach(fns, function (fn) {
          data = fn(data, headers, status);
        });
        return data;
      }
      function isSuccess(status) {
        return 200 <= status && status < 300;
      }
      /**
	 * @ngdoc provider
	 * @name $httpProvider
	 * @description
	 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
	 * */
      function $HttpProvider() {
        /**
	   * @ngdoc property
	   * @name $httpProvider#defaults
	   * @description
	   *
	   * Object containing default values for all {@link ng.$http $http} requests.
	   *
	   * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}
	   * that will provide the cache for all requests who set their `cache` property to `true`.
	   * If you set the `defaults.cache = false` then only requests that specify their own custom
	   * cache object will be cached. See {@link $http#caching $http Caching} for more information.
	   *
	   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
	   * Defaults value is `'XSRF-TOKEN'`.
	   *
	   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
	   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
	   *
	   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
	   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
	   * setting default headers.
	   *     - **`defaults.headers.common`**
	   *     - **`defaults.headers.post`**
	   *     - **`defaults.headers.put`**
	   *     - **`defaults.headers.patch`**
	   *
	   *
	   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
	   *  used to the prepare string representation of request parameters (specified as an object).
	   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
	   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
	   *
	   **/
        var defaults = this.defaults = {
            transformResponse: [defaultHttpResponseTransform],
            transformRequest: [function (d) {
                return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
              }],
            headers: {
              common: { 'Accept': 'application/json, text/plain, */*' },
              post: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
              put: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
              patch: shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
            },
            xsrfCookieName: 'XSRF-TOKEN',
            xsrfHeaderName: 'X-XSRF-TOKEN',
            paramSerializer: '$httpParamSerializer'
          };
        var useApplyAsync = false;
        /**
	   * @ngdoc method
	   * @name $httpProvider#useApplyAsync
	   * @description
	   *
	   * Configure $http service to combine processing of multiple http responses received at around
	   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
	   * significant performance improvement for bigger applications that make many HTTP requests
	   * concurrently (common during application bootstrap).
	   *
	   * Defaults to false. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
	   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
	   *    to load and share the same digest cycle.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
        this.useApplyAsync = function (value) {
          if (isDefined(value)) {
            useApplyAsync = !!value;
            return this;
          }
          return useApplyAsync;
        };
        var useLegacyPromise = true;
        /**
	   * @ngdoc method
	   * @name $httpProvider#useLegacyPromiseExtensions
	   * @description
	   *
	   * Configure `$http` service to return promises without the shorthand methods `success` and `error`.
	   * This should be used to make sure that applications work without these methods.
	   *
	   * Defaults to false. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, `$http` will return a normal promise without the `success` and `error` methods.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
        this.useLegacyPromiseExtensions = function (value) {
          if (isDefined(value)) {
            useLegacyPromise = !!value;
            return this;
          }
          return useLegacyPromise;
        };
        /**
	   * @ngdoc property
	   * @name $httpProvider#interceptors
	   * @description
	   *
	   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
	   * pre-processing of request or postprocessing of responses.
	   *
	   * These service factories are ordered by request, i.e. they are applied in the same order as the
	   * array, on request, but reverse order, on response.
	   *
	   * {@link ng.$http#interceptors Interceptors detailed info}
	   **/
        var interceptorFactories = this.interceptors = [];
        this.$get = [
          '$httpBackend',
          '$$cookieReader',
          '$cacheFactory',
          '$rootScope',
          '$q',
          '$injector',
          function ($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {
            var defaultCache = $cacheFactory('$http');
            /**
	     * Make sure that default param serializer is exposed as a function
	     */
            defaults.paramSerializer = isString(defaults.paramSerializer) ? $injector.get(defaults.paramSerializer) : defaults.paramSerializer;
            /**
	     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
	     * The reversal is needed so that we can build up the interception chain around the
	     * server request.
	     */
            var reversedInterceptors = [];
            forEach(interceptorFactories, function (interceptorFactory) {
              reversedInterceptors.unshift(isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
            });
            /**
	     * @ngdoc service
	     * @kind function
	     * @name $http
	     * @requires ng.$httpBackend
	     * @requires $cacheFactory
	     * @requires $rootScope
	     * @requires $q
	     * @requires $injector
	     *
	     * @description
	     * The `$http` service is a core Angular service that facilitates communication with the remote
	     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
	     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
	     *
	     * For unit testing applications that use `$http` service, see
	     * {@link ngMock.$httpBackend $httpBackend mock}.
	     *
	     * For a higher level of abstraction, please check out the {@link ngResource.$resource
	     * $resource} service.
	     *
	     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
	     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
	     * it is important to familiarize yourself with these APIs and the guarantees they provide.
	     *
	     *
	     * ## General usage
	     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
	     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.
	     *
	     * ```js
	     *   // Simple GET request example:
	     *   $http({
	     *     method: 'GET',
	     *     url: '/someUrl'
	     *   }).then(function successCallback(response) {
	     *       // this callback will be called asynchronously
	     *       // when the response is available
	     *     }, function errorCallback(response) {
	     *       // called asynchronously if an error occurs
	     *       // or server returns response with an error status.
	     *     });
	     * ```
	     *
	     * The response object has these properties:
	     *
	     *   - **data** – `{string|Object}` – The response body transformed with the transform
	     *     functions.
	     *   - **status** – `{number}` – HTTP status code of the response.
	     *   - **headers** – `{function([headerName])}` – Header getter function.
	     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
	     *   - **statusText** – `{string}` – HTTP status text of the response.
	     *
	     * A response status code between 200 and 299 is considered a success status and
	     * will result in the success callback being called. Note that if the response is a redirect,
	     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
	     * called for such responses.
	     *
	     *
	     * ## Shortcut methods
	     *
	     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
	     * request data must be passed in for POST/PUT requests. An optional config can be passed as the
	     * last argument.
	     *
	     * ```js
	     *   $http.get('/someUrl', config).then(successCallback, errorCallback);
	     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
	     * ```
	     *
	     * Complete list of shortcut methods:
	     *
	     * - {@link ng.$http#get $http.get}
	     * - {@link ng.$http#head $http.head}
	     * - {@link ng.$http#post $http.post}
	     * - {@link ng.$http#put $http.put}
	     * - {@link ng.$http#delete $http.delete}
	     * - {@link ng.$http#jsonp $http.jsonp}
	     * - {@link ng.$http#patch $http.patch}
	     *
	     *
	     * ## Writing Unit Tests that use $http
	     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
	     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
	     * request using trained responses.
	     *
	     * ```
	     * $httpBackend.expectGET(...);
	     * $http.get(...);
	     * $httpBackend.flush();
	     * ```
	     *
	     * ## Deprecation Notice
	     * <div class="alert alert-danger">
	     *   The `$http` legacy promise methods `success` and `error` have been deprecated.
	     *   Use the standard `then` method instead.
	     *   If {@link $httpProvider#useLegacyPromiseExtensions `$httpProvider.useLegacyPromiseExtensions`} is set to
	     *   `false` then these methods will throw {@link $http:legacy `$http/legacy`} error.
	     * </div>
	     *
	     * ## Setting HTTP Headers
	     *
	     * The $http service will automatically add certain HTTP headers to all requests. These defaults
	     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
	     * object, which currently contains this default configuration:
	     *
	     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
	     *   - `Accept: application/json, text/plain, * / *`
	     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
	     *   - `Content-Type: application/json`
	     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
	     *   - `Content-Type: application/json`
	     *
	     * To add or overwrite these defaults, simply add or remove a property from these configuration
	     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
	     * with the lowercased HTTP method name as the key, e.g.
	     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
	     *
	     * The defaults can also be set at runtime via the `$http.defaults` object in the same
	     * fashion. For example:
	     *
	     * ```
	     * module.run(function($http) {
	     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'
	     * });
	     * ```
	     *
	     * In addition, you can supply a `headers` property in the config object passed when
	     * calling `$http(config)`, which overrides the defaults without changing them globally.
	     *
	     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
	     * Use the `headers` property, setting the desired header to `undefined`. For example:
	     *
	     * ```js
	     * var req = {
	     *  method: 'POST',
	     *  url: 'http://example.com',
	     *  headers: {
	     *    'Content-Type': undefined
	     *  },
	     *  data: { test: 'test' }
	     * }
	     *
	     * $http(req).then(function(){...}, function(){...});
	     * ```
	     *
	     * ## Transforming Requests and Responses
	     *
	     * Both requests and responses can be transformed using transformation functions: `transformRequest`
	     * and `transformResponse`. These properties can be a single function that returns
	     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
	     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
	     *
	     * ### Default Transformations
	     *
	     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
	     * `defaults.transformResponse` properties. If a request does not provide its own transformations
	     * then these will be applied.
	     *
	     * You can augment or replace the default transformations by modifying these properties by adding to or
	     * replacing the array.
	     *
	     * Angular provides the following default transformations:
	     *
	     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
	     *
	     * - If the `data` property of the request configuration object contains an object, serialize it
	     *   into JSON format.
	     *
	     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
	     *
	     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
	     *  - If JSON response is detected, deserialize it using a JSON parser.
	     *
	     *
	     * ### Overriding the Default Transformations Per Request
	     *
	     * If you wish override the request/response transformations only for a single request then provide
	     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
	     * into `$http`.
	     *
	     * Note that if you provide these properties on the config object the default transformations will be
	     * overwritten. If you wish to augment the default transformations then you must include them in your
	     * local transformation array.
	     *
	     * The following code demonstrates adding a new response transformation to be run after the default response
	     * transformations have been run.
	     *
	     * ```js
	     * function appendTransform(defaults, transform) {
	     *
	     *   // We can't guarantee that the default transformation is an array
	     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
	     *
	     *   // Append the new transformation to the defaults
	     *   return defaults.concat(transform);
	     * }
	     *
	     * $http({
	     *   url: '...',
	     *   method: 'GET',
	     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
	     *     return doTransform(value);
	     *   })
	     * });
	     * ```
	     *
	     *
	     * ## Caching
	     *
	     * To enable caching, set the request configuration `cache` property to `true` (to use default
	     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
	     * When the cache is enabled, `$http` stores the response from the server in the specified
	     * cache. The next time the same request is made, the response is served from the cache without
	     * sending a request to the server.
	     *
	     * Note that even if the response is served from cache, delivery of the data is asynchronous in
	     * the same way that real requests are.
	     *
	     * If there are multiple GET requests for the same URL that should be cached using the same
	     * cache, but the cache is not populated yet, only one request to the server will be made and
	     * the remaining requests will be fulfilled using the response from the first request.
	     *
	     * You can change the default cache to a new object (built with
	     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
	     * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set
	     * their `cache` property to `true` will now use this cache object.
	     *
	     * If you set the default cache to `false` then only requests that specify their own custom
	     * cache object will be cached.
	     *
	     * ## Interceptors
	     *
	     * Before you start creating interceptors, be sure to understand the
	     * {@link ng.$q $q and deferred/promise APIs}.
	     *
	     * For purposes of global error handling, authentication, or any kind of synchronous or
	     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
	     * able to intercept requests before they are handed to the server and
	     * responses before they are handed over to the application code that
	     * initiated these requests. The interceptors leverage the {@link ng.$q
	     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
	     *
	     * The interceptors are service factories that are registered with the `$httpProvider` by
	     * adding them to the `$httpProvider.interceptors` array. The factory is called and
	     * injected with dependencies (if specified) and returns the interceptor.
	     *
	     * There are two kinds of interceptors (and two kinds of rejection interceptors):
	     *
	     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
	     *     modify the `config` object or create a new one. The function needs to return the `config`
	     *     object directly, or a promise containing the `config` or a new `config` object.
	     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *   * `response`: interceptors get called with http `response` object. The function is free to
	     *     modify the `response` object or create a new one. The function needs to return the `response`
	     *     object directly, or as a promise containing the `response` or a new `response` object.
	     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *
	     *
	     * ```js
	     *   // register the interceptor as a service
	     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
	     *     return {
	     *       // optional method
	     *       'request': function(config) {
	     *         // do something on success
	     *         return config;
	     *       },
	     *
	     *       // optional method
	     *      'requestError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       },
	     *
	     *
	     *
	     *       // optional method
	     *       'response': function(response) {
	     *         // do something on success
	     *         return response;
	     *       },
	     *
	     *       // optional method
	     *      'responseError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       }
	     *     };
	     *   });
	     *
	     *   $httpProvider.interceptors.push('myHttpInterceptor');
	     *
	     *
	     *   // alternatively, register the interceptor via an anonymous factory
	     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
	     *     return {
	     *      'request': function(config) {
	     *          // same as above
	     *       },
	     *
	     *       'response': function(response) {
	     *          // same as above
	     *       }
	     *     };
	     *   });
	     * ```
	     *
	     * ## Security Considerations
	     *
	     * When designing web applications, consider security threats from:
	     *
	     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
	     *
	     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
	     * pre-configured with strategies that address these issues, but for this to work backend server
	     * cooperation is required.
	     *
	     * ### JSON Vulnerability Protection
	     *
	     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * allows third party website to turn your JSON resource URL into
	     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
	     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
	     * Angular will automatically strip the prefix before processing it as JSON.
	     *
	     * For example if your server needs to return:
	     * ```js
	     * ['one','two']
	     * ```
	     *
	     * which is vulnerable to attack, your server can return:
	     * ```js
	     * )]}',
	     * ['one','two']
	     * ```
	     *
	     * Angular will strip the prefix, before processing the JSON.
	     *
	     *
	     * ### Cross Site Request Forgery (XSRF) Protection
	     *
	     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which
	     * an unauthorized site can gain your user's private data. Angular provides a mechanism
	     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
	     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
	     * JavaScript that runs on your domain could read the cookie, your server can be assured that
	     * the XHR came from JavaScript running on your domain. The header will not be set for
	     * cross-domain requests.
	     *
	     * To take advantage of this, your server needs to set a token in a JavaScript readable session
	     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
	     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
	     * that only JavaScript running on your domain could have sent the request. The token must be
	     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
	     * making up its own tokens). We recommend that the token is a digest of your site's
	     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
	     * for added security.
	     *
	     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
	     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
	     * or the per-request config object.
	     *
	     * In order to prevent collisions in environments where multiple Angular apps share the
	     * same domain or subdomain, we recommend that each application uses unique cookie name.
	     *
	     * @param {object} config Object describing the request to be made and how it should be
	     *    processed. The object has following properties:
	     *
	     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
	     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
	     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
	     *      with the `paramSerializer` and appended as GET parameters.
	     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
	     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
	     *      HTTP headers to send to the server. If the return value of a function is null, the
	     *      header will not be sent. Functions accept a config object as an argument.
	     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
	     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
	     *    - **transformRequest** –
	     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      request body and headers and returns its transformed (typically serialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **transformResponse** –
	     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      response body, headers and status and returns its transformed (typically deserialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default TransformationjqLiks}
	     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
	     *      prepare the string representation of request parameters (specified as an object).
	     *      If specified as string, it is interpreted as function registered with the
	     *      {@link $injector $injector}, which means you can create your own serializer
	     *      by registering it as a {@link auto.$provide#service service}.
	     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
	     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
	     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
	     *      GET request, otherwise if a cache instance built with
	     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
	     *      caching.
	     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
	     *      that should abort the request when resolved.
	     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
	     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
	     *      for more information.
	     *    - **responseType** - `{string}` - see
	     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
	     *
	     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object
	     *                        when the request succeeds or fails.
	     *
	     *
	     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
	     *   requests. This is primarily meant to be used for debugging purposes.
	     *
	     *
	     * @example
	<example module="httpExample">
	<file name="index.html">
	  <div ng-controller="FetchController">
	    <select ng-model="method" aria-label="Request method">
	      <option>GET</option>
	      <option>JSONP</option>
	    </select>
	    <input type="text" ng-model="url" size="80" aria-label="URL" />
	    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
	    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
	    <button id="samplejsonpbtn"
	      ng-click="updateModel('JSONP',
	                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
	      Sample JSONP
	    </button>
	    <button id="invalidjsonpbtn"
	      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
	        Invalid JSONP
	      </button>
	    <pre>http status code: {{status}}</pre>
	    <pre>http response data: {{data}}</pre>
	  </div>
	</file>
	<file name="script.js">
	  angular.module('httpExample', [])
	    .controller('FetchController', ['$scope', '$http', '$templateCache',
	      function($scope, $http, $templateCache) {
	        $scope.method = 'GET';
	        $scope.url = 'http-hello.html';

	        $scope.fetch = function() {
	          $scope.code = null;
	          $scope.response = null;

	          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
	            then(function(response) {
	              $scope.status = response.status;
	              $scope.data = response.data;
	            }, function(response) {
	              $scope.data = response.data || "Request failed";
	              $scope.status = response.status;
	          });
	        };

	        $scope.updateModel = function(method, url) {
	          $scope.method = method;
	          $scope.url = url;
	        };
	      }]);
	</file>
	<file name="http-hello.html">
	  Hello, $http!
	</file>
	<file name="protractor.js" type="protractor">
	  var status = element(by.binding('status'));
	  var data = element(by.binding('data'));
	  var fetchBtn = element(by.id('fetchbtn'));
	  var sampleGetBtn = element(by.id('samplegetbtn'));
	  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
	  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

	  it('should make an xhr GET request', function() {
	    sampleGetBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('200');
	    expect(data.getText()).toMatch(/Hello, \$http!/);
	  });

	// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
	// it('should make a JSONP request to angularjs.org', function() {
	//   sampleJsonpBtn.click();
	//   fetchBtn.click();
	//   expect(status.getText()).toMatch('200');
	//   expect(data.getText()).toMatch(/Super Hero!/);
	// });

	  it('should make JSONP request to invalid URL and invoke the error handler',
	      function() {
	    invalidJsonpBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('0');
	    expect(data.getText()).toMatch('Request failed');
	  });
	</file>
	</example>
	     */
            function $http(requestConfig) {
              if (!angular.isObject(requestConfig)) {
                throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
              }
              var config = extend({
                  method: 'get',
                  transformRequest: defaults.transformRequest,
                  transformResponse: defaults.transformResponse,
                  paramSerializer: defaults.paramSerializer
                }, requestConfig);
              config.headers = mergeHeaders(requestConfig);
              config.method = uppercase(config.method);
              config.paramSerializer = isString(config.paramSerializer) ? $injector.get(config.paramSerializer) : config.paramSerializer;
              var serverRequest = function (config) {
                var headers = config.headers;
                var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);
                // strip content-type if data is undefined
                if (isUndefined(reqData)) {
                  forEach(headers, function (value, header) {
                    if (lowercase(header) === 'content-type') {
                      delete headers[header];
                    }
                  });
                }
                if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
                  config.withCredentials = defaults.withCredentials;
                }
                // send request
                return sendReq(config, reqData).then(transformResponse, transformResponse);
              };
              var chain = [
                  serverRequest,
                  undefined
                ];
              var promise = $q.when(config);
              // apply interceptors
              forEach(reversedInterceptors, function (interceptor) {
                if (interceptor.request || interceptor.requestError) {
                  chain.unshift(interceptor.request, interceptor.requestError);
                }
                if (interceptor.response || interceptor.responseError) {
                  chain.push(interceptor.response, interceptor.responseError);
                }
              });
              while (chain.length) {
                var thenFn = chain.shift();
                var rejectFn = chain.shift();
                promise = promise.then(thenFn, rejectFn);
              }
              if (useLegacyPromise) {
                promise.success = function (fn) {
                  assertArgFn(fn, 'fn');
                  promise.then(function (response) {
                    fn(response.data, response.status, response.headers, config);
                  });
                  return promise;
                };
                promise.error = function (fn) {
                  assertArgFn(fn, 'fn');
                  promise.then(null, function (response) {
                    fn(response.data, response.status, response.headers, config);
                  });
                  return promise;
                };
              } else {
                promise.success = $httpMinErrLegacyFn('success');
                promise.error = $httpMinErrLegacyFn('error');
              }
              return promise;
              function transformResponse(response) {
                // make a copy since the response must be cacheable
                var resp = extend({}, response);
                if (!response.data) {
                  resp.data = response.data;
                } else {
                  resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);
                }
                return isSuccess(response.status) ? resp : $q.reject(resp);
              }
              function executeHeaderFns(headers, config) {
                var headerContent, processedHeaders = {};
                forEach(headers, function (headerFn, header) {
                  if (isFunction(headerFn)) {
                    headerContent = headerFn(config);
                    if (headerContent != null) {
                      processedHeaders[header] = headerContent;
                    }
                  } else {
                    processedHeaders[header] = headerFn;
                  }
                });
                return processedHeaders;
              }
              function mergeHeaders(config) {
                var defHeaders = defaults.headers, reqHeaders = extend({}, config.headers), defHeaderName, lowercaseDefHeaderName, reqHeaderName;
                defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);
                // using for-in instead of forEach to avoid unecessary iteration after header has been found
                defaultHeadersIteration:
                  for (defHeaderName in defHeaders) {
                    lowercaseDefHeaderName = lowercase(defHeaderName);
                    for (reqHeaderName in reqHeaders) {
                      if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
                        continue defaultHeadersIteration;
                      }
                    }
                    reqHeaders[defHeaderName] = defHeaders[defHeaderName];
                  }
                // execute if header value is a function for merged headers
                return executeHeaderFns(reqHeaders, shallowCopy(config));
              }
            }
            $http.pendingRequests = [];
            /**
	     * @ngdoc method
	     * @name $http#get
	     *
	     * @description
	     * Shortcut method to perform `GET` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
            /**
	     * @ngdoc method
	     * @name $http#delete
	     *
	     * @description
	     * Shortcut method to perform `DELETE` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
            /**
	     * @ngdoc method
	     * @name $http#head
	     *
	     * @description
	     * Shortcut method to perform `HEAD` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
            /**
	     * @ngdoc method
	     * @name $http#jsonp
	     *
	     * @description
	     * Shortcut method to perform `JSONP` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request.
	     *                     The name of the callback should be the string `JSON_CALLBACK`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
            createShortMethods('get', 'delete', 'head', 'jsonp');
            /**
	     * @ngdoc method
	     * @name $http#post
	     *
	     * @description
	     * Shortcut method to perform `POST` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
            /**
	     * @ngdoc method
	     * @name $http#put
	     *
	     * @description
	     * Shortcut method to perform `PUT` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
            /**
	      * @ngdoc method
	      * @name $http#patch
	      *
	      * @description
	      * Shortcut method to perform `PATCH` request.
	      *
	      * @param {string} url Relative or absolute URL specifying the destination of the request
	      * @param {*} data Request content
	      * @param {Object=} config Optional configuration object
	      * @returns {HttpPromise} Future object
	      */
            createShortMethodsWithData('post', 'put', 'patch');
            /**
	         * @ngdoc property
	         * @name $http#defaults
	         *
	         * @description
	         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
	         * default headers, withCredentials as well as request and response transformations.
	         *
	         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
	         */
            $http.defaults = defaults;
            return $http;
            function createShortMethods(names) {
              forEach(arguments, function (name) {
                $http[name] = function (url, config) {
                  return $http(extend({}, config || {}, {
                    method: name,
                    url: url
                  }));
                };
              });
            }
            function createShortMethodsWithData(name) {
              forEach(arguments, function (name) {
                $http[name] = function (url, data, config) {
                  return $http(extend({}, config || {}, {
                    method: name,
                    url: url,
                    data: data
                  }));
                };
              });
            }
            /**
	     * Makes the request.
	     *
	     * !!! ACCESSES CLOSURE VARS:
	     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
	     */
            function sendReq(config, reqData) {
              var deferred = $q.defer(), promise = deferred.promise, cache, cachedResp, reqHeaders = config.headers, url = buildUrl(config.url, config.paramSerializer(config.params));
              $http.pendingRequests.push(config);
              promise.then(removePendingReq, removePendingReq);
              if ((config.cache || defaults.cache) && config.cache !== false && (config.method === 'GET' || config.method === 'JSONP')) {
                cache = isObject(config.cache) ? config.cache : isObject(defaults.cache) ? defaults.cache : defaultCache;
              }
              if (cache) {
                cachedResp = cache.get(url);
                if (isDefined(cachedResp)) {
                  if (isPromiseLike(cachedResp)) {
                    // cached request has already been sent, but there is no response yet
                    cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
                  } else {
                    // serving from cache
                    if (isArray(cachedResp)) {
                      resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
                    } else {
                      resolvePromise(cachedResp, 200, {}, 'OK');
                    }
                  }
                } else {
                  // put the promise for the non-transformed response into cache as a placeholder
                  cache.put(url, promise);
                }
              }
              // if we won't have the response in cache, set the xsrf headers and
              // send the request to the backend
              if (isUndefined(cachedResp)) {
                var xsrfValue = urlIsSameOrigin(config.url) ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName] : undefined;
                if (xsrfValue) {
                  reqHeaders[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue;
                }
                $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout, config.withCredentials, config.responseType);
              }
              return promise;
              /**
	       * Callback registered to $httpBackend():
	       *  - caches the response if desired
	       *  - resolves the raw $http promise
	       *  - calls $apply
	       */
              function done(status, response, headersString, statusText) {
                if (cache) {
                  if (isSuccess(status)) {
                    cache.put(url, [
                      status,
                      response,
                      parseHeaders(headersString),
                      statusText
                    ]);
                  } else {
                    // remove promise from the cache
                    cache.remove(url);
                  }
                }
                function resolveHttpPromise() {
                  resolvePromise(response, status, headersString, statusText);
                }
                if (useApplyAsync) {
                  $rootScope.$applyAsync(resolveHttpPromise);
                } else {
                  resolveHttpPromise();
                  if (!$rootScope.$$phase)
                    $rootScope.$apply();
                }
              }
              /**
	       * Resolves the raw $http promise.
	       */
              function resolvePromise(response, status, headers, statusText) {
                //status: HTTP response status code, 0, -1 (aborted by timeout / promise)
                status = status >= -1 ? status : 0;
                (isSuccess(status) ? deferred.resolve : deferred.reject)({
                  data: response,
                  status: status,
                  headers: headersGetter(headers),
                  config: config,
                  statusText: statusText
                });
              }
              function resolvePromiseWithResult(result) {
                resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
              }
              function removePendingReq() {
                var idx = $http.pendingRequests.indexOf(config);
                if (idx !== -1)
                  $http.pendingRequests.splice(idx, 1);
              }
            }
            function buildUrl(url, serializedParams) {
              if (serializedParams.length > 0) {
                url += (url.indexOf('?') == -1 ? '?' : '&') + serializedParams;
              }
              return url;
            }
          }
        ];
      }
      /**
	 * @ngdoc service
	 * @name $xhrFactory
	 *
	 * @description
	 * Factory function used to create XMLHttpRequest objects.
	 *
	 * Replace or decorate this service to create your own custom XMLHttpRequest objects.
	 *
	 * ```
	 * angular.module('myApp', [])
	 * .factory('$xhrFactory', function() {
	 *   return function createXhr(method, url) {
	 *     return new window.XMLHttpRequest({mozSystem: true});
	 *   };
	 * });
	 * ```
	 *
	 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
	 * @param {string} url URL of the request.
	 */
      function $xhrFactoryProvider() {
        this.$get = function () {
          return function createXhr() {
            return new window.XMLHttpRequest();
          };
        };
      }
      /**
	 * @ngdoc service
	 * @name $httpBackend
	 * @requires $window
	 * @requires $document
	 * @requires $xhrFactory
	 *
	 * @description
	 * HTTP backend used by the {@link ng.$http service} that delegates to
	 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
	 *
	 * You should never need to use this service directly, instead use the higher-level abstractions:
	 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
	 *
	 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
	 * $httpBackend} which can be trained with responses.
	 */
      function $HttpBackendProvider() {
        this.$get = [
          '$browser',
          '$window',
          '$document',
          '$xhrFactory',
          function ($browser, $window, $document, $xhrFactory) {
            return createHttpBackend($browser, $xhrFactory, $browser.defer, $window.angular.callbacks, $document[0]);
          }
        ];
      }
      function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
        // TODO(vojta): fix the signature
        return function (method, url, post, callback, headers, timeout, withCredentials, responseType) {
          $browser.$$incOutstandingRequestCount();
          url = url || $browser.url();
          if (lowercase(method) == 'jsonp') {
            var callbackId = '_' + (callbacks.counter++).toString(36);
            callbacks[callbackId] = function (data) {
              callbacks[callbackId].data = data;
              callbacks[callbackId].called = true;
            };
            var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId), callbackId, function (status, text) {
                completeRequest(callback, status, callbacks[callbackId].data, '', text);
                callbacks[callbackId] = noop;
              });
          } else {
            var xhr = createXhr(method, url);
            xhr.open(method, url, true);
            forEach(headers, function (value, key) {
              if (isDefined(value)) {
                xhr.setRequestHeader(key, value);
              }
            });
            xhr.onload = function requestLoaded() {
              var statusText = xhr.statusText || '';
              // responseText is the old-school way of retrieving response (supported by IE9)
              // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
              var response = 'response' in xhr ? xhr.response : xhr.responseText;
              // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
              var status = xhr.status === 1223 ? 204 : xhr.status;
              // fix status code when it is 0 (0 status is undocumented).
              // Occurs when accessing file resources or on Android 4.1 stock browser
              // while retrieving files from application cache.
              if (status === 0) {
                status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
              }
              completeRequest(callback, status, response, xhr.getAllResponseHeaders(), statusText);
            };
            var requestError = function () {
              // The response is always empty
              // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
              completeRequest(callback, -1, null, null, '');
            };
            xhr.onerror = requestError;
            xhr.onabort = requestError;
            if (withCredentials) {
              xhr.withCredentials = true;
            }
            if (responseType) {
              try {
                xhr.responseType = responseType;
              } catch (e) {
                // WebKit added support for the json responseType value on 09/03/2013
                // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
                // known to throw when setting the value "json" as the response type. Other older
                // browsers implementing the responseType
                //
                // The json response type can be ignored if not supported, because JSON payloads are
                // parsed on the client-side regardless.
                if (responseType !== 'json') {
                  throw e;
                }
              }
            }
            xhr.send(isUndefined(post) ? null : post);
          }
          if (timeout > 0) {
            var timeoutId = $browserDefer(timeoutRequest, timeout);
          } else if (isPromiseLike(timeout)) {
            timeout.then(timeoutRequest);
          }
          function timeoutRequest() {
            jsonpDone && jsonpDone();
            xhr && xhr.abort();
          }
          function completeRequest(callback, status, response, headersString, statusText) {
            // cancel timeout and subsequent timeout promise resolution
            if (isDefined(timeoutId)) {
              $browserDefer.cancel(timeoutId);
            }
            jsonpDone = xhr = null;
            callback(status, response, headersString, statusText);
            $browser.$$completeOutstandingRequest(noop);
          }
        };
        function jsonpReq(url, callbackId, done) {
          // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
          // - fetches local scripts via XHR and evals them
          // - adds and immediately removes script elements from the document
          var script = rawDocument.createElement('script'), callback = null;
          script.type = 'text/javascript';
          script.src = url;
          script.async = true;
          callback = function (event) {
            removeEventListenerFn(script, 'load', callback);
            removeEventListenerFn(script, 'error', callback);
            rawDocument.body.removeChild(script);
            script = null;
            var status = -1;
            var text = 'unknown';
            if (event) {
              if (event.type === 'load' && !callbacks[callbackId].called) {
                event = { type: 'error' };
              }
              text = event.type;
              status = event.type === 'error' ? 404 : 200;
            }
            if (done) {
              done(status, text);
            }
          };
          addEventListenerFn(script, 'load', callback);
          addEventListenerFn(script, 'error', callback);
          rawDocument.body.appendChild(script);
          return callback;
        }
      }
      var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');
      $interpolateMinErr.throwNoconcat = function (text) {
        throw $interpolateMinErr('noconcat', 'Error while interpolating: {0}\nStrict Contextual Escaping disallows ' + 'interpolations that concatenate multiple expressions when a trusted value is ' + 'required.  See http://docs.angularjs.org/api/ng.$sce', text);
      };
      $interpolateMinErr.interr = function (text, err) {
        return $interpolateMinErr('interr', 'Can\'t interpolate: {0}\n{1}', text, err.toString());
      };
      /**
	 * @ngdoc provider
	 * @name $interpolateProvider
	 *
	 * @description
	 *
	 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
	 *
	 * @example
	<example module="customInterpolationApp">
	<file name="index.html">
	<script>
	  var customInterpolationApp = angular.module('customInterpolationApp', []);

	  customInterpolationApp.config(function($interpolateProvider) {
	    $interpolateProvider.startSymbol('//');
	    $interpolateProvider.endSymbol('//');
	  });


	  customInterpolationApp.controller('DemoController', function() {
	      this.label = "This binding is brought you by // interpolation symbols.";
	  });
	</script>
	<div ng-app="App" ng-controller="DemoController as demo">
	    //demo.label//
	</div>
	</file>
	<file name="protractor.js" type="protractor">
	  it('should interpolate binding with custom symbols', function() {
	    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
	  });
	</file>
	</example>
	 */
      function $InterpolateProvider() {
        var startSymbol = '{{';
        var endSymbol = '}}';
        /**
	   * @ngdoc method
	   * @name $interpolateProvider#startSymbol
	   * @description
	   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
	   *
	   * @param {string=} value new value to set the starting symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
        this.startSymbol = function (value) {
          if (value) {
            startSymbol = value;
            return this;
          } else {
            return startSymbol;
          }
        };
        /**
	   * @ngdoc method
	   * @name $interpolateProvider#endSymbol
	   * @description
	   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	   *
	   * @param {string=} value new value to set the ending symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
        this.endSymbol = function (value) {
          if (value) {
            endSymbol = value;
            return this;
          } else {
            return endSymbol;
          }
        };
        this.$get = [
          '$parse',
          '$exceptionHandler',
          '$sce',
          function ($parse, $exceptionHandler, $sce) {
            var startSymbolLength = startSymbol.length, endSymbolLength = endSymbol.length, escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'), escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');
            function escape(ch) {
              return '\\\\\\' + ch;
            }
            function unescapeText(text) {
              return text.replace(escapedStartRegexp, startSymbol).replace(escapedEndRegexp, endSymbol);
            }
            function stringify(value) {
              if (value == null) {
                // null || undefined
                return '';
              }
              switch (typeof value) {
              case 'string':
                break;
              case 'number':
                value = '' + value;
                break;
              default:
                value = toJson(value);
              }
              return value;
            }
            /**
	     * @ngdoc service
	     * @name $interpolate
	     * @kind function
	     *
	     * @requires $parse
	     * @requires $sce
	     *
	     * @description
	     *
	     * Compiles a string with markup into an interpolation function. This service is used by the
	     * HTML {@link ng.$compile $compile} service for data binding. See
	     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
	     * interpolation markup.
	     *
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var exp = $interpolate('Hello {{name | uppercase}}!');
	     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');
	     * ```
	     *
	     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
	     * `true`, the interpolation function will return `undefined` unless all embedded expressions
	     * evaluate to a value other than `undefined`.
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var context = {greeting: 'Hello', name: undefined };
	     *
	     *   // default "forgiving" mode
	     *   var exp = $interpolate('{{greeting}} {{name}}!');
	     *   expect(exp(context)).toEqual('Hello !');
	     *
	     *   // "allOrNothing" mode
	     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
	     *   expect(exp(context)).toBeUndefined();
	     *   context.name = 'Angular';
	     *   expect(exp(context)).toEqual('Hello Angular!');
	     * ```
	     *
	     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
	     *
	     * ####Escaped Interpolation
	     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
	     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
	     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
	     * or binding.
	     *
	     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
	     * degree, while also enabling code examples to work without relying on the
	     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
	     *
	     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
	     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
	     * interpolation start/end markers with their escaped counterparts.**
	     *
	     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
	     * output when the $interpolate service processes the text. So, for HTML elements interpolated
	     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
	     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
	     * this is typically useful only when user-data is used in rendering a template from the server, or
	     * when otherwise untrusted data is used by a directive.
	     *
	     * <example>
	     *  <file name="index.html">
	     *    <div ng-init="username='A user'">
	     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
	     *        </p>
	     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
	     *        application, but fails to accomplish their task, because the server has correctly
	     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
	     *        characters.</p>
	     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
	     *        from the database by an administrator.</p>
	     *    </div>
	     *  </file>
	     * </example>
	     *
	     * @param {string} text The text with markup to interpolate.
	     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
	     *    embedded expression in order to return an interpolation function. Strings with no
	     *    embedded expression will return null for the interpolation function.
	     * @param {string=} trustedContext when provided, the returned function passes the interpolated
	     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
	     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
	     *    provides Strict Contextual Escaping for details.
	     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
	     *    unless all embedded expressions evaluate to a value other than `undefined`.
	     * @returns {function(context)} an interpolation function which is used to compute the
	     *    interpolated string. The function has these parameters:
	     *
	     * - `context`: evaluation context for all expressions embedded in the interpolated text
	     */
            function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
              allOrNothing = !!allOrNothing;
              var startIndex, endIndex, index = 0, expressions = [], parseFns = [], textLength = text.length, exp, concat = [], expressionPositions = [];
              while (index < textLength) {
                if ((startIndex = text.indexOf(startSymbol, index)) != -1 && (endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1) {
                  if (index !== startIndex) {
                    concat.push(unescapeText(text.substring(index, startIndex)));
                  }
                  exp = text.substring(startIndex + startSymbolLength, endIndex);
                  expressions.push(exp);
                  parseFns.push($parse(exp, parseStringifyInterceptor));
                  index = endIndex + endSymbolLength;
                  expressionPositions.push(concat.length);
                  concat.push('');
                } else {
                  // we did not find an interpolation, so we have to add the remainder to the separators array
                  if (index !== textLength) {
                    concat.push(unescapeText(text.substring(index)));
                  }
                  break;
                }
              }
              // Concatenating expressions makes it hard to reason about whether some combination of
              // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
              // single expression be used for iframe[src], object[src], etc., we ensure that the value
              // that's used is assigned or constructed by some JS code somewhere that is more testable or
              // make it obvious that you bound the value to some user controlled value.  This helps reduce
              // the load when auditing for XSS issues.
              if (trustedContext && concat.length > 1) {
                $interpolateMinErr.throwNoconcat(text);
              }
              if (!mustHaveExpression || expressions.length) {
                var compute = function (values) {
                  for (var i = 0, ii = expressions.length; i < ii; i++) {
                    if (allOrNothing && isUndefined(values[i]))
                      return;
                    concat[expressionPositions[i]] = values[i];
                  }
                  return concat.join('');
                };
                var getValue = function (value) {
                  return trustedContext ? $sce.getTrusted(trustedContext, value) : $sce.valueOf(value);
                };
                return extend(function interpolationFn(context) {
                  var i = 0;
                  var ii = expressions.length;
                  var values = new Array(ii);
                  try {
                    for (; i < ii; i++) {
                      values[i] = parseFns[i](context);
                    }
                    return compute(values);
                  } catch (err) {
                    $exceptionHandler($interpolateMinErr.interr(text, err));
                  }
                }, {
                  exp: text,
                  expressions: expressions,
                  $$watchDelegate: function (scope, listener) {
                    var lastValue;
                    return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
                      var currValue = compute(values);
                      if (isFunction(listener)) {
                        listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
                      }
                      lastValue = currValue;
                    });
                  }
                });
              }
              function parseStringifyInterceptor(value) {
                try {
                  value = getValue(value);
                  return allOrNothing && !isDefined(value) ? value : stringify(value);
                } catch (err) {
                  $exceptionHandler($interpolateMinErr.interr(text, err));
                }
              }
            }
            /**
	     * @ngdoc method
	     * @name $interpolate#startSymbol
	     * @description
	     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
	     *
	     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} start symbol.
	     */
            $interpolate.startSymbol = function () {
              return startSymbol;
            };
            /**
	     * @ngdoc method
	     * @name $interpolate#endSymbol
	     * @description
	     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	     *
	     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} end symbol.
	     */
            $interpolate.endSymbol = function () {
              return endSymbol;
            };
            return $interpolate;
          }
        ];
      }
      function $IntervalProvider() {
        this.$get = [
          '$rootScope',
          '$window',
          '$q',
          '$$q',
          function ($rootScope, $window, $q, $$q) {
            var intervals = {};
            /**
	      * @ngdoc service
	      * @name $interval
	      *
	      * @description
	      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
	      * milliseconds.
	      *
	      * The return value of registering an interval function is a promise. This promise will be
	      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
	      * run indefinitely if `count` is not defined. The value of the notification will be the
	      * number of iterations that have run.
	      * To cancel an interval, call `$interval.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
	      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
	      * time.
	      *
	      * <div class="alert alert-warning">
	      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
	      * with them.  In particular they are not automatically destroyed when a controller's scope or a
	      * directive's element are destroyed.
	      * You should take this into consideration and make sure to always cancel the interval at the
	      * appropriate moment.  See the example below for more details on how and when to do this.
	      * </div>
	      *
	      * @param {function()} fn A function that should be called repeatedly.
	      * @param {number} delay Number of milliseconds between each function call.
	      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
	      *   indefinitely.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {promise} A promise which will be notified on each iteration.
	      *
	      * @example
	      * <example module="intervalExample">
	      * <file name="index.html">
	      *   <script>
	      *     angular.module('intervalExample', [])
	      *       .controller('ExampleController', ['$scope', '$interval',
	      *         function($scope, $interval) {
	      *           $scope.format = 'M/d/yy h:mm:ss a';
	      *           $scope.blood_1 = 100;
	      *           $scope.blood_2 = 120;
	      *
	      *           var stop;
	      *           $scope.fight = function() {
	      *             // Don't start a new fight if we are already fighting
	      *             if ( angular.isDefined(stop) ) return;
	      *
	      *             stop = $interval(function() {
	      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
	      *                 $scope.blood_1 = $scope.blood_1 - 3;
	      *                 $scope.blood_2 = $scope.blood_2 - 4;
	      *               } else {
	      *                 $scope.stopFight();
	      *               }
	      *             }, 100);
	      *           };
	      *
	      *           $scope.stopFight = function() {
	      *             if (angular.isDefined(stop)) {
	      *               $interval.cancel(stop);
	      *               stop = undefined;
	      *             }
	      *           };
	      *
	      *           $scope.resetFight = function() {
	      *             $scope.blood_1 = 100;
	      *             $scope.blood_2 = 120;
	      *           };
	      *
	      *           $scope.$on('$destroy', function() {
	      *             // Make sure that the interval is destroyed too
	      *             $scope.stopFight();
	      *           });
	      *         }])
	      *       // Register the 'myCurrentTime' directive factory method.
	      *       // We inject $interval and dateFilter service since the factory method is DI.
	      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
	      *         function($interval, dateFilter) {
	      *           // return the directive link function. (compile function not needed)
	      *           return function(scope, element, attrs) {
	      *             var format,  // date format
	      *                 stopTime; // so that we can cancel the time updates
	      *
	      *             // used to update the UI
	      *             function updateTime() {
	      *               element.text(dateFilter(new Date(), format));
	      *             }
	      *
	      *             // watch the expression, and update the UI on change.
	      *             scope.$watch(attrs.myCurrentTime, function(value) {
	      *               format = value;
	      *               updateTime();
	      *             });
	      *
	      *             stopTime = $interval(updateTime, 1000);
	      *
	      *             // listen on DOM destroy (removal) event, and cancel the next UI update
	      *             // to prevent updating time after the DOM element was removed.
	      *             element.on('$destroy', function() {
	      *               $interval.cancel(stopTime);
	      *             });
	      *           }
	      *         }]);
	      *   </script>
	      *
	      *   <div>
	      *     <div ng-controller="ExampleController">
	      *       <label>Date format: <input ng-model="format"></label> <hr/>
	      *       Current time is: <span my-current-time="format"></span>
	      *       <hr/>
	      *       Blood 1 : <font color='red'>{{blood_1}}</font>
	      *       Blood 2 : <font color='red'>{{blood_2}}</font>
	      *       <button type="button" data-ng-click="fight()">Fight</button>
	      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
	      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
	      *     </div>
	      *   </div>
	      *
	      * </file>
	      * </example>
	      */
            function interval(fn, delay, count, invokeApply) {
              var hasParams = arguments.length > 4, args = hasParams ? sliceArgs(arguments, 4) : [], setInterval = $window.setInterval, clearInterval = $window.clearInterval, iteration = 0, skipApply = isDefined(invokeApply) && !invokeApply, deferred = (skipApply ? $$q : $q).defer(), promise = deferred.promise;
              count = isDefined(count) ? count : 0;
              promise.then(null, null, !hasParams ? fn : function () {
                fn.apply(null, args);
              });
              promise.$$intervalId = setInterval(function tick() {
                deferred.notify(iteration++);
                if (count > 0 && iteration >= count) {
                  deferred.resolve(iteration);
                  clearInterval(promise.$$intervalId);
                  delete intervals[promise.$$intervalId];
                }
                if (!skipApply)
                  $rootScope.$apply();
              }, delay);
              intervals[promise.$$intervalId] = deferred;
              return promise;
            }
            /**
	      * @ngdoc method
	      * @name $interval#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`.
	      *
	      * @param {Promise=} promise returned by the `$interval` function.
	      * @returns {boolean} Returns `true` if the task was successfully canceled.
	      */
            interval.cancel = function (promise) {
              if (promise && promise.$$intervalId in intervals) {
                intervals[promise.$$intervalId].reject('canceled');
                $window.clearInterval(promise.$$intervalId);
                delete intervals[promise.$$intervalId];
                return true;
              }
              return false;
            };
            return interval;
          }
        ];
      }
      /**
	 * @ngdoc service
	 * @name $locale
	 *
	 * @description
	 * $locale service provides localization rules for various Angular components. As of right now the
	 * only public api is:
	 *
	 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
	 */
      var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/, DEFAULT_PORTS = {
          'http': 80,
          'https': 443,
          'ftp': 21
        };
      var $locationMinErr = minErr('$location');
      /**
	 * Encode path using encodeUriSegment, ignoring forward slashes
	 *
	 * @param {string} path Path to encode
	 * @returns {string}
	 */
      function encodePath(path) {
        var segments = path.split('/'), i = segments.length;
        while (i--) {
          segments[i] = encodeUriSegment(segments[i]);
        }
        return segments.join('/');
      }
      function parseAbsoluteUrl(absoluteUrl, locationObj) {
        var parsedUrl = urlResolve(absoluteUrl);
        locationObj.$$protocol = parsedUrl.protocol;
        locationObj.$$host = parsedUrl.hostname;
        locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
      }
      function parseAppUrl(relativeUrl, locationObj) {
        var prefixed = relativeUrl.charAt(0) !== '/';
        if (prefixed) {
          relativeUrl = '/' + relativeUrl;
        }
        var match = urlResolve(relativeUrl);
        locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ? match.pathname.substring(1) : match.pathname);
        locationObj.$$search = parseKeyValue(match.search);
        locationObj.$$hash = decodeURIComponent(match.hash);
        // make sure path starts with '/';
        if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
          locationObj.$$path = '/' + locationObj.$$path;
        }
      }
      /**
	 *
	 * @param {string} begin
	 * @param {string} whole
	 * @returns {string} returns text from whole after begin or undefined if it does not begin with
	 *                   expected string.
	 */
      function beginsWith(begin, whole) {
        if (whole.indexOf(begin) === 0) {
          return whole.substr(begin.length);
        }
      }
      function stripHash(url) {
        var index = url.indexOf('#');
        return index == -1 ? url : url.substr(0, index);
      }
      function trimEmptyHash(url) {
        return url.replace(/(#.+)|#$/, '$1');
      }
      function stripFile(url) {
        return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
      }
      /* return the server only (scheme://host:port) */
      function serverBase(url) {
        return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
      }
      /**
	 * LocationHtml5Url represents an url
	 * This object is exposed as $location service when HTML5 mode is enabled and supported
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} basePrefix url path prefix
	 */
      function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
        this.$$html5 = true;
        basePrefix = basePrefix || '';
        parseAbsoluteUrl(appBase, this);
        /**
	   * Parse given html5 (regular) url string into properties
	   * @param {string} url HTML5 url
	   * @private
	   */
        this.$$parse = function (url) {
          var pathUrl = beginsWith(appBaseNoFile, url);
          if (!isString(pathUrl)) {
            throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url, appBaseNoFile);
          }
          parseAppUrl(pathUrl, this);
          if (!this.$$path) {
            this.$$path = '/';
          }
          this.$$compose();
        };
        /**
	   * Compose url and update `absUrl` property
	   * @private
	   */
        this.$$compose = function () {
          var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
          this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
          this.$$absUrl = appBaseNoFile + this.$$url.substr(1);  // first char is always '/'
        };
        this.$$parseLinkUrl = function (url, relHref) {
          if (relHref && relHref[0] === '#') {
            // special case for links to hash fragments:
            // keep the old url and only replace the hash fragment
            this.hash(relHref.slice(1));
            return true;
          }
          var appUrl, prevAppUrl;
          var rewrittenUrl;
          if (isDefined(appUrl = beginsWith(appBase, url))) {
            prevAppUrl = appUrl;
            if (isDefined(appUrl = beginsWith(basePrefix, appUrl))) {
              rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
            } else {
              rewrittenUrl = appBase + prevAppUrl;
            }
          } else if (isDefined(appUrl = beginsWith(appBaseNoFile, url))) {
            rewrittenUrl = appBaseNoFile + appUrl;
          } else if (appBaseNoFile == url + '/') {
            rewrittenUrl = appBaseNoFile;
          }
          if (rewrittenUrl) {
            this.$$parse(rewrittenUrl);
          }
          return !!rewrittenUrl;
        };
      }
      /**
	 * LocationHashbangUrl represents url
	 * This object is exposed as $location service when developer doesn't opt into html5 mode.
	 * It also serves as the base class for html5 mode fallback on legacy browsers.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
      function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {
        parseAbsoluteUrl(appBase, this);
        /**
	   * Parse given hashbang url into properties
	   * @param {string} url Hashbang url
	   * @private
	   */
        this.$$parse = function (url) {
          var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
          var withoutHashUrl;
          if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {
            // The rest of the url starts with a hash so we have
            // got either a hashbang path or a plain hash fragment
            withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);
            if (isUndefined(withoutHashUrl)) {
              // There was no hashbang prefix so we just have a hash fragment
              withoutHashUrl = withoutBaseUrl;
            }
          } else {
            // There was no hashbang path nor hash fragment:
            // If we are in HTML5 mode we use what is left as the path;
            // Otherwise we ignore what is left
            if (this.$$html5) {
              withoutHashUrl = withoutBaseUrl;
            } else {
              withoutHashUrl = '';
              if (isUndefined(withoutBaseUrl)) {
                appBase = url;
                this.replace();
              }
            }
          }
          parseAppUrl(withoutHashUrl, this);
          this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);
          this.$$compose();
          /*
	     * In Windows, on an anchor node on documents loaded from
	     * the filesystem, the browser will return a pathname
	     * prefixed with the drive name ('/C:/path') when a
	     * pathname without a drive is set:
	     *  * a.setAttribute('href', '/foo')
	     *   * a.pathname === '/C:/foo' //true
	     *
	     * Inside of Angular, we're always using pathnames that
	     * do not include drive names for routing.
	     */
          function removeWindowsDriveName(path, url, base) {
            /*
	      Matches paths for file protocol on windows,
	      such as /C:/foo/bar, and captures only /foo/bar.
	      */
            var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;
            var firstPathSegmentMatch;
            //Get the relative path from the input URL.
            if (url.indexOf(base) === 0) {
              url = url.replace(base, '');
            }
            // The input URL intentionally contains a first path segment that ends with a colon.
            if (windowsFilePathExp.exec(url)) {
              return path;
            }
            firstPathSegmentMatch = windowsFilePathExp.exec(path);
            return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
          }
        };
        /**
	   * Compose hashbang url and update `absUrl` property
	   * @private
	   */
        this.$$compose = function () {
          var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
          this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
          this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
        };
        this.$$parseLinkUrl = function (url, relHref) {
          if (stripHash(appBase) == stripHash(url)) {
            this.$$parse(url);
            return true;
          }
          return false;
        };
      }
      /**
	 * LocationHashbangUrl represents url
	 * This object is exposed as $location service when html5 history api is enabled but the browser
	 * does not support it.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
      function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
        this.$$html5 = true;
        LocationHashbangUrl.apply(this, arguments);
        this.$$parseLinkUrl = function (url, relHref) {
          if (relHref && relHref[0] === '#') {
            // special case for links to hash fragments:
            // keep the old url and only replace the hash fragment
            this.hash(relHref.slice(1));
            return true;
          }
          var rewrittenUrl;
          var appUrl;
          if (appBase == stripHash(url)) {
            rewrittenUrl = url;
          } else if (appUrl = beginsWith(appBaseNoFile, url)) {
            rewrittenUrl = appBase + hashPrefix + appUrl;
          } else if (appBaseNoFile === url + '/') {
            rewrittenUrl = appBaseNoFile;
          }
          if (rewrittenUrl) {
            this.$$parse(rewrittenUrl);
          }
          return !!rewrittenUrl;
        };
        this.$$compose = function () {
          var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
          this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
          // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
          this.$$absUrl = appBase + hashPrefix + this.$$url;
        };
      }
      var locationPrototype = {
          $$html5: false,
          $$replace: false,
          absUrl: locationGetter('$$absUrl'),
          url: function (url) {
            if (isUndefined(url)) {
              return this.$$url;
            }
            var match = PATH_MATCH.exec(url);
            if (match[1] || url === '')
              this.path(decodeURIComponent(match[1]));
            if (match[2] || match[1] || url === '')
              this.search(match[3] || '');
            this.hash(match[5] || '');
            return this;
          },
          protocol: locationGetter('$$protocol'),
          host: locationGetter('$$host'),
          port: locationGetter('$$port'),
          path: locationGetterSetter('$$path', function (path) {
            path = path !== null ? path.toString() : '';
            return path.charAt(0) == '/' ? path : '/' + path;
          }),
          search: function (search, paramValue) {
            switch (arguments.length) {
            case 0:
              return this.$$search;
            case 1:
              if (isString(search) || isNumber(search)) {
                search = search.toString();
                this.$$search = parseKeyValue(search);
              } else if (isObject(search)) {
                search = copy(search, {});
                // remove object undefined or null properties
                forEach(search, function (value, key) {
                  if (value == null)
                    delete search[key];
                });
                this.$$search = search;
              } else {
                throw $locationMinErr('isrcharg', 'The first argument of the `$location#search()` call must be a string or an object.');
              }
              break;
            default:
              if (isUndefined(paramValue) || paramValue === null) {
                delete this.$$search[search];
              } else {
                this.$$search[search] = paramValue;
              }
            }
            this.$$compose();
            return this;
          },
          hash: locationGetterSetter('$$hash', function (hash) {
            return hash !== null ? hash.toString() : '';
          }),
          replace: function () {
            this.$$replace = true;
            return this;
          }
        };
      forEach([
        LocationHashbangInHtml5Url,
        LocationHashbangUrl,
        LocationHtml5Url
      ], function (Location) {
        Location.prototype = Object.create(locationPrototype);
        /**
	   * @ngdoc method
	   * @name $location#state
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return the history state object when called without any parameter.
	   *
	   * Change the history state object when called with one parameter and return `$location`.
	   * The state object is later passed to `pushState` or `replaceState`.
	   *
	   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
	   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
	   * older browsers (like IE9 or Android < 4.0), don't use this method.
	   *
	   * @param {object=} state State object for pushState or replaceState
	   * @return {object} state
	   */
        Location.prototype.state = function (state) {
          if (!arguments.length) {
            return this.$$state;
          }
          if (Location !== LocationHtml5Url || !this.$$html5) {
            throw $locationMinErr('nostate', 'History API state support is available only ' + 'in HTML5 mode and only in browsers supporting HTML5 History API');
          }
          // The user might modify `stateObject` after invoking `$location.state(stateObject)`
          // but we're changing the $$state reference to $browser.state() during the $digest
          // so the modification window is narrow.
          this.$$state = isUndefined(state) ? null : state;
          return this;
        };
      });
      function locationGetter(property) {
        return function () {
          return this[property];
        };
      }
      function locationGetterSetter(property, preprocess) {
        return function (value) {
          if (isUndefined(value)) {
            return this[property];
          }
          this[property] = preprocess(value);
          this.$$compose();
          return this;
        };
      }
      /**
	 * @ngdoc service
	 * @name $location
	 *
	 * @requires $rootElement
	 *
	 * @description
	 * The $location service parses the URL in the browser address bar (based on the
	 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
	 * available to your application. Changes to the URL in the address bar are reflected into
	 * $location service and changes to $location are reflected into the browser address bar.
	 *
	 * **The $location service:**
	 *
	 * - Exposes the current URL in the browser address bar, so you can
	 *   - Watch and observe the URL.
	 *   - Change the URL.
	 * - Synchronizes the URL with the browser when the user
	 *   - Changes the address bar.
	 *   - Clicks the back or forward button (or clicks a History link).
	 *   - Clicks on a link.
	 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
	 *
	 * For more information see {@link guide/$location Developer Guide: Using $location}
	 */
      /**
	 * @ngdoc provider
	 * @name $locationProvider
	 * @description
	 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
	 */
      function $LocationProvider() {
        var hashPrefix = '', html5Mode = {
            enabled: false,
            requireBase: true,
            rewriteLinks: true
          };
        /**
	   * @ngdoc method
	   * @name $locationProvider#hashPrefix
	   * @description
	   * @param {string=} prefix Prefix for hash part (containing path and search)
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
        this.hashPrefix = function (prefix) {
          if (isDefined(prefix)) {
            hashPrefix = prefix;
            return this;
          } else {
            return hashPrefix;
          }
        };
        /**
	   * @ngdoc method
	   * @name $locationProvider#html5Mode
	   * @description
	   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
	   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
	   *   properties:
	   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
	   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
	   *     support `pushState`.
	   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
	   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
	   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
	   *     See the {@link guide/$location $location guide for more information}
	   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
	   *     enables/disables url rewriting for relative links.
	   *
	   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
	   */
        this.html5Mode = function (mode) {
          if (isBoolean(mode)) {
            html5Mode.enabled = mode;
            return this;
          } else if (isObject(mode)) {
            if (isBoolean(mode.enabled)) {
              html5Mode.enabled = mode.enabled;
            }
            if (isBoolean(mode.requireBase)) {
              html5Mode.requireBase = mode.requireBase;
            }
            if (isBoolean(mode.rewriteLinks)) {
              html5Mode.rewriteLinks = mode.rewriteLinks;
            }
            return this;
          } else {
            return html5Mode;
          }
        };
        /**
	   * @ngdoc event
	   * @name $location#$locationChangeStart
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted before a URL will change.
	   *
	   * This change can be prevented by calling
	   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
	   * details about event object. Upon successful change
	   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */
        /**
	   * @ngdoc event
	   * @name $location#$locationChangeSuccess
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted after a URL was changed.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */
        this.$get = [
          '$rootScope',
          '$browser',
          '$sniffer',
          '$rootElement',
          '$window',
          function ($rootScope, $browser, $sniffer, $rootElement, $window) {
            var $location, LocationMode, baseHref = $browser.baseHref(),
              // if base[href] is undefined, it defaults to ''
              initialUrl = $browser.url(), appBase;
            if (html5Mode.enabled) {
              if (!baseHref && html5Mode.requireBase) {
                throw $locationMinErr('nobase', '$location in HTML5 mode requires a <base> tag to be present!');
              }
              appBase = serverBase(initialUrl) + (baseHref || '/');
              LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
            } else {
              appBase = stripHash(initialUrl);
              LocationMode = LocationHashbangUrl;
            }
            var appBaseNoFile = stripFile(appBase);
            $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);
            $location.$$parseLinkUrl(initialUrl, initialUrl);
            $location.$$state = $browser.state();
            var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;
            function setBrowserUrlWithFallback(url, replace, state) {
              var oldUrl = $location.url();
              var oldState = $location.$$state;
              try {
                $browser.url(url, replace, state);
                // Make sure $location.state() returns referentially identical (not just deeply equal)
                // state object; this makes possible quick checking if the state changed in the digest
                // loop. Checking deep equality would be too expensive.
                $location.$$state = $browser.state();
              } catch (e) {
                // Restore old values if pushState fails
                $location.url(oldUrl);
                $location.$$state = oldState;
                throw e;
              }
            }
            $rootElement.on('click', function (event) {
              // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
              // currently we open nice url link and redirect then
              if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2)
                return;
              var elm = jqLite(event.target);
              // traverse the DOM up to find first A tag
              while (nodeName_(elm[0]) !== 'a') {
                // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
                if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0])
                  return;
              }
              var absHref = elm.prop('href');
              // get the actual href attribute - see
              // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
              var relHref = elm.attr('href') || elm.attr('xlink:href');
              if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
                // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
                // an animation.
                absHref = urlResolve(absHref.animVal).href;
              }
              // Ignore when url is started with javascript: or mailto:
              if (IGNORE_URI_REGEXP.test(absHref))
                return;
              if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
                if ($location.$$parseLinkUrl(absHref, relHref)) {
                  // We do a preventDefault for all urls that are part of the angular application,
                  // in html5mode and also without, so that we are able to abort navigation without
                  // getting double entries in the location history.
                  event.preventDefault();
                  // update location manually
                  if ($location.absUrl() != $browser.url()) {
                    $rootScope.$apply();
                    // hack to work around FF6 bug 684208 when scenario runner clicks on links
                    $window.angular['ff-684208-preventDefault'] = true;
                  }
                }
              }
            });
            // rewrite hashbang url <> html5 url
            if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {
              $browser.url($location.absUrl(), true);
            }
            var initializing = true;
            // update $location when $browser url changes
            $browser.onUrlChange(function (newUrl, newState) {
              if (isUndefined(beginsWith(appBaseNoFile, newUrl))) {
                // If we are navigating outside of the app then force a reload
                $window.location.href = newUrl;
                return;
              }
              $rootScope.$evalAsync(function () {
                var oldUrl = $location.absUrl();
                var oldState = $location.$$state;
                var defaultPrevented;
                $location.$$parse(newUrl);
                $location.$$state = newState;
                defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl, newState, oldState).defaultPrevented;
                // if the location was changed by a `$locationChangeStart` handler then stop
                // processing this location change
                if ($location.absUrl() !== newUrl)
                  return;
                if (defaultPrevented) {
                  $location.$$parse(oldUrl);
                  $location.$$state = oldState;
                  setBrowserUrlWithFallback(oldUrl, false, oldState);
                } else {
                  initializing = false;
                  afterLocationChange(oldUrl, oldState);
                }
              });
              if (!$rootScope.$$phase)
                $rootScope.$digest();
            });
            // update browser
            $rootScope.$watch(function $locationWatch() {
              var oldUrl = trimEmptyHash($browser.url());
              var newUrl = trimEmptyHash($location.absUrl());
              var oldState = $browser.state();
              var currentReplace = $location.$$replace;
              var urlOrStateChanged = oldUrl !== newUrl || $location.$$html5 && $sniffer.history && oldState !== $location.$$state;
              if (initializing || urlOrStateChanged) {
                initializing = false;
                $rootScope.$evalAsync(function () {
                  var newUrl = $location.absUrl();
                  var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl, $location.$$state, oldState).defaultPrevented;
                  // if the location was changed by a `$locationChangeStart` handler then stop
                  // processing this location change
                  if ($location.absUrl() !== newUrl)
                    return;
                  if (defaultPrevented) {
                    $location.$$parse(oldUrl);
                    $location.$$state = oldState;
                  } else {
                    if (urlOrStateChanged) {
                      setBrowserUrlWithFallback(newUrl, currentReplace, oldState === $location.$$state ? null : $location.$$state);
                    }
                    afterLocationChange(oldUrl, oldState);
                  }
                });
              }
              $location.$$replace = false;  // we don't need to return anything because $evalAsync will make the digest loop dirty when
                                            // there is a change
            });
            return $location;
            function afterLocationChange(oldUrl, oldState) {
              $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl, $location.$$state, oldState);
            }
          }
        ];
      }
      /**
	 * @ngdoc service
	 * @name $log
	 * @requires $window
	 *
	 * @description
	 * Simple service for logging. Default implementation safely writes the message
	 * into the browser's console (if present).
	 *
	 * The main purpose of this service is to simplify debugging and troubleshooting.
	 *
	 * The default is to log `debug` messages. You can use
	 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
	 *
	 * @example
	   <example module="logExample">
	     <file name="script.js">
	       angular.module('logExample', [])
	         .controller('LogController', ['$scope', '$log', function($scope, $log) {
	           $scope.$log = $log;
	           $scope.message = 'Hello World!';
	         }]);
	     </file>
	     <file name="index.html">
	       <div ng-controller="LogController">
	         <p>Reload this page with open console, enter text and hit the log button...</p>
	         <label>Message:
	         <input type="text" ng-model="message" /></label>
	         <button ng-click="$log.log(message)">log</button>
	         <button ng-click="$log.warn(message)">warn</button>
	         <button ng-click="$log.info(message)">info</button>
	         <button ng-click="$log.error(message)">error</button>
	         <button ng-click="$log.debug(message)">debug</button>
	       </div>
	     </file>
	   </example>
	 */
      /**
	 * @ngdoc provider
	 * @name $logProvider
	 * @description
	 * Use the `$logProvider` to configure how the application logs messages
	 */
      function $LogProvider() {
        var debug = true, self = this;
        /**
	   * @ngdoc method
	   * @name $logProvider#debugEnabled
	   * @description
	   * @param {boolean=} flag enable or disable debug level messages
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
        this.debugEnabled = function (flag) {
          if (isDefined(flag)) {
            debug = flag;
            return this;
          } else {
            return debug;
          }
        };
        this.$get = [
          '$window',
          function ($window) {
            return {
              log: consoleLog('log'),
              info: consoleLog('info'),
              warn: consoleLog('warn'),
              error: consoleLog('error'),
              debug: function () {
                var fn = consoleLog('debug');
                return function () {
                  if (debug) {
                    fn.apply(self, arguments);
                  }
                };
              }()
            };
            function formatError(arg) {
              if (arg instanceof Error) {
                if (arg.stack) {
                  arg = arg.message && arg.stack.indexOf(arg.message) === -1 ? 'Error: ' + arg.message + '\n' + arg.stack : arg.stack;
                } else if (arg.sourceURL) {
                  arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
                }
              }
              return arg;
            }
            function consoleLog(type) {
              var console = $window.console || {}, logFn = console[type] || console.log || noop, hasApply = false;
              // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
              // The reason behind this is that console.log has type "object" in IE8...
              try {
                hasApply = !!logFn.apply;
              } catch (e) {
              }
              if (hasApply) {
                return function () {
                  var args = [];
                  forEach(arguments, function (arg) {
                    args.push(formatError(arg));
                  });
                  return logFn.apply(console, args);
                };
              }
              // we are IE which either doesn't have window.console => this is noop and we do nothing,
              // or we are IE where console.log doesn't have apply so we log at least first 2 args
              return function (arg1, arg2) {
                logFn(arg1, arg2 == null ? '' : arg2);
              };
            }
          }
        ];
      }
      /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
      var $parseMinErr = minErr('$parse');
      // Sandboxing Angular Expressions
      // ------------------------------
      // Angular expressions are generally considered safe because these expressions only have direct
      // access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
      // obtaining a reference to native JS functions such as the Function constructor.
      //
      // As an example, consider the following Angular expression:
      //
      //   {}.toString.constructor('alert("evil JS code")')
      //
      // This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
      // against the expression language, but not to prevent exploits that were enabled by exposing
      // sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
      // practice and therefore we are not even trying to protect against interaction with an object
      // explicitly exposed in this way.
      //
      // In general, it is not possible to access a Window object from an angular expression unless a
      // window or some DOM object that has a reference to window is published onto a Scope.
      // Similarly we prevent invocations of function known to be dangerous, as well as assignments to
      // native objects.
      //
      // See https://docs.angularjs.org/guide/security
      function ensureSafeMemberName(name, fullExpression) {
        if (name === '__defineGetter__' || name === '__defineSetter__' || name === '__lookupGetter__' || name === '__lookupSetter__' || name === '__proto__') {
          throw $parseMinErr('isecfld', 'Attempting to access a disallowed field in Angular expressions! ' + 'Expression: {0}', fullExpression);
        }
        return name;
      }
      function getStringValue(name, fullExpression) {
        // From the JavaScript docs:
        // Property names must be strings. This means that non-string objects cannot be used
        // as keys in an object. Any non-string object, including a number, is typecasted
        // into a string via the toString method.
        //
        // So, to ensure that we are checking the same `name` that JavaScript would use,
        // we cast it to a string, if possible.
        // Doing `name + ''` can cause a repl error if the result to `toString` is not a string,
        // this is, this will handle objects that misbehave.
        name = name + '';
        if (!isString(name)) {
          throw $parseMinErr('iseccst', 'Cannot convert object to primitive value! ' + 'Expression: {0}', fullExpression);
        }
        return name;
      }
      function ensureSafeObject(obj, fullExpression) {
        // nifty check if obj is Function that is fast and works across iframes and other contexts
        if (obj) {
          if (obj.constructor === obj) {
            throw $parseMinErr('isecfn', 'Referencing Function in Angular expressions is disallowed! Expression: {0}', fullExpression);
          } else if (obj.window === obj) {
            throw $parseMinErr('isecwindow', 'Referencing the Window in Angular expressions is disallowed! Expression: {0}', fullExpression);
          } else if (obj.children && (obj.nodeName || obj.prop && obj.attr && obj.find)) {
            throw $parseMinErr('isecdom', 'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}', fullExpression);
          } else if (obj === Object) {
            throw $parseMinErr('isecobj', 'Referencing Object in Angular expressions is disallowed! Expression: {0}', fullExpression);
          }
        }
        return obj;
      }
      var CALL = Function.prototype.call;
      var APPLY = Function.prototype.apply;
      var BIND = Function.prototype.bind;
      function ensureSafeFunction(obj, fullExpression) {
        if (obj) {
          if (obj.constructor === obj) {
            throw $parseMinErr('isecfn', 'Referencing Function in Angular expressions is disallowed! Expression: {0}', fullExpression);
          } else if (obj === CALL || obj === APPLY || obj === BIND) {
            throw $parseMinErr('isecff', 'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}', fullExpression);
          }
        }
      }
      function ensureSafeAssignContext(obj, fullExpression) {
        if (obj) {
          if (obj === 0..constructor || obj === false.constructor || obj === ''.constructor || obj === {}.constructor || obj === [].constructor || obj === Function.constructor) {
            throw $parseMinErr('isecaf', 'Assigning to a constructor is disallowed! Expression: {0}', fullExpression);
          }
        }
      }
      var OPERATORS = createMap();
      forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function (operator) {
        OPERATORS[operator] = true;
      });
      var ESCAPE = {
          'n': '\n',
          'f': '\f',
          'r': '\r',
          't': '\t',
          'v': '\x0B',
          '\'': '\'',
          '"': '"'
        };
      /////////////////////////////////////////
      /**
	 * @constructor
	 */
      var Lexer = function (options) {
        this.options = options;
      };
      Lexer.prototype = {
        constructor: Lexer,
        lex: function (text) {
          this.text = text;
          this.index = 0;
          this.tokens = [];
          while (this.index < this.text.length) {
            var ch = this.text.charAt(this.index);
            if (ch === '"' || ch === '\'') {
              this.readString(ch);
            } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
              this.readNumber();
            } else if (this.isIdent(ch)) {
              this.readIdent();
            } else if (this.is(ch, '(){}[].,;:?')) {
              this.tokens.push({
                index: this.index,
                text: ch
              });
              this.index++;
            } else if (this.isWhitespace(ch)) {
              this.index++;
            } else {
              var ch2 = ch + this.peek();
              var ch3 = ch2 + this.peek(2);
              var op1 = OPERATORS[ch];
              var op2 = OPERATORS[ch2];
              var op3 = OPERATORS[ch3];
              if (op1 || op2 || op3) {
                var token = op3 ? ch3 : op2 ? ch2 : ch;
                this.tokens.push({
                  index: this.index,
                  text: token,
                  operator: true
                });
                this.index += token.length;
              } else {
                this.throwError('Unexpected next character ', this.index, this.index + 1);
              }
            }
          }
          return this.tokens;
        },
        is: function (ch, chars) {
          return chars.indexOf(ch) !== -1;
        },
        peek: function (i) {
          var num = i || 1;
          return this.index + num < this.text.length ? this.text.charAt(this.index + num) : false;
        },
        isNumber: function (ch) {
          return '0' <= ch && ch <= '9' && typeof ch === 'string';
        },
        isWhitespace: function (ch) {
          // IE treats non-breaking space as \u00A0
          return ch === ' ' || ch === '\r' || ch === '\t' || ch === '\n' || ch === '\x0B' || ch === '\xa0';
        },
        isIdent: function (ch) {
          return 'a' <= ch && ch <= 'z' || 'A' <= ch && ch <= 'Z' || '_' === ch || ch === '$';
        },
        isExpOperator: function (ch) {
          return ch === '-' || ch === '+' || this.isNumber(ch);
        },
        throwError: function (error, start, end) {
          end = end || this.index;
          var colStr = isDefined(start) ? 's ' + start + '-' + this.index + ' [' + this.text.substring(start, end) + ']' : ' ' + end;
          throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].', error, colStr, this.text);
        },
        readNumber: function () {
          var number = '';
          var start = this.index;
          while (this.index < this.text.length) {
            var ch = lowercase(this.text.charAt(this.index));
            if (ch == '.' || this.isNumber(ch)) {
              number += ch;
            } else {
              var peekCh = this.peek();
              if (ch == 'e' && this.isExpOperator(peekCh)) {
                number += ch;
              } else if (this.isExpOperator(ch) && peekCh && this.isNumber(peekCh) && number.charAt(number.length - 1) == 'e') {
                number += ch;
              } else if (this.isExpOperator(ch) && (!peekCh || !this.isNumber(peekCh)) && number.charAt(number.length - 1) == 'e') {
                this.throwError('Invalid exponent');
              } else {
                break;
              }
            }
            this.index++;
          }
          this.tokens.push({
            index: start,
            text: number,
            constant: true,
            value: Number(number)
          });
        },
        readIdent: function () {
          var start = this.index;
          while (this.index < this.text.length) {
            var ch = this.text.charAt(this.index);
            if (!(this.isIdent(ch) || this.isNumber(ch))) {
              break;
            }
            this.index++;
          }
          this.tokens.push({
            index: start,
            text: this.text.slice(start, this.index),
            identifier: true
          });
        },
        readString: function (quote) {
          var start = this.index;
          this.index++;
          var string = '';
          var rawString = quote;
          var escape = false;
          while (this.index < this.text.length) {
            var ch = this.text.charAt(this.index);
            rawString += ch;
            if (escape) {
              if (ch === 'u') {
                var hex = this.text.substring(this.index + 1, this.index + 5);
                if (!hex.match(/[\da-f]{4}/i)) {
                  this.throwError('Invalid unicode escape [\\u' + hex + ']');
                }
                this.index += 4;
                string += String.fromCharCode(parseInt(hex, 16));
              } else {
                var rep = ESCAPE[ch];
                string = string + (rep || ch);
              }
              escape = false;
            } else if (ch === '\\') {
              escape = true;
            } else if (ch === quote) {
              this.index++;
              this.tokens.push({
                index: start,
                text: rawString,
                constant: true,
                value: string
              });
              return;
            } else {
              string += ch;
            }
            this.index++;
          }
          this.throwError('Unterminated quote', start);
        }
      };
      var AST = function (lexer, options) {
        this.lexer = lexer;
        this.options = options;
      };
      AST.Program = 'Program';
      AST.ExpressionStatement = 'ExpressionStatement';
      AST.AssignmentExpression = 'AssignmentExpression';
      AST.ConditionalExpression = 'ConditionalExpression';
      AST.LogicalExpression = 'LogicalExpression';
      AST.BinaryExpression = 'BinaryExpression';
      AST.UnaryExpression = 'UnaryExpression';
      AST.CallExpression = 'CallExpression';
      AST.MemberExpression = 'MemberExpression';
      AST.Identifier = 'Identifier';
      AST.Literal = 'Literal';
      AST.ArrayExpression = 'ArrayExpression';
      AST.Property = 'Property';
      AST.ObjectExpression = 'ObjectExpression';
      AST.ThisExpression = 'ThisExpression';
      // Internal use only
      AST.NGValueParameter = 'NGValueParameter';
      AST.prototype = {
        ast: function (text) {
          this.text = text;
          this.tokens = this.lexer.lex(text);
          var value = this.program();
          if (this.tokens.length !== 0) {
            this.throwError('is an unexpected token', this.tokens[0]);
          }
          return value;
        },
        program: function () {
          var body = [];
          while (true) {
            if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
              body.push(this.expressionStatement());
            if (!this.expect(';')) {
              return {
                type: AST.Program,
                body: body
              };
            }
          }
        },
        expressionStatement: function () {
          return {
            type: AST.ExpressionStatement,
            expression: this.filterChain()
          };
        },
        filterChain: function () {
          var left = this.expression();
          var token;
          while (token = this.expect('|')) {
            left = this.filter(left);
          }
          return left;
        },
        expression: function () {
          return this.assignment();
        },
        assignment: function () {
          var result = this.ternary();
          if (this.expect('=')) {
            result = {
              type: AST.AssignmentExpression,
              left: result,
              right: this.assignment(),
              operator: '='
            };
          }
          return result;
        },
        ternary: function () {
          var test = this.logicalOR();
          var alternate;
          var consequent;
          if (this.expect('?')) {
            alternate = this.expression();
            if (this.consume(':')) {
              consequent = this.expression();
              return {
                type: AST.ConditionalExpression,
                test: test,
                alternate: alternate,
                consequent: consequent
              };
            }
          }
          return test;
        },
        logicalOR: function () {
          var left = this.logicalAND();
          while (this.expect('||')) {
            left = {
              type: AST.LogicalExpression,
              operator: '||',
              left: left,
              right: this.logicalAND()
            };
          }
          return left;
        },
        logicalAND: function () {
          var left = this.equality();
          while (this.expect('&&')) {
            left = {
              type: AST.LogicalExpression,
              operator: '&&',
              left: left,
              right: this.equality()
            };
          }
          return left;
        },
        equality: function () {
          var left = this.relational();
          var token;
          while (token = this.expect('==', '!=', '===', '!==')) {
            left = {
              type: AST.BinaryExpression,
              operator: token.text,
              left: left,
              right: this.relational()
            };
          }
          return left;
        },
        relational: function () {
          var left = this.additive();
          var token;
          while (token = this.expect('<', '>', '<=', '>=')) {
            left = {
              type: AST.BinaryExpression,
              operator: token.text,
              left: left,
              right: this.additive()
            };
          }
          return left;
        },
        additive: function () {
          var left = this.multiplicative();
          var token;
          while (token = this.expect('+', '-')) {
            left = {
              type: AST.BinaryExpression,
              operator: token.text,
              left: left,
              right: this.multiplicative()
            };
          }
          return left;
        },
        multiplicative: function () {
          var left = this.unary();
          var token;
          while (token = this.expect('*', '/', '%')) {
            left = {
              type: AST.BinaryExpression,
              operator: token.text,
              left: left,
              right: this.unary()
            };
          }
          return left;
        },
        unary: function () {
          var token;
          if (token = this.expect('+', '-', '!')) {
            return {
              type: AST.UnaryExpression,
              operator: token.text,
              prefix: true,
              argument: this.unary()
            };
          } else {
            return this.primary();
          }
        },
        primary: function () {
          var primary;
          if (this.expect('(')) {
            primary = this.filterChain();
            this.consume(')');
          } else if (this.expect('[')) {
            primary = this.arrayDeclaration();
          } else if (this.expect('{')) {
            primary = this.object();
          } else if (this.constants.hasOwnProperty(this.peek().text)) {
            primary = copy(this.constants[this.consume().text]);
          } else if (this.peek().identifier) {
            primary = this.identifier();
          } else if (this.peek().constant) {
            primary = this.constant();
          } else {
            this.throwError('not a primary expression', this.peek());
          }
          var next;
          while (next = this.expect('(', '[', '.')) {
            if (next.text === '(') {
              primary = {
                type: AST.CallExpression,
                callee: primary,
                arguments: this.parseArguments()
              };
              this.consume(')');
            } else if (next.text === '[') {
              primary = {
                type: AST.MemberExpression,
                object: primary,
                property: this.expression(),
                computed: true
              };
              this.consume(']');
            } else if (next.text === '.') {
              primary = {
                type: AST.MemberExpression,
                object: primary,
                property: this.identifier(),
                computed: false
              };
            } else {
              this.throwError('IMPOSSIBLE');
            }
          }
          return primary;
        },
        filter: function (baseExpression) {
          var args = [baseExpression];
          var result = {
              type: AST.CallExpression,
              callee: this.identifier(),
              arguments: args,
              filter: true
            };
          while (this.expect(':')) {
            args.push(this.expression());
          }
          return result;
        },
        parseArguments: function () {
          var args = [];
          if (this.peekToken().text !== ')') {
            do {
              args.push(this.expression());
            } while (this.expect(','));
          }
          return args;
        },
        identifier: function () {
          var token = this.consume();
          if (!token.identifier) {
            this.throwError('is not a valid identifier', token);
          }
          return {
            type: AST.Identifier,
            name: token.text
          };
        },
        constant: function () {
          // TODO check that it is a constant
          return {
            type: AST.Literal,
            value: this.consume().value
          };
        },
        arrayDeclaration: function () {
          var elements = [];
          if (this.peekToken().text !== ']') {
            do {
              if (this.peek(']')) {
                // Support trailing commas per ES5.1.
                break;
              }
              elements.push(this.expression());
            } while (this.expect(','));
          }
          this.consume(']');
          return {
            type: AST.ArrayExpression,
            elements: elements
          };
        },
        object: function () {
          var properties = [], property;
          if (this.peekToken().text !== '}') {
            do {
              if (this.peek('}')) {
                // Support trailing commas per ES5.1.
                break;
              }
              property = {
                type: AST.Property,
                kind: 'init'
              };
              if (this.peek().constant) {
                property.key = this.constant();
              } else if (this.peek().identifier) {
                property.key = this.identifier();
              } else {
                this.throwError('invalid key', this.peek());
              }
              this.consume(':');
              property.value = this.expression();
              properties.push(property);
            } while (this.expect(','));
          }
          this.consume('}');
          return {
            type: AST.ObjectExpression,
            properties: properties
          };
        },
        throwError: function (msg, token) {
          throw $parseMinErr('syntax', 'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].', token.text, msg, token.index + 1, this.text, this.text.substring(token.index));
        },
        consume: function (e1) {
          if (this.tokens.length === 0) {
            throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
          }
          var token = this.expect(e1);
          if (!token) {
            this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
          }
          return token;
        },
        peekToken: function () {
          if (this.tokens.length === 0) {
            throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
          }
          return this.tokens[0];
        },
        peek: function (e1, e2, e3, e4) {
          return this.peekAhead(0, e1, e2, e3, e4);
        },
        peekAhead: function (i, e1, e2, e3, e4) {
          if (this.tokens.length > i) {
            var token = this.tokens[i];
            var t = token.text;
            if (t === e1 || t === e2 || t === e3 || t === e4 || !e1 && !e2 && !e3 && !e4) {
              return token;
            }
          }
          return false;
        },
        expect: function (e1, e2, e3, e4) {
          var token = this.peek(e1, e2, e3, e4);
          if (token) {
            this.tokens.shift();
            return token;
          }
          return false;
        },
        constants: {
          'true': {
            type: AST.Literal,
            value: true
          },
          'false': {
            type: AST.Literal,
            value: false
          },
          'null': {
            type: AST.Literal,
            value: null
          },
          'undefined': {
            type: AST.Literal,
            value: undefined
          },
          'this': { type: AST.ThisExpression }
        }
      };
      function ifDefined(v, d) {
        return typeof v !== 'undefined' ? v : d;
      }
      function plusFn(l, r) {
        if (typeof l === 'undefined')
          return r;
        if (typeof r === 'undefined')
          return l;
        return l + r;
      }
      function isStateless($filter, filterName) {
        var fn = $filter(filterName);
        return !fn.$stateful;
      }
      function findConstantAndWatchExpressions(ast, $filter) {
        var allConstants;
        var argsToWatch;
        switch (ast.type) {
        case AST.Program:
          allConstants = true;
          forEach(ast.body, function (expr) {
            findConstantAndWatchExpressions(expr.expression, $filter);
            allConstants = allConstants && expr.expression.constant;
          });
          ast.constant = allConstants;
          break;
        case AST.Literal:
          ast.constant = true;
          ast.toWatch = [];
          break;
        case AST.UnaryExpression:
          findConstantAndWatchExpressions(ast.argument, $filter);
          ast.constant = ast.argument.constant;
          ast.toWatch = ast.argument.toWatch;
          break;
        case AST.BinaryExpression:
          findConstantAndWatchExpressions(ast.left, $filter);
          findConstantAndWatchExpressions(ast.right, $filter);
          ast.constant = ast.left.constant && ast.right.constant;
          ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
          break;
        case AST.LogicalExpression:
          findConstantAndWatchExpressions(ast.left, $filter);
          findConstantAndWatchExpressions(ast.right, $filter);
          ast.constant = ast.left.constant && ast.right.constant;
          ast.toWatch = ast.constant ? [] : [ast];
          break;
        case AST.ConditionalExpression:
          findConstantAndWatchExpressions(ast.test, $filter);
          findConstantAndWatchExpressions(ast.alternate, $filter);
          findConstantAndWatchExpressions(ast.consequent, $filter);
          ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
          ast.toWatch = ast.constant ? [] : [ast];
          break;
        case AST.Identifier:
          ast.constant = false;
          ast.toWatch = [ast];
          break;
        case AST.MemberExpression:
          findConstantAndWatchExpressions(ast.object, $filter);
          if (ast.computed) {
            findConstantAndWatchExpressions(ast.property, $filter);
          }
          ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
          ast.toWatch = [ast];
          break;
        case AST.CallExpression:
          allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;
          argsToWatch = [];
          forEach(ast.arguments, function (expr) {
            findConstantAndWatchExpressions(expr, $filter);
            allConstants = allConstants && expr.constant;
            if (!expr.constant) {
              argsToWatch.push.apply(argsToWatch, expr.toWatch);
            }
          });
          ast.constant = allConstants;
          ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];
          break;
        case AST.AssignmentExpression:
          findConstantAndWatchExpressions(ast.left, $filter);
          findConstantAndWatchExpressions(ast.right, $filter);
          ast.constant = ast.left.constant && ast.right.constant;
          ast.toWatch = [ast];
          break;
        case AST.ArrayExpression:
          allConstants = true;
          argsToWatch = [];
          forEach(ast.elements, function (expr) {
            findConstantAndWatchExpressions(expr, $filter);
            allConstants = allConstants && expr.constant;
            if (!expr.constant) {
              argsToWatch.push.apply(argsToWatch, expr.toWatch);
            }
          });
          ast.constant = allConstants;
          ast.toWatch = argsToWatch;
          break;
        case AST.ObjectExpression:
          allConstants = true;
          argsToWatch = [];
          forEach(ast.properties, function (property) {
            findConstantAndWatchExpressions(property.value, $filter);
            allConstants = allConstants && property.value.constant;
            if (!property.value.constant) {
              argsToWatch.push.apply(argsToWatch, property.value.toWatch);
            }
          });
          ast.constant = allConstants;
          ast.toWatch = argsToWatch;
          break;
        case AST.ThisExpression:
          ast.constant = false;
          ast.toWatch = [];
          break;
        }
      }
      function getInputs(body) {
        if (body.length != 1)
          return;
        var lastExpression = body[0].expression;
        var candidate = lastExpression.toWatch;
        if (candidate.length !== 1)
          return candidate;
        return candidate[0] !== lastExpression ? candidate : undefined;
      }
      function isAssignable(ast) {
        return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
      }
      function assignableAST(ast) {
        if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
          return {
            type: AST.AssignmentExpression,
            left: ast.body[0].expression,
            right: { type: AST.NGValueParameter },
            operator: '='
          };
        }
      }
      function isLiteral(ast) {
        return ast.body.length === 0 || ast.body.length === 1 && (ast.body[0].expression.type === AST.Literal || ast.body[0].expression.type === AST.ArrayExpression || ast.body[0].expression.type === AST.ObjectExpression);
      }
      function isConstant(ast) {
        return ast.constant;
      }
      function ASTCompiler(astBuilder, $filter) {
        this.astBuilder = astBuilder;
        this.$filter = $filter;
      }
      ASTCompiler.prototype = {
        compile: function (expression, expensiveChecks) {
          var self = this;
          var ast = this.astBuilder.ast(expression);
          this.state = {
            nextId: 0,
            filters: {},
            expensiveChecks: expensiveChecks,
            fn: {
              vars: [],
              body: [],
              own: {}
            },
            assign: {
              vars: [],
              body: [],
              own: {}
            },
            inputs: []
          };
          findConstantAndWatchExpressions(ast, self.$filter);
          var extra = '';
          var assignable;
          this.stage = 'assign';
          if (assignable = assignableAST(ast)) {
            this.state.computing = 'assign';
            var result = this.nextId();
            this.recurse(assignable, result);
            this.return_(result);
            extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');
          }
          var toWatch = getInputs(ast.body);
          self.stage = 'inputs';
          forEach(toWatch, function (watch, key) {
            var fnKey = 'fn' + key;
            self.state[fnKey] = {
              vars: [],
              body: [],
              own: {}
            };
            self.state.computing = fnKey;
            var intoId = self.nextId();
            self.recurse(watch, intoId);
            self.return_(intoId);
            self.state.inputs.push(fnKey);
            watch.watchId = key;
          });
          this.state.computing = 'fn';
          this.stage = 'main';
          this.recurse(ast);
          var fnString = '"' + this.USE + ' ' + this.STRICT + '";\n' + this.filterPrefix() + 'var fn=' + this.generateFunction('fn', 's,l,a,i') + extra + this.watchFns() + 'return fn;';
          /* jshint -W054 */
          var fn = new Function('$filter', 'ensureSafeMemberName', 'ensureSafeObject', 'ensureSafeFunction', 'getStringValue', 'ensureSafeAssignContext', 'ifDefined', 'plus', 'text', fnString)(this.$filter, ensureSafeMemberName, ensureSafeObject, ensureSafeFunction, getStringValue, ensureSafeAssignContext, ifDefined, plusFn, expression);
          /* jshint +W054 */
          this.state = this.stage = undefined;
          fn.literal = isLiteral(ast);
          fn.constant = isConstant(ast);
          return fn;
        },
        USE: 'use',
        STRICT: 'strict',
        watchFns: function () {
          var result = [];
          var fns = this.state.inputs;
          var self = this;
          forEach(fns, function (name) {
            result.push('var ' + name + '=' + self.generateFunction(name, 's'));
          });
          if (fns.length) {
            result.push('fn.inputs=[' + fns.join(',') + '];');
          }
          return result.join('');
        },
        generateFunction: function (name, params) {
          return 'function(' + params + '){' + this.varsPrefix(name) + this.body(name) + '};';
        },
        filterPrefix: function () {
          var parts = [];
          var self = this;
          forEach(this.state.filters, function (id, filter) {
            parts.push(id + '=$filter(' + self.escape(filter) + ')');
          });
          if (parts.length)
            return 'var ' + parts.join(',') + ';';
          return '';
        },
        varsPrefix: function (section) {
          return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';
        },
        body: function (section) {
          return this.state[section].body.join('');
        },
        recurse: function (ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
          var left, right, self = this, args, expression;
          recursionFn = recursionFn || noop;
          if (!skipWatchIdCheck && isDefined(ast.watchId)) {
            intoId = intoId || this.nextId();
            this.if_('i', this.lazyAssign(intoId, this.computedMember('i', ast.watchId)), this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true));
            return;
          }
          switch (ast.type) {
          case AST.Program:
            forEach(ast.body, function (expression, pos) {
              self.recurse(expression.expression, undefined, undefined, function (expr) {
                right = expr;
              });
              if (pos !== ast.body.length - 1) {
                self.current().body.push(right, ';');
              } else {
                self.return_(right);
              }
            });
            break;
          case AST.Literal:
            expression = this.escape(ast.value);
            this.assign(intoId, expression);
            recursionFn(expression);
            break;
          case AST.UnaryExpression:
            this.recurse(ast.argument, undefined, undefined, function (expr) {
              right = expr;
            });
            expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';
            this.assign(intoId, expression);
            recursionFn(expression);
            break;
          case AST.BinaryExpression:
            this.recurse(ast.left, undefined, undefined, function (expr) {
              left = expr;
            });
            this.recurse(ast.right, undefined, undefined, function (expr) {
              right = expr;
            });
            if (ast.operator === '+') {
              expression = this.plus(left, right);
            } else if (ast.operator === '-') {
              expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
            } else {
              expression = '(' + left + ')' + ast.operator + '(' + right + ')';
            }
            this.assign(intoId, expression);
            recursionFn(expression);
            break;
          case AST.LogicalExpression:
            intoId = intoId || this.nextId();
            self.recurse(ast.left, intoId);
            self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
            recursionFn(intoId);
            break;
          case AST.ConditionalExpression:
            intoId = intoId || this.nextId();
            self.recurse(ast.test, intoId);
            self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
            recursionFn(intoId);
            break;
          case AST.Identifier:
            intoId = intoId || this.nextId();
            if (nameId) {
              nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
              nameId.computed = false;
              nameId.name = ast.name;
            }
            ensureSafeMemberName(ast.name);
            self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)), function () {
              self.if_(self.stage === 'inputs' || 's', function () {
                if (create && create !== 1) {
                  self.if_(self.not(self.nonComputedMember('s', ast.name)), self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));
                }
                self.assign(intoId, self.nonComputedMember('s', ast.name));
              });
            }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name)));
            if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {
              self.addEnsureSafeObject(intoId);
            }
            recursionFn(intoId);
            break;
          case AST.MemberExpression:
            left = nameId && (nameId.context = this.nextId()) || this.nextId();
            intoId = intoId || this.nextId();
            self.recurse(ast.object, left, undefined, function () {
              self.if_(self.notNull(left), function () {
                if (ast.computed) {
                  right = self.nextId();
                  self.recurse(ast.property, right);
                  self.getStringValue(right);
                  self.addEnsureSafeMemberName(right);
                  if (create && create !== 1) {
                    self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
                  }
                  expression = self.ensureSafeObject(self.computedMember(left, right));
                  self.assign(intoId, expression);
                  if (nameId) {
                    nameId.computed = true;
                    nameId.name = right;
                  }
                } else {
                  ensureSafeMemberName(ast.property.name);
                  if (create && create !== 1) {
                    self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
                  }
                  expression = self.nonComputedMember(left, ast.property.name);
                  if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {
                    expression = self.ensureSafeObject(expression);
                  }
                  self.assign(intoId, expression);
                  if (nameId) {
                    nameId.computed = false;
                    nameId.name = ast.property.name;
                  }
                }
              }, function () {
                self.assign(intoId, 'undefined');
              });
              recursionFn(intoId);
            }, !!create);
            break;
          case AST.CallExpression:
            intoId = intoId || this.nextId();
            if (ast.filter) {
              right = self.filter(ast.callee.name);
              args = [];
              forEach(ast.arguments, function (expr) {
                var argument = self.nextId();
                self.recurse(expr, argument);
                args.push(argument);
              });
              expression = right + '(' + args.join(',') + ')';
              self.assign(intoId, expression);
              recursionFn(intoId);
            } else {
              right = self.nextId();
              left = {};
              args = [];
              self.recurse(ast.callee, right, left, function () {
                self.if_(self.notNull(right), function () {
                  self.addEnsureSafeFunction(right);
                  forEach(ast.arguments, function (expr) {
                    self.recurse(expr, self.nextId(), undefined, function (argument) {
                      args.push(self.ensureSafeObject(argument));
                    });
                  });
                  if (left.name) {
                    if (!self.state.expensiveChecks) {
                      self.addEnsureSafeObject(left.context);
                    }
                    expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';
                  } else {
                    expression = right + '(' + args.join(',') + ')';
                  }
                  expression = self.ensureSafeObject(expression);
                  self.assign(intoId, expression);
                }, function () {
                  self.assign(intoId, 'undefined');
                });
                recursionFn(intoId);
              });
            }
            break;
          case AST.AssignmentExpression:
            right = this.nextId();
            left = {};
            if (!isAssignable(ast.left)) {
              throw $parseMinErr('lval', 'Trying to assing a value to a non l-value');
            }
            this.recurse(ast.left, undefined, left, function () {
              self.if_(self.notNull(left.context), function () {
                self.recurse(ast.right, right);
                self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));
                self.addEnsureSafeAssignContext(left.context);
                expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
                self.assign(intoId, expression);
                recursionFn(intoId || expression);
              });
            }, 1);
            break;
          case AST.ArrayExpression:
            args = [];
            forEach(ast.elements, function (expr) {
              self.recurse(expr, self.nextId(), undefined, function (argument) {
                args.push(argument);
              });
            });
            expression = '[' + args.join(',') + ']';
            this.assign(intoId, expression);
            recursionFn(expression);
            break;
          case AST.ObjectExpression:
            args = [];
            forEach(ast.properties, function (property) {
              self.recurse(property.value, self.nextId(), undefined, function (expr) {
                args.push(self.escape(property.key.type === AST.Identifier ? property.key.name : '' + property.key.value) + ':' + expr);
              });
            });
            expression = '{' + args.join(',') + '}';
            this.assign(intoId, expression);
            recursionFn(expression);
            break;
          case AST.ThisExpression:
            this.assign(intoId, 's');
            recursionFn('s');
            break;
          case AST.NGValueParameter:
            this.assign(intoId, 'v');
            recursionFn('v');
            break;
          }
        },
        getHasOwnProperty: function (element, property) {
          var key = element + '.' + property;
          var own = this.current().own;
          if (!own.hasOwnProperty(key)) {
            own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');
          }
          return own[key];
        },
        assign: function (id, value) {
          if (!id)
            return;
          this.current().body.push(id, '=', value, ';');
          return id;
        },
        filter: function (filterName) {
          if (!this.state.filters.hasOwnProperty(filterName)) {
            this.state.filters[filterName] = this.nextId(true);
          }
          return this.state.filters[filterName];
        },
        ifDefined: function (id, defaultValue) {
          return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';
        },
        plus: function (left, right) {
          return 'plus(' + left + ',' + right + ')';
        },
        return_: function (id) {
          this.current().body.push('return ', id, ';');
        },
        if_: function (test, alternate, consequent) {
          if (test === true) {
            alternate();
          } else {
            var body = this.current().body;
            body.push('if(', test, '){');
            alternate();
            body.push('}');
            if (consequent) {
              body.push('else{');
              consequent();
              body.push('}');
            }
          }
        },
        not: function (expression) {
          return '!(' + expression + ')';
        },
        notNull: function (expression) {
          return expression + '!=null';
        },
        nonComputedMember: function (left, right) {
          return left + '.' + right;
        },
        computedMember: function (left, right) {
          return left + '[' + right + ']';
        },
        member: function (left, right, computed) {
          if (computed)
            return this.computedMember(left, right);
          return this.nonComputedMember(left, right);
        },
        addEnsureSafeObject: function (item) {
          this.current().body.push(this.ensureSafeObject(item), ';');
        },
        addEnsureSafeMemberName: function (item) {
          this.current().body.push(this.ensureSafeMemberName(item), ';');
        },
        addEnsureSafeFunction: function (item) {
          this.current().body.push(this.ensureSafeFunction(item), ';');
        },
        addEnsureSafeAssignContext: function (item) {
          this.current().body.push(this.ensureSafeAssignContext(item), ';');
        },
        ensureSafeObject: function (item) {
          return 'ensureSafeObject(' + item + ',text)';
        },
        ensureSafeMemberName: function (item) {
          return 'ensureSafeMemberName(' + item + ',text)';
        },
        ensureSafeFunction: function (item) {
          return 'ensureSafeFunction(' + item + ',text)';
        },
        getStringValue: function (item) {
          this.assign(item, 'getStringValue(' + item + ',text)');
        },
        ensureSafeAssignContext: function (item) {
          return 'ensureSafeAssignContext(' + item + ',text)';
        },
        lazyRecurse: function (ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
          var self = this;
          return function () {
            self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
          };
        },
        lazyAssign: function (id, value) {
          var self = this;
          return function () {
            self.assign(id, value);
          };
        },
        stringEscapeRegex: /[^ a-zA-Z0-9]/g,
        stringEscapeFn: function (c) {
          return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
        },
        escape: function (value) {
          if (isString(value))
            return '\'' + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + '\'';
          if (isNumber(value))
            return value.toString();
          if (value === true)
            return 'true';
          if (value === false)
            return 'false';
          if (value === null)
            return 'null';
          if (typeof value === 'undefined')
            return 'undefined';
          throw $parseMinErr('esc', 'IMPOSSIBLE');
        },
        nextId: function (skip, init) {
          var id = 'v' + this.state.nextId++;
          if (!skip) {
            this.current().vars.push(id + (init ? '=' + init : ''));
          }
          return id;
        },
        current: function () {
          return this.state[this.state.computing];
        }
      };
      function ASTInterpreter(astBuilder, $filter) {
        this.astBuilder = astBuilder;
        this.$filter = $filter;
      }
      ASTInterpreter.prototype = {
        compile: function (expression, expensiveChecks) {
          var self = this;
          var ast = this.astBuilder.ast(expression);
          this.expression = expression;
          this.expensiveChecks = expensiveChecks;
          findConstantAndWatchExpressions(ast, self.$filter);
          var assignable;
          var assign;
          if (assignable = assignableAST(ast)) {
            assign = this.recurse(assignable);
          }
          var toWatch = getInputs(ast.body);
          var inputs;
          if (toWatch) {
            inputs = [];
            forEach(toWatch, function (watch, key) {
              var input = self.recurse(watch);
              watch.input = input;
              inputs.push(input);
              watch.watchId = key;
            });
          }
          var expressions = [];
          forEach(ast.body, function (expression) {
            expressions.push(self.recurse(expression.expression));
          });
          var fn = ast.body.length === 0 ? function () {
            } : ast.body.length === 1 ? expressions[0] : function (scope, locals) {
              var lastValue;
              forEach(expressions, function (exp) {
                lastValue = exp(scope, locals);
              });
              return lastValue;
            };
          if (assign) {
            fn.assign = function (scope, value, locals) {
              return assign(scope, locals, value);
            };
          }
          if (inputs) {
            fn.inputs = inputs;
          }
          fn.literal = isLiteral(ast);
          fn.constant = isConstant(ast);
          return fn;
        },
        recurse: function (ast, context, create) {
          var left, right, self = this, args, expression;
          if (ast.input) {
            return this.inputs(ast.input, ast.watchId);
          }
          switch (ast.type) {
          case AST.Literal:
            return this.value(ast.value, context);
          case AST.UnaryExpression:
            right = this.recurse(ast.argument);
            return this['unary' + ast.operator](right, context);
          case AST.BinaryExpression:
            left = this.recurse(ast.left);
            right = this.recurse(ast.right);
            return this['binary' + ast.operator](left, right, context);
          case AST.LogicalExpression:
            left = this.recurse(ast.left);
            right = this.recurse(ast.right);
            return this['binary' + ast.operator](left, right, context);
          case AST.ConditionalExpression:
            return this['ternary?:'](this.recurse(ast.test), this.recurse(ast.alternate), this.recurse(ast.consequent), context);
          case AST.Identifier:
            ensureSafeMemberName(ast.name, self.expression);
            return self.identifier(ast.name, self.expensiveChecks || isPossiblyDangerousMemberName(ast.name), context, create, self.expression);
          case AST.MemberExpression:
            left = this.recurse(ast.object, false, !!create);
            if (!ast.computed) {
              ensureSafeMemberName(ast.property.name, self.expression);
              right = ast.property.name;
            }
            if (ast.computed)
              right = this.recurse(ast.property);
            return ast.computed ? this.computedMember(left, right, context, create, self.expression) : this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);
          case AST.CallExpression:
            args = [];
            forEach(ast.arguments, function (expr) {
              args.push(self.recurse(expr));
            });
            if (ast.filter)
              right = this.$filter(ast.callee.name);
            if (!ast.filter)
              right = this.recurse(ast.callee, true);
            return ast.filter ? function (scope, locals, assign, inputs) {
              var values = [];
              for (var i = 0; i < args.length; ++i) {
                values.push(args[i](scope, locals, assign, inputs));
              }
              var value = right.apply(undefined, values, inputs);
              return context ? {
                context: undefined,
                name: undefined,
                value: value
              } : value;
            } : function (scope, locals, assign, inputs) {
              var rhs = right(scope, locals, assign, inputs);
              var value;
              if (rhs.value != null) {
                ensureSafeObject(rhs.context, self.expression);
                ensureSafeFunction(rhs.value, self.expression);
                var values = [];
                for (var i = 0; i < args.length; ++i) {
                  values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));
                }
                value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);
              }
              return context ? { value: value } : value;
            };
          case AST.AssignmentExpression:
            left = this.recurse(ast.left, true, 1);
            right = this.recurse(ast.right);
            return function (scope, locals, assign, inputs) {
              var lhs = left(scope, locals, assign, inputs);
              var rhs = right(scope, locals, assign, inputs);
              ensureSafeObject(lhs.value, self.expression);
              ensureSafeAssignContext(lhs.context);
              lhs.context[lhs.name] = rhs;
              return context ? { value: rhs } : rhs;
            };
          case AST.ArrayExpression:
            args = [];
            forEach(ast.elements, function (expr) {
              args.push(self.recurse(expr));
            });
            return function (scope, locals, assign, inputs) {
              var value = [];
              for (var i = 0; i < args.length; ++i) {
                value.push(args[i](scope, locals, assign, inputs));
              }
              return context ? { value: value } : value;
            };
          case AST.ObjectExpression:
            args = [];
            forEach(ast.properties, function (property) {
              args.push({
                key: property.key.type === AST.Identifier ? property.key.name : '' + property.key.value,
                value: self.recurse(property.value)
              });
            });
            return function (scope, locals, assign, inputs) {
              var value = {};
              for (var i = 0; i < args.length; ++i) {
                value[args[i].key] = args[i].value(scope, locals, assign, inputs);
              }
              return context ? { value: value } : value;
            };
          case AST.ThisExpression:
            return function (scope) {
              return context ? { value: scope } : scope;
            };
          case AST.NGValueParameter:
            return function (scope, locals, assign, inputs) {
              return context ? { value: assign } : assign;
            };
          }
        },
        'unary+': function (argument, context) {
          return function (scope, locals, assign, inputs) {
            var arg = argument(scope, locals, assign, inputs);
            if (isDefined(arg)) {
              arg = +arg;
            } else {
              arg = 0;
            }
            return context ? { value: arg } : arg;
          };
        },
        'unary-': function (argument, context) {
          return function (scope, locals, assign, inputs) {
            var arg = argument(scope, locals, assign, inputs);
            if (isDefined(arg)) {
              arg = -arg;
            } else {
              arg = 0;
            }
            return context ? { value: arg } : arg;
          };
        },
        'unary!': function (argument, context) {
          return function (scope, locals, assign, inputs) {
            var arg = !argument(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary+': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var lhs = left(scope, locals, assign, inputs);
            var rhs = right(scope, locals, assign, inputs);
            var arg = plusFn(lhs, rhs);
            return context ? { value: arg } : arg;
          };
        },
        'binary-': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var lhs = left(scope, locals, assign, inputs);
            var rhs = right(scope, locals, assign, inputs);
            var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
            return context ? { value: arg } : arg;
          };
        },
        'binary*': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary/': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary%': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary===': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary!==': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary==': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary!=': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary<': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary>': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary<=': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary>=': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary&&': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary||': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'ternary?:': function (test, alternate, consequent, context) {
          return function (scope, locals, assign, inputs) {
            var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        value: function (value, context) {
          return function () {
            return context ? {
              context: undefined,
              name: undefined,
              value: value
            } : value;
          };
        },
        identifier: function (name, expensiveChecks, context, create, expression) {
          return function (scope, locals, assign, inputs) {
            var base = locals && name in locals ? locals : scope;
            if (create && create !== 1 && base && !base[name]) {
              base[name] = {};
            }
            var value = base ? base[name] : undefined;
            if (expensiveChecks) {
              ensureSafeObject(value, expression);
            }
            if (context) {
              return {
                context: base,
                name: name,
                value: value
              };
            } else {
              return value;
            }
          };
        },
        computedMember: function (left, right, context, create, expression) {
          return function (scope, locals, assign, inputs) {
            var lhs = left(scope, locals, assign, inputs);
            var rhs;
            var value;
            if (lhs != null) {
              rhs = right(scope, locals, assign, inputs);
              rhs = getStringValue(rhs);
              ensureSafeMemberName(rhs, expression);
              if (create && create !== 1 && lhs && !lhs[rhs]) {
                lhs[rhs] = {};
              }
              value = lhs[rhs];
              ensureSafeObject(value, expression);
            }
            if (context) {
              return {
                context: lhs,
                name: rhs,
                value: value
              };
            } else {
              return value;
            }
          };
        },
        nonComputedMember: function (left, right, expensiveChecks, context, create, expression) {
          return function (scope, locals, assign, inputs) {
            var lhs = left(scope, locals, assign, inputs);
            if (create && create !== 1 && lhs && !lhs[right]) {
              lhs[right] = {};
            }
            var value = lhs != null ? lhs[right] : undefined;
            if (expensiveChecks || isPossiblyDangerousMemberName(right)) {
              ensureSafeObject(value, expression);
            }
            if (context) {
              return {
                context: lhs,
                name: right,
                value: value
              };
            } else {
              return value;
            }
          };
        },
        inputs: function (input, watchId) {
          return function (scope, value, locals, inputs) {
            if (inputs)
              return inputs[watchId];
            return input(scope, value, locals);
          };
        }
      };
      /**
	 * @constructor
	 */
      var Parser = function (lexer, $filter, options) {
        this.lexer = lexer;
        this.$filter = $filter;
        this.options = options;
        this.ast = new AST(this.lexer);
        this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) : new ASTCompiler(this.ast, $filter);
      };
      Parser.prototype = {
        constructor: Parser,
        parse: function (text) {
          return this.astCompiler.compile(text, this.options.expensiveChecks);
        }
      };
      var getterFnCacheDefault = createMap();
      var getterFnCacheExpensive = createMap();
      function isPossiblyDangerousMemberName(name) {
        return name == 'constructor';
      }
      var objectValueOf = Object.prototype.valueOf;
      function getValueOf(value) {
        return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
      }
      ///////////////////////////////////
      /**
	 * @ngdoc service
	 * @name $parse
	 * @kind function
	 *
	 * @description
	 *
	 * Converts Angular {@link guide/expression expression} into a function.
	 *
	 * ```js
	 *   var getter = $parse('user.name');
	 *   var setter = getter.assign;
	 *   var context = {user:{name:'angular'}};
	 *   var locals = {user:{name:'local'}};
	 *
	 *   expect(getter(context)).toEqual('angular');
	 *   setter(context, 'newValue');
	 *   expect(context.user.name).toEqual('newValue');
	 *   expect(getter(context, locals)).toEqual('local');
	 * ```
	 *
	 *
	 * @param {string} expression String expression to compile.
	 * @returns {function(context, locals)} a function which represents the compiled expression:
	 *
	 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	 *      are evaluated against (typically a scope object).
	 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	 *      `context`.
	 *
	 *    The returned function also has the following properties:
	 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
	 *        literal.
	 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
	 *        constant literals.
	 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
	 *        set to a function to change its value on the given context.
	 *
	 */
      /**
	 * @ngdoc provider
	 * @name $parseProvider
	 *
	 * @description
	 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
	 *  service.
	 */
      function $ParseProvider() {
        var cacheDefault = createMap();
        var cacheExpensive = createMap();
        this.$get = [
          '$filter',
          function ($filter) {
            var noUnsafeEval = csp().noUnsafeEval;
            var $parseOptions = {
                csp: noUnsafeEval,
                expensiveChecks: false
              }, $parseOptionsExpensive = {
                csp: noUnsafeEval,
                expensiveChecks: true
              };
            return function $parse(exp, interceptorFn, expensiveChecks) {
              var parsedExpression, oneTime, cacheKey;
              switch (typeof exp) {
              case 'string':
                exp = exp.trim();
                cacheKey = exp;
                var cache = expensiveChecks ? cacheExpensive : cacheDefault;
                parsedExpression = cache[cacheKey];
                if (!parsedExpression) {
                  if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
                    oneTime = true;
                    exp = exp.substring(2);
                  }
                  var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
                  var lexer = new Lexer(parseOptions);
                  var parser = new Parser(lexer, $filter, parseOptions);
                  parsedExpression = parser.parse(exp);
                  if (parsedExpression.constant) {
                    parsedExpression.$$watchDelegate = constantWatchDelegate;
                  } else if (oneTime) {
                    parsedExpression.$$watchDelegate = parsedExpression.literal ? oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
                  } else if (parsedExpression.inputs) {
                    parsedExpression.$$watchDelegate = inputsWatchDelegate;
                  }
                  cache[cacheKey] = parsedExpression;
                }
                return addInterceptor(parsedExpression, interceptorFn);
              case 'function':
                return addInterceptor(exp, interceptorFn);
              default:
                return noop;
              }
            };
            function expressionInputDirtyCheck(newValue, oldValueOfValue) {
              if (newValue == null || oldValueOfValue == null) {
                // null/undefined
                return newValue === oldValueOfValue;
              }
              if (typeof newValue === 'object') {
                // attempt to convert the value to a primitive type
                // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
                //             be cheaply dirty-checked
                newValue = getValueOf(newValue);
                if (typeof newValue === 'object') {
                  // objects/arrays are not supported - deep-watching them would be too expensive
                  return false;
                }  // fall-through to the primitive equality check
              }
              //Primitive or NaN
              return newValue === oldValueOfValue || newValue !== newValue && oldValueOfValue !== oldValueOfValue;
            }
            function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
              var inputExpressions = parsedExpression.inputs;
              var lastResult;
              if (inputExpressions.length === 1) {
                var oldInputValueOf = expressionInputDirtyCheck;
                // init to something unique so that equals check fails
                inputExpressions = inputExpressions[0];
                return scope.$watch(function expressionInputWatch(scope) {
                  var newInputValue = inputExpressions(scope);
                  if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {
                    lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);
                    oldInputValueOf = newInputValue && getValueOf(newInputValue);
                  }
                  return lastResult;
                }, listener, objectEquality, prettyPrintExpression);
              }
              var oldInputValueOfValues = [];
              var oldInputValues = [];
              for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
                oldInputValueOfValues[i] = expressionInputDirtyCheck;
                // init to something unique so that equals check fails
                oldInputValues[i] = null;
              }
              return scope.$watch(function expressionInputsWatch(scope) {
                var changed = false;
                for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
                  var newInputValue = inputExpressions[i](scope);
                  if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
                    oldInputValues[i] = newInputValue;
                    oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
                  }
                }
                if (changed) {
                  lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
                }
                return lastResult;
              }, listener, objectEquality, prettyPrintExpression);
            }
            function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
              var unwatch, lastValue;
              return unwatch = scope.$watch(function oneTimeWatch(scope) {
                return parsedExpression(scope);
              }, function oneTimeListener(value, old, scope) {
                lastValue = value;
                if (isFunction(listener)) {
                  listener.apply(this, arguments);
                }
                if (isDefined(value)) {
                  scope.$$postDigest(function () {
                    if (isDefined(lastValue)) {
                      unwatch();
                    }
                  });
                }
              }, objectEquality);
            }
            function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
              var unwatch, lastValue;
              return unwatch = scope.$watch(function oneTimeWatch(scope) {
                return parsedExpression(scope);
              }, function oneTimeListener(value, old, scope) {
                lastValue = value;
                if (isFunction(listener)) {
                  listener.call(this, value, old, scope);
                }
                if (isAllDefined(value)) {
                  scope.$$postDigest(function () {
                    if (isAllDefined(lastValue))
                      unwatch();
                  });
                }
              }, objectEquality);
              function isAllDefined(value) {
                var allDefined = true;
                forEach(value, function (val) {
                  if (!isDefined(val))
                    allDefined = false;
                });
                return allDefined;
              }
            }
            function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
              var unwatch;
              return unwatch = scope.$watch(function constantWatch(scope) {
                return parsedExpression(scope);
              }, function constantListener(value, old, scope) {
                if (isFunction(listener)) {
                  listener.apply(this, arguments);
                }
                unwatch();
              }, objectEquality);
            }
            function addInterceptor(parsedExpression, interceptorFn) {
              if (!interceptorFn)
                return parsedExpression;
              var watchDelegate = parsedExpression.$$watchDelegate;
              var regularWatch = watchDelegate !== oneTimeLiteralWatchDelegate && watchDelegate !== oneTimeWatchDelegate;
              var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {
                  var value = parsedExpression(scope, locals, assign, inputs);
                  return interceptorFn(value, scope, locals);
                } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {
                  var value = parsedExpression(scope, locals, assign, inputs);
                  var result = interceptorFn(value, scope, locals);
                  // we only return the interceptor's result if the
                  // initial value is defined (for bind-once)
                  return isDefined(value) ? result : value;
                };
              // Propagate $$watchDelegates other then inputsWatchDelegate
              if (parsedExpression.$$watchDelegate && parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
                fn.$$watchDelegate = parsedExpression.$$watchDelegate;
              } else if (!interceptorFn.$stateful) {
                // If there is an interceptor, but no watchDelegate then treat the interceptor like
                // we treat filters - it is assumed to be a pure function unless flagged with $stateful
                fn.$$watchDelegate = inputsWatchDelegate;
                fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];
              }
              return fn;
            }
          }
        ];
      }
      /**
	 * @ngdoc service
	 * @name $q
	 * @requires $rootScope
	 *
	 * @description
	 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
	 * when they are done processing.
	 *
	 * This is an implementation of promises/deferred objects inspired by
	 * [Kris Kowal's Q](https://github.com/kriskowal/q).
	 *
	 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
	 * implementations, and the other which resembles ES6 promises to some degree.
	 *
	 * # $q constructor
	 *
	 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
	 * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,
	 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
	 *
	 * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are
	 * available yet.
	 *
	 * It can be used like so:
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
	 *     return $q(function(resolve, reject) {
	 *       setTimeout(function() {
	 *         if (okToGreet(name)) {
	 *           resolve('Hello, ' + name + '!');
	 *         } else {
	 *           reject('Greeting ' + name + ' is not allowed.');
	 *         }
	 *       }, 1000);
	 *     });
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   });
	 * ```
	 *
	 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
	 *
	 * However, the more traditional CommonJS-style usage is still available, and documented below.
	 *
	 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
	 * interface for interacting with an object that represents the result of an action that is
	 * performed asynchronously, and may or may not be finished at any given point in time.
	 *
	 * From the perspective of dealing with error handling, deferred and promise APIs are to
	 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     var deferred = $q.defer();
	 *
	 *     setTimeout(function() {
	 *       deferred.notify('About to greet ' + name + '.');
	 *
	 *       if (okToGreet(name)) {
	 *         deferred.resolve('Hello, ' + name + '!');
	 *       } else {
	 *         deferred.reject('Greeting ' + name + ' is not allowed.');
	 *       }
	 *     }, 1000);
	 *
	 *     return deferred.promise;
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   }, function(update) {
	 *     alert('Got notification: ' + update);
	 *   });
	 * ```
	 *
	 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
	 * comes in the way of guarantees that promise and deferred APIs make, see
	 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
	 *
	 * Additionally the promise api allows for composition that is very hard to do with the
	 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
	 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
	 * section on serial or parallel joining of promises.
	 *
	 * # The Deferred API
	 *
	 * A new instance of deferred is constructed by calling `$q.defer()`.
	 *
	 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
	 * that can be used for signaling the successful or unsuccessful completion, as well as the status
	 * of the task.
	 *
	 * **Methods**
	 *
	 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
	 *   constructed via `$q.reject`, the promise will be rejected instead.
	 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
	 *   resolving it with a rejection constructed via `$q.reject`.
	 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
	 *   multiple times before the promise is either resolved or rejected.
	 *
	 * **Properties**
	 *
	 * - promise – `{Promise}` – promise object associated with this deferred.
	 *
	 *
	 * # The Promise API
	 *
	 * A new promise instance is created when a deferred instance is created and can be retrieved by
	 * calling `deferred.promise`.
	 *
	 * The purpose of the promise object is to allow for interested parties to get access to the result
	 * of the deferred task when it completes.
	 *
	 * **Methods**
	 *
	 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
	 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
	 *   as soon as the result is available. The callbacks are called with a single argument: the result
	 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
	 *   provide a progress indication, before the promise is resolved or rejected.
	 *
	 *   This method *returns a new promise* which is resolved or rejected via the return value of the
	 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
	 *   with the value which is resolved in that promise using
	 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
	 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
	 *   resolved or rejected from the notifyCallback method.
	 *
	 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
	 *
	 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
	 *   but to do so without modifying the final value. This is useful to release resources or do some
	 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
	 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
	 *   more information.
	 *
	 * # Chaining promises
	 *
	 * Because calling the `then` method of a promise returns a new derived promise, it is easily
	 * possible to create a chain of promises:
	 *
	 * ```js
	 *   promiseB = promiseA.then(function(result) {
	 *     return result + 1;
	 *   });
	 *
	 *   // promiseB will be resolved immediately after promiseA is resolved and its value
	 *   // will be the result of promiseA incremented by 1
	 * ```
	 *
	 * It is possible to create chains of any length and since a promise can be resolved with another
	 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
	 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
	 * $http's response interceptors.
	 *
	 *
	 * # Differences between Kris Kowal's Q and $q
	 *
	 *  There are two main differences:
	 *
	 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
	 *   mechanism in angular, which means faster propagation of resolution or rejection into your
	 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
	 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
	 *   all the important functionality needed for common async tasks.
	 *
	 *  # Testing
	 *
	 *  ```js
	 *    it('should simulate promise', inject(function($q, $rootScope) {
	 *      var deferred = $q.defer();
	 *      var promise = deferred.promise;
	 *      var resolvedValue;
	 *
	 *      promise.then(function(value) { resolvedValue = value; });
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Simulate resolving of promise
	 *      deferred.resolve(123);
	 *      // Note that the 'then' function does not get called synchronously.
	 *      // This is because we want the promise API to always be async, whether or not
	 *      // it got called synchronously or asynchronously.
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Propagate promise resolution to 'then' functions using $apply().
	 *      $rootScope.$apply();
	 *      expect(resolvedValue).toEqual(123);
	 *    }));
	 *  ```
	 *
	 * @param {function(function, function)} resolver Function which is responsible for resolving or
	 *   rejecting the newly created promise. The first parameter is a function which resolves the
	 *   promise, the second parameter is a function which rejects the promise.
	 *
	 * @returns {Promise} The newly created promise.
	 */
      function $QProvider() {
        this.$get = [
          '$rootScope',
          '$exceptionHandler',
          function ($rootScope, $exceptionHandler) {
            return qFactory(function (callback) {
              $rootScope.$evalAsync(callback);
            }, $exceptionHandler);
          }
        ];
      }
      function $$QProvider() {
        this.$get = [
          '$browser',
          '$exceptionHandler',
          function ($browser, $exceptionHandler) {
            return qFactory(function (callback) {
              $browser.defer(callback);
            }, $exceptionHandler);
          }
        ];
      }
      /**
	 * Constructs a promise manager.
	 *
	 * @param {function(function)} nextTick Function for executing functions in the next turn.
	 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
	 *     debugging purposes.
	 * @returns {object} Promise manager.
	 */
      function qFactory(nextTick, exceptionHandler) {
        var $qMinErr = minErr('$q', TypeError);
        function callOnce(self, resolveFn, rejectFn) {
          var called = false;
          function wrap(fn) {
            return function (value) {
              if (called)
                return;
              called = true;
              fn.call(self, value);
            };
          }
          return [
            wrap(resolveFn),
            wrap(rejectFn)
          ];
        }
        /**
	   * @ngdoc method
	   * @name ng.$q#defer
	   * @kind function
	   *
	   * @description
	   * Creates a `Deferred` object which represents a task which will finish in the future.
	   *
	   * @returns {Deferred} Returns a new instance of deferred.
	   */
        var defer = function () {
          return new Deferred();
        };
        function Promise() {
          this.$$state = { status: 0 };
        }
        extend(Promise.prototype, {
          then: function (onFulfilled, onRejected, progressBack) {
            if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {
              return this;
            }
            var result = new Deferred();
            this.$$state.pending = this.$$state.pending || [];
            this.$$state.pending.push([
              result,
              onFulfilled,
              onRejected,
              progressBack
            ]);
            if (this.$$state.status > 0)
              scheduleProcessQueue(this.$$state);
            return result.promise;
          },
          'catch': function (callback) {
            return this.then(null, callback);
          },
          'finally': function (callback, progressBack) {
            return this.then(function (value) {
              return handleCallback(value, true, callback);
            }, function (error) {
              return handleCallback(error, false, callback);
            }, progressBack);
          }
        });
        //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
        function simpleBind(context, fn) {
          return function (value) {
            fn.call(context, value);
          };
        }
        function processQueue(state) {
          var fn, deferred, pending;
          pending = state.pending;
          state.processScheduled = false;
          state.pending = undefined;
          for (var i = 0, ii = pending.length; i < ii; ++i) {
            deferred = pending[i][0];
            fn = pending[i][state.status];
            try {
              if (isFunction(fn)) {
                deferred.resolve(fn(state.value));
              } else if (state.status === 1) {
                deferred.resolve(state.value);
              } else {
                deferred.reject(state.value);
              }
            } catch (e) {
              deferred.reject(e);
              exceptionHandler(e);
            }
          }
        }
        function scheduleProcessQueue(state) {
          if (state.processScheduled || !state.pending)
            return;
          state.processScheduled = true;
          nextTick(function () {
            processQueue(state);
          });
        }
        function Deferred() {
          this.promise = new Promise();
          //Necessary to support unbound execution :/
          this.resolve = simpleBind(this, this.resolve);
          this.reject = simpleBind(this, this.reject);
          this.notify = simpleBind(this, this.notify);
        }
        extend(Deferred.prototype, {
          resolve: function (val) {
            if (this.promise.$$state.status)
              return;
            if (val === this.promise) {
              this.$$reject($qMinErr('qcycle', 'Expected promise to be resolved with value other than itself \'{0}\'', val));
            } else {
              this.$$resolve(val);
            }
          },
          $$resolve: function (val) {
            var then, fns;
            fns = callOnce(this, this.$$resolve, this.$$reject);
            try {
              if (isObject(val) || isFunction(val))
                then = val && val.then;
              if (isFunction(then)) {
                this.promise.$$state.status = -1;
                then.call(val, fns[0], fns[1], this.notify);
              } else {
                this.promise.$$state.value = val;
                this.promise.$$state.status = 1;
                scheduleProcessQueue(this.promise.$$state);
              }
            } catch (e) {
              fns[1](e);
              exceptionHandler(e);
            }
          },
          reject: function (reason) {
            if (this.promise.$$state.status)
              return;
            this.$$reject(reason);
          },
          $$reject: function (reason) {
            this.promise.$$state.value = reason;
            this.promise.$$state.status = 2;
            scheduleProcessQueue(this.promise.$$state);
          },
          notify: function (progress) {
            var callbacks = this.promise.$$state.pending;
            if (this.promise.$$state.status <= 0 && callbacks && callbacks.length) {
              nextTick(function () {
                var callback, result;
                for (var i = 0, ii = callbacks.length; i < ii; i++) {
                  result = callbacks[i][0];
                  callback = callbacks[i][3];
                  try {
                    result.notify(isFunction(callback) ? callback(progress) : progress);
                  } catch (e) {
                    exceptionHandler(e);
                  }
                }
              });
            }
          }
        });
        /**
	   * @ngdoc method
	   * @name $q#reject
	   * @kind function
	   *
	   * @description
	   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
	   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
	   * a promise chain, you don't need to worry about it.
	   *
	   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
	   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
	   * a promise error callback and you want to forward the error to the promise derived from the
	   * current promise, you have to "rethrow" the error by returning a rejection constructed via
	   * `reject`.
	   *
	   * ```js
	   *   promiseB = promiseA.then(function(result) {
	   *     // success: do something and resolve promiseB
	   *     //          with the old or a new result
	   *     return result;
	   *   }, function(reason) {
	   *     // error: handle the error if possible and
	   *     //        resolve promiseB with newPromiseOrValue,
	   *     //        otherwise forward the rejection to promiseB
	   *     if (canHandle(reason)) {
	   *      // handle the error and recover
	   *      return newPromiseOrValue;
	   *     }
	   *     return $q.reject(reason);
	   *   });
	   * ```
	   *
	   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
	   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
	   */
        var reject = function (reason) {
          var result = new Deferred();
          result.reject(reason);
          return result.promise;
        };
        var makePromise = function makePromise(value, resolved) {
          var result = new Deferred();
          if (resolved) {
            result.resolve(value);
          } else {
            result.reject(value);
          }
          return result.promise;
        };
        var handleCallback = function handleCallback(value, isResolved, callback) {
          var callbackOutput = null;
          try {
            if (isFunction(callback))
              callbackOutput = callback();
          } catch (e) {
            return makePromise(e, false);
          }
          if (isPromiseLike(callbackOutput)) {
            return callbackOutput.then(function () {
              return makePromise(value, isResolved);
            }, function (error) {
              return makePromise(error, false);
            });
          } else {
            return makePromise(value, isResolved);
          }
        };
        /**
	   * @ngdoc method
	   * @name $q#when
	   * @kind function
	   *
	   * @description
	   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
	   * This is useful when you are dealing with an object that might or might not be a promise, or if
	   * the promise comes from a source that can't be trusted.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */
        var when = function (value, callback, errback, progressBack) {
          var result = new Deferred();
          result.resolve(value);
          return result.promise.then(callback, errback, progressBack);
        };
        /**
	   * @ngdoc method
	   * @name $q#resolve
	   * @kind function
	   *
	   * @description
	   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */
        var resolve = when;
        /**
	   * @ngdoc method
	   * @name $q#all
	   * @kind function
	   *
	   * @description
	   * Combines multiple promises into a single promise that is resolved when all of the input
	   * promises are resolved.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
	   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
	   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
	   *   with the same rejection value.
	   */
        function all(promises) {
          var deferred = new Deferred(), counter = 0, results = isArray(promises) ? [] : {};
          forEach(promises, function (promise, key) {
            counter++;
            when(promise).then(function (value) {
              if (results.hasOwnProperty(key))
                return;
              results[key] = value;
              if (!--counter)
                deferred.resolve(results);
            }, function (reason) {
              if (results.hasOwnProperty(key))
                return;
              deferred.reject(reason);
            });
          });
          if (counter === 0) {
            deferred.resolve(results);
          }
          return deferred.promise;
        }
        var $Q = function Q(resolver) {
          if (!isFunction(resolver)) {
            throw $qMinErr('norslvr', 'Expected resolverFn, got \'{0}\'', resolver);
          }
          if (!(this instanceof Q)) {
            // More useful when $Q is the Promise itself.
            return new Q(resolver);
          }
          var deferred = new Deferred();
          function resolveFn(value) {
            deferred.resolve(value);
          }
          function rejectFn(reason) {
            deferred.reject(reason);
          }
          resolver(resolveFn, rejectFn);
          return deferred.promise;
        };
        $Q.defer = defer;
        $Q.reject = reject;
        $Q.when = when;
        $Q.resolve = resolve;
        $Q.all = all;
        return $Q;
      }
      function $$RAFProvider() {
        //rAF
        this.$get = [
          '$window',
          '$timeout',
          function ($window, $timeout) {
            var requestAnimationFrame = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame;
            var cancelAnimationFrame = $window.cancelAnimationFrame || $window.webkitCancelAnimationFrame || $window.webkitCancelRequestAnimationFrame;
            var rafSupported = !!requestAnimationFrame;
            var raf = rafSupported ? function (fn) {
                var id = requestAnimationFrame(fn);
                return function () {
                  cancelAnimationFrame(id);
                };
              } : function (fn) {
                var timer = $timeout(fn, 16.66, false);
                // 1000 / 60 = 16.666
                return function () {
                  $timeout.cancel(timer);
                };
              };
            raf.supported = rafSupported;
            return raf;
          }
        ];
      }
      /**
	 * DESIGN NOTES
	 *
	 * The design decisions behind the scope are heavily favored for speed and memory consumption.
	 *
	 * The typical use of scope is to watch the expressions, which most of the time return the same
	 * value as last time so we optimize the operation.
	 *
	 * Closures construction is expensive in terms of speed as well as memory:
	 *   - No closures, instead use prototypical inheritance for API
	 *   - Internal state needs to be stored on scope directly, which means that private state is
	 *     exposed as $$____ properties
	 *
	 * Loop operations are optimized by using while(count--) { ... }
	 *   - this means that in order to keep the same order of execution as addition we have to add
	 *     items to the array at the beginning (unshift) instead of at the end (push)
	 *
	 * Child scopes are created and removed often
	 *   - Using an array would be slow since inserts in middle are expensive so we use linked list
	 *
	 * There are few watches then a lot of observers. This is why you don't want the observer to be
	 * implemented in the same way as watch. Watch requires return of initialization function which
	 * are expensive to construct.
	 */
      /**
	 * @ngdoc provider
	 * @name $rootScopeProvider
	 * @description
	 *
	 * Provider for the $rootScope service.
	 */
      /**
	 * @ngdoc method
	 * @name $rootScopeProvider#digestTtl
	 * @description
	 *
	 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
	 * assuming that the model is unstable.
	 *
	 * The current default is 10 iterations.
	 *
	 * In complex applications it's possible that the dependencies between `$watch`s will result in
	 * several digest iterations. However if an application needs more than the default 10 digest
	 * iterations for its model to stabilize then you should investigate what is causing the model to
	 * continuously change during the digest.
	 *
	 * Increasing the TTL could have performance implications, so you should not change it without
	 * proper justification.
	 *
	 * @param {number} limit The number of digest iterations.
	 */
      /**
	 * @ngdoc service
	 * @name $rootScope
	 * @description
	 *
	 * Every application has a single root {@link ng.$rootScope.Scope scope}.
	 * All other scopes are descendant scopes of the root scope. Scopes provide separation
	 * between the model and the view, via a mechanism for watching the model for changes.
	 * They also provide an event emission/broadcast and subscription facility. See the
	 * {@link guide/scope developer guide on scopes}.
	 */
      function $RootScopeProvider() {
        var TTL = 10;
        var $rootScopeMinErr = minErr('$rootScope');
        var lastDirtyWatch = null;
        var applyAsyncId = null;
        this.digestTtl = function (value) {
          if (arguments.length) {
            TTL = value;
          }
          return TTL;
        };
        function createChildScopeClass(parent) {
          function ChildScope() {
            this.$$watchers = this.$$nextSibling = this.$$childHead = this.$$childTail = null;
            this.$$listeners = {};
            this.$$listenerCount = {};
            this.$$watchersCount = 0;
            this.$id = nextUid();
            this.$$ChildScope = null;
          }
          ChildScope.prototype = parent;
          return ChildScope;
        }
        this.$get = [
          '$injector',
          '$exceptionHandler',
          '$parse',
          '$browser',
          function ($injector, $exceptionHandler, $parse, $browser) {
            function destroyChildScope($event) {
              $event.currentScope.$$destroyed = true;
            }
            /**
	     * @ngdoc type
	     * @name $rootScope.Scope
	     *
	     * @description
	     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
	     * {@link auto.$injector $injector}. Child scopes are created using the
	     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
	     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
	     * an in-depth introduction and usage examples.
	     *
	     *
	     * # Inheritance
	     * A scope can inherit from a parent scope, as in this example:
	     * ```js
	         var parent = $rootScope;
	         var child = parent.$new();

	         parent.salutation = "Hello";
	         expect(child.salutation).toEqual('Hello');

	         child.salutation = "Welcome";
	         expect(child.salutation).toEqual('Welcome');
	         expect(parent.salutation).toEqual('Hello');
	     * ```
	     *
	     * When interacting with `Scope` in tests, additional helper methods are available on the
	     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
	     * details.
	     *
	     *
	     * @param {Object.<string, function()>=} providers Map of service factory which need to be
	     *                                       provided for the current scope. Defaults to {@link ng}.
	     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
	     *                              append/override services provided by `providers`. This is handy
	     *                              when unit-testing and having the need to override a default
	     *                              service.
	     * @returns {Object} Newly created scope.
	     *
	     */
            function Scope() {
              this.$id = nextUid();
              this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null;
              this.$root = this;
              this.$$destroyed = false;
              this.$$listeners = {};
              this.$$listenerCount = {};
              this.$$watchersCount = 0;
              this.$$isolateBindings = null;
            }
            /**
	     * @ngdoc property
	     * @name $rootScope.Scope#$id
	     *
	     * @description
	     * Unique scope ID (monotonically increasing) useful for debugging.
	     */
            /**
	      * @ngdoc property
	      * @name $rootScope.Scope#$parent
	      *
	      * @description
	      * Reference to the parent scope.
	      */
            /**
	       * @ngdoc property
	       * @name $rootScope.Scope#$root
	       *
	       * @description
	       * Reference to the root scope.
	       */
            Scope.prototype = {
              constructor: Scope,
              $new: function (isolate, parent) {
                var child;
                parent = parent || this;
                if (isolate) {
                  child = new Scope();
                  child.$root = this.$root;
                } else {
                  // Only create a child scope class if somebody asks for one,
                  // but cache it to allow the VM to optimize lookups.
                  if (!this.$$ChildScope) {
                    this.$$ChildScope = createChildScopeClass(this);
                  }
                  child = new this.$$ChildScope();
                }
                child.$parent = parent;
                child.$$prevSibling = parent.$$childTail;
                if (parent.$$childHead) {
                  parent.$$childTail.$$nextSibling = child;
                  parent.$$childTail = child;
                } else {
                  parent.$$childHead = parent.$$childTail = child;
                }
                // When the new scope is not isolated or we inherit from `this`, and
                // the parent scope is destroyed, the property `$$destroyed` is inherited
                // prototypically. In all other cases, this property needs to be set
                // when the parent scope is destroyed.
                // The listener needs to be added after the parent is set
                if (isolate || parent != this)
                  child.$on('$destroy', destroyChildScope);
                return child;
              },
              $watch: function (watchExp, listener, objectEquality, prettyPrintExpression) {
                var get = $parse(watchExp);
                if (get.$$watchDelegate) {
                  return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
                }
                var scope = this, array = scope.$$watchers, watcher = {
                    fn: listener,
                    last: initWatchVal,
                    get: get,
                    exp: prettyPrintExpression || watchExp,
                    eq: !!objectEquality
                  };
                lastDirtyWatch = null;
                if (!isFunction(listener)) {
                  watcher.fn = noop;
                }
                if (!array) {
                  array = scope.$$watchers = [];
                }
                // we use unshift since we use a while loop in $digest for speed.
                // the while loop reads in reverse order.
                array.unshift(watcher);
                incrementWatchersCount(this, 1);
                return function deregisterWatch() {
                  if (arrayRemove(array, watcher) >= 0) {
                    incrementWatchersCount(scope, -1);
                  }
                  lastDirtyWatch = null;
                };
              },
              $watchGroup: function (watchExpressions, listener) {
                var oldValues = new Array(watchExpressions.length);
                var newValues = new Array(watchExpressions.length);
                var deregisterFns = [];
                var self = this;
                var changeReactionScheduled = false;
                var firstRun = true;
                if (!watchExpressions.length) {
                  // No expressions means we call the listener ASAP
                  var shouldCall = true;
                  self.$evalAsync(function () {
                    if (shouldCall)
                      listener(newValues, newValues, self);
                  });
                  return function deregisterWatchGroup() {
                    shouldCall = false;
                  };
                }
                if (watchExpressions.length === 1) {
                  // Special case size of one
                  return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
                    newValues[0] = value;
                    oldValues[0] = oldValue;
                    listener(newValues, value === oldValue ? newValues : oldValues, scope);
                  });
                }
                forEach(watchExpressions, function (expr, i) {
                  var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
                      newValues[i] = value;
                      oldValues[i] = oldValue;
                      if (!changeReactionScheduled) {
                        changeReactionScheduled = true;
                        self.$evalAsync(watchGroupAction);
                      }
                    });
                  deregisterFns.push(unwatchFn);
                });
                function watchGroupAction() {
                  changeReactionScheduled = false;
                  if (firstRun) {
                    firstRun = false;
                    listener(newValues, newValues, self);
                  } else {
                    listener(newValues, oldValues, self);
                  }
                }
                return function deregisterWatchGroup() {
                  while (deregisterFns.length) {
                    deregisterFns.shift()();
                  }
                };
              },
              $watchCollection: function (obj, listener) {
                $watchCollectionInterceptor.$stateful = true;
                var self = this;
                // the current value, updated on each dirty-check run
                var newValue;
                // a shallow copy of the newValue from the last dirty-check run,
                // updated to match newValue during dirty-check run
                var oldValue;
                // a shallow copy of the newValue from when the last change happened
                var veryOldValue;
                // only track veryOldValue if the listener is asking for it
                var trackVeryOldValue = listener.length > 1;
                var changeDetected = 0;
                var changeDetector = $parse(obj, $watchCollectionInterceptor);
                var internalArray = [];
                var internalObject = {};
                var initRun = true;
                var oldLength = 0;
                function $watchCollectionInterceptor(_value) {
                  newValue = _value;
                  var newLength, key, bothNaN, newItem, oldItem;
                  // If the new value is undefined, then return undefined as the watch may be a one-time watch
                  if (isUndefined(newValue))
                    return;
                  if (!isObject(newValue)) {
                    // if primitive
                    if (oldValue !== newValue) {
                      oldValue = newValue;
                      changeDetected++;
                    }
                  } else if (isArrayLike(newValue)) {
                    if (oldValue !== internalArray) {
                      // we are transitioning from something which was not an array into array.
                      oldValue = internalArray;
                      oldLength = oldValue.length = 0;
                      changeDetected++;
                    }
                    newLength = newValue.length;
                    if (oldLength !== newLength) {
                      // if lengths do not match we need to trigger change notification
                      changeDetected++;
                      oldValue.length = oldLength = newLength;
                    }
                    // copy the items to oldValue and look for changes.
                    for (var i = 0; i < newLength; i++) {
                      oldItem = oldValue[i];
                      newItem = newValue[i];
                      bothNaN = oldItem !== oldItem && newItem !== newItem;
                      if (!bothNaN && oldItem !== newItem) {
                        changeDetected++;
                        oldValue[i] = newItem;
                      }
                    }
                  } else {
                    if (oldValue !== internalObject) {
                      // we are transitioning from something which was not an object into object.
                      oldValue = internalObject = {};
                      oldLength = 0;
                      changeDetected++;
                    }
                    // copy the items to oldValue and look for changes.
                    newLength = 0;
                    for (key in newValue) {
                      if (hasOwnProperty.call(newValue, key)) {
                        newLength++;
                        newItem = newValue[key];
                        oldItem = oldValue[key];
                        if (key in oldValue) {
                          bothNaN = oldItem !== oldItem && newItem !== newItem;
                          if (!bothNaN && oldItem !== newItem) {
                            changeDetected++;
                            oldValue[key] = newItem;
                          }
                        } else {
                          oldLength++;
                          oldValue[key] = newItem;
                          changeDetected++;
                        }
                      }
                    }
                    if (oldLength > newLength) {
                      // we used to have more keys, need to find them and destroy them.
                      changeDetected++;
                      for (key in oldValue) {
                        if (!hasOwnProperty.call(newValue, key)) {
                          oldLength--;
                          delete oldValue[key];
                        }
                      }
                    }
                  }
                  return changeDetected;
                }
                function $watchCollectionAction() {
                  if (initRun) {
                    initRun = false;
                    listener(newValue, newValue, self);
                  } else {
                    listener(newValue, veryOldValue, self);
                  }
                  // make a copy for the next time a collection is changed
                  if (trackVeryOldValue) {
                    if (!isObject(newValue)) {
                      //primitive
                      veryOldValue = newValue;
                    } else if (isArrayLike(newValue)) {
                      veryOldValue = new Array(newValue.length);
                      for (var i = 0; i < newValue.length; i++) {
                        veryOldValue[i] = newValue[i];
                      }
                    } else {
                      // if object
                      veryOldValue = {};
                      for (var key in newValue) {
                        if (hasOwnProperty.call(newValue, key)) {
                          veryOldValue[key] = newValue[key];
                        }
                      }
                    }
                  }
                }
                return this.$watch(changeDetector, $watchCollectionAction);
              },
              $digest: function () {
                var watch, value, last, watchers, length, dirty, ttl = TTL, next, current, target = this, watchLog = [], logIdx, logMsg, asyncTask;
                beginPhase('$digest');
                // Check for changes to browser url that happened in sync before the call to $digest
                $browser.$$checkUrlChange();
                if (this === $rootScope && applyAsyncId !== null) {
                  // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
                  // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
                  $browser.defer.cancel(applyAsyncId);
                  flushApplyAsync();
                }
                lastDirtyWatch = null;
                do {
                  // "while dirty" loop
                  dirty = false;
                  current = target;
                  while (asyncQueue.length) {
                    try {
                      asyncTask = asyncQueue.shift();
                      asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
                    } catch (e) {
                      $exceptionHandler(e);
                    }
                    lastDirtyWatch = null;
                  }
                  traverseScopesLoop:
                    do {
                      // "traverse the scopes" loop
                      if (watchers = current.$$watchers) {
                        // process our watches
                        length = watchers.length;
                        while (length--) {
                          try {
                            watch = watchers[length];
                            // Most common watches are on primitives, in which case we can short
                            // circuit it with === operator, only when === fails do we use .equals
                            if (watch) {
                              if ((value = watch.get(current)) !== (last = watch.last) && !(watch.eq ? equals(value, last) : typeof value === 'number' && typeof last === 'number' && isNaN(value) && isNaN(last))) {
                                dirty = true;
                                lastDirtyWatch = watch;
                                watch.last = watch.eq ? copy(value, null) : value;
                                watch.fn(value, last === initWatchVal ? value : last, current);
                                if (ttl < 5) {
                                  logIdx = 4 - ttl;
                                  if (!watchLog[logIdx])
                                    watchLog[logIdx] = [];
                                  watchLog[logIdx].push({
                                    msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
                                    newVal: value,
                                    oldVal: last
                                  });
                                }
                              } else if (watch === lastDirtyWatch) {
                                // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                                // have already been tested.
                                dirty = false;
                                break traverseScopesLoop;
                              }
                            }
                          } catch (e) {
                            $exceptionHandler(e);
                          }
                        }
                      }
                      // Insanity Warning: scope depth-first traversal
                      // yes, this code is a bit crazy, but it works and we have tests to prove it!
                      // this piece should be kept in sync with the traversal in $broadcast
                      if (!(next = current.$$watchersCount && current.$$childHead || current !== target && current.$$nextSibling)) {
                        while (current !== target && !(next = current.$$nextSibling)) {
                          current = current.$parent;
                        }
                      }
                    } while (current = next);
                  // `break traverseScopesLoop;` takes us to here
                  if ((dirty || asyncQueue.length) && !ttl--) {
                    clearPhase();
                    throw $rootScopeMinErr('infdig', '{0} $digest() iterations reached. Aborting!\n' + 'Watchers fired in the last 5 iterations: {1}', TTL, watchLog);
                  }
                } while (dirty || asyncQueue.length);
                clearPhase();
                while (postDigestQueue.length) {
                  try {
                    postDigestQueue.shift()();
                  } catch (e) {
                    $exceptionHandler(e);
                  }
                }
              },
              $destroy: function () {
                // We can't destroy a scope that has been already destroyed.
                if (this.$$destroyed)
                  return;
                var parent = this.$parent;
                this.$broadcast('$destroy');
                this.$$destroyed = true;
                if (this === $rootScope) {
                  //Remove handlers attached to window when $rootScope is removed
                  $browser.$$applicationDestroyed();
                }
                incrementWatchersCount(this, -this.$$watchersCount);
                for (var eventName in this.$$listenerCount) {
                  decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
                }
                // sever all the references to parent scopes (after this cleanup, the current scope should
                // not be retained by any of our references and should be eligible for garbage collection)
                if (parent && parent.$$childHead == this)
                  parent.$$childHead = this.$$nextSibling;
                if (parent && parent.$$childTail == this)
                  parent.$$childTail = this.$$prevSibling;
                if (this.$$prevSibling)
                  this.$$prevSibling.$$nextSibling = this.$$nextSibling;
                if (this.$$nextSibling)
                  this.$$nextSibling.$$prevSibling = this.$$prevSibling;
                // Disable listeners, watchers and apply/digest methods
                this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
                this.$on = this.$watch = this.$watchGroup = function () {
                  return noop;
                };
                this.$$listeners = {};
                // All of the code below is bogus code that works around V8's memory leak via optimized code
                // and inline caches.
                //
                // see:
                // - https://code.google.com/p/v8/issues/detail?id=2073#c26
                // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
                // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451
                this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = this.$root = this.$$watchers = null;
              },
              $eval: function (expr, locals) {
                return $parse(expr)(this, locals);
              },
              $evalAsync: function (expr, locals) {
                // if we are outside of an $digest loop and this is the first time we are scheduling async
                // task also schedule async auto-flush
                if (!$rootScope.$$phase && !asyncQueue.length) {
                  $browser.defer(function () {
                    if (asyncQueue.length) {
                      $rootScope.$digest();
                    }
                  });
                }
                asyncQueue.push({
                  scope: this,
                  expression: expr,
                  locals: locals
                });
              },
              $$postDigest: function (fn) {
                postDigestQueue.push(fn);
              },
              $apply: function (expr) {
                try {
                  beginPhase('$apply');
                  try {
                    return this.$eval(expr);
                  } finally {
                    clearPhase();
                  }
                } catch (e) {
                  $exceptionHandler(e);
                } finally {
                  try {
                    $rootScope.$digest();
                  } catch (e) {
                    $exceptionHandler(e);
                    throw e;
                  }
                }
              },
              $applyAsync: function (expr) {
                var scope = this;
                expr && applyAsyncQueue.push($applyAsyncExpression);
                scheduleApplyAsync();
                function $applyAsyncExpression() {
                  scope.$eval(expr);
                }
              },
              $on: function (name, listener) {
                var namedListeners = this.$$listeners[name];
                if (!namedListeners) {
                  this.$$listeners[name] = namedListeners = [];
                }
                namedListeners.push(listener);
                var current = this;
                do {
                  if (!current.$$listenerCount[name]) {
                    current.$$listenerCount[name] = 0;
                  }
                  current.$$listenerCount[name]++;
                } while (current = current.$parent);
                var self = this;
                return function () {
                  var indexOfListener = namedListeners.indexOf(listener);
                  if (indexOfListener !== -1) {
                    namedListeners[indexOfListener] = null;
                    decrementListenerCount(self, 1, name);
                  }
                };
              },
              $emit: function (name, args) {
                var empty = [], namedListeners, scope = this, stopPropagation = false, event = {
                    name: name,
                    targetScope: scope,
                    stopPropagation: function () {
                      stopPropagation = true;
                    },
                    preventDefault: function () {
                      event.defaultPrevented = true;
                    },
                    defaultPrevented: false
                  }, listenerArgs = concat([event], arguments, 1), i, length;
                do {
                  namedListeners = scope.$$listeners[name] || empty;
                  event.currentScope = scope;
                  for (i = 0, length = namedListeners.length; i < length; i++) {
                    // if listeners were deregistered, defragment the array
                    if (!namedListeners[i]) {
                      namedListeners.splice(i, 1);
                      i--;
                      length--;
                      continue;
                    }
                    try {
                      //allow all listeners attached to the current scope to run
                      namedListeners[i].apply(null, listenerArgs);
                    } catch (e) {
                      $exceptionHandler(e);
                    }
                  }
                  //if any listener on the current scope stops propagation, prevent bubbling
                  if (stopPropagation) {
                    event.currentScope = null;
                    return event;
                  }
                  //traverse upwards
                  scope = scope.$parent;
                } while (scope);
                event.currentScope = null;
                return event;
              },
              $broadcast: function (name, args) {
                var target = this, current = target, next = target, event = {
                    name: name,
                    targetScope: target,
                    preventDefault: function () {
                      event.defaultPrevented = true;
                    },
                    defaultPrevented: false
                  };
                if (!target.$$listenerCount[name])
                  return event;
                var listenerArgs = concat([event], arguments, 1), listeners, i, length;
                //down while you can, then up and next sibling or up and next sibling until back at root
                while (current = next) {
                  event.currentScope = current;
                  listeners = current.$$listeners[name] || [];
                  for (i = 0, length = listeners.length; i < length; i++) {
                    // if listeners were deregistered, defragment the array
                    if (!listeners[i]) {
                      listeners.splice(i, 1);
                      i--;
                      length--;
                      continue;
                    }
                    try {
                      listeners[i].apply(null, listenerArgs);
                    } catch (e) {
                      $exceptionHandler(e);
                    }
                  }
                  // Insanity Warning: scope depth-first traversal
                  // yes, this code is a bit crazy, but it works and we have tests to prove it!
                  // this piece should be kept in sync with the traversal in $digest
                  // (though it differs due to having the extra check for $$listenerCount)
                  if (!(next = current.$$listenerCount[name] && current.$$childHead || current !== target && current.$$nextSibling)) {
                    while (current !== target && !(next = current.$$nextSibling)) {
                      current = current.$parent;
                    }
                  }
                }
                event.currentScope = null;
                return event;
              }
            };
            var $rootScope = new Scope();
            //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
            var asyncQueue = $rootScope.$$asyncQueue = [];
            var postDigestQueue = $rootScope.$$postDigestQueue = [];
            var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];
            return $rootScope;
            function beginPhase(phase) {
              if ($rootScope.$$phase) {
                throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
              }
              $rootScope.$$phase = phase;
            }
            function clearPhase() {
              $rootScope.$$phase = null;
            }
            function incrementWatchersCount(current, count) {
              do {
                current.$$watchersCount += count;
              } while (current = current.$parent);
            }
            function decrementListenerCount(current, count, name) {
              do {
                current.$$listenerCount[name] -= count;
                if (current.$$listenerCount[name] === 0) {
                  delete current.$$listenerCount[name];
                }
              } while (current = current.$parent);
            }
            /**
	     * function used as an initial value for watchers.
	     * because it's unique we can easily tell it apart from other values
	     */
            function initWatchVal() {
            }
            function flushApplyAsync() {
              while (applyAsyncQueue.length) {
                try {
                  applyAsyncQueue.shift()();
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
              applyAsyncId = null;
            }
            function scheduleApplyAsync() {
              if (applyAsyncId === null) {
                applyAsyncId = $browser.defer(function () {
                  $rootScope.$apply(flushApplyAsync);
                });
              }
            }
          }
        ];
      }
      /**
	 * @description
	 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
	 */
      function $$SanitizeUriProvider() {
        var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/, imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;
        /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
        this.aHrefSanitizationWhitelist = function (regexp) {
          if (isDefined(regexp)) {
            aHrefSanitizationWhitelist = regexp;
            return this;
          }
          return aHrefSanitizationWhitelist;
        };
        /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
        this.imgSrcSanitizationWhitelist = function (regexp) {
          if (isDefined(regexp)) {
            imgSrcSanitizationWhitelist = regexp;
            return this;
          }
          return imgSrcSanitizationWhitelist;
        };
        this.$get = function () {
          return function sanitizeUri(uri, isImage) {
            var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
            var normalizedVal;
            normalizedVal = urlResolve(uri).href;
            if (normalizedVal !== '' && !normalizedVal.match(regex)) {
              return 'unsafe:' + normalizedVal;
            }
            return uri;
          };
        };
      }
      /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
      var $sceMinErr = minErr('$sce');
      var SCE_CONTEXTS = {
          HTML: 'html',
          CSS: 'css',
          URL: 'url',
          RESOURCE_URL: 'resourceUrl',
          JS: 'js'
        };
      // Helper functions follow.
      function adjustMatcher(matcher) {
        if (matcher === 'self') {
          return matcher;
        } else if (isString(matcher)) {
          // Strings match exactly except for 2 wildcards - '*' and '**'.
          // '*' matches any character except those from the set ':/.?&'.
          // '**' matches any character (like .* in a RegExp).
          // More than 2 *'s raises an error as it's ill defined.
          if (matcher.indexOf('***') > -1) {
            throw $sceMinErr('iwcard', 'Illegal sequence *** in string matcher.  String: {0}', matcher);
          }
          matcher = escapeForRegexp(matcher).replace('\\*\\*', '.*').replace('\\*', '[^:/.?&;]*');
          return new RegExp('^' + matcher + '$');
        } else if (isRegExp(matcher)) {
          // The only other type of matcher allowed is a Regexp.
          // Match entire URL / disallow partial matches.
          // Flags are reset (i.e. no global, ignoreCase or multiline)
          return new RegExp('^' + matcher.source + '$');
        } else {
          throw $sceMinErr('imatcher', 'Matchers may only be "self", string patterns or RegExp objects');
        }
      }
      function adjustMatchers(matchers) {
        var adjustedMatchers = [];
        if (isDefined(matchers)) {
          forEach(matchers, function (matcher) {
            adjustedMatchers.push(adjustMatcher(matcher));
          });
        }
        return adjustedMatchers;
      }
      /**
	 * @ngdoc service
	 * @name $sceDelegate
	 * @kind function
	 *
	 * @description
	 *
	 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
	 * Contextual Escaping (SCE)} services to AngularJS.
	 *
	 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
	 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
	 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
	 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
	 * work because `$sce` delegates to `$sceDelegate` for these operations.
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
	 *
	 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
	 * can override it completely to change the behavior of `$sce`, the common case would
	 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
	 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
	 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
	 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 */
      /**
	 * @ngdoc provider
	 * @name $sceDelegateProvider
	 * @description
	 *
	 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
	 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
	 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
	 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 *
	 * For the general details about this service in Angular, read the main page for {@link ng.$sce
	 * Strict Contextual Escaping (SCE)}.
	 *
	 * **Example**:  Consider the following case. <a name="example"></a>
	 *
	 * - your app is hosted at url `http://myapp.example.com/`
	 * - but some of your templates are hosted on other domains you control such as
	 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
	 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
	 *
	 * Here is what a secure configuration for this scenario might look like:
	 *
	 * ```
	 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
	 *    $sceDelegateProvider.resourceUrlWhitelist([
	 *      // Allow same origin resource loads.
	 *      'self',
	 *      // Allow loading from our assets domain.  Notice the difference between * and **.
	 *      'http://srv*.assets.example.com/**'
	 *    ]);
	 *
	 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
	 *    $sceDelegateProvider.resourceUrlBlacklist([
	 *      'http://myapp.example.com/clickThru**'
	 *    ]);
	 *  });
	 * ```
	 */
      function $SceDelegateProvider() {
        this.SCE_CONTEXTS = SCE_CONTEXTS;
        // Resource URLs can also be trusted by policy.
        var resourceUrlWhitelist = ['self'], resourceUrlBlacklist = [];
        /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlWhitelist
	   * @kind function
	   *
	   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
	   *     provided.  This must be an array or null.  A snapshot of this array is used so further
	   *     changes to the array are ignored.
	   *
	   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *     allowed in this array.
	   *
	   *     Note: **an empty whitelist array will block all URLs**!
	   *
	   * @return {Array} the currently set whitelist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
	   * same origin resource requests.
	   *
	   * @description
	   * Sets/Gets the whitelist of trusted resource URLs.
	   */
        this.resourceUrlWhitelist = function (value) {
          if (arguments.length) {
            resourceUrlWhitelist = adjustMatchers(value);
          }
          return resourceUrlWhitelist;
        };
        /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlBlacklist
	   * @kind function
	   *
	   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
	   *     provided.  This must be an array or null.  A snapshot of this array is used so further
	   *     changes to the array are ignored.
	   *
	   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *     allowed in this array.
	   *
	   *     The typical usage for the blacklist is to **block
	   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
	   *     these would otherwise be trusted but actually return content from the redirected domain.
	   *
	   *     Finally, **the blacklist overrides the whitelist** and has the final say.
	   *
	   * @return {Array} the currently set blacklist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
	   * is no blacklist.)
	   *
	   * @description
	   * Sets/Gets the blacklist of trusted resource URLs.
	   */
        this.resourceUrlBlacklist = function (value) {
          if (arguments.length) {
            resourceUrlBlacklist = adjustMatchers(value);
          }
          return resourceUrlBlacklist;
        };
        this.$get = [
          '$injector',
          function ($injector) {
            var htmlSanitizer = function htmlSanitizer(html) {
              throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
            };
            if ($injector.has('$sanitize')) {
              htmlSanitizer = $injector.get('$sanitize');
            }
            function matchUrl(matcher, parsedUrl) {
              if (matcher === 'self') {
                return urlIsSameOrigin(parsedUrl);
              } else {
                // definitely a regex.  See adjustMatchers()
                return !!matcher.exec(parsedUrl.href);
              }
            }
            function isResourceUrlAllowedByPolicy(url) {
              var parsedUrl = urlResolve(url.toString());
              var i, n, allowed = false;
              // Ensure that at least one item from the whitelist allows this url.
              for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
                if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
                  allowed = true;
                  break;
                }
              }
              if (allowed) {
                // Ensure that no item from the blacklist blocked this url.
                for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
                  if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
                    allowed = false;
                    break;
                  }
                }
              }
              return allowed;
            }
            function generateHolderType(Base) {
              var holderType = function TrustedValueHolderType(trustedValue) {
                this.$$unwrapTrustedValue = function () {
                  return trustedValue;
                };
              };
              if (Base) {
                holderType.prototype = new Base();
              }
              holderType.prototype.valueOf = function sceValueOf() {
                return this.$$unwrapTrustedValue();
              };
              holderType.prototype.toString = function sceToString() {
                return this.$$unwrapTrustedValue().toString();
              };
              return holderType;
            }
            var trustedValueHolderBase = generateHolderType(), byType = {};
            byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);
            /**
	     * @ngdoc method
	     * @name $sceDelegate#trustAs
	     *
	     * @description
	     * Returns an object that is trusted by angular for use in specified strict
	     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
	     * attribute interpolation, any dom event binding attribute interpolation
	     * such as for onclick,  etc.) that uses the provided value.
	     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */
            function trustAs(type, trustedValue) {
              var Constructor = byType.hasOwnProperty(type) ? byType[type] : null;
              if (!Constructor) {
                throw $sceMinErr('icontext', 'Attempted to trust a value in invalid context. Context: {0}; Value: {1}', type, trustedValue);
              }
              if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {
                return trustedValue;
              }
              // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
              // mutable objects, we ensure here that the value passed in is actually a string.
              if (typeof trustedValue !== 'string') {
                throw $sceMinErr('itype', 'Attempted to trust a non-string value in a content requiring a string: Context: {0}', type);
              }
              return new Constructor(trustedValue);
            }
            /**
	     * @ngdoc method
	     * @name $sceDelegate#valueOf
	     *
	     * @description
	     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
	     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
	     *
	     * If the passed parameter is not a value that had been returned by {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
	     *
	     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
	     *      call or anything else.
	     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
	     *     `value` unchanged.
	     */
            function valueOf(maybeTrusted) {
              if (maybeTrusted instanceof trustedValueHolderBase) {
                return maybeTrusted.$$unwrapTrustedValue();
              } else {
                return maybeTrusted;
              }
            }
            /**
	     * @ngdoc method
	     * @name $sceDelegate#getTrusted
	     *
	     * @description
	     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
	     * returns the originally supplied value if the queried context type is a supertype of the
	     * created type.  If this condition isn't satisfied, throws an exception.
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} call.
	     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
	     */
            function getTrusted(type, maybeTrusted) {
              if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {
                return maybeTrusted;
              }
              var constructor = byType.hasOwnProperty(type) ? byType[type] : null;
              if (constructor && maybeTrusted instanceof constructor) {
                return maybeTrusted.$$unwrapTrustedValue();
              }
              // If we get here, then we may only take one of two actions.
              // 1. sanitize the value for the requested type, or
              // 2. throw an exception.
              if (type === SCE_CONTEXTS.RESOURCE_URL) {
                if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
                  return maybeTrusted;
                } else {
                  throw $sceMinErr('insecurl', 'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}', maybeTrusted.toString());
                }
              } else if (type === SCE_CONTEXTS.HTML) {
                return htmlSanitizer(maybeTrusted);
              }
              throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
            }
            return {
              trustAs: trustAs,
              getTrusted: getTrusted,
              valueOf: valueOf
            };
          }
        ];
      }
      /**
	 * @ngdoc provider
	 * @name $sceProvider
	 * @description
	 *
	 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
	 * -   enable/disable Strict Contextual Escaping (SCE) in a module
	 * -   override the default implementation with a custom delegate
	 *
	 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
	 */
      /* jshint maxlen: false*/
      /**
	 * @ngdoc service
	 * @name $sce
	 * @kind function
	 *
	 * @description
	 *
	 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
	 *
	 * # Strict Contextual Escaping
	 *
	 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
	 * contexts to result in a value that is marked as safe to use for that context.  One example of
	 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
	 * to these contexts as privileged or SCE contexts.
	 *
	 * As of version 1.2, Angular ships with SCE enabled by default.
	 *
	 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
	 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
	 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
	 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
	 * to the top of your HTML document.
	 *
	 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
	 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
	 *
	 * Here's an example of a binding in a privileged context:
	 *
	 * ```
	 * <input ng-model="userHtml" aria-label="User input">
	 * <div ng-bind-html="userHtml"></div>
	 * ```
	 *
	 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
	 * disabled, this application allows the user to render arbitrary HTML into the DIV.
	 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
	 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
	 * security vulnerabilities.)
	 *
	 * For the case of HTML, you might use a library, either on the client side, or on the server side,
	 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
	 *
	 * How would you ensure that every place that used these types of bindings was bound to a value that
	 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
	 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
	 * properties/fields and forgot to update the binding to the sanitized value?
	 *
	 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
	 * determine that something explicitly says it's safe to use a value for binding in that
	 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
	 * for those values that you can easily tell are safe - because they were received from your server,
	 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
	 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
	 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
	 *
	 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
	 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
	 * obtain values that will be accepted by SCE / privileged contexts.
	 *
	 *
	 * ## How does it work?
	 *
	 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
	 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
	 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
	 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
	 *
	 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
	 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
	 * simplified):
	 *
	 * ```
	 * var ngBindHtmlDirective = ['$sce', function($sce) {
	 *   return function(scope, element, attr) {
	 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
	 *       element.html(value || '');
	 *     });
	 *   };
	 * }];
	 * ```
	 *
	 * ## Impact on loading templates
	 *
	 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
	 * `templateUrl`'s specified by {@link guide/directive directives}.
	 *
	 * By default, Angular only loads templates from the same domain and protocol as the application
	 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
	 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
	 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
	 *
	 * *Please note*:
	 * The browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy apply in addition to this and may further restrict whether the template is successfully
	 * loaded.  This means that without the right CORS policy, loading templates from a different domain
	 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
	 * browsers.
	 *
	 * ## This feels like too much overhead
	 *
	 * It's important to remember that SCE only applies to interpolation expressions.
	 *
	 * If your expressions are constant literals, they're automatically trusted and you don't need to
	 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
	 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
	 *
	 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
	 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
	 *
	 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
	 * templates in `ng-include` from your application's domain without having to even know about SCE.
	 * It blocks loading templates from other domains or loading templates over http from an https
	 * served document.  You can change these by setting your own custom {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
	 *
	 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
	 * application that's secure and can be audited to verify that with much more ease than bolting
	 * security onto an application later.
	 *
	 * <a name="contexts"></a>
	 * ## What trusted context types are supported?
	 *
	 * | Context             | Notes          |
	 * |---------------------|----------------|
	 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
	 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
	 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
	 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
	 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
	 *
	 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
	 *
	 *  Each element in these arrays must be one of the following:
	 *
	 *  - **'self'**
	 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
	 *      domain** as the application document using the **same protocol**.
	 *  - **String** (except the special value `'self'`)
	 *    - The string is matched against the full *normalized / absolute URL* of the resource
	 *      being tested (substring matches are not good enough.)
	 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
	 *      match themselves.
	 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
	 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
	 *      in a whitelist.
	 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
	 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
	 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
	 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
	 *      http://foo.example.com/templates/**).
	 *  - **RegExp** (*see caveat below*)
	 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
	 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
	 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
	 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
	 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
	 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
	 *      is highly recommended to use the string patterns and only fall back to regular expressions
	 *      as a last resort.
	 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
	 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
	 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
	 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
	 *    - If you are generating your JavaScript from some other templating engine (not
	 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
	 *      remember to escape your regular expression (and be aware that you might need more than
	 *      one level of escaping depending on your templating engine and the way you interpolated
	 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
	 *      enough before coding your own.  E.g. Ruby has
	 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
	 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
	 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
	 *      Closure library's [goog.string.regExpEscape(s)](
	 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
	 *
	 * ## Show me an example using SCE.
	 *
	 * <example module="mySceApp" deps="angular-sanitize.js">
	 * <file name="index.html">
	 *   <div ng-controller="AppController as myCtrl">
	 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
	 *     <b>User comments</b><br>
	 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
	 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
	 *     exploit.
	 *     <div class="well">
	 *       <div ng-repeat="userComment in myCtrl.userComments">
	 *         <b>{{userComment.name}}</b>:
	 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
	 *         <br>
	 *       </div>
	 *     </div>
	 *   </div>
	 * </file>
	 *
	 * <file name="script.js">
	 *   angular.module('mySceApp', ['ngSanitize'])
	 *     .controller('AppController', ['$http', '$templateCache', '$sce',
	 *       function($http, $templateCache, $sce) {
	 *         var self = this;
	 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
	 *           self.userComments = userComments;
	 *         });
	 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
	 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *             'sanitization.&quot;">Hover over this text.</span>');
	 *       }]);
	 * </file>
	 *
	 * <file name="test_data.json">
	 * [
	 *   { "name": "Alice",
	 *     "htmlComment":
	 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
	 *   },
	 *   { "name": "Bob",
	 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
	 *   }
	 * ]
	 * </file>
	 *
	 * <file name="protractor.js" type="protractor">
	 *   describe('SCE doc demo', function() {
	 *     it('should sanitize untrusted values', function() {
	 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
	 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
	 *     });
	 *
	 *     it('should NOT sanitize explicitly trusted values', function() {
	 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
	 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *           'sanitization.&quot;">Hover over this text.</span>');
	 *     });
	 *   });
	 * </file>
	 * </example>
	 *
	 *
	 *
	 * ## Can I disable SCE completely?
	 *
	 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
	 * for little coding overhead.  It will be much harder to take an SCE disabled application and
	 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
	 * for cases where you have a lot of existing code that was written before SCE was introduced and
	 * you're migrating them a module at a time.
	 *
	 * That said, here's how you can completely disable SCE:
	 *
	 * ```
	 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
	 *   // Completely disable SCE.  For demonstration purposes only!
	 *   // Do not use in new projects.
	 *   $sceProvider.enabled(false);
	 * });
	 * ```
	 *
	 */
      /* jshint maxlen: 100 */
      function $SceProvider() {
        var enabled = true;
        /**
	   * @ngdoc method
	   * @name $sceProvider#enabled
	   * @kind function
	   *
	   * @param {boolean=} value If provided, then enables/disables SCE.
	   * @return {boolean} true if SCE is enabled, false otherwise.
	   *
	   * @description
	   * Enables/disables SCE and returns the current value.
	   */
        this.enabled = function (value) {
          if (arguments.length) {
            enabled = !!value;
          }
          return enabled;
        };
        /* Design notes on the default implementation for SCE.
	   *
	   * The API contract for the SCE delegate
	   * -------------------------------------
	   * The SCE delegate object must provide the following 3 methods:
	   *
	   * - trustAs(contextEnum, value)
	   *     This method is used to tell the SCE service that the provided value is OK to use in the
	   *     contexts specified by contextEnum.  It must return an object that will be accepted by
	   *     getTrusted() for a compatible contextEnum and return this value.
	   *
	   * - valueOf(value)
	   *     For values that were not produced by trustAs(), return them as is.  For values that were
	   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
	   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
	   *     such a value.
	   *
	   * - getTrusted(contextEnum, value)
	   *     This function should return the a value that is safe to use in the context specified by
	   *     contextEnum or throw and exception otherwise.
	   *
	   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
	   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
	   * instance, an implementation could maintain a registry of all trusted objects by context.  In
	   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
	   * return the same object passed in if it was found in the registry under a compatible context or
	   * throw an exception otherwise.  An implementation might only wrap values some of the time based
	   * on some criteria.  getTrusted() might return a value and not throw an exception for special
	   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
	   *
	   *
	   * A note on the inheritance model for SCE contexts
	   * ------------------------------------------------
	   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
	   * is purely an implementation details.
	   *
	   * The contract is simply this:
	   *
	   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
	   *     will also succeed.
	   *
	   * Inheritance happens to capture this in a natural way.  In some future, we
	   * may not use inheritance anymore.  That is OK because no code outside of
	   * sce.js and sceSpecs.js would need to be aware of this detail.
	   */
        this.$get = [
          '$parse',
          '$sceDelegate',
          function ($parse, $sceDelegate) {
            // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
            // the "expression(javascript expression)" syntax which is insecure.
            if (enabled && msie < 8) {
              throw $sceMinErr('iequirks', 'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' + 'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' + 'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
            }
            var sce = shallowCopy(SCE_CONTEXTS);
            /**
	     * @ngdoc method
	     * @name $sce#isEnabled
	     * @kind function
	     *
	     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
	     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
	     *
	     * @description
	     * Returns a boolean indicating if SCE is enabled.
	     */
            sce.isEnabled = function () {
              return enabled;
            };
            sce.trustAs = $sceDelegate.trustAs;
            sce.getTrusted = $sceDelegate.getTrusted;
            sce.valueOf = $sceDelegate.valueOf;
            if (!enabled) {
              sce.trustAs = sce.getTrusted = function (type, value) {
                return value;
              };
              sce.valueOf = identity;
            }
            /**
	     * @ngdoc method
	     * @name $sce#parseAs
	     *
	     * @description
	     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
	     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
	     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
	     * *result*)}
	     *
	     * @param {string} type The kind of SCE context in which this result will be used.
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
            sce.parseAs = function sceParseAs(type, expr) {
              var parsed = $parse(expr);
              if (parsed.literal && parsed.constant) {
                return parsed;
              } else {
                return $parse(expr, function (value) {
                  return sce.getTrusted(type, value);
                });
              }
            };
            /**
	     * @ngdoc method
	     * @name $sce#trustAs
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
	     * returns an object that is trusted by angular for use in specified strict contextual
	     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
	     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
	     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
	     * escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */
            /**
	     * @ngdoc method
	     * @name $sce#trustAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsHtml(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
	     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
            /**
	     * @ngdoc method
	     * @name $sce#trustAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
	     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
            /**
	     * @ngdoc method
	     * @name $sce#trustAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
	     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the return
	     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
            /**
	     * @ngdoc method
	     * @name $sce#trustAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsJs(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
	     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
            /**
	     * @ngdoc method
	     * @name $sce#getTrusted
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
	     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
	     * originally supplied value if the queried context type is a supertype of the created type.
	     * If this condition isn't satisfied, throws an exception.
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
	     *                         call.
	     * @returns {*} The value the was originally provided to
	     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
	     *              Otherwise, throws an exception.
	     */
            /**
	     * @ngdoc method
	     * @name $sce#getTrustedHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedHtml(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
	     */
            /**
	     * @ngdoc method
	     * @name $sce#getTrustedCss
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedCss(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
	     */
            /**
	     * @ngdoc method
	     * @name $sce#getTrustedUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
	     */
            /**
	     * @ngdoc method
	     * @name $sce#getTrustedResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
	     */
            /**
	     * @ngdoc method
	     * @name $sce#getTrustedJs
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedJs(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
	     */
            /**
	     * @ngdoc method
	     * @name $sce#parseAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
            /**
	     * @ngdoc method
	     * @name $sce#parseAsCss
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsCss(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
            /**
	     * @ngdoc method
	     * @name $sce#parseAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
            /**
	     * @ngdoc method
	     * @name $sce#parseAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
            /**
	     * @ngdoc method
	     * @name $sce#parseAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsJs(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
            // Shorthand delegations.
            var parse = sce.parseAs, getTrusted = sce.getTrusted, trustAs = sce.trustAs;
            forEach(SCE_CONTEXTS, function (enumValue, name) {
              var lName = lowercase(name);
              sce[camelCase('parse_as_' + lName)] = function (expr) {
                return parse(enumValue, expr);
              };
              sce[camelCase('get_trusted_' + lName)] = function (value) {
                return getTrusted(enumValue, value);
              };
              sce[camelCase('trust_as_' + lName)] = function (value) {
                return trustAs(enumValue, value);
              };
            });
            return sce;
          }
        ];
      }
      /**
	 * !!! This is an undocumented "private" service !!!
	 *
	 * @name $sniffer
	 * @requires $window
	 * @requires $document
	 *
	 * @property {boolean} history Does the browser support html5 history api ?
	 * @property {boolean} transitions Does the browser support CSS transition events ?
	 * @property {boolean} animations Does the browser support CSS animation events ?
	 *
	 * @description
	 * This is very simple implementation of testing browser's features.
	 */
      function $SnifferProvider() {
        this.$get = [
          '$window',
          '$document',
          function ($window, $document) {
            var eventSupport = {}, android = toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]), boxee = /Boxee/i.test(($window.navigator || {}).userAgent), document = $document[0] || {}, vendorPrefix, vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/, bodyStyle = document.body && document.body.style, transitions = false, animations = false, match;
            if (bodyStyle) {
              for (var prop in bodyStyle) {
                if (match = vendorRegex.exec(prop)) {
                  vendorPrefix = match[0];
                  vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
                  break;
                }
              }
              if (!vendorPrefix) {
                vendorPrefix = 'WebkitOpacity' in bodyStyle && 'webkit';
              }
              transitions = !!('transition' in bodyStyle || vendorPrefix + 'Transition' in bodyStyle);
              animations = !!('animation' in bodyStyle || vendorPrefix + 'Animation' in bodyStyle);
              if (android && (!transitions || !animations)) {
                transitions = isString(bodyStyle.webkitTransition);
                animations = isString(bodyStyle.webkitAnimation);
              }
            }
            return {
              history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
              hasEvent: function (event) {
                // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
                // it. In particular the event is not fired when backspace or delete key are pressed or
                // when cut operation is performed.
                // IE10+ implements 'input' event but it erroneously fires under various situations,
                // e.g. when placeholder changes, or a form is focused.
                if (event === 'input' && msie <= 11)
                  return false;
                if (isUndefined(eventSupport[event])) {
                  var divElm = document.createElement('div');
                  eventSupport[event] = 'on' + event in divElm;
                }
                return eventSupport[event];
              },
              csp: csp(),
              vendorPrefix: vendorPrefix,
              transitions: transitions,
              animations: animations,
              android: android
            };
          }
        ];
      }
      var $compileMinErr = minErr('$compile');
      /**
	 * @ngdoc service
	 * @name $templateRequest
	 *
	 * @description
	 * The `$templateRequest` service runs security checks then downloads the provided template using
	 * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
	 * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
	 * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
	 * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
	 * when `tpl` is of type string and `$templateCache` has the matching entry.
	 *
	 * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
	 * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
	 *
	 * @return {Promise} a promise for the HTTP response data of the given URL.
	 *
	 * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
	 */
      function $TemplateRequestProvider() {
        this.$get = [
          '$templateCache',
          '$http',
          '$q',
          '$sce',
          function ($templateCache, $http, $q, $sce) {
            function handleRequestFn(tpl, ignoreRequestError) {
              handleRequestFn.totalPendingRequests++;
              // We consider the template cache holds only trusted templates, so
              // there's no need to go through whitelisting again for keys that already
              // are included in there. This also makes Angular accept any script
              // directive, no matter its name. However, we still need to unwrap trusted
              // types.
              if (!isString(tpl) || !$templateCache.get(tpl)) {
                tpl = $sce.getTrustedResourceUrl(tpl);
              }
              var transformResponse = $http.defaults && $http.defaults.transformResponse;
              if (isArray(transformResponse)) {
                transformResponse = transformResponse.filter(function (transformer) {
                  return transformer !== defaultHttpResponseTransform;
                });
              } else if (transformResponse === defaultHttpResponseTransform) {
                transformResponse = null;
              }
              var httpOptions = {
                  cache: $templateCache,
                  transformResponse: transformResponse
                };
              return $http.get(tpl, httpOptions)['finally'](function () {
                handleRequestFn.totalPendingRequests--;
              }).then(function (response) {
                $templateCache.put(tpl, response.data);
                return response.data;
              }, handleError);
              function handleError(resp) {
                if (!ignoreRequestError) {
                  throw $compileMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})', tpl, resp.status, resp.statusText);
                }
                return $q.reject(resp);
              }
            }
            handleRequestFn.totalPendingRequests = 0;
            return handleRequestFn;
          }
        ];
      }
      function $$TestabilityProvider() {
        this.$get = [
          '$rootScope',
          '$browser',
          '$location',
          function ($rootScope, $browser, $location) {
            /**
	     * @name $testability
	     *
	     * @description
	     * The private $$testability service provides a collection of methods for use when debugging
	     * or by automated test and debugging tools.
	     */
            var testability = {};
            /**
	     * @name $$testability#findBindings
	     *
	     * @description
	     * Returns an array of elements that are bound (via ng-bind or {{}})
	     * to expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The binding expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression. Filters and whitespace are ignored.
	     */
            testability.findBindings = function (element, expression, opt_exactMatch) {
              var bindings = element.getElementsByClassName('ng-binding');
              var matches = [];
              forEach(bindings, function (binding) {
                var dataBinding = angular.element(binding).data('$binding');
                if (dataBinding) {
                  forEach(dataBinding, function (bindingName) {
                    if (opt_exactMatch) {
                      var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
                      if (matcher.test(bindingName)) {
                        matches.push(binding);
                      }
                    } else {
                      if (bindingName.indexOf(expression) != -1) {
                        matches.push(binding);
                      }
                    }
                  });
                }
              });
              return matches;
            };
            /**
	     * @name $$testability#findModels
	     *
	     * @description
	     * Returns an array of elements that are two-way found via ng-model to
	     * expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The model expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression.
	     */
            testability.findModels = function (element, expression, opt_exactMatch) {
              var prefixes = [
                  'ng-',
                  'data-ng-',
                  'ng\\:'
                ];
              for (var p = 0; p < prefixes.length; ++p) {
                var attributeEquals = opt_exactMatch ? '=' : '*=';
                var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
                var elements = element.querySelectorAll(selector);
                if (elements.length) {
                  return elements;
                }
              }
            };
            /**
	     * @name $$testability#getLocation
	     *
	     * @description
	     * Shortcut for getting the location in a browser agnostic way. Returns
	     *     the path, search, and hash. (e.g. /path?a=b#hash)
	     */
            testability.getLocation = function () {
              return $location.url();
            };
            /**
	     * @name $$testability#setLocation
	     *
	     * @description
	     * Shortcut for navigating to a location without doing a full page reload.
	     *
	     * @param {string} url The location url (path, search and hash,
	     *     e.g. /path?a=b#hash) to go to.
	     */
            testability.setLocation = function (url) {
              if (url !== $location.url()) {
                $location.url(url);
                $rootScope.$digest();
              }
            };
            /**
	     * @name $$testability#whenStable
	     *
	     * @description
	     * Calls the callback when $timeout and $http requests are completed.
	     *
	     * @param {function} callback
	     */
            testability.whenStable = function (callback) {
              $browser.notifyWhenNoOutstandingRequests(callback);
            };
            return testability;
          }
        ];
      }
      function $TimeoutProvider() {
        this.$get = [
          '$rootScope',
          '$browser',
          '$q',
          '$$q',
          '$exceptionHandler',
          function ($rootScope, $browser, $q, $$q, $exceptionHandler) {
            var deferreds = {};
            /**
	      * @ngdoc service
	      * @name $timeout
	      *
	      * @description
	      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
	      * block and delegates any exceptions to
	      * {@link ng.$exceptionHandler $exceptionHandler} service.
	      *
	      * The return value of calling `$timeout` is a promise, which will be resolved when
	      * the delay has passed and the timeout function, if provided, is executed.
	      *
	      * To cancel a timeout request, call `$timeout.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
	      * synchronously flush the queue of deferred functions.
	      *
	      * If you only want a promise that will be resolved after some specified delay
	      * then you can call `$timeout` without the `fn` function.
	      *
	      * @param {function()=} fn A function, whose execution should be delayed.
	      * @param {number=} [delay=0] Delay in milliseconds.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
	      *   promise will be resolved with is the return value of the `fn` function.
	      *
	      */
            function timeout(fn, delay, invokeApply) {
              if (!isFunction(fn)) {
                invokeApply = delay;
                delay = fn;
                fn = noop;
              }
              var args = sliceArgs(arguments, 3), skipApply = isDefined(invokeApply) && !invokeApply, deferred = (skipApply ? $$q : $q).defer(), promise = deferred.promise, timeoutId;
              timeoutId = $browser.defer(function () {
                try {
                  deferred.resolve(fn.apply(null, args));
                } catch (e) {
                  deferred.reject(e);
                  $exceptionHandler(e);
                } finally {
                  delete deferreds[promise.$$timeoutId];
                }
                if (!skipApply)
                  $rootScope.$apply();
              }, delay);
              promise.$$timeoutId = timeoutId;
              deferreds[timeoutId] = deferred;
              return promise;
            }
            /**
	      * @ngdoc method
	      * @name $timeout#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`. As a result of this, the promise will be
	      * resolved with a rejection.
	      *
	      * @param {Promise=} promise Promise returned by the `$timeout` function.
	      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	      *   canceled.
	      */
            timeout.cancel = function (promise) {
              if (promise && promise.$$timeoutId in deferreds) {
                deferreds[promise.$$timeoutId].reject('canceled');
                delete deferreds[promise.$$timeoutId];
                return $browser.defer.cancel(promise.$$timeoutId);
              }
              return false;
            };
            return timeout;
          }
        ];
      }
      // NOTE:  The usage of window and document instead of $window and $document here is
      // deliberate.  This service depends on the specific behavior of anchor nodes created by the
      // browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
      // cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
      // doesn't know about mocked locations and resolves URLs to the real document - which is
      // exactly the behavior needed here.  There is little value is mocking these out for this
      // service.
      var urlParsingNode = document.createElement('a');
      var originUrl = urlResolve(window.location.href);
      /**
	 *
	 * Implementation Notes for non-IE browsers
	 * ----------------------------------------
	 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
	 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
	 * URL will be resolved into an absolute URL in the context of the application document.
	 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
	 * properties are all populated to reflect the normalized URL.  This approach has wide
	 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
	 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *
	 * Implementation Notes for IE
	 * ---------------------------
	 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
	 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
	 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
	 * work around that by performing the parsing in a 2nd step by taking a previously normalized
	 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
	 * properties such as protocol, hostname, port, etc.
	 *
	 * References:
	 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
	 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *   http://url.spec.whatwg.org/#urlutils
	 *   https://github.com/angular/angular.js/pull/2902
	 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
	 *
	 * @kind function
	 * @param {string} url The URL to be parsed.
	 * @description Normalizes and parses a URL.
	 * @returns {object} Returns the normalized URL as a dictionary.
	 *
	 *   | member name   | Description    |
	 *   |---------------|----------------|
	 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
	 *   | protocol      | The protocol including the trailing colon                              |
	 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
	 *   | search        | The search params, minus the question mark                             |
	 *   | hash          | The hash string, minus the hash symbol
	 *   | hostname      | The hostname
	 *   | port          | The port, without ":"
	 *   | pathname      | The pathname, beginning with "/"
	 *
	 */
      function urlResolve(url) {
        var href = url;
        if (msie) {
          // Normalize before parse.  Refer Implementation Notes on why this is
          // done in two steps on IE.
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute('href', href);
        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
        };
      }
      /**
	 * Parse a request URL and determine whether this is a same-origin request as the application document.
	 *
	 * @param {string|object} requestUrl The url of the request as a string that will be resolved
	 * or a parsed URL object.
	 * @returns {boolean} Whether the request is for the same origin as the application document.
	 */
      function urlIsSameOrigin(requestUrl) {
        var parsed = isString(requestUrl) ? urlResolve(requestUrl) : requestUrl;
        return parsed.protocol === originUrl.protocol && parsed.host === originUrl.host;
      }
      /**
	 * @ngdoc service
	 * @name $window
	 *
	 * @description
	 * A reference to the browser's `window` object. While `window`
	 * is globally available in JavaScript, it causes testability problems, because
	 * it is a global variable. In angular we always refer to it through the
	 * `$window` service, so it may be overridden, removed or mocked for testing.
	 *
	 * Expressions, like the one defined for the `ngClick` directive in the example
	 * below, are evaluated with respect to the current scope.  Therefore, there is
	 * no risk of inadvertently coding in a dependency on a global value in such an
	 * expression.
	 *
	 * @example
	   <example module="windowExample">
	     <file name="index.html">
	       <script>
	         angular.module('windowExample', [])
	           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
	             $scope.greeting = 'Hello, World!';
	             $scope.doGreeting = function(greeting) {
	               $window.alert(greeting);
	             };
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="text" ng-model="greeting" aria-label="greeting" />
	         <button ng-click="doGreeting(greeting)">ALERT</button>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	      it('should display the greeting in the input box', function() {
	       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
	       // If we click the button it will block the test runner
	       // element(':button').click();
	      });
	     </file>
	   </example>
	 */
      function $WindowProvider() {
        this.$get = valueFn(window);
      }
      /**
	 * @name $$cookieReader
	 * @requires $document
	 *
	 * @description
	 * This is a private service for reading cookies used by $http and ngCookies
	 *
	 * @return {Object} a key/value map of the current cookies
	 */
      function $$CookieReader($document) {
        var rawDocument = $document[0] || {};
        var lastCookies = {};
        var lastCookieString = '';
        function safeDecodeURIComponent(str) {
          try {
            return decodeURIComponent(str);
          } catch (e) {
            return str;
          }
        }
        return function () {
          var cookieArray, cookie, i, index, name;
          var currentCookieString = rawDocument.cookie || '';
          if (currentCookieString !== lastCookieString) {
            lastCookieString = currentCookieString;
            cookieArray = lastCookieString.split('; ');
            lastCookies = {};
            for (i = 0; i < cookieArray.length; i++) {
              cookie = cookieArray[i];
              index = cookie.indexOf('=');
              if (index > 0) {
                //ignore nameless cookies
                name = safeDecodeURIComponent(cookie.substring(0, index));
                // the first value that is seen for a cookie is the most
                // specific one.  values for the same cookie name that
                // follow are for less specific paths.
                if (isUndefined(lastCookies[name])) {
                  lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
                }
              }
            }
          }
          return lastCookies;
        };
      }
      $$CookieReader.$inject = ['$document'];
      function $$CookieReaderProvider() {
        this.$get = $$CookieReader;
      }
      /* global currencyFilter: true,
	 dateFilter: true,
	 filterFilter: true,
	 jsonFilter: true,
	 limitToFilter: true,
	 lowercaseFilter: true,
	 numberFilter: true,
	 orderByFilter: true,
	 uppercaseFilter: true,
	 */
      /**
	 * @ngdoc provider
	 * @name $filterProvider
	 * @description
	 *
	 * Filters are just functions which transform input to an output. However filters need to be
	 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
	 * annotated with dependencies and is responsible for creating a filter function.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	 * (`myapp_subsection_filterx`).
	 * </div>
	 *
	 * ```js
	 *   // Filter registration
	 *   function MyModule($provide, $filterProvider) {
	 *     // create a service to demonstrate injection (not always needed)
	 *     $provide.value('greet', function(name){
	 *       return 'Hello ' + name + '!';
	 *     });
	 *
	 *     // register a filter factory which uses the
	 *     // greet service to demonstrate DI.
	 *     $filterProvider.register('greet', function(greet){
	 *       // return the filter function which uses the greet service
	 *       // to generate salutation
	 *       return function(text) {
	 *         // filters need to be forgiving so check input validity
	 *         return text && greet(text) || text;
	 *       };
	 *     });
	 *   }
	 * ```
	 *
	 * The filter function is registered with the `$injector` under the filter name suffix with
	 * `Filter`.
	 *
	 * ```js
	 *   it('should be the same instance', inject(
	 *     function($filterProvider) {
	 *       $filterProvider.register('reverse', function(){
	 *         return ...;
	 *       });
	 *     },
	 *     function($filter, reverseFilter) {
	 *       expect($filter('reverse')).toBe(reverseFilter);
	 *     });
	 * ```
	 *
	 *
	 * For more information about how angular filters work, and how to create your own filters, see
	 * {@link guide/filter Filters} in the Angular Developer Guide.
	 */
      /**
	 * @ngdoc service
	 * @name $filter
	 * @kind function
	 * @description
	 * Filters are used for formatting data displayed to the user.
	 *
	 * The general syntax in templates is as follows:
	 *
	 *         {{ expression [| filter_name[:parameter_value] ... ] }}
	 *
	 * @param {String} name Name of the filter function to retrieve
	 * @return {Function} the filter function
	 * @example
	   <example name="$filter" module="filterExample">
	     <file name="index.html">
	       <div ng-controller="MainCtrl">
	        <h3>{{ originalText }}</h3>
	        <h3>{{ filteredText }}</h3>
	       </div>
	     </file>

	     <file name="script.js">
	      angular.module('filterExample', [])
	      .controller('MainCtrl', function($scope, $filter) {
	        $scope.originalText = 'hello';
	        $scope.filteredText = $filter('uppercase')($scope.originalText);
	      });
	     </file>
	   </example>
	  */
      $FilterProvider.$inject = ['$provide'];
      function $FilterProvider($provide) {
        var suffix = 'Filter';
        /**
	   * @ngdoc method
	   * @name $filterProvider#register
	   * @param {string|Object} name Name of the filter function, or an object map of filters where
	   *    the keys are the filter names and the values are the filter factories.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	   *    (`myapp_subsection_filterx`).
	   *    </div>
	    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
	   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
	   *    of the registered filter instances.
	   */
        function register(name, factory) {
          if (isObject(name)) {
            var filters = {};
            forEach(name, function (filter, key) {
              filters[key] = register(key, filter);
            });
            return filters;
          } else {
            return $provide.factory(name + suffix, factory);
          }
        }
        this.register = register;
        this.$get = [
          '$injector',
          function ($injector) {
            return function (name) {
              return $injector.get(name + suffix);
            };
          }
        ];
        ////////////////////////////////////////
        /* global
	    currencyFilter: false,
	    dateFilter: false,
	    filterFilter: false,
	    jsonFilter: false,
	    limitToFilter: false,
	    lowercaseFilter: false,
	    numberFilter: false,
	    orderByFilter: false,
	    uppercaseFilter: false,
	  */
        register('currency', currencyFilter);
        register('date', dateFilter);
        register('filter', filterFilter);
        register('json', jsonFilter);
        register('limitTo', limitToFilter);
        register('lowercase', lowercaseFilter);
        register('number', numberFilter);
        register('orderBy', orderByFilter);
        register('uppercase', uppercaseFilter);
      }
      /**
	 * @ngdoc filter
	 * @name filter
	 * @kind function
	 *
	 * @description
	 * Selects a subset of items from `array` and returns it as a new array.
	 *
	 * @param {Array} array The source array.
	 * @param {string|Object|function()} expression The predicate to be used for selecting items from
	 *   `array`.
	 *
	 *   Can be one of:
	 *
	 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
	 *     objects with string properties in `array` that match this string will be returned. This also
	 *     applies to nested object properties.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *
	 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
	 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
	 *     which have property `name` containing "M" and property `phone` containing "1". A special
	 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
	 *     property of the object or its nested object properties. That's equivalent to the simple
	 *     substring match with a `string` as described above. The predicate can be negated by prefixing
	 *     the string with `!`.
	 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
	 *     not containing "M".
	 *
	 *     Note that a named property will match properties on the same level only, while the special
	 *     `$` property will match properties on the same level or deeper. E.g. an array item like
	 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
	 *     **will** be matched by `{$: 'John'}`.
	 *
	 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
	 *     The function is called for each element of the array, with the element, its index, and
	 *     the entire array itself as arguments.
	 *
	 *     The final result is an array of those elements that the predicate returned true for.
	 *
	 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
	 *     determining if the expected value (from the filter expression) and actual value (from
	 *     the object in the array) should be considered a match.
	 *
	 *   Can be one of:
	 *
	 *   - `function(actual, expected)`:
	 *     The function will be given the object value and the predicate value to compare and
	 *     should return true if both values should be considered equal.
	 *
	 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
	 *     This is essentially strict comparison of expected and actual.
	 *
	 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
	 *     insensitive way.
	 *
	 *     Primitive values are converted to strings. Objects are not compared against primitives,
	 *     unless they have a custom `toString` method (e.g. `Date` objects).
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <div ng-init="friends = [{name:'John', phone:'555-1276'},
	                                {name:'Mary', phone:'800-BIG-MARY'},
	                                {name:'Mike', phone:'555-4321'},
	                                {name:'Adam', phone:'555-5678'},
	                                {name:'Julie', phone:'555-8765'},
	                                {name:'Juliette', phone:'555-5678'}]"></div>

	       <label>Search: <input ng-model="searchText"></label>
	       <table id="searchTextResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friend in friends | filter:searchText">
	           <td>{{friend.name}}</td>
	           <td>{{friend.phone}}</td>
	         </tr>
	       </table>
	       <hr>
	       <label>Any: <input ng-model="search.$"></label> <br>
	       <label>Name only <input ng-model="search.name"></label><br>
	       <label>Phone only <input ng-model="search.phone"></label><br>
	       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
	       <table id="searchObjResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friendObj in friends | filter:search:strict">
	           <td>{{friendObj.name}}</td>
	           <td>{{friendObj.phone}}</td>
	         </tr>
	       </table>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var expectFriendNames = function(expectedNames, key) {
	         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
	           arr.forEach(function(wd, i) {
	             expect(wd.getText()).toMatch(expectedNames[i]);
	           });
	         });
	       };

	       it('should search across all fields when filtering with a string', function() {
	         var searchText = element(by.model('searchText'));
	         searchText.clear();
	         searchText.sendKeys('m');
	         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

	         searchText.clear();
	         searchText.sendKeys('76');
	         expectFriendNames(['John', 'Julie'], 'friend');
	       });

	       it('should search in specific fields when filtering with a predicate object', function() {
	         var searchAny = element(by.model('search.$'));
	         searchAny.clear();
	         searchAny.sendKeys('i');
	         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
	       });
	       it('should use a equal comparison when comparator is true', function() {
	         var searchName = element(by.model('search.name'));
	         var strict = element(by.model('strict'));
	         searchName.clear();
	         searchName.sendKeys('Julie');
	         strict.click();
	         expectFriendNames(['Julie'], 'friendObj');
	       });
	     </file>
	   </example>
	 */
      function filterFilter() {
        return function (array, expression, comparator) {
          if (!isArrayLike(array)) {
            if (array == null) {
              return array;
            } else {
              throw minErr('filter')('notarray', 'Expected array but received: {0}', array);
            }
          }
          var expressionType = getTypeForFilter(expression);
          var predicateFn;
          var matchAgainstAnyProp;
          switch (expressionType) {
          case 'function':
            predicateFn = expression;
            break;
          case 'boolean':
          case 'null':
          case 'number':
          case 'string':
            matchAgainstAnyProp = true;
          //jshint -W086
          case 'object':
            //jshint +W086
            predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);
            break;
          default:
            return array;
          }
          return Array.prototype.filter.call(array, predicateFn);
        };
      }
      // Helper functions for `filterFilter`
      function createPredicateFn(expression, comparator, matchAgainstAnyProp) {
        var shouldMatchPrimitives = isObject(expression) && '$' in expression;
        var predicateFn;
        if (comparator === true) {
          comparator = equals;
        } else if (!isFunction(comparator)) {
          comparator = function (actual, expected) {
            if (isUndefined(actual)) {
              // No substring matching against `undefined`
              return false;
            }
            if (actual === null || expected === null) {
              // No substring matching against `null`; only match against `null`
              return actual === expected;
            }
            if (isObject(expected) || isObject(actual) && !hasCustomToString(actual)) {
              // Should not compare primitives against objects, unless they have custom `toString` method
              return false;
            }
            actual = lowercase('' + actual);
            expected = lowercase('' + expected);
            return actual.indexOf(expected) !== -1;
          };
        }
        predicateFn = function (item) {
          if (shouldMatchPrimitives && !isObject(item)) {
            return deepCompare(item, expression.$, comparator, false);
          }
          return deepCompare(item, expression, comparator, matchAgainstAnyProp);
        };
        return predicateFn;
      }
      function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {
        var actualType = getTypeForFilter(actual);
        var expectedType = getTypeForFilter(expected);
        if (expectedType === 'string' && expected.charAt(0) === '!') {
          return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);
        } else if (isArray(actual)) {
          // In case `actual` is an array, consider it a match
          // if ANY of it's items matches `expected`
          return actual.some(function (item) {
            return deepCompare(item, expected, comparator, matchAgainstAnyProp);
          });
        }
        switch (actualType) {
        case 'object':
          var key;
          if (matchAgainstAnyProp) {
            for (key in actual) {
              if (key.charAt(0) !== '$' && deepCompare(actual[key], expected, comparator, true)) {
                return true;
              }
            }
            return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);
          } else if (expectedType === 'object') {
            for (key in expected) {
              var expectedVal = expected[key];
              if (isFunction(expectedVal) || isUndefined(expectedVal)) {
                continue;
              }
              var matchAnyProperty = key === '$';
              var actualVal = matchAnyProperty ? actual : actual[key];
              if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {
                return false;
              }
            }
            return true;
          } else {
            return comparator(actual, expected);
          }
          break;
        case 'function':
          return false;
        default:
          return comparator(actual, expected);
        }
      }
      // Used for easily differentiating between `null` and actual `object`
      function getTypeForFilter(val) {
        return val === null ? 'null' : typeof val;
      }
      /**
	 * @ngdoc filter
	 * @name currency
	 * @kind function
	 *
	 * @description
	 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
	 * symbol for current locale is used.
	 *
	 * @param {number} amount Input to filter.
	 * @param {string=} symbol Currency symbol or identifier to be displayed.
	 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
	 * @returns {string} Formatted number.
	 *
	 *
	 * @example
	   <example module="currencyExample">
	     <file name="index.html">
	       <script>
	         angular.module('currencyExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.amount = 1234.56;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="number" ng-model="amount" aria-label="amount"> <br>
	         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
	         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
	         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should init with 1234.56', function() {
	         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
	         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
	       });
	       it('should update', function() {
	         if (browser.params.browser == 'safari') {
	           // Safari does not understand the minus key. See
	           // https://github.com/angular/protractor/issues/481
	           return;
	         }
	         element(by.model('amount')).clear();
	         element(by.model('amount')).sendKeys('-1234');
	         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
	         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
	       });
	     </file>
	   </example>
	 */
      currencyFilter.$inject = ['$locale'];
      function currencyFilter($locale) {
        var formats = $locale.NUMBER_FORMATS;
        return function (amount, currencySymbol, fractionSize) {
          if (isUndefined(currencySymbol)) {
            currencySymbol = formats.CURRENCY_SYM;
          }
          if (isUndefined(fractionSize)) {
            fractionSize = formats.PATTERNS[1].maxFrac;
          }
          // if null or undefined pass it through
          return amount == null ? amount : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).replace(/\u00A4/g, currencySymbol);
        };
      }
      /**
	 * @ngdoc filter
	 * @name number
	 * @kind function
	 *
	 * @description
	 * Formats a number as text.
	 *
	 * If the input is null or undefined, it will just be returned.
	 * If the input is infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.
	 * If the input is not a number an empty string is returned.
	 *
	 *
	 * @param {number|string} number Number to format.
	 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
	 * If this is not provided then the fraction size is computed from the current locale's number
	 * formatting pattern. In the case of the default locale, it will be 3.
	 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.
	 *
	 * @example
	   <example module="numberFilterExample">
	     <file name="index.html">
	       <script>
	         angular.module('numberFilterExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.val = 1234.56789;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter number: <input ng-model='val'></label><br>
	         Default formatting: <span id='number-default'>{{val | number}}</span><br>
	         No fractions: <span>{{val | number:0}}</span><br>
	         Negative number: <span>{{-val | number:4}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format numbers', function() {
	         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
	         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
	       });

	       it('should update', function() {
	         element(by.model('val')).clear();
	         element(by.model('val')).sendKeys('3374.333');
	         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
	         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
	      });
	     </file>
	   </example>
	 */
      numberFilter.$inject = ['$locale'];
      function numberFilter($locale) {
        var formats = $locale.NUMBER_FORMATS;
        return function (number, fractionSize) {
          // if null or undefined pass it through
          return number == null ? number : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize);
        };
      }
      var DECIMAL_SEP = '.';
      function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
        if (isObject(number))
          return '';
        var isNegative = number < 0;
        number = Math.abs(number);
        var isInfinity = number === Infinity;
        if (!isInfinity && !isFinite(number))
          return '';
        var numStr = number + '', formatedText = '', hasExponent = false, parts = [];
        if (isInfinity)
          formatedText = '\u221e';
        if (!isInfinity && numStr.indexOf('e') !== -1) {
          var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
          if (match && match[2] == '-' && match[3] > fractionSize + 1) {
            number = 0;
          } else {
            formatedText = numStr;
            hasExponent = true;
          }
        }
        if (!isInfinity && !hasExponent) {
          var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;
          // determine fractionSize if it is not specified
          if (isUndefined(fractionSize)) {
            fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
          }
          // safely round numbers in JS without hitting imprecisions of floating-point arithmetics
          // inspired by:
          // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
          number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);
          var fraction = ('' + number).split(DECIMAL_SEP);
          var whole = fraction[0];
          fraction = fraction[1] || '';
          var i, pos = 0, lgroup = pattern.lgSize, group = pattern.gSize;
          if (whole.length >= lgroup + group) {
            pos = whole.length - lgroup;
            for (i = 0; i < pos; i++) {
              if ((pos - i) % group === 0 && i !== 0) {
                formatedText += groupSep;
              }
              formatedText += whole.charAt(i);
            }
          }
          for (i = pos; i < whole.length; i++) {
            if ((whole.length - i) % lgroup === 0 && i !== 0) {
              formatedText += groupSep;
            }
            formatedText += whole.charAt(i);
          }
          // format fraction part.
          while (fraction.length < fractionSize) {
            fraction += '0';
          }
          if (fractionSize && fractionSize !== '0')
            formatedText += decimalSep + fraction.substr(0, fractionSize);
        } else {
          if (fractionSize > 0 && number < 1) {
            formatedText = number.toFixed(fractionSize);
            number = parseFloat(formatedText);
            formatedText = formatedText.replace(DECIMAL_SEP, decimalSep);
          }
        }
        if (number === 0) {
          isNegative = false;
        }
        parts.push(isNegative ? pattern.negPre : pattern.posPre, formatedText, isNegative ? pattern.negSuf : pattern.posSuf);
        return parts.join('');
      }
      function padNumber(num, digits, trim) {
        var neg = '';
        if (num < 0) {
          neg = '-';
          num = -num;
        }
        num = '' + num;
        while (num.length < digits)
          num = '0' + num;
        if (trim) {
          num = num.substr(num.length - digits);
        }
        return neg + num;
      }
      function dateGetter(name, size, offset, trim) {
        offset = offset || 0;
        return function (date) {
          var value = date['get' + name]();
          if (offset > 0 || value > -offset) {
            value += offset;
          }
          if (value === 0 && offset == -12)
            value = 12;
          return padNumber(value, size, trim);
        };
      }
      function dateStrGetter(name, shortForm) {
        return function (date, formats) {
          var value = date['get' + name]();
          var get = uppercase(shortForm ? 'SHORT' + name : name);
          return formats[get][value];
        };
      }
      function timeZoneGetter(date, formats, offset) {
        var zone = -1 * offset;
        var paddedZone = zone >= 0 ? '+' : '';
        paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) + padNumber(Math.abs(zone % 60), 2);
        return paddedZone;
      }
      function getFirstThursdayOfYear(year) {
        // 0 = index of January
        var dayOfWeekOnFirst = new Date(year, 0, 1).getDay();
        // 4 = index of Thursday (+1 to account for 1st = 5)
        // 11 = index of *next* Thursday (+1 account for 1st = 12)
        return new Date(year, 0, (dayOfWeekOnFirst <= 4 ? 5 : 12) - dayOfWeekOnFirst);
      }
      function getThursdayThisWeek(datetime) {
        return new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (4 - datetime.getDay()));
      }
      function weekGetter(size) {
        return function (date) {
          var firstThurs = getFirstThursdayOfYear(date.getFullYear()), thisThurs = getThursdayThisWeek(date);
          var diff = +thisThurs - +firstThurs, result = 1 + Math.round(diff / 604800000);
          // 6.048e8 ms per week
          return padNumber(result, size);
        };
      }
      function ampmGetter(date, formats) {
        return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
      }
      function eraGetter(date, formats) {
        return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
      }
      function longEraGetter(date, formats) {
        return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
      }
      var DATE_FORMATS = {
          yyyy: dateGetter('FullYear', 4),
          yy: dateGetter('FullYear', 2, 0, true),
          y: dateGetter('FullYear', 1),
          MMMM: dateStrGetter('Month'),
          MMM: dateStrGetter('Month', true),
          MM: dateGetter('Month', 2, 1),
          M: dateGetter('Month', 1, 1),
          dd: dateGetter('Date', 2),
          d: dateGetter('Date', 1),
          HH: dateGetter('Hours', 2),
          H: dateGetter('Hours', 1),
          hh: dateGetter('Hours', 2, -12),
          h: dateGetter('Hours', 1, -12),
          mm: dateGetter('Minutes', 2),
          m: dateGetter('Minutes', 1),
          ss: dateGetter('Seconds', 2),
          s: dateGetter('Seconds', 1),
          sss: dateGetter('Milliseconds', 3),
          EEEE: dateStrGetter('Day'),
          EEE: dateStrGetter('Day', true),
          a: ampmGetter,
          Z: timeZoneGetter,
          ww: weekGetter(2),
          w: weekGetter(1),
          G: eraGetter,
          GG: eraGetter,
          GGG: eraGetter,
          GGGG: longEraGetter
        };
      var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/, NUMBER_STRING = /^\-?\d+$/;
      /**
	 * @ngdoc filter
	 * @name date
	 * @kind function
	 *
	 * @description
	 *   Formats `date` to a string based on the requested `format`.
	 *
	 *   `format` string can be composed of the following elements:
	 *
	 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
	 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
	 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
	 *   * `'MMMM'`: Month in year (January-December)
	 *   * `'MMM'`: Month in year (Jan-Dec)
	 *   * `'MM'`: Month in year, padded (01-12)
	 *   * `'M'`: Month in year (1-12)
	 *   * `'dd'`: Day in month, padded (01-31)
	 *   * `'d'`: Day in month (1-31)
	 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
	 *   * `'EEE'`: Day in Week, (Sun-Sat)
	 *   * `'HH'`: Hour in day, padded (00-23)
	 *   * `'H'`: Hour in day (0-23)
	 *   * `'hh'`: Hour in AM/PM, padded (01-12)
	 *   * `'h'`: Hour in AM/PM, (1-12)
	 *   * `'mm'`: Minute in hour, padded (00-59)
	 *   * `'m'`: Minute in hour (0-59)
	 *   * `'ss'`: Second in minute, padded (00-59)
	 *   * `'s'`: Second in minute (0-59)
	 *   * `'sss'`: Millisecond in second, padded (000-999)
	 *   * `'a'`: AM/PM marker
	 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
	 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
	 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
	 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
	 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
	 *
	 *   `format` string can also be one of the following predefined
	 *   {@link guide/i18n localizable formats}:
	 *
	 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
	 *     (e.g. Sep 3, 2010 12:05:08 PM)
	 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
	 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
	 *     (e.g. Friday, September 3, 2010)
	 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
	 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
	 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
	 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
	 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
	 *
	 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
	 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
	 *   (e.g. `"h 'o''clock'"`).
	 *
	 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
	 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
	 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
	 *    specified in the string input, the time is considered to be in the local timezone.
	 * @param {string=} format Formatting rules (see Description). If not specified,
	 *    `mediumDate` is used.
	 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
	 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *    If not specified, the timezone of the browser will be used.
	 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
	           <span>{{1288323623006 | date:'medium'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
	          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
	          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
	          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format date', function() {
	         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
	            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
	         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
	            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
	         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
	            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
	         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
	            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
	       });
	     </file>
	   </example>
	 */
      dateFilter.$inject = ['$locale'];
      function dateFilter($locale) {
        var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
        // 1        2       3         4          5          6          7          8  9     10      11
        function jsonStringToDate(string) {
          var match;
          if (match = string.match(R_ISO8601_STR)) {
            var date = new Date(0), tzHour = 0, tzMin = 0, dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear, timeSetter = match[8] ? date.setUTCHours : date.setHours;
            if (match[9]) {
              tzHour = toInt(match[9] + match[10]);
              tzMin = toInt(match[9] + match[11]);
            }
            dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
            var h = toInt(match[4] || 0) - tzHour;
            var m = toInt(match[5] || 0) - tzMin;
            var s = toInt(match[6] || 0);
            var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
            timeSetter.call(date, h, m, s, ms);
            return date;
          }
          return string;
        }
        return function (date, format, timezone) {
          var text = '', parts = [], fn, match;
          format = format || 'mediumDate';
          format = $locale.DATETIME_FORMATS[format] || format;
          if (isString(date)) {
            date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
          }
          if (isNumber(date)) {
            date = new Date(date);
          }
          if (!isDate(date) || !isFinite(date.getTime())) {
            return date;
          }
          while (format) {
            match = DATE_FORMATS_SPLIT.exec(format);
            if (match) {
              parts = concat(parts, match, 1);
              format = parts.pop();
            } else {
              parts.push(format);
              format = null;
            }
          }
          var dateTimezoneOffset = date.getTimezoneOffset();
          if (timezone) {
            dateTimezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());
            date = convertTimezoneToLocal(date, timezone, true);
          }
          forEach(parts, function (value) {
            fn = DATE_FORMATS[value];
            text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset) : value.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
          });
          return text;
        };
      }
      /**
	 * @ngdoc filter
	 * @name json
	 * @kind function
	 *
	 * @description
	 *   Allows you to convert a JavaScript object into JSON string.
	 *
	 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
	 *   the binding is automatically converted to JSON.
	 *
	 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
	 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
	 * @returns {string} JSON string.
	 *
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
	       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should jsonify filtered objects', function() {
	         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
	         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);
	       });
	     </file>
	   </example>
	 *
	 */
      function jsonFilter() {
        return function (object, spacing) {
          if (isUndefined(spacing)) {
            spacing = 2;
          }
          return toJson(object, spacing);
        };
      }
      /**
	 * @ngdoc filter
	 * @name lowercase
	 * @kind function
	 * @description
	 * Converts string to lowercase.
	 * @see angular.lowercase
	 */
      var lowercaseFilter = valueFn(lowercase);
      /**
	 * @ngdoc filter
	 * @name uppercase
	 * @kind function
	 * @description
	 * Converts string to uppercase.
	 * @see angular.uppercase
	 */
      var uppercaseFilter = valueFn(uppercase);
      /**
	 * @ngdoc filter
	 * @name limitTo
	 * @kind function
	 *
	 * @description
	 * Creates a new array or string containing only a specified number of elements. The elements
	 * are taken from either the beginning or the end of the source array, string or number, as specified by
	 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is
	 * converted to a string.
	 *
	 * @param {Array|string|number} input Source array, string or number to be limited.
	 * @param {string|number} limit The length of the returned array or string. If the `limit` number
	 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
	 *     If the number is negative, `limit` number  of items from the end of the source array/string
	 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
	 *     the input will be returned unchanged.
	 * @param {(string|number)=} begin Index at which to begin limitation. As a negative index, `begin`
	 *     indicates an offset from the end of `input`. Defaults to `0`.
	 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
	 *     had less than `limit` elements.
	 *
	 * @example
	   <example module="limitToExample">
	     <file name="index.html">
	       <script>
	         angular.module('limitToExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.numbers = [1,2,3,4,5,6,7,8,9];
	             $scope.letters = "abcdefghi";
	             $scope.longNumber = 2345432342;
	             $scope.numLimit = 3;
	             $scope.letterLimit = 3;
	             $scope.longNumberLimit = 3;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>
	            Limit {{numbers}} to:
	            <input type="number" step="1" ng-model="numLimit">
	         </label>
	         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
	         <label>
	            Limit {{letters}} to:
	            <input type="number" step="1" ng-model="letterLimit">
	         </label>
	         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
	         <label>
	            Limit {{longNumber}} to:
	            <input type="number" step="1" ng-model="longNumberLimit">
	         </label>
	         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var numLimitInput = element(by.model('numLimit'));
	       var letterLimitInput = element(by.model('letterLimit'));
	       var longNumberLimitInput = element(by.model('longNumberLimit'));
	       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
	       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
	       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

	       it('should limit the number array to first three items', function() {
	         expect(numLimitInput.getAttribute('value')).toBe('3');
	         expect(letterLimitInput.getAttribute('value')).toBe('3');
	         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abc');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
	       });

	       // There is a bug in safari and protractor that doesn't like the minus key
	       // it('should update the output when -3 is entered', function() {
	       //   numLimitInput.clear();
	       //   numLimitInput.sendKeys('-3');
	       //   letterLimitInput.clear();
	       //   letterLimitInput.sendKeys('-3');
	       //   longNumberLimitInput.clear();
	       //   longNumberLimitInput.sendKeys('-3');
	       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
	       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
	       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
	       // });

	       it('should not exceed the maximum size of input array', function() {
	         numLimitInput.clear();
	         numLimitInput.sendKeys('100');
	         letterLimitInput.clear();
	         letterLimitInput.sendKeys('100');
	         longNumberLimitInput.clear();
	         longNumberLimitInput.sendKeys('100');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
	       });
	     </file>
	   </example>
	*/
      function limitToFilter() {
        return function (input, limit, begin) {
          if (Math.abs(Number(limit)) === Infinity) {
            limit = Number(limit);
          } else {
            limit = toInt(limit);
          }
          if (isNaN(limit))
            return input;
          if (isNumber(input))
            input = input.toString();
          if (!isArray(input) && !isString(input))
            return input;
          begin = !begin || isNaN(begin) ? 0 : toInt(begin);
          begin = begin < 0 && begin >= -input.length ? input.length + begin : begin;
          if (limit >= 0) {
            return input.slice(begin, begin + limit);
          } else {
            if (begin === 0) {
              return input.slice(limit, input.length);
            } else {
              return input.slice(Math.max(0, begin + limit), begin);
            }
          }
        };
      }
      /**
	 * @ngdoc filter
	 * @name orderBy
	 * @kind function
	 *
	 * @description
	 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
	 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
	 * as expected, make sure they are actually being saved as numbers and not strings.
	 *
	 * @param {Array} array The array to sort.
	 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be
	 *    used by the comparator to determine the order of elements.
	 *
	 *    Can be one of:
	 *
	 *    - `function`: Getter function. The result of this function will be sorted using the
	 *      `<`, `===`, `>` operator.
	 *    - `string`: An Angular expression. The result of this expression is used to compare elements
	 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
	 *      3 first characters of a property called `name`). The result of a constant expression
	 *      is interpreted as a property name to be used in comparisons (for example `"special name"`
	 *      to sort object by the value of their `special name` property). An expression can be
	 *      optionally prefixed with `+` or `-` to control ascending or descending sort order
	 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array
	 *      element itself is used to compare where sorting.
	 *    - `Array`: An array of function or string predicates. The first predicate in the array
	 *      is used for sorting, but when two items are equivalent, the next predicate is used.
	 *
	 *    If the predicate is missing or empty then it defaults to `'+'`.
	 *
	 * @param {boolean=} reverse Reverse the order of the array.
	 * @returns {Array} Sorted copy of the source array.
	 *
	 *
	 * @example
	 * The example below demonstrates a simple ngRepeat, where the data is sorted
	 * by age in descending order (predicate is set to `'-age'`).
	 * `reverse` is not set, which means it defaults to `false`.
	   <example module="orderByExample">
	     <file name="index.html">
	       <script>
	         angular.module('orderByExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.friends =
	                 [{name:'John', phone:'555-1212', age:10},
	                  {name:'Mary', phone:'555-9876', age:19},
	                  {name:'Mike', phone:'555-4321', age:21},
	                  {name:'Adam', phone:'555-5678', age:35},
	                  {name:'Julie', phone:'555-8765', age:29}];
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <table class="friend">
	           <tr>
	             <th>Name</th>
	             <th>Phone Number</th>
	             <th>Age</th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:'-age'">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	   </example>
	 *
	 * The predicate and reverse parameters can be controlled dynamically through scope properties,
	 * as shown in the next example.
	 * @example
	   <example module="orderByExample">
	     <file name="index.html">
	       <script>
	         angular.module('orderByExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.friends =
	                 [{name:'John', phone:'555-1212', age:10},
	                  {name:'Mary', phone:'555-9876', age:19},
	                  {name:'Mike', phone:'555-4321', age:21},
	                  {name:'Adam', phone:'555-5678', age:35},
	                  {name:'Julie', phone:'555-8765', age:29}];
	             $scope.predicate = 'age';
	             $scope.reverse = true;
	             $scope.order = function(predicate) {
	               $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
	               $scope.predicate = predicate;
	             };
	           }]);
	       </script>
	       <style type="text/css">
	         .sortorder:after {
	           content: '\25b2';
	         }
	         .sortorder.reverse:after {
	           content: '\25bc';
	         }
	       </style>
	       <div ng-controller="ExampleController">
	         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
	         <hr/>
	         [ <a href="" ng-click="predicate=''">unsorted</a> ]
	         <table class="friend">
	           <tr>
	             <th>
	               <a href="" ng-click="order('name')">Name</a>
	               <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>
	             </th>
	             <th>
	               <a href="" ng-click="order('phone')">Phone Number</a>
	               <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>
	             </th>
	             <th>
	               <a href="" ng-click="order('age')">Age</a>
	               <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>
	             </th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	   </example>
	 *
	 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
	 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
	 * desired parameters.
	 *
	 * Example:
	 *
	 * @example
	  <example module="orderByExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <table class="friend">
	          <tr>
	            <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>
	              (<a href="" ng-click="order('-name',false)">^</a>)</th>
	            <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>
	            <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>
	          </tr>
	          <tr ng-repeat="friend in friends">
	            <td>{{friend.name}}</td>
	            <td>{{friend.phone}}</td>
	            <td>{{friend.age}}</td>
	          </tr>
	        </table>
	      </div>
	    </file>

	    <file name="script.js">
	      angular.module('orderByExample', [])
	        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
	          var orderBy = $filter('orderBy');
	          $scope.friends = [
	            { name: 'John',    phone: '555-1212',    age: 10 },
	            { name: 'Mary',    phone: '555-9876',    age: 19 },
	            { name: 'Mike',    phone: '555-4321',    age: 21 },
	            { name: 'Adam',    phone: '555-5678',    age: 35 },
	            { name: 'Julie',   phone: '555-8765',    age: 29 }
	          ];
	          $scope.order = function(predicate, reverse) {
	            $scope.friends = orderBy($scope.friends, predicate, reverse);
	          };
	          $scope.order('-age',false);
	        }]);
	    </file>
	</example>
	 */
      orderByFilter.$inject = ['$parse'];
      function orderByFilter($parse) {
        return function (array, sortPredicate, reverseOrder) {
          if (!isArrayLike(array))
            return array;
          if (!isArray(sortPredicate)) {
            sortPredicate = [sortPredicate];
          }
          if (sortPredicate.length === 0) {
            sortPredicate = ['+'];
          }
          var predicates = processPredicates(sortPredicate, reverseOrder);
          // Add a predicate at the end that evaluates to the element index. This makes the
          // sort stable as it works as a tie-breaker when all the input predicates cannot
          // distinguish between two elements.
          predicates.push({
            get: function () {
              return {};
            },
            descending: reverseOrder ? -1 : 1
          });
          // The next three lines are a version of a Swartzian Transform idiom from Perl
          // (sometimes called the Decorate-Sort-Undecorate idiom)
          // See https://en.wikipedia.org/wiki/Schwartzian_transform
          var compareValues = Array.prototype.map.call(array, getComparisonObject);
          compareValues.sort(doComparison);
          array = compareValues.map(function (item) {
            return item.value;
          });
          return array;
          function getComparisonObject(value, index) {
            return {
              value: value,
              predicateValues: predicates.map(function (predicate) {
                return getPredicateValue(predicate.get(value), index);
              })
            };
          }
          function doComparison(v1, v2) {
            var result = 0;
            for (var index = 0, length = predicates.length; index < length; ++index) {
              result = compare(v1.predicateValues[index], v2.predicateValues[index]) * predicates[index].descending;
              if (result)
                break;
            }
            return result;
          }
        };
        function processPredicates(sortPredicate, reverseOrder) {
          reverseOrder = reverseOrder ? -1 : 1;
          return sortPredicate.map(function (predicate) {
            var descending = 1, get = identity;
            if (isFunction(predicate)) {
              get = predicate;
            } else if (isString(predicate)) {
              if (predicate.charAt(0) == '+' || predicate.charAt(0) == '-') {
                descending = predicate.charAt(0) == '-' ? -1 : 1;
                predicate = predicate.substring(1);
              }
              if (predicate !== '') {
                get = $parse(predicate);
                if (get.constant) {
                  var key = get();
                  get = function (value) {
                    return value[key];
                  };
                }
              }
            }
            return {
              get: get,
              descending: descending * reverseOrder
            };
          });
        }
        function isPrimitive(value) {
          switch (typeof value) {
          case 'number':
          /* falls through */
          case 'boolean':
          /* falls through */
          case 'string':
            return true;
          default:
            return false;
          }
        }
        function objectValue(value, index) {
          // If `valueOf` is a valid function use that
          if (typeof value.valueOf === 'function') {
            value = value.valueOf();
            if (isPrimitive(value))
              return value;
          }
          // If `toString` is a valid function and not the one from `Object.prototype` use that
          if (hasCustomToString(value)) {
            value = value.toString();
            if (isPrimitive(value))
              return value;
          }
          // We have a basic object so we use the position of the object in the collection
          return index;
        }
        function getPredicateValue(value, index) {
          var type = typeof value;
          if (value === null) {
            type = 'string';
            value = 'null';
          } else if (type === 'string') {
            value = value.toLowerCase();
          } else if (type === 'object') {
            value = objectValue(value, index);
          }
          return {
            value: value,
            type: type
          };
        }
        function compare(v1, v2) {
          var result = 0;
          if (v1.type === v2.type) {
            if (v1.value !== v2.value) {
              result = v1.value < v2.value ? -1 : 1;
            }
          } else {
            result = v1.type < v2.type ? -1 : 1;
          }
          return result;
        }
      }
      function ngDirective(directive) {
        if (isFunction(directive)) {
          directive = { link: directive };
        }
        directive.restrict = directive.restrict || 'AC';
        return valueFn(directive);
      }
      /**
	 * @ngdoc directive
	 * @name a
	 * @restrict E
	 *
	 * @description
	 * Modifies the default behavior of the html A tag so that the default action is prevented when
	 * the href attribute is empty.
	 *
	 * This change permits the easy creation of action links with the `ngClick` directive
	 * without changing the location or causing page reloads, e.g.:
	 * `<a href="" ng-click="list.addItem()">Add Item</a>`
	 */
      var htmlAnchorDirective = valueFn({
          restrict: 'E',
          compile: function (element, attr) {
            if (!attr.href && !attr.xlinkHref) {
              return function (scope, element) {
                // If the linked element is not an anchor tag anymore, do nothing
                if (element[0].nodeName.toLowerCase() !== 'a')
                  return;
                // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
                var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ? 'xlink:href' : 'href';
                element.on('click', function (event) {
                  // if we have no href url, then don't navigate anywhere.
                  if (!element.attr(href)) {
                    event.preventDefault();
                  }
                });
              };
            }
          }
        });
      /**
	 * @ngdoc directive
	 * @name ngHref
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in an href attribute will
	 * make the link go to the wrong URL if the user clicks it before
	 * Angular has a chance to replace the `{{hash}}` markup with its
	 * value. Until Angular replaces the markup the link will be broken
	 * and will most likely return a 404 error. The `ngHref` directive
	 * solves this problem.
	 *
	 * The wrong way to write it:
	 * ```html
	 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * @element A
	 * @param {template} ngHref any string which can contain `{{}}` markup.
	 *
	 * @example
	 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
	 * in links and their different behaviors:
	    <example>
	      <file name="index.html">
	        <input ng-model="value" /><br />
	        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
	        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
	        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
	        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
	        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
	        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should execute ng-click but not reload when href without value', function() {
	          element(by.id('link-1')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
	          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click but not reload when href empty string', function() {
	          element(by.id('link-2')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
	          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click and change url when ng-href specified', function() {
	          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

	          element(by.id('link-3')).click();

	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.

	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/123$/);
	            });
	          }, 5000, 'page should navigate to /123');
	        });

	        it('should execute ng-click but not reload when href empty string and name specified', function() {
	          element(by.id('link-4')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
	          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click but not reload when no href but name specified', function() {
	          element(by.id('link-5')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
	          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
	        });

	        it('should only change url when only ng-href', function() {
	          element(by.model('value')).clear();
	          element(by.model('value')).sendKeys('6');
	          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

	          element(by.id('link-6')).click();

	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/6$/);
	            });
	          }, 5000, 'page should navigate to /6');
	        });
	      </file>
	    </example>
	 */
      /**
	 * @ngdoc directive
	 * @name ngSrc
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrc` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrc any string which can contain `{{}}` markup.
	 */
      /**
	 * @ngdoc directive
	 * @name ngSrcset
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrcset` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrcset any string which can contain `{{}}` markup.
	 */
      /**
	 * @ngdoc directive
	 * @name ngDisabled
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * This directive sets the `disabled` attribute on the element if the
	 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `disabled`
	 * attribute.  The following example would make the button enabled on Chrome/Firefox
	 * but not on older IEs:
	 *
	 * ```html
	 * <!-- See below for an example of ng-disabled being used correctly -->
	 * <div ng-init="isDisabled = false">
	 *  <button disabled="{{isDisabled}}">Disabled</button>
	 * </div>
	 * ```
	 *
	 * This is because the HTML specification does not require browsers to preserve the values of
	 * boolean attributes such as `disabled` (Their presence means true and their absence means false.)
	 * If we put an Angular interpolation expression into such an attribute then the
	 * binding information would be lost when the browser removes the attribute.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
	        <button ng-model="button" ng-disabled="checked">Button</button>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle button', function() {
	          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
	 *     then the `disabled` attribute will be set on the element
	 */
      /**
	 * @ngdoc directive
	 * @name ngChecked
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
	 *
	 * Note that this directive should not be used together with {@link ngModel `ngModel`},
	 * as this can lead to unexpected behavior.
	 *
	 * ### Why do we need `ngChecked`?
	 *
	 * The HTML specification does not require browsers to preserve the values of boolean attributes
	 * such as checked. (Their presence means true and their absence means false.)
	 * If we put an Angular interpolation expression into such an attribute then the
	 * binding information would be lost when the browser removes the attribute.
	 * The `ngChecked` directive solves this problem for the `checked` attribute.
	 * This complementary directive is not removed by the browser and so provides
	 * a permanent reliable place to store the binding information.
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
	        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should check both checkBoxes', function() {
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
	          element(by.model('master')).click();
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
	 *     then the `checked` attribute will be set on the element
	 */
      /**
	 * @ngdoc directive
	 * @name ngReadonly
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * The HTML specification does not require browsers to preserve the values of boolean attributes
	 * such as readonly. (Their presence means true and their absence means false.)
	 * If we put an Angular interpolation expression into such an attribute then the
	 * binding information would be lost when the browser removes the attribute.
	 * The `ngReadonly` directive solves this problem for the `readonly` attribute.
	 * This complementary directive is not removed by the browser and so provides
	 * a permanent reliable place to store the binding information.
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
	        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle readonly attr', function() {
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
	 *     then special attribute "readonly" will be set on the element
	 */
      /**
	 * @ngdoc directive
	 * @name ngSelected
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * The HTML specification does not require browsers to preserve the values of boolean attributes
	 * such as selected. (Their presence means true and their absence means false.)
	 * If we put an Angular interpolation expression into such an attribute then the
	 * binding information would be lost when the browser removes the attribute.
	 * The `ngSelected` directive solves this problem for the `selected` attribute.
	 * This complementary directive is not removed by the browser and so provides
	 * a permanent reliable place to store the binding information.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
	        <select aria-label="ngSelected demo">
	          <option>Hello!</option>
	          <option id="greet" ng-selected="selected">Greetings!</option>
	        </select>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should select Greetings!', function() {
	          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
	          element(by.model('selected')).click();
	          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element OPTION
	 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
	 *     then special attribute "selected" will be set on the element
	 */
      /**
	 * @ngdoc directive
	 * @name ngOpen
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * The HTML specification does not require browsers to preserve the values of boolean attributes
	 * such as open. (Their presence means true and their absence means false.)
	 * If we put an Angular interpolation expression into such an attribute then the
	 * binding information would be lost when the browser removes the attribute.
	 * The `ngOpen` directive solves this problem for the `open` attribute.
	 * This complementary directive is not removed by the browser and so provides
	 * a permanent reliable place to store the binding information.
	 * @example
	     <example>
	       <file name="index.html">
	         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>
	         <details id="details" ng-open="open">
	            <summary>Show/Hide me</summary>
	         </details>
	       </file>
	       <file name="protractor.js" type="protractor">
	         it('should toggle open', function() {
	           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
	           element(by.model('open')).click();
	           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
	         });
	       </file>
	     </example>
	 *
	 * @element DETAILS
	 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
	 *     then special attribute "open" will be set on the element
	 */
      var ngAttributeAliasDirectives = {};
      // boolean attrs are evaluated
      forEach(BOOLEAN_ATTR, function (propName, attrName) {
        // binding to multiple is not supported
        if (propName == 'multiple')
          return;
        function defaultLinkFn(scope, element, attr) {
          scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
            attr.$set(attrName, !!value);
          });
        }
        var normalized = directiveNormalize('ng-' + attrName);
        var linkFn = defaultLinkFn;
        if (propName === 'checked') {
          linkFn = function (scope, element, attr) {
            // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
            if (attr.ngModel !== attr[normalized]) {
              defaultLinkFn(scope, element, attr);
            }
          };
        }
        ngAttributeAliasDirectives[normalized] = function () {
          return {
            restrict: 'A',
            priority: 100,
            link: linkFn
          };
        };
      });
      // aliased input attrs are evaluated
      forEach(ALIASED_ATTR, function (htmlAttr, ngAttr) {
        ngAttributeAliasDirectives[ngAttr] = function () {
          return {
            priority: 100,
            link: function (scope, element, attr) {
              //special case ngPattern when a literal regular expression value
              //is used as the expression (this way we don't have to watch anything).
              if (ngAttr === 'ngPattern' && attr.ngPattern.charAt(0) == '/') {
                var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
                if (match) {
                  attr.$set('ngPattern', new RegExp(match[1], match[2]));
                  return;
                }
              }
              scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
                attr.$set(ngAttr, value);
              });
            }
          };
        };
      });
      // ng-src, ng-srcset, ng-href are interpolated
      forEach([
        'src',
        'srcset',
        'href'
      ], function (attrName) {
        var normalized = directiveNormalize('ng-' + attrName);
        ngAttributeAliasDirectives[normalized] = function () {
          return {
            priority: 99,
            link: function (scope, element, attr) {
              var propName = attrName, name = attrName;
              if (attrName === 'href' && toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
                name = 'xlinkHref';
                attr.$attr[name] = 'xlink:href';
                propName = null;
              }
              attr.$observe(normalized, function (value) {
                if (!value) {
                  if (attrName === 'href') {
                    attr.$set(name, null);
                  }
                  return;
                }
                attr.$set(name, value);
                // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
                // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
                // to set the property as well to achieve the desired effect.
                // we use attr[attrName] value since $set can sanitize the url.
                if (msie && propName)
                  element.prop(propName, attr[name]);
              });
            }
          };
        };
      });
      /* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
	 */
      var nullFormCtrl = {
          $addControl: noop,
          $$renameControl: nullFormRenameControl,
          $removeControl: noop,
          $setValidity: noop,
          $setDirty: noop,
          $setPristine: noop,
          $setSubmitted: noop
        }, SUBMITTED_CLASS = 'ng-submitted';
      function nullFormRenameControl(control, name) {
        control.$name = name;
      }
      /**
	 * @ngdoc type
	 * @name form.FormController
	 *
	 * @property {boolean} $pristine True if user has not interacted with the form yet.
	 * @property {boolean} $dirty True if user has already interacted with the form.
	 * @property {boolean} $valid True if all of the containing forms and controls are valid.
	 * @property {boolean} $invalid True if at least one containing control or form is invalid.
	 * @property {boolean} $pending True if at least one containing control or form is pending.
	 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
	 *
	 * @property {Object} $error Is an object hash, containing references to controls or
	 *  forms with failing validators, where:
	 *
	 *  - keys are validation tokens (error names),
	 *  - values are arrays of controls or forms that have a failing validator for given error name.
	 *
	 *  Built-in validation tokens:
	 *
	 *  - `email`
	 *  - `max`
	 *  - `maxlength`
	 *  - `min`
	 *  - `minlength`
	 *  - `number`
	 *  - `pattern`
	 *  - `required`
	 *  - `url`
	 *  - `date`
	 *  - `datetimelocal`
	 *  - `time`
	 *  - `week`
	 *  - `month`
	 *
	 * @description
	 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
	 * such as being valid/invalid or dirty/pristine.
	 *
	 * Each {@link ng.directive:form form} directive creates an instance
	 * of `FormController`.
	 *
	 */
      //asks for $scope to fool the BC controller module
      FormController.$inject = [
        '$element',
        '$attrs',
        '$scope',
        '$animate',
        '$interpolate'
      ];
      function FormController(element, attrs, $scope, $animate, $interpolate) {
        var form = this, controls = [];
        // init state
        form.$error = {};
        form.$$success = {};
        form.$pending = undefined;
        form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);
        form.$dirty = false;
        form.$pristine = true;
        form.$valid = true;
        form.$invalid = false;
        form.$submitted = false;
        form.$$parentForm = nullFormCtrl;
        /**
	   * @ngdoc method
	   * @name form.FormController#$rollbackViewValue
	   *
	   * @description
	   * Rollback all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is typically needed by the reset button of
	   * a form that uses `ng-model-options` to pend updates.
	   */
        form.$rollbackViewValue = function () {
          forEach(controls, function (control) {
            control.$rollbackViewValue();
          });
        };
        /**
	   * @ngdoc method
	   * @name form.FormController#$commitViewValue
	   *
	   * @description
	   * Commit all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
        form.$commitViewValue = function () {
          forEach(controls, function (control) {
            control.$commitViewValue();
          });
        };
        /**
	   * @ngdoc method
	   * @name form.FormController#$addControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Register a control with the form. Input elements using ngModelController do this automatically
	   * when they are linked.
	   *
	   * Note that the current state of the control will not be reflected on the new parent form. This
	   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
	   * state.
	   *
	   * However, if the method is used programmatically, for example by adding dynamically created controls,
	   * or controls that have been previously removed without destroying their corresponding DOM element,
	   * it's the developers responsiblity to make sure the current state propagates to the parent form.
	   *
	   * For example, if an input control is added that is already `$dirty` and has `$error` properties,
	   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
	   */
        form.$addControl = function (control) {
          // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
          // and not added to the scope.  Now we throw an error.
          assertNotHasOwnProperty(control.$name, 'input');
          controls.push(control);
          if (control.$name) {
            form[control.$name] = control;
          }
          control.$$parentForm = form;
        };
        // Private API: rename a form control
        form.$$renameControl = function (control, newName) {
          var oldName = control.$name;
          if (form[oldName] === control) {
            delete form[oldName];
          }
          form[newName] = control;
          control.$name = newName;
        };
        /**
	   * @ngdoc method
	   * @name form.FormController#$removeControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Deregister a control from the form.
	   *
	   * Input elements using ngModelController do this automatically when they are destroyed.
	   *
	   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
	   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
	   * different from case to case. For example, removing the only `$dirty` control from a form may or
	   * may not mean that the form is still `$dirty`.
	   */
        form.$removeControl = function (control) {
          if (control.$name && form[control.$name] === control) {
            delete form[control.$name];
          }
          forEach(form.$pending, function (value, name) {
            form.$setValidity(name, null, control);
          });
          forEach(form.$error, function (value, name) {
            form.$setValidity(name, null, control);
          });
          forEach(form.$$success, function (value, name) {
            form.$setValidity(name, null, control);
          });
          arrayRemove(controls, control);
          control.$$parentForm = nullFormCtrl;
        };
        /**
	   * @ngdoc method
	   * @name form.FormController#$setValidity
	   *
	   * @description
	   * Sets the validity of a form control.
	   *
	   * This method will also propagate to parent forms.
	   */
        addSetValidityMethod({
          ctrl: this,
          $element: element,
          set: function (object, property, controller) {
            var list = object[property];
            if (!list) {
              object[property] = [controller];
            } else {
              var index = list.indexOf(controller);
              if (index === -1) {
                list.push(controller);
              }
            }
          },
          unset: function (object, property, controller) {
            var list = object[property];
            if (!list) {
              return;
            }
            arrayRemove(list, controller);
            if (list.length === 0) {
              delete object[property];
            }
          },
          $animate: $animate
        });
        /**
	   * @ngdoc method
	   * @name form.FormController#$setDirty
	   *
	   * @description
	   * Sets the form to a dirty state.
	   *
	   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
	   * state (ng-dirty class). This method will also propagate to parent forms.
	   */
        form.$setDirty = function () {
          $animate.removeClass(element, PRISTINE_CLASS);
          $animate.addClass(element, DIRTY_CLASS);
          form.$dirty = true;
          form.$pristine = false;
          form.$$parentForm.$setDirty();
        };
        /**
	   * @ngdoc method
	   * @name form.FormController#$setPristine
	   *
	   * @description
	   * Sets the form to its pristine state.
	   *
	   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
	   * state (ng-pristine class). This method will also propagate to all the controls contained
	   * in this form.
	   *
	   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
	   * saving or resetting it.
	   */
        form.$setPristine = function () {
          $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
          form.$dirty = false;
          form.$pristine = true;
          form.$submitted = false;
          forEach(controls, function (control) {
            control.$setPristine();
          });
        };
        /**
	   * @ngdoc method
	   * @name form.FormController#$setUntouched
	   *
	   * @description
	   * Sets the form to its untouched state.
	   *
	   * This method can be called to remove the 'ng-touched' class and set the form controls to their
	   * untouched state (ng-untouched class).
	   *
	   * Setting a form controls back to their untouched state is often useful when setting the form
	   * back to its pristine state.
	   */
        form.$setUntouched = function () {
          forEach(controls, function (control) {
            control.$setUntouched();
          });
        };
        /**
	   * @ngdoc method
	   * @name form.FormController#$setSubmitted
	   *
	   * @description
	   * Sets the form to its submitted state.
	   */
        form.$setSubmitted = function () {
          $animate.addClass(element, SUBMITTED_CLASS);
          form.$submitted = true;
          form.$$parentForm.$setSubmitted();
        };
      }
      /**
	 * @ngdoc directive
	 * @name ngForm
	 * @restrict EAC
	 *
	 * @description
	 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
	 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
	 * sub-group of controls needs to be determined.
	 *
	 * Note: the purpose of `ngForm` is to group controls,
	 * but not to be a replacement for the `<form>` tag with all of its capabilities
	 * (e.g. posting to the server, ...).
	 *
	 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 *
	 */
      /**
	 * @ngdoc directive
	 * @name form
	 * @restrict E
	 *
	 * @description
	 * Directive that instantiates
	 * {@link form.FormController FormController}.
	 *
	 * If the `name` attribute is specified, the form controller is published onto the current scope under
	 * this name.
	 *
	 * # Alias: {@link ng.directive:ngForm `ngForm`}
	 *
	 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
	 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
	 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to
	 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when
	 * using Angular validation directives in forms that are dynamically generated using the
	 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`
	 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an
	 * `ngForm` directive and nest these in an outer `form` element.
	 *
	 *
	 * # CSS classes
	 *  - `ng-valid` is set if the form is valid.
	 *  - `ng-invalid` is set if the form is invalid.
	 *  - `ng-pending` is set if the form is pending.
	 *  - `ng-pristine` is set if the form is pristine.
	 *  - `ng-dirty` is set if the form is dirty.
	 *  - `ng-submitted` is set if the form was submitted.
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 *
	 * # Submitting a form and preventing the default action
	 *
	 * Since the role of forms in client-side Angular applications is different than in classical
	 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
	 * page reload that sends the data to the server. Instead some javascript logic should be triggered
	 * to handle the form submission in an application-specific way.
	 *
	 * For this reason, Angular prevents the default action (form submission to the server) unless the
	 * `<form>` element has an `action` attribute specified.
	 *
	 * You can use one of the following two ways to specify what javascript method should be called when
	 * a form is submitted:
	 *
	 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
	 * - {@link ng.directive:ngClick ngClick} directive on the first
	  *  button or input field of type submit (input[type=submit])
	 *
	 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
	 * or {@link ng.directive:ngClick ngClick} directives.
	 * This is because of the following form submission rules in the HTML specification:
	 *
	 * - If a form has only one input field then hitting enter in this field triggers form submit
	 * (`ngSubmit`)
	 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
	 * doesn't trigger submit
	 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
	 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
	 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
	 *
	 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
	 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * ## Animation Hooks
	 *
	 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
	 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
	 * other validations that are performed within the form. Animations in ngForm are similar to how
	 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
	 * as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style a form element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-form {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-form.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
	      <file name="index.html">
	       <script>
	         angular.module('formExample', [])
	           .controller('FormController', ['$scope', function($scope) {
	             $scope.userType = 'guest';
	           }]);
	       </script>
	       <style>
	        .my-form {
	          transition:all linear 0.5s;
	          background: transparent;
	        }
	        .my-form.ng-invalid {
	          background: red;
	        }
	       </style>
	       <form name="myForm" ng-controller="FormController" class="my-form">
	         userType: <input name="input" ng-model="userType" required>
	         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
	         <code>userType = {{userType}}</code><br>
	         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
	         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
	         <code>myForm.$valid = {{myForm.$valid}}</code><br>
	         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should initialize to model', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));

	          expect(userType.getText()).toContain('guest');
	          expect(valid.getText()).toContain('true');
	        });

	        it('should be invalid if empty', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var userInput = element(by.model('userType'));

	          userInput.clear();
	          userInput.sendKeys('');

	          expect(userType.getText()).toEqual('userType =');
	          expect(valid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 *
	 * @param {string=} name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 */
      var formDirectiveFactory = function (isNgForm) {
        return [
          '$timeout',
          '$parse',
          function ($timeout, $parse) {
            var formDirective = {
                name: 'form',
                restrict: isNgForm ? 'EAC' : 'E',
                require: [
                  'form',
                  '^^?form'
                ],
                controller: FormController,
                compile: function ngFormCompile(formElement, attr) {
                  // Setup initial state of the control
                  formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);
                  var nameAttr = attr.name ? 'name' : isNgForm && attr.ngForm ? 'ngForm' : false;
                  return {
                    pre: function ngFormPreLink(scope, formElement, attr, ctrls) {
                      var controller = ctrls[0];
                      // if `action` attr is not present on the form, prevent the default action (submission)
                      if (!('action' in attr)) {
                        // we can't use jq events because if a form is destroyed during submission the default
                        // action is not prevented. see #1238
                        //
                        // IE 9 is not affected because it doesn't fire a submit event and try to do a full
                        // page reload if the form was destroyed by submission of the form via a click handler
                        // on a button in the form. Looks like an IE9 specific bug.
                        var handleFormSubmission = function (event) {
                          scope.$apply(function () {
                            controller.$commitViewValue();
                            controller.$setSubmitted();
                          });
                          event.preventDefault();
                        };
                        addEventListenerFn(formElement[0], 'submit', handleFormSubmission);
                        // unregister the preventDefault listener so that we don't not leak memory but in a
                        // way that will achieve the prevention of the default action.
                        formElement.on('$destroy', function () {
                          $timeout(function () {
                            removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);
                          }, 0, false);
                        });
                      }
                      var parentFormCtrl = ctrls[1] || controller.$$parentForm;
                      parentFormCtrl.$addControl(controller);
                      var setter = nameAttr ? getSetter(controller.$name) : noop;
                      if (nameAttr) {
                        setter(scope, controller);
                        attr.$observe(nameAttr, function (newValue) {
                          if (controller.$name === newValue)
                            return;
                          setter(scope, undefined);
                          controller.$$parentForm.$$renameControl(controller, newValue);
                          setter = getSetter(controller.$name);
                          setter(scope, controller);
                        });
                      }
                      formElement.on('$destroy', function () {
                        controller.$$parentForm.$removeControl(controller);
                        setter(scope, undefined);
                        extend(controller, nullFormCtrl);  //stop propagating child destruction handlers upwards
                      });
                    }
                  };
                }
              };
            return formDirective;
            function getSetter(expression) {
              if (expression === '') {
                //create an assignable expression, so forms with an empty name can be renamed later
                return $parse('this[""]').assign;
              }
              return $parse(expression).assign || noop;
            }
          }
        ];
      };
      var formDirective = formDirectiveFactory();
      var ngFormDirective = formDirectiveFactory(true);
      /* global VALID_CLASS: false,
	  INVALID_CLASS: false,
	  PRISTINE_CLASS: false,
	  DIRTY_CLASS: false,
	  UNTOUCHED_CLASS: false,
	  TOUCHED_CLASS: false,
	  ngModelMinErr: false,
	*/
      // Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
      var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;
      var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
      var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
      var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;
      var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;
      var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
      var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;
      var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;
      var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
      var inputType = {
          'text': textInputType,
          'date': createDateInputType('date', DATE_REGEXP, createDateParser(DATE_REGEXP, [
            'yyyy',
            'MM',
            'dd'
          ]), 'yyyy-MM-dd'),
          'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP, createDateParser(DATETIMELOCAL_REGEXP, [
            'yyyy',
            'MM',
            'dd',
            'HH',
            'mm',
            'ss',
            'sss'
          ]), 'yyyy-MM-ddTHH:mm:ss.sss'),
          'time': createDateInputType('time', TIME_REGEXP, createDateParser(TIME_REGEXP, [
            'HH',
            'mm',
            'ss',
            'sss'
          ]), 'HH:mm:ss.sss'),
          'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),
          'month': createDateInputType('month', MONTH_REGEXP, createDateParser(MONTH_REGEXP, [
            'yyyy',
            'MM'
          ]), 'yyyy-MM'),
          'number': numberInputType,
          'url': urlInputType,
          'email': emailInputType,
          'radio': radioInputType,
          'checkbox': checkboxInputType,
          'hidden': noop,
          'button': noop,
          'submit': noop,
          'reset': noop,
          'file': noop
        };
      function stringBasedInputType(ctrl) {
        ctrl.$formatters.push(function (value) {
          return ctrl.$isEmpty(value) ? value : value.toString();
        });
      }
      function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);
      }
      function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        var type = lowercase(element[0].type);
        // In composition mode, users are still inputing intermediate text buffer,
        // hold the listener until composition is done.
        // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
        if (!$sniffer.android) {
          var composing = false;
          element.on('compositionstart', function (data) {
            composing = true;
          });
          element.on('compositionend', function () {
            composing = false;
            listener();
          });
        }
        var listener = function (ev) {
          if (timeout) {
            $browser.defer.cancel(timeout);
            timeout = null;
          }
          if (composing)
            return;
          var value = element.val(), event = ev && ev.type;
          // By default we will trim the value
          // If the attribute ng-trim exists we will avoid trimming
          // If input type is 'password', the value is never trimmed
          if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
            value = trim(value);
          }
          // If a control is suffering from bad input (due to native validators), browsers discard its
          // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
          // control's value is the same empty value twice in a row.
          if (ctrl.$viewValue !== value || value === '' && ctrl.$$hasNativeValidators) {
            ctrl.$setViewValue(value, event);
          }
        };
        // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
        // input event on backspace, delete or cut
        if ($sniffer.hasEvent('input')) {
          element.on('input', listener);
        } else {
          var timeout;
          var deferListener = function (ev, input, origValue) {
            if (!timeout) {
              timeout = $browser.defer(function () {
                timeout = null;
                if (!input || input.value !== origValue) {
                  listener(ev);
                }
              });
            }
          };
          element.on('keydown', function (event) {
            var key = event.keyCode;
            // ignore
            //    command            modifiers                   arrows
            if (key === 91 || 15 < key && key < 19 || 37 <= key && key <= 40)
              return;
            deferListener(event, this, this.value);
          });
          // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
          if ($sniffer.hasEvent('paste')) {
            element.on('paste cut', deferListener);
          }
        }
        // if user paste into input using mouse on older browser
        // or form autocomplete on newer browser, we need "change" event to catch it
        element.on('change', listener);
        ctrl.$render = function () {
          // Workaround for Firefox validation #12102.
          var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;
          if (element.val() !== value) {
            element.val(value);
          }
        };
      }
      function weekParser(isoWeek, existingDate) {
        if (isDate(isoWeek)) {
          return isoWeek;
        }
        if (isString(isoWeek)) {
          WEEK_REGEXP.lastIndex = 0;
          var parts = WEEK_REGEXP.exec(isoWeek);
          if (parts) {
            var year = +parts[1], week = +parts[2], hours = 0, minutes = 0, seconds = 0, milliseconds = 0, firstThurs = getFirstThursdayOfYear(year), addDays = (week - 1) * 7;
            if (existingDate) {
              hours = existingDate.getHours();
              minutes = existingDate.getMinutes();
              seconds = existingDate.getSeconds();
              milliseconds = existingDate.getMilliseconds();
            }
            return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
          }
        }
        return NaN;
      }
      function createDateParser(regexp, mapping) {
        return function (iso, date) {
          var parts, map;
          if (isDate(iso)) {
            return iso;
          }
          if (isString(iso)) {
            // When a date is JSON'ified to wraps itself inside of an extra
            // set of double quotes. This makes the date parsing code unable
            // to match the date string and parse it as a date.
            if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {
              iso = iso.substring(1, iso.length - 1);
            }
            if (ISO_DATE_REGEXP.test(iso)) {
              return new Date(iso);
            }
            regexp.lastIndex = 0;
            parts = regexp.exec(iso);
            if (parts) {
              parts.shift();
              if (date) {
                map = {
                  yyyy: date.getFullYear(),
                  MM: date.getMonth() + 1,
                  dd: date.getDate(),
                  HH: date.getHours(),
                  mm: date.getMinutes(),
                  ss: date.getSeconds(),
                  sss: date.getMilliseconds() / 1000
                };
              } else {
                map = {
                  yyyy: 1970,
                  MM: 1,
                  dd: 1,
                  HH: 0,
                  mm: 0,
                  ss: 0,
                  sss: 0
                };
              }
              forEach(parts, function (part, index) {
                if (index < mapping.length) {
                  map[mapping[index]] = +part;
                }
              });
              return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
            }
          }
          return NaN;
        };
      }
      function createDateInputType(type, regexp, parseDate, format) {
        return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
          badInputChecker(scope, element, attr, ctrl);
          baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
          var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
          var previousDate;
          ctrl.$$parserName = type;
          ctrl.$parsers.push(function (value) {
            if (ctrl.$isEmpty(value))
              return null;
            if (regexp.test(value)) {
              // Note: We cannot read ctrl.$modelValue, as there might be a different
              // parser/formatter in the processing chain so that the model
              // contains some different data format!
              var parsedDate = parseDate(value, previousDate);
              if (timezone) {
                parsedDate = convertTimezoneToLocal(parsedDate, timezone);
              }
              return parsedDate;
            }
            return undefined;
          });
          ctrl.$formatters.push(function (value) {
            if (value && !isDate(value)) {
              throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
            }
            if (isValidDate(value)) {
              previousDate = value;
              if (previousDate && timezone) {
                previousDate = convertTimezoneToLocal(previousDate, timezone, true);
              }
              return $filter('date')(value, format, timezone);
            } else {
              previousDate = null;
              return '';
            }
          });
          if (isDefined(attr.min) || attr.ngMin) {
            var minVal;
            ctrl.$validators.min = function (value) {
              return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
            };
            attr.$observe('min', function (val) {
              minVal = parseObservedDateValue(val);
              ctrl.$validate();
            });
          }
          if (isDefined(attr.max) || attr.ngMax) {
            var maxVal;
            ctrl.$validators.max = function (value) {
              return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
            };
            attr.$observe('max', function (val) {
              maxVal = parseObservedDateValue(val);
              ctrl.$validate();
            });
          }
          function isValidDate(value) {
            // Invalid Date: getTime() returns NaN
            return value && !(value.getTime && value.getTime() !== value.getTime());
          }
          function parseObservedDateValue(val) {
            return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;
          }
        };
      }
      function badInputChecker(scope, element, attr, ctrl) {
        var node = element[0];
        var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
        if (nativeValidation) {
          ctrl.$parsers.push(function (value) {
            var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
            // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):
            // - also sets validity.badInput (should only be validity.typeMismatch).
            // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)
            // - can ignore this case as we can still read out the erroneous email...
            return validity.badInput && !validity.typeMismatch ? undefined : value;
          });
        }
      }
      function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        badInputChecker(scope, element, attr, ctrl);
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        ctrl.$$parserName = 'number';
        ctrl.$parsers.push(function (value) {
          if (ctrl.$isEmpty(value))
            return null;
          if (NUMBER_REGEXP.test(value))
            return parseFloat(value);
          return undefined;
        });
        ctrl.$formatters.push(function (value) {
          if (!ctrl.$isEmpty(value)) {
            if (!isNumber(value)) {
              throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
            }
            value = value.toString();
          }
          return value;
        });
        if (isDefined(attr.min) || attr.ngMin) {
          var minVal;
          ctrl.$validators.min = function (value) {
            return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
          };
          attr.$observe('min', function (val) {
            if (isDefined(val) && !isNumber(val)) {
              val = parseFloat(val, 10);
            }
            minVal = isNumber(val) && !isNaN(val) ? val : undefined;
            // TODO(matsko): implement validateLater to reduce number of validations
            ctrl.$validate();
          });
        }
        if (isDefined(attr.max) || attr.ngMax) {
          var maxVal;
          ctrl.$validators.max = function (value) {
            return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
          };
          attr.$observe('max', function (val) {
            if (isDefined(val) && !isNumber(val)) {
              val = parseFloat(val, 10);
            }
            maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
            // TODO(matsko): implement validateLater to reduce number of validations
            ctrl.$validate();
          });
        }
      }
      function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        // Note: no badInputChecker here by purpose as `url` is only a validation
        // in browsers, i.e. we can always read out input.value even if it is not valid!
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);
        ctrl.$$parserName = 'url';
        ctrl.$validators.url = function (modelValue, viewValue) {
          var value = modelValue || viewValue;
          return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
        };
      }
      function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        // Note: no badInputChecker here by purpose as `url` is only a validation
        // in browsers, i.e. we can always read out input.value even if it is not valid!
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);
        ctrl.$$parserName = 'email';
        ctrl.$validators.email = function (modelValue, viewValue) {
          var value = modelValue || viewValue;
          return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
        };
      }
      function radioInputType(scope, element, attr, ctrl) {
        // make the name unique, if not defined
        if (isUndefined(attr.name)) {
          element.attr('name', nextUid());
        }
        var listener = function (ev) {
          if (element[0].checked) {
            ctrl.$setViewValue(attr.value, ev && ev.type);
          }
        };
        element.on('click', listener);
        ctrl.$render = function () {
          var value = attr.value;
          element[0].checked = value == ctrl.$viewValue;
        };
        attr.$observe('value', ctrl.$render);
      }
      function parseConstantExpr($parse, context, name, expression, fallback) {
        var parseFn;
        if (isDefined(expression)) {
          parseFn = $parse(expression);
          if (!parseFn.constant) {
            throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' + '`{1}`.', name, expression);
          }
          return parseFn(context);
        }
        return fallback;
      }
      function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
        var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
        var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);
        var listener = function (ev) {
          ctrl.$setViewValue(element[0].checked, ev && ev.type);
        };
        element.on('click', listener);
        ctrl.$render = function () {
          element[0].checked = ctrl.$viewValue;
        };
        // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
        // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
        // it to a boolean.
        ctrl.$isEmpty = function (value) {
          return value === false;
        };
        ctrl.$formatters.push(function (value) {
          return equals(value, trueValue);
        });
        ctrl.$parsers.push(function (value) {
          return value ? trueValue : falseValue;
        });
      }
      /**
	 * @ngdoc directive
	 * @name textarea
	 * @restrict E
	 *
	 * @description
	 * HTML textarea element control with angular data-binding. The data-binding and validation
	 * properties of this element are exactly the same as those of the
	 * {@link ng.directive:input input element}.
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
	 *    a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 */
      /**
	 * @ngdoc directive
	 * @name input
	 * @restrict E
	 *
	 * @description
	 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
	 * input state control, and validation.
	 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Not every feature offered is available for all input types.
	 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
	 * </div>
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {boolean=} ngRequired Sets `required` attribute if set to true
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
	 *    a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 *    This parameter is ignored for input[type=password] controls, which will never trim the
	 *    input.
	 *
	 * @example
	    <example name="input-directive" module="inputExample">
	      <file name="index.html">
	       <script>
	          angular.module('inputExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.user = {name: 'guest', last: 'visitor'};
	            }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <form name="myForm">
	           <label>
	              User name:
	              <input type="text" name="userName" ng-model="user.name" required>
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.userName.$error.required">
	              Required!</span>
	           </div>
	           <label>
	              Last name:
	              <input type="text" name="lastName" ng-model="user.last"
	              ng-minlength="3" ng-maxlength="10">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.lastName.$error.minlength">
	               Too short!</span>
	             <span class="error" ng-show="myForm.lastName.$error.maxlength">
	               Too long!</span>
	           </div>
	         </form>
	         <hr>
	         <tt>user = {{user}}</tt><br/>
	         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
	         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
	         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
	         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
	         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
	         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
	       </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var user = element(by.exactBinding('user'));
	        var userNameValid = element(by.binding('myForm.userName.$valid'));
	        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
	        var lastNameError = element(by.binding('myForm.lastName.$error'));
	        var formValid = element(by.binding('myForm.$valid'));
	        var userNameInput = element(by.model('user.name'));
	        var userLastInput = element(by.model('user.last'));

	        it('should initialize to model', function() {
	          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
	          expect(userNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });

	        it('should be invalid if empty when required', function() {
	          userNameInput.clear();
	          userNameInput.sendKeys('');

	          expect(user.getText()).toContain('{"last":"visitor"}');
	          expect(userNameValid.getText()).toContain('false');
	          expect(formValid.getText()).toContain('false');
	        });

	        it('should be valid if empty when min length is set', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('');

	          expect(user.getText()).toContain('{"name":"guest","last":""}');
	          expect(lastNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });

	        it('should be invalid if less than required min length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('xx');

	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('minlength');
	          expect(formValid.getText()).toContain('false');
	        });

	        it('should be invalid if longer than max length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('some ridiculously long name');

	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('maxlength');
	          expect(formValid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 */
      var inputDirective = [
          '$browser',
          '$sniffer',
          '$filter',
          '$parse',
          function ($browser, $sniffer, $filter, $parse) {
            return {
              restrict: 'E',
              require: ['?ngModel'],
              link: {
                pre: function (scope, element, attr, ctrls) {
                  if (ctrls[0]) {
                    (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer, $browser, $filter, $parse);
                  }
                }
              }
            };
          }
        ];
      var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
      /**
	 * @ngdoc directive
	 * @name ngValue
	 *
	 * @description
	 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},
	 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to
	 * the bound value.
	 *
	 * `ngValue` is useful when dynamically generating lists of radio buttons using
	 * {@link ngRepeat `ngRepeat`}, as shown below.
	 *
	 * Likewise, `ngValue` can be used to generate `<option>` elements for
	 * the {@link select `select`} element. In that case however, only strings are supported
	 * for the `value `attribute, so the resulting `ngModel` will always be a string.
	 * Support for `select` models with non-string values is available via `ngOptions`.
	 *
	 * @element input
	 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
	 *   of the `input` element
	 *
	 * @example
	    <example name="ngValue-directive" module="valueExample">
	      <file name="index.html">
	       <script>
	          angular.module('valueExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.names = ['pizza', 'unicorns', 'robots'];
	              $scope.my = { favorite: 'unicorns' };
	            }]);
	       </script>
	        <form ng-controller="ExampleController">
	          <h2>Which is your favorite?</h2>
	            <label ng-repeat="name in names" for="{{name}}">
	              {{name}}
	              <input type="radio"
	                     ng-model="my.favorite"
	                     ng-value="name"
	                     id="{{name}}"
	                     name="favorite">
	            </label>
	          <div>You chose {{my.favorite}}</div>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var favorite = element(by.binding('my.favorite'));

	        it('should initialize to model', function() {
	          expect(favorite.getText()).toContain('unicorns');
	        });
	        it('should bind the values to the inputs', function() {
	          element.all(by.model('my.favorite')).get(0).click();
	          expect(favorite.getText()).toContain('pizza');
	        });
	      </file>
	    </example>
	 */
      var ngValueDirective = function () {
        return {
          restrict: 'A',
          priority: 100,
          compile: function (tpl, tplAttr) {
            if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
              return function ngValueConstantLink(scope, elm, attr) {
                attr.$set('value', scope.$eval(attr.ngValue));
              };
            } else {
              return function ngValueLink(scope, elm, attr) {
                scope.$watch(attr.ngValue, function valueWatchAction(value) {
                  attr.$set('value', value);
                });
              };
            }
          }
        };
      };
      /**
	 * @ngdoc directive
	 * @name ngBind
	 * @restrict AC
	 *
	 * @description
	 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
	 * with the value of a given expression, and to update the text content when the value of that
	 * expression changes.
	 *
	 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
	 * `{{ expression }}` which is similar but less verbose.
	 *
	 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
	 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
	 * element attribute, it makes the bindings invisible to the user while the page is loading.
	 *
	 * An alternative solution to this problem would be using the
	 * {@link ng.directive:ngCloak ngCloak} directive.
	 *
	 *
	 * @element ANY
	 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
	 *
	 * @example
	 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
	   <example module="bindExample">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.name = 'Whirled';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter name: <input type="text" ng-model="name"></label><br>
	         Hello <span ng-bind="name"></span>!
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var nameInput = element(by.model('name'));

	         expect(element(by.binding('name')).getText()).toBe('Whirled');
	         nameInput.clear();
	         nameInput.sendKeys('world');
	         expect(element(by.binding('name')).getText()).toBe('world');
	       });
	     </file>
	   </example>
	 */
      var ngBindDirective = [
          '$compile',
          function ($compile) {
            return {
              restrict: 'AC',
              compile: function ngBindCompile(templateElement) {
                $compile.$$addBindingClass(templateElement);
                return function ngBindLink(scope, element, attr) {
                  $compile.$$addBindingInfo(element, attr.ngBind);
                  element = element[0];
                  scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
                    element.textContent = isUndefined(value) ? '' : value;
                  });
                };
              }
            };
          }
        ];
      /**
	 * @ngdoc directive
	 * @name ngBindTemplate
	 *
	 * @description
	 * The `ngBindTemplate` directive specifies that the element
	 * text content should be replaced with the interpolation of the template
	 * in the `ngBindTemplate` attribute.
	 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
	 * expressions. This directive is needed since some HTML elements
	 * (such as TITLE and OPTION) cannot contain SPAN elements.
	 *
	 * @element ANY
	 * @param {string} ngBindTemplate template of form
	 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
	 *
	 * @example
	 * Try it here: enter text in text box and watch the greeting change.
	   <example module="bindExample">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.salutation = 'Hello';
	             $scope.name = 'World';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	        <label>Salutation: <input type="text" ng-model="salutation"></label><br>
	        <label>Name: <input type="text" ng-model="name"></label><br>
	        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var salutationElem = element(by.binding('salutation'));
	         var salutationInput = element(by.model('salutation'));
	         var nameInput = element(by.model('name'));

	         expect(salutationElem.getText()).toBe('Hello World!');

	         salutationInput.clear();
	         salutationInput.sendKeys('Greetings');
	         nameInput.clear();
	         nameInput.sendKeys('user');

	         expect(salutationElem.getText()).toBe('Greetings user!');
	       });
	     </file>
	   </example>
	 */
      var ngBindTemplateDirective = [
          '$interpolate',
          '$compile',
          function ($interpolate, $compile) {
            return {
              compile: function ngBindTemplateCompile(templateElement) {
                $compile.$$addBindingClass(templateElement);
                return function ngBindTemplateLink(scope, element, attr) {
                  var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
                  $compile.$$addBindingInfo(element, interpolateFn.expressions);
                  element = element[0];
                  attr.$observe('ngBindTemplate', function (value) {
                    element.textContent = isUndefined(value) ? '' : value;
                  });
                };
              }
            };
          }
        ];
      /**
	 * @ngdoc directive
	 * @name ngBindHtml
	 *
	 * @description
	 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
	 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
	 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
	 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
	 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
	 *
	 * You may also bypass sanitization for values you know are safe. To do so, bind to
	 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
	 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
	 *
	 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
	 * will have an exception (instead of an exploit.)
	 *
	 * @element ANY
	 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
	 *
	 * @example

	   <example module="bindHtmlExample" deps="angular-sanitize.js">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	        <p ng-bind-html="myHTML"></p>
	       </div>
	     </file>

	     <file name="script.js">
	       angular.module('bindHtmlExample', ['ngSanitize'])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.myHTML =
	              'I am an <code>HTML</code>string with ' +
	              '<a href="#">links!</a> and other <em>stuff</em>';
	         }]);
	     </file>

	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind-html', function() {
	         expect(element(by.binding('myHTML')).getText()).toBe(
	             'I am an HTMLstring with links! and other stuff');
	       });
	     </file>
	   </example>
	 */
      var ngBindHtmlDirective = [
          '$sce',
          '$parse',
          '$compile',
          function ($sce, $parse, $compile) {
            return {
              restrict: 'A',
              compile: function ngBindHtmlCompile(tElement, tAttrs) {
                var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
                var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {
                    return (value || '').toString();
                  });
                $compile.$$addBindingClass(tElement);
                return function ngBindHtmlLink(scope, element, attr) {
                  $compile.$$addBindingInfo(element, attr.ngBindHtml);
                  scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
                    // we re-evaluate the expr because we want a TrustedValueHolderType
                    // for $sce, not a string
                    element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');
                  });
                };
              }
            };
          }
        ];
      /**
	 * @ngdoc directive
	 * @name ngChange
	 *
	 * @description
	 * Evaluate the given expression when the user changes the input.
	 * The expression is evaluated immediately, unlike the JavaScript onchange event
	 * which only triggers at the end of a change (usually, when the user leaves the
	 * form element or presses the return key).
	 *
	 * The `ngChange` expression is only evaluated when a change in the input value causes
	 * a new value to be committed to the model.
	 *
	 * It will not be evaluated:
	 * * if the value returned from the `$parsers` transformation pipeline has not changed
	 * * if the input has continued to be invalid since the model will stay `null`
	 * * if the model is changed programmatically and not by a change to the input value
	 *
	 *
	 * Note, this directive requires `ngModel` to be present.
	 *
	 * @element input
	 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
	 * in input value.
	 *
	 * @example
	 * <example name="ngChange-directive" module="changeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('changeExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.counter = 0;
	 *           $scope.change = function() {
	 *             $scope.counter++;
	 *           };
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
	 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
	 *       <label for="ng-change-example2">Confirmed</label><br />
	 *       <tt>debug = {{confirmed}}</tt><br/>
	 *       <tt>counter = {{counter}}</tt><br/>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var counter = element(by.binding('counter'));
	 *     var debug = element(by.binding('confirmed'));
	 *
	 *     it('should evaluate the expression if changing from view', function() {
	 *       expect(counter.getText()).toContain('0');
	 *
	 *       element(by.id('ng-change-example1')).click();
	 *
	 *       expect(counter.getText()).toContain('1');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *
	 *     it('should not evaluate the expression if changing from model', function() {
	 *       element(by.id('ng-change-example2')).click();

	 *       expect(counter.getText()).toContain('0');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *   </file>
	 * </example>
	 */
      var ngChangeDirective = valueFn({
          restrict: 'A',
          require: 'ngModel',
          link: function (scope, element, attr, ctrl) {
            ctrl.$viewChangeListeners.push(function () {
              scope.$eval(attr.ngChange);
            });
          }
        });
      function classDirective(name, selector) {
        name = 'ngClass' + name;
        return [
          '$animate',
          function ($animate) {
            return {
              restrict: 'AC',
              link: function (scope, element, attr) {
                var oldVal;
                scope.$watch(attr[name], ngClassWatchAction, true);
                attr.$observe('class', function (value) {
                  ngClassWatchAction(scope.$eval(attr[name]));
                });
                if (name !== 'ngClass') {
                  scope.$watch('$index', function ($index, old$index) {
                    // jshint bitwise: false
                    var mod = $index & 1;
                    if (mod !== (old$index & 1)) {
                      var classes = arrayClasses(scope.$eval(attr[name]));
                      mod === selector ? addClasses(classes) : removeClasses(classes);
                    }
                  });
                }
                function addClasses(classes) {
                  var newClasses = digestClassCounts(classes, 1);
                  attr.$addClass(newClasses);
                }
                function removeClasses(classes) {
                  var newClasses = digestClassCounts(classes, -1);
                  attr.$removeClass(newClasses);
                }
                function digestClassCounts(classes, count) {
                  // Use createMap() to prevent class assumptions involving property
                  // names in Object.prototype
                  var classCounts = element.data('$classCounts') || createMap();
                  var classesToUpdate = [];
                  forEach(classes, function (className) {
                    if (count > 0 || classCounts[className]) {
                      classCounts[className] = (classCounts[className] || 0) + count;
                      if (classCounts[className] === +(count > 0)) {
                        classesToUpdate.push(className);
                      }
                    }
                  });
                  element.data('$classCounts', classCounts);
                  return classesToUpdate.join(' ');
                }
                function updateClasses(oldClasses, newClasses) {
                  var toAdd = arrayDifference(newClasses, oldClasses);
                  var toRemove = arrayDifference(oldClasses, newClasses);
                  toAdd = digestClassCounts(toAdd, 1);
                  toRemove = digestClassCounts(toRemove, -1);
                  if (toAdd && toAdd.length) {
                    $animate.addClass(element, toAdd);
                  }
                  if (toRemove && toRemove.length) {
                    $animate.removeClass(element, toRemove);
                  }
                }
                function ngClassWatchAction(newVal) {
                  if (selector === true || scope.$index % 2 === selector) {
                    var newClasses = arrayClasses(newVal || []);
                    if (!oldVal) {
                      addClasses(newClasses);
                    } else if (!equals(newVal, oldVal)) {
                      var oldClasses = arrayClasses(oldVal);
                      updateClasses(oldClasses, newClasses);
                    }
                  }
                  oldVal = shallowCopy(newVal);
                }
              }
            };
            function arrayDifference(tokens1, tokens2) {
              var values = [];
              outer:
                for (var i = 0; i < tokens1.length; i++) {
                  var token = tokens1[i];
                  for (var j = 0; j < tokens2.length; j++) {
                    if (token == tokens2[j])
                      continue outer;
                  }
                  values.push(token);
                }
              return values;
            }
            function arrayClasses(classVal) {
              var classes = [];
              if (isArray(classVal)) {
                forEach(classVal, function (v) {
                  classes = classes.concat(arrayClasses(v));
                });
                return classes;
              } else if (isString(classVal)) {
                return classVal.split(' ');
              } else if (isObject(classVal)) {
                forEach(classVal, function (v, k) {
                  if (v) {
                    classes = classes.concat(k.split(' '));
                  }
                });
                return classes;
              }
              return classVal;
            }
          }
        ];
      }
      /**
	 * @ngdoc directive
	 * @name ngClass
	 * @restrict AC
	 *
	 * @description
	 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
	 * an expression that represents all classes to be added.
	 *
	 * The directive operates in three different ways, depending on which of three types the expression
	 * evaluates to:
	 *
	 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
	 * names.
	 *
	 * 2. If the expression evaluates to an object, then for each key-value pair of the
	 * object with a truthy value the corresponding key is used as a class name.
	 *
	 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
	 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
	 * to give you more control over what CSS classes appear. See the code below for an example of this.
	 *
	 *
	 * The directive won't add duplicate classes if a particular class was already set.
	 *
	 * When the expression changes, the previously added classes are removed and only then are the
	 * new classes added.
	 *
	 * @animations
	 * **add** - happens just before the class is applied to the elements
	 *
	 * **remove** - happens just before the class is removed from the element
	 *
	 * @element ANY
	 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class
	 *   names, an array, or a map of class names to boolean values. In the case of a map, the
	 *   names of the properties whose values are truthy will be added as css classes to the
	 *   element.
	 *
	 * @example Example that demonstrates basic bindings via ngClass directive.
	   <example>
	     <file name="index.html">
	       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
	       <label>
	          <input type="checkbox" ng-model="deleted">
	          deleted (apply "strike" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="important">
	          important (apply "bold" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="error">
	          error (apply "has-error" class)
	       </label>
	       <hr>
	       <p ng-class="style">Using String Syntax</p>
	       <input type="text" ng-model="style"
	              placeholder="Type: bold strike red" aria-label="Type: bold strike red">
	       <hr>
	       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
	       <input ng-model="style1"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
	       <input ng-model="style2"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
	       <input ng-model="style3"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
	       <hr>
	       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
	       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
	       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
	     </file>
	     <file name="style.css">
	       .strike {
	           text-decoration: line-through;
	       }
	       .bold {
	           font-weight: bold;
	       }
	       .red {
	           color: red;
	       }
	       .has-error {
	           color: red;
	           background-color: yellow;
	       }
	       .orange {
	           color: orange;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var ps = element.all(by.css('p'));

	       it('should let you toggle the class', function() {

	         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
	         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);

	         element(by.model('important')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/bold/);

	         element(by.model('error')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/has-error/);
	       });

	       it('should let you toggle string example', function() {
	         expect(ps.get(1).getAttribute('class')).toBe('');
	         element(by.model('style')).clear();
	         element(by.model('style')).sendKeys('red');
	         expect(ps.get(1).getAttribute('class')).toBe('red');
	       });

	       it('array example should have 3 classes', function() {
	         expect(ps.get(2).getAttribute('class')).toBe('');
	         element(by.model('style1')).sendKeys('bold');
	         element(by.model('style2')).sendKeys('strike');
	         element(by.model('style3')).sendKeys('red');
	         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
	       });

	       it('array with map example should have 2 classes', function() {
	         expect(ps.last().getAttribute('class')).toBe('');
	         element(by.model('style4')).sendKeys('bold');
	         element(by.model('warning')).click();
	         expect(ps.last().getAttribute('class')).toBe('bold orange');
	       });
	     </file>
	   </example>

	   ## Animations

	   The example below demonstrates how to perform animations using ngClass.

	   <example module="ngAnimate" deps="angular-animate.js" animations="true">
	     <file name="index.html">
	      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
	      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
	      <br>
	      <span class="base-class" ng-class="myVar">Sample Text</span>
	     </file>
	     <file name="style.css">
	       .base-class {
	         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	       }

	       .base-class.my-class {
	         color: red;
	         font-size:3em;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class', function() {
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);

	         element(by.id('setbtn')).click();

	         expect(element(by.css('.base-class')).getAttribute('class')).
	           toMatch(/my-class/);

	         element(by.id('clearbtn')).click();

	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	       });
	     </file>
	   </example>


	   ## ngClass and pre-existing CSS3 Transitions/Animations
	   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
	   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
	   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
	   to view the step by step details of {@link $animate#addClass $animate.addClass} and
	   {@link $animate#removeClass $animate.removeClass}.
	 */
      var ngClassDirective = classDirective('', true);
      /**
	 * @ngdoc directive
	 * @name ngClassOdd
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}}
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
      var ngClassOddDirective = classDirective('Odd', 0);
      /**
	 * @ngdoc directive
	 * @name ngClassEven
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
	 *   result of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}} &nbsp; &nbsp; &nbsp;
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
      var ngClassEvenDirective = classDirective('Even', 1);
      /**
	 * @ngdoc directive
	 * @name ngCloak
	 * @restrict AC
	 *
	 * @description
	 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
	 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
	 * directive to avoid the undesirable flicker effect caused by the html template display.
	 *
	 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
	 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
	 * of the browser view.
	 *
	 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
	 * `angular.min.js`.
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```css
	 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
	 *   display: none !important;
	 * }
	 * ```
	 *
	 * When this css rule is loaded by the browser, all html elements (including their children) that
	 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
	 * during the compilation of the template it deletes the `ngCloak` element attribute, making
	 * the compiled element visible.
	 *
	 * For the best result, the `angular.js` script must be loaded in the head section of the html
	 * document; alternatively, the css rule above must be included in the external stylesheet of the
	 * application.
	 *
	 * @element ANY
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <div id="template1" ng-cloak>{{ 'hello' }}</div>
	        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should remove the template directive and css class', function() {
	         expect($('#template1').getAttribute('ng-cloak')).
	           toBeNull();
	         expect($('#template2').getAttribute('ng-cloak')).
	           toBeNull();
	       });
	     </file>
	   </example>
	 *
	 */
      var ngCloakDirective = ngDirective({
          compile: function (element, attr) {
            attr.$set('ngCloak', undefined);
            element.removeClass('ng-cloak');
          }
        });
      /**
	 * @ngdoc directive
	 * @name ngController
	 *
	 * @description
	 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
	 * supports the principles behind the Model-View-Controller design pattern.
	 *
	 * MVC components in angular:
	 *
	 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
	 *   are accessed through bindings.
	 * * View — The template (HTML with data bindings) that is rendered into the View.
	 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
	 *   logic behind the application to decorate the scope with functions and values
	 *
	 * Note that you can also attach controllers to the DOM by declaring it in a route definition
	 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
	 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
	 * and executed twice.
	 *
	 * @element ANY
	 * @scope
	 * @priority 500
	 * @param {expression} ngController Name of a constructor function registered with the current
	 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
	 * that on the current scope evaluates to a constructor function.
	 *
	 * The controller instance can be published into a scope property by specifying
	 * `ng-controller="as propertyName"`.
	 *
	 * If the current `$controllerProvider` is configured to use globals (via
	 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
	 * also be the name of a globally accessible constructor function (not recommended).
	 *
	 * @example
	 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
	 * greeting are methods declared on the controller (see source tab). These methods can
	 * easily be called from the angular markup. Any changes to the data are automatically reflected
	 * in the View without the need for a manual update.
	 *
	 * Two different declaration styles are included below:
	 *
	 * * one binds methods and properties directly onto the controller using `this`:
	 * `ng-controller="SettingsController1 as settings"`
	 * * one injects `$scope` into the controller:
	 * `ng-controller="SettingsController2"`
	 *
	 * The second option is more common in the Angular community, and is generally used in boilerplates
	 * and in this guide. However, there are advantages to binding properties directly to the controller
	 * and avoiding scope.
	 *
	 * * Using `controller as` makes it obvious which controller you are accessing in the template when
	 * multiple controllers apply to an element.
	 * * If you are writing your controllers as classes you have easier access to the properties and
	 * methods, which will appear on the scope, from inside the controller code.
	 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
	 * inheritance masking primitives.
	 *
	 * This example demonstrates the `controller as` syntax.
	 *
	 * <example name="ngControllerAs" module="controllerAsExample">
	 *   <file name="index.html">
	 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
	 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
	 *      <button ng-click="settings.greet()">greet</button><br/>
	 *      Contact:
	 *      <ul>
	 *        <li ng-repeat="contact in settings.contacts">
	 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
	 *             <option>phone</option>
	 *             <option>email</option>
	 *          </select>
	 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *          <button ng-click="settings.clearContact(contact)">clear</button>
	 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
	 *        </li>
	 *        <li><button ng-click="settings.addContact()">add</button></li>
	 *     </ul>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('controllerAsExample', [])
	 *      .controller('SettingsController1', SettingsController1);
	 *
	 *    function SettingsController1() {
	 *      this.name = "John Smith";
	 *      this.contacts = [
	 *        {type: 'phone', value: '408 555 1212'},
	 *        {type: 'email', value: 'john.smith@example.org'} ];
	 *    }
	 *
	 *    SettingsController1.prototype.greet = function() {
	 *      alert(this.name);
	 *    };
	 *
	 *    SettingsController1.prototype.addContact = function() {
	 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
	 *    };
	 *
	 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
	 *     var index = this.contacts.indexOf(contactToRemove);
	 *      this.contacts.splice(index, 1);
	 *    };
	 *
	 *    SettingsController1.prototype.clearContact = function(contact) {
	 *      contact.type = 'phone';
	 *      contact.value = '';
	 *    };
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should check controller as', function() {
	 *       var container = element(by.id('ctrl-as-exmpl'));
	 *         expect(container.element(by.model('settings.name'))
	 *           .getAttribute('value')).toBe('John Smith');
	 *
	 *       var firstRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(0));
	 *       var secondRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(1));
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('408 555 1212');
	 *
	 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('john.smith@example.org');
	 *
	 *       firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('');
	 *
	 *       container.element(by.buttonText('add')).click();
	 *
	 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
	 *           .element(by.model('contact.value'))
	 *           .getAttribute('value'))
	 *           .toBe('yourname@example.org');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * This example demonstrates the "attach to `$scope`" style of controller.
	 *
	 * <example name="ngController" module="controllerExample">
	 *  <file name="index.html">
	 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
	 *     <label>Name: <input type="text" ng-model="name"/></label>
	 *     <button ng-click="greet()">greet</button><br/>
	 *     Contact:
	 *     <ul>
	 *       <li ng-repeat="contact in contacts">
	 *         <select ng-model="contact.type" id="select_{{$index}}">
	 *            <option>phone</option>
	 *            <option>email</option>
	 *         </select>
	 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *         <button ng-click="clearContact(contact)">clear</button>
	 *         <button ng-click="removeContact(contact)">X</button>
	 *       </li>
	 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
	 *    </ul>
	 *   </div>
	 *  </file>
	 *  <file name="app.js">
	 *   angular.module('controllerExample', [])
	 *     .controller('SettingsController2', ['$scope', SettingsController2]);
	 *
	 *   function SettingsController2($scope) {
	 *     $scope.name = "John Smith";
	 *     $scope.contacts = [
	 *       {type:'phone', value:'408 555 1212'},
	 *       {type:'email', value:'john.smith@example.org'} ];
	 *
	 *     $scope.greet = function() {
	 *       alert($scope.name);
	 *     };
	 *
	 *     $scope.addContact = function() {
	 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
	 *     };
	 *
	 *     $scope.removeContact = function(contactToRemove) {
	 *       var index = $scope.contacts.indexOf(contactToRemove);
	 *       $scope.contacts.splice(index, 1);
	 *     };
	 *
	 *     $scope.clearContact = function(contact) {
	 *       contact.type = 'phone';
	 *       contact.value = '';
	 *     };
	 *   }
	 *  </file>
	 *  <file name="protractor.js" type="protractor">
	 *    it('should check controller', function() {
	 *      var container = element(by.id('ctrl-exmpl'));
	 *
	 *      expect(container.element(by.model('name'))
	 *          .getAttribute('value')).toBe('John Smith');
	 *
	 *      var firstRepeat =
	 *          container.element(by.repeater('contact in contacts').row(0));
	 *      var secondRepeat =
	 *          container.element(by.repeater('contact in contacts').row(1));
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('408 555 1212');
	 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('john.smith@example.org');
	 *
	 *      firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('');
	 *
	 *      container.element(by.buttonText('add')).click();
	 *
	 *      expect(container.element(by.repeater('contact in contacts').row(2))
	 *          .element(by.model('contact.value'))
	 *          .getAttribute('value'))
	 *          .toBe('yourname@example.org');
	 *    });
	 *  </file>
	 *</example>

	 */
      var ngControllerDirective = [function () {
            return {
              restrict: 'A',
              scope: true,
              controller: '@',
              priority: 500
            };
          }];
      /**
	 * @ngdoc directive
	 * @name ngCsp
	 *
	 * @element html
	 * @description
	 *
	 * Angular has some features that can break certain
	 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.
	 *
	 * If you intend to implement these rules then you must tell Angular not to use these features.
	 *
	 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
	 *
	 *
	 * The following rules affect Angular:
	 *
	 * * `unsafe-eval`: this rule forbids apps to use `eval` or `Function(string)` generated functions
	 * (among other things). Angular makes use of this in the {@link $parse} service to provide a 30%
	 * increase in the speed of evaluating Angular expressions.
	 *
	 * * `unsafe-inline`: this rule forbids apps from inject custom styles into the document. Angular
	 * makes use of this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}).
	 * To make these directives work when a CSP rule is blocking inline styles, you must link to the
	 * `angular-csp.css` in your HTML manually.
	 *
	 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking unsafe-eval
	 * and automatically deactivates this feature in the {@link $parse} service. This autodetection,
	 * however, triggers a CSP error to be logged in the console:
	 *
	 * ```
	 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
	 * script in the following Content Security Policy directive: "default-src 'self'". Note that
	 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
	 * ```
	 *
	 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
	 * directive on an element of the HTML document that appears before the `<script>` tag that loads
	 * the `angular.js` file.
	 *
	 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
	 *
	 * You can specify which of the CSP related Angular features should be deactivated by providing
	 * a value for the `ng-csp` attribute. The options are as follows:
	 *
	 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM
	 *
	 * * no-unsafe-eval: this stops Angular from optimising $parse with unsafe eval of strings
	 *
	 * You can use these values in the following combinations:
	 *
	 *
	 * * No declaration means that Angular will assume that you can do inline styles, but it will do
	 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous versions
	 * of Angular.
	 *
	 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline
	 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous versions
	 * of Angular.
	 *
	 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can inject
	 * inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.
	 *
	 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can
	 * run eval - no automcatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`
	 *
	 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject
	 * styles nor use eval, which is the same as an empty: ng-csp.
	 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`
	 *
	 * @example
	 * This example shows how to apply the `ngCsp` directive to the `html` tag.
	   ```html
	     <!doctype html>
	     <html ng-app ng-csp>
	     ...
	     ...
	     </html>
	   ```
	  * @example
	      // Note: the suffix `.csp` in the example name triggers
	      // csp mode in our http server!
	      <example name="example.csp" module="cspExample" ng-csp="true">
	        <file name="index.html">
	          <div ng-controller="MainController as ctrl">
	            <div>
	              <button ng-click="ctrl.inc()" id="inc">Increment</button>
	              <span id="counter">
	                {{ctrl.counter}}
	              </span>
	            </div>

	            <div>
	              <button ng-click="ctrl.evil()" id="evil">Evil</button>
	              <span id="evilError">
	                {{ctrl.evilError}}
	              </span>
	            </div>
	          </div>
	        </file>
	        <file name="script.js">
	           angular.module('cspExample', [])
	             .controller('MainController', function() {
	                this.counter = 0;
	                this.inc = function() {
	                  this.counter++;
	                };
	                this.evil = function() {
	                  // jshint evil:true
	                  try {
	                    eval('1+2');
	                  } catch (e) {
	                    this.evilError = e.message;
	                  }
	                };
	              });
	        </file>
	        <file name="protractor.js" type="protractor">
	          var util, webdriver;

	          var incBtn = element(by.id('inc'));
	          var counter = element(by.id('counter'));
	          var evilBtn = element(by.id('evil'));
	          var evilError = element(by.id('evilError'));

	          function getAndClearSevereErrors() {
	            return browser.manage().logs().get('browser').then(function(browserLog) {
	              return browserLog.filter(function(logEntry) {
	                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
	              });
	            });
	          }

	          function clearErrors() {
	            getAndClearSevereErrors();
	          }

	          function expectNoErrors() {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              expect(filteredLog.length).toEqual(0);
	              if (filteredLog.length) {
	                console.log('browser console errors: ' + util.inspect(filteredLog));
	              }
	            });
	          }

	          function expectError(regex) {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              var found = false;
	              filteredLog.forEach(function(log) {
	                if (log.message.match(regex)) {
	                  found = true;
	                }
	              });
	              if (!found) {
	                throw new Error('expected an error that matches ' + regex);
	              }
	            });
	          }

	          beforeEach(function() {
	            util = require('util');
	            webdriver = require('protractor/node_modules/selenium-webdriver');
	          });

	          // For now, we only test on Chrome,
	          // as Safari does not load the page with Protractor's injected scripts,
	          // and Firefox webdriver always disables content security policy (#6358)
	          if (browser.params.browser !== 'chrome') {
	            return;
	          }

	          it('should not report errors when the page is loaded', function() {
	            // clear errors so we are not dependent on previous tests
	            clearErrors();
	            // Need to reload the page as the page is already loaded when
	            // we come here
	            browser.driver.getCurrentUrl().then(function(url) {
	              browser.get(url);
	            });
	            expectNoErrors();
	          });

	          it('should evaluate expressions', function() {
	            expect(counter.getText()).toEqual('0');
	            incBtn.click();
	            expect(counter.getText()).toEqual('1');
	            expectNoErrors();
	          });

	          it('should throw and report an error when using "eval"', function() {
	            evilBtn.click();
	            expect(evilError.getText()).toMatch(/Content Security Policy/);
	            expectError(/Content Security Policy/);
	          });
	        </file>
	      </example>
	  */
      // ngCsp is not implemented as a proper directive any more, because we need it be processed while we
      // bootstrap the system (before $parse is instantiated), for this reason we just have
      // the csp() fn that looks for the `ng-csp` attribute anywhere in the current doc
      /**
	 * @ngdoc directive
	 * @name ngClick
	 *
	 * @description
	 * The ngClick directive allows you to specify custom behavior when
	 * an element is clicked.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
	 * click. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-click="count = count + 1" ng-init="count=0">
	        Increment
	      </button>
	      <span>
	        count: {{count}}
	      </span>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-click', function() {
	         expect(element(by.binding('count')).getText()).toMatch('0');
	         element(by.css('button')).click();
	         expect(element(by.binding('count')).getText()).toMatch('1');
	       });
	     </file>
	   </example>
	 */
      /*
	 * A collection of directives that allows creation of custom event handlers that are defined as
	 * angular expressions and are compiled and executed within the current scope.
	 */
      var ngEventDirectives = {};
      // For events that might fire synchronously during DOM manipulation
      // we need to execute their event handlers asynchronously using $evalAsync,
      // so that they are not executed in an inconsistent state.
      var forceAsyncEvents = {
          'blur': true,
          'focus': true
        };
      forEach('click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '), function (eventName) {
        var directiveName = directiveNormalize('ng-' + eventName);
        ngEventDirectives[directiveName] = [
          '$parse',
          '$rootScope',
          function ($parse, $rootScope) {
            return {
              restrict: 'A',
              compile: function ($element, attr) {
                // We expose the powerful $event object on the scope that provides access to the Window,
                // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
                // checks at the cost of speed since event handler expressions are not executed as
                // frequently as regular change detection.
                var fn = $parse(attr[directiveName], null, true);
                return function ngEventHandler(scope, element) {
                  element.on(eventName, function (event) {
                    var callback = function () {
                      fn(scope, { $event: event });
                    };
                    if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
                      scope.$evalAsync(callback);
                    } else {
                      scope.$apply(callback);
                    }
                  });
                };
              }
            };
          }
        ];
      });
      /**
	 * @ngdoc directive
	 * @name ngDblclick
	 *
	 * @description
	 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
	 * a dblclick. (The Event object is available as `$event`)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-dblclick="count = count + 1" ng-init="count=0">
	        Increment (on double click)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
      /**
	 * @ngdoc directive
	 * @name ngMousedown
	 *
	 * @description
	 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
	 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mousedown="count = count + 1" ng-init="count=0">
	        Increment (on mouse down)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
      /**
	 * @ngdoc directive
	 * @name ngMouseup
	 *
	 * @description
	 * Specify custom behavior on mouseup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
	 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseup="count = count + 1" ng-init="count=0">
	        Increment (on mouse up)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
      /**
	 * @ngdoc directive
	 * @name ngMouseover
	 *
	 * @description
	 * Specify custom behavior on mouseover event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
	 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseover="count = count + 1" ng-init="count=0">
	        Increment (when mouse is over)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
      /**
	 * @ngdoc directive
	 * @name ngMouseenter
	 *
	 * @description
	 * Specify custom behavior on mouseenter event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
	 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseenter="count = count + 1" ng-init="count=0">
	        Increment (when mouse enters)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
      /**
	 * @ngdoc directive
	 * @name ngMouseleave
	 *
	 * @description
	 * Specify custom behavior on mouseleave event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
	 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseleave="count = count + 1" ng-init="count=0">
	        Increment (when mouse leaves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
      /**
	 * @ngdoc directive
	 * @name ngMousemove
	 *
	 * @description
	 * Specify custom behavior on mousemove event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
	 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mousemove="count = count + 1" ng-init="count=0">
	        Increment (when mouse moves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
      /**
	 * @ngdoc directive
	 * @name ngKeydown
	 *
	 * @description
	 * Specify custom behavior on keydown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
	 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-keydown="count = count + 1" ng-init="count=0">
	      key down count: {{count}}
	     </file>
	   </example>
	 */
      /**
	 * @ngdoc directive
	 * @name ngKeyup
	 *
	 * @description
	 * Specify custom behavior on keyup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
	 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <p>Typing in the input box below updates the key count</p>
	       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

	       <p>Typing in the input box below updates the keycode</p>
	       <input ng-keyup="event=$event">
	       <p>event keyCode: {{ event.keyCode }}</p>
	       <p>event altKey: {{ event.altKey }}</p>
	     </file>
	   </example>
	 */
      /**
	 * @ngdoc directive
	 * @name ngKeypress
	 *
	 * @description
	 * Specify custom behavior on keypress event.
	 *
	 * @element ANY
	 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
	 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
	 * and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-keypress="count = count + 1" ng-init="count=0">
	      key press count: {{count}}
	     </file>
	   </example>
	 */
      /**
	 * @ngdoc directive
	 * @name ngSubmit
	 *
	 * @description
	 * Enables binding angular expressions to onsubmit events.
	 *
	 * Additionally it prevents the default action (which for form means sending the request to the
	 * server and reloading the current page), but only if the form does not contain `action`,
	 * `data-action`, or `x-action` attributes.
	 *
	 * <div class="alert alert-warning">
	 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
	 * `ngSubmit` handlers together. See the
	 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
	 * for a detailed discussion of when `ngSubmit` may be triggered.
	 * </div>
	 *
	 * @element form
	 * @priority 0
	 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
	 * ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example module="submitExample">
	     <file name="index.html">
	      <script>
	        angular.module('submitExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.list = [];
	            $scope.text = 'hello';
	            $scope.submit = function() {
	              if ($scope.text) {
	                $scope.list.push(this.text);
	                $scope.text = '';
	              }
	            };
	          }]);
	      </script>
	      <form ng-submit="submit()" ng-controller="ExampleController">
	        Enter text and hit enter:
	        <input type="text" ng-model="text" name="text" />
	        <input type="submit" id="submit" value="Submit" />
	        <pre>list={{list}}</pre>
	      </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-submit', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	         expect(element(by.model('text')).getAttribute('value')).toBe('');
	       });
	       it('should ignore empty strings', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	        });
	     </file>
	   </example>
	 */
      /**
	 * @ngdoc directive
	 * @name ngFocus
	 *
	 * @description
	 * Specify custom behavior on focus event.
	 *
	 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
	 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */
      /**
	 * @ngdoc directive
	 * @name ngBlur
	 *
	 * @description
	 * Specify custom behavior on blur event.
	 *
	 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
	 * an element has lost focus.
	 *
	 * Note: As the `blur` event is executed synchronously also during DOM manipulations
	 * (e.g. removing a focussed input),
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
	 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */
      /**
	 * @ngdoc directive
	 * @name ngCopy
	 *
	 * @description
	 * Specify custom behavior on copy event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
	 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
	      copied: {{copied}}
	     </file>
	   </example>
	 */
      /**
	 * @ngdoc directive
	 * @name ngCut
	 *
	 * @description
	 * Specify custom behavior on cut event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
	 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
	      cut: {{cut}}
	     </file>
	   </example>
	 */
      /**
	 * @ngdoc directive
	 * @name ngPaste
	 *
	 * @description
	 * Specify custom behavior on paste event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
	 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
	      pasted: {{paste}}
	     </file>
	   </example>
	 */
      /**
	 * @ngdoc directive
	 * @name ngIf
	 * @restrict A
	 * @multiElement
	 *
	 * @description
	 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
	 * {expression}. If the expression assigned to `ngIf` evaluates to a false
	 * value then the element is removed from the DOM, otherwise a clone of the
	 * element is reinserted into the DOM.
	 *
	 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
	 * element in the DOM rather than changing its visibility via the `display` css property.  A common
	 * case when this difference is significant is when using css selectors that rely on an element's
	 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
	 *
	 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
	 * is created when the element is restored.  The scope created within `ngIf` inherits from
	 * its parent scope using
	 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
	 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
	 * a javascript primitive defined in the parent scope. In this case any modifications made to the
	 * variable within the child scope will override (hide) the value in the parent scope.
	 *
	 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
	 * is if an element's class attribute is directly modified after it's compiled, using something like
	 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
	 * the added class will be lost because the original compiled state is used to regenerate the element.
	 *
	 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
	 * and `leave` effects.
	 *
	 * @animations
	 * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
	 * leave - happens just before the `ngIf` contents are removed from the DOM
	 *
	 * @element ANY
	 * @scope
	 * @priority 600
	 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
	 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
	 *     element is added to the DOM tree.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
	      Show when checked:
	      <span ng-if="checked" class="animate-if">
	        This is removed when the checkbox is unchecked.
	      </span>
	    </file>
	    <file name="animations.css">
	      .animate-if {
	        background:white;
	        border:1px solid black;
	        padding:10px;
	      }

	      .animate-if.ng-enter, .animate-if.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	      }

	      .animate-if.ng-enter,
	      .animate-if.ng-leave.ng-leave-active {
	        opacity:0;
	      }

	      .animate-if.ng-leave,
	      .animate-if.ng-enter.ng-enter-active {
	        opacity:1;
	      }
	    </file>
	  </example>
	 */
      var ngIfDirective = [
          '$animate',
          function ($animate) {
            return {
              multiElement: true,
              transclude: 'element',
              priority: 600,
              terminal: true,
              restrict: 'A',
              $$tlb: true,
              link: function ($scope, $element, $attr, ctrl, $transclude) {
                var block, childScope, previousElements;
                $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {
                  if (value) {
                    if (!childScope) {
                      $transclude(function (clone, newScope) {
                        childScope = newScope;
                        clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
                        // Note: We only need the first/last node of the cloned nodes.
                        // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                        // by a directive with templateUrl when its template arrives.
                        block = { clone: clone };
                        $animate.enter(clone, $element.parent(), $element);
                      });
                    }
                  } else {
                    if (previousElements) {
                      previousElements.remove();
                      previousElements = null;
                    }
                    if (childScope) {
                      childScope.$destroy();
                      childScope = null;
                    }
                    if (block) {
                      previousElements = getBlockNodes(block.clone);
                      $animate.leave(previousElements).then(function () {
                        previousElements = null;
                      });
                      block = null;
                    }
                  }
                });
              }
            };
          }
        ];
      /**
	 * @ngdoc directive
	 * @name ngInclude
	 * @restrict ECA
	 *
	 * @description
	 * Fetches, compiles and includes an external HTML fragment.
	 *
	 * By default, the template URL is restricted to the same domain and protocol as the
	 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
	 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
	 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
	 * ng.$sce Strict Contextual Escaping}.
	 *
	 * In addition, the browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy may further restrict whether the template is successfully loaded.
	 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
	 * access on some browsers.
	 *
	 * @animations
	 * enter - animation is used to bring new content into the browser.
	 * leave - animation is used to animate existing content away.
	 *
	 * The enter and leave animation occur concurrently.
	 *
	 * @scope
	 * @priority 400
	 *
	 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
	 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
	 * @param {string=} onload Expression to evaluate when a new partial is loaded.
	 *
	 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
	 *                  $anchorScroll} to scroll the viewport after the content is loaded.
	 *
	 *                  - If the attribute is not set, disable scrolling.
	 *                  - If the attribute is set without value, enable scrolling.
	 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
	 *
	 * @example
	  <example module="includeExample" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	     <div ng-controller="ExampleController">
	       <select ng-model="template" ng-options="t.name for t in templates">
	        <option value="">(blank)</option>
	       </select>
	       url of the template: <code>{{template.url}}</code>
	       <hr/>
	       <div class="slide-animate-container">
	         <div class="slide-animate" ng-include="template.url"></div>
	       </div>
	     </div>
	    </file>
	    <file name="script.js">
	      angular.module('includeExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.templates =
	            [ { name: 'template1.html', url: 'template1.html'},
	              { name: 'template2.html', url: 'template2.html'} ];
	          $scope.template = $scope.templates[0];
	        }]);
	     </file>
	    <file name="template1.html">
	      Content of template1.html
	    </file>
	    <file name="template2.html">
	      Content of template2.html
	    </file>
	    <file name="animations.css">
	      .slide-animate-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }

	      .slide-animate {
	        padding:10px;
	      }

	      .slide-animate.ng-enter, .slide-animate.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	        display:block;
	        padding:10px;
	      }

	      .slide-animate.ng-enter {
	        top:-50px;
	      }
	      .slide-animate.ng-enter.ng-enter-active {
	        top:0;
	      }

	      .slide-animate.ng-leave {
	        top:0;
	      }
	      .slide-animate.ng-leave.ng-leave-active {
	        top:50px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var templateSelect = element(by.model('template'));
	      var includeElem = element(by.css('[ng-include]'));

	      it('should load template1.html', function() {
	        expect(includeElem.getText()).toMatch(/Content of template1.html/);
	      });

	      it('should load template2.html', function() {
	        if (browser.params.browser == 'firefox') {
	          // Firefox can't handle using selects
	          // See https://github.com/angular/protractor/issues/480
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(2).click();
	        expect(includeElem.getText()).toMatch(/Content of template2.html/);
	      });

	      it('should change to blank', function() {
	        if (browser.params.browser == 'firefox') {
	          // Firefox can't handle using selects
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(0).click();
	        expect(includeElem.isPresent()).toBe(false);
	      });
	    </file>
	  </example>
	 */
      /**
	 * @ngdoc event
	 * @name ngInclude#$includeContentRequested
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted every time the ngInclude content is requested.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
      /**
	 * @ngdoc event
	 * @name ngInclude#$includeContentLoaded
	 * @eventType emit on the current ngInclude scope
	 * @description
	 * Emitted every time the ngInclude content is reloaded.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
      /**
	 * @ngdoc event
	 * @name ngInclude#$includeContentError
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
      var ngIncludeDirective = [
          '$templateRequest',
          '$anchorScroll',
          '$animate',
          function ($templateRequest, $anchorScroll, $animate) {
            return {
              restrict: 'ECA',
              priority: 400,
              terminal: true,
              transclude: 'element',
              controller: angular.noop,
              compile: function (element, attr) {
                var srcExp = attr.ngInclude || attr.src, onloadExp = attr.onload || '', autoScrollExp = attr.autoscroll;
                return function (scope, $element, $attr, ctrl, $transclude) {
                  var changeCounter = 0, currentScope, previousElement, currentElement;
                  var cleanupLastIncludeContent = function () {
                    if (previousElement) {
                      previousElement.remove();
                      previousElement = null;
                    }
                    if (currentScope) {
                      currentScope.$destroy();
                      currentScope = null;
                    }
                    if (currentElement) {
                      $animate.leave(currentElement).then(function () {
                        previousElement = null;
                      });
                      previousElement = currentElement;
                      currentElement = null;
                    }
                  };
                  scope.$watch(srcExp, function ngIncludeWatchAction(src) {
                    var afterAnimation = function () {
                      if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                        $anchorScroll();
                      }
                    };
                    var thisChangeId = ++changeCounter;
                    if (src) {
                      //set the 2nd param to true to ignore the template request error so that the inner
                      //contents and scope can be cleaned up.
                      $templateRequest(src, true).then(function (response) {
                        if (thisChangeId !== changeCounter)
                          return;
                        var newScope = scope.$new();
                        ctrl.template = response;
                        // Note: This will also link all children of ng-include that were contained in the original
                        // html. If that content contains controllers, ... they could pollute/change the scope.
                        // However, using ng-include on an element with additional content does not make sense...
                        // Note: We can't remove them in the cloneAttchFn of $transclude as that
                        // function is called before linking the content, which would apply child
                        // directives to non existing elements.
                        var clone = $transclude(newScope, function (clone) {
                            cleanupLastIncludeContent();
                            $animate.enter(clone, null, $element).then(afterAnimation);
                          });
                        currentScope = newScope;
                        currentElement = clone;
                        currentScope.$emit('$includeContentLoaded', src);
                        scope.$eval(onloadExp);
                      }, function () {
                        if (thisChangeId === changeCounter) {
                          cleanupLastIncludeContent();
                          scope.$emit('$includeContentError', src);
                        }
                      });
                      scope.$emit('$includeContentRequested', src);
                    } else {
                      cleanupLastIncludeContent();
                      ctrl.template = null;
                    }
                  });
                };
              }
            };
          }
        ];
      // This directive is called during the $transclude call of the first `ngInclude` directive.
      // It will replace and compile the content of the element with the loaded template.
      // We need this directive so that the element content is already filled when
      // the link function of another directive on the same element as ngInclude
      // is called.
      var ngIncludeFillContentDirective = [
          '$compile',
          function ($compile) {
            return {
              restrict: 'ECA',
              priority: -400,
              require: 'ngInclude',
              link: function (scope, $element, $attr, ctrl) {
                if (/SVG/.test($element[0].toString())) {
                  // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
                  // support innerHTML, so detect this here and try to generate the contents
                  // specially.
                  $element.empty();
                  $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope, function namespaceAdaptedClone(clone) {
                    $element.append(clone);
                  }, { futureParentElement: $element });
                  return;
                }
                $element.html(ctrl.template);
                $compile($element.contents())(scope);
              }
            };
          }
        ];
      /**
	 * @ngdoc directive
	 * @name ngInit
	 * @restrict AC
	 *
	 * @description
	 * The `ngInit` directive allows you to evaluate an expression in the
	 * current scope.
	 *
	 * <div class="alert alert-danger">
	 * This directive can be abused to add unnecessary amounts of logic into your templates.
	 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of
	 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via
	 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}
	 * rather than `ngInit` to initialize values on a scope.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make
	 * sure you have parentheses to ensure correct operator precedence:
	 * <pre class="prettyprint">
	 * `<div ng-init="test1 = ($index | toString)"></div>`
	 * </pre>
	 * </div>
	 *
	 * @priority 450
	 *
	 * @element ANY
	 * @param {expression} ngInit {@link guide/expression Expression} to eval.
	 *
	 * @example
	   <example module="initExample">
	     <file name="index.html">
	   <script>
	     angular.module('initExample', [])
	       .controller('ExampleController', ['$scope', function($scope) {
	         $scope.list = [['a', 'b'], ['c', 'd']];
	       }]);
	   </script>
	   <div ng-controller="ExampleController">
	     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
	       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
	          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
	       </div>
	     </div>
	   </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should alias index positions', function() {
	         var elements = element.all(by.css('.example-init'));
	         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
	         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
	         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
	         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
	       });
	     </file>
	   </example>
	 */
      var ngInitDirective = ngDirective({
          priority: 450,
          compile: function () {
            return {
              pre: function (scope, element, attrs) {
                scope.$eval(attrs.ngInit);
              }
            };
          }
        });
      /**
	 * @ngdoc directive
	 * @name ngList
	 *
	 * @description
	 * Text input that converts between a delimited string and an array of strings. The default
	 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
	 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
	 *
	 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
	 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
	 *   list item is respected. This implies that the user of the directive is responsible for
	 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
	 *   tab or newline character.
	 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
	 *   when joining the list items back together) and whitespace around each list item is stripped
	 *   before it is added to the model.
	 *
	 * ### Example with Validation
	 *
	 * <example name="ngList-directive" module="listExample">
	 *   <file name="app.js">
	 *      angular.module('listExample', [])
	 *        .controller('ExampleController', ['$scope', function($scope) {
	 *          $scope.names = ['morpheus', 'neo', 'trinity'];
	 *        }]);
	 *   </file>
	 *   <file name="index.html">
	 *    <form name="myForm" ng-controller="ExampleController">
	 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
	 *      <span role="alert">
	 *        <span class="error" ng-show="myForm.namesInput.$error.required">
	 *        Required!</span>
	 *      </span>
	 *      <br>
	 *      <tt>names = {{names}}</tt><br/>
	 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
	 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
	 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	 *     </form>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var listInput = element(by.model('names'));
	 *     var names = element(by.exactBinding('names'));
	 *     var valid = element(by.binding('myForm.namesInput.$valid'));
	 *     var error = element(by.css('span.error'));
	 *
	 *     it('should initialize to model', function() {
	 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
	 *       expect(valid.getText()).toContain('true');
	 *       expect(error.getCssValue('display')).toBe('none');
	 *     });
	 *
	 *     it('should be invalid if empty', function() {
	 *       listInput.clear();
	 *       listInput.sendKeys('');
	 *
	 *       expect(names.getText()).toContain('');
	 *       expect(valid.getText()).toContain('false');
	 *       expect(error.getCssValue('display')).not.toBe('none');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * ### Example - splitting on newline
	 * <example name="ngList-directive-newlines">
	 *   <file name="index.html">
	 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
	 *    <pre>{{ list | json }}</pre>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it("should split the text by newlines", function() {
	 *       var listInput = element(by.model('list'));
	 *       var output = element(by.binding('list | json'));
	 *       listInput.sendKeys('abc\ndef\nghi');
	 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * @element input
	 * @param {string=} ngList optional delimiter that should be used to split the value.
	 */
      var ngListDirective = function () {
        return {
          restrict: 'A',
          priority: 100,
          require: 'ngModel',
          link: function (scope, element, attr, ctrl) {
            // We want to control whitespace trimming so we use this convoluted approach
            // to access the ngList attribute, which doesn't pre-trim the attribute
            var ngList = element.attr(attr.$attr.ngList) || ', ';
            var trimValues = attr.ngTrim !== 'false';
            var separator = trimValues ? trim(ngList) : ngList;
            var parse = function (viewValue) {
              // If the viewValue is invalid (say required but empty) it will be `undefined`
              if (isUndefined(viewValue))
                return;
              var list = [];
              if (viewValue) {
                forEach(viewValue.split(separator), function (value) {
                  if (value)
                    list.push(trimValues ? trim(value) : value);
                });
              }
              return list;
            };
            ctrl.$parsers.push(parse);
            ctrl.$formatters.push(function (value) {
              if (isArray(value)) {
                return value.join(ngList);
              }
              return undefined;
            });
            // Override the standard $isEmpty because an empty array means the input is empty.
            ctrl.$isEmpty = function (value) {
              return !value || !value.length;
            };
          }
        };
      };
      /* global VALID_CLASS: true,
	  INVALID_CLASS: true,
	  PRISTINE_CLASS: true,
	  DIRTY_CLASS: true,
	  UNTOUCHED_CLASS: true,
	  TOUCHED_CLASS: true,
	*/
      var VALID_CLASS = 'ng-valid', INVALID_CLASS = 'ng-invalid', PRISTINE_CLASS = 'ng-pristine', DIRTY_CLASS = 'ng-dirty', UNTOUCHED_CLASS = 'ng-untouched', TOUCHED_CLASS = 'ng-touched', PENDING_CLASS = 'ng-pending';
      var ngModelMinErr = minErr('ngModel');
      /**
	 * @ngdoc type
	 * @name ngModel.NgModelController
	 *
	 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a
	 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue
	 * is set.
	 * @property {*} $modelValue The value in the model that the control is bound to.
	 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
	       the control reads value from the DOM. The functions are called in array order, each passing
	       its return value through to the next. The last return value is forwarded to the
	       {@link ngModel.NgModelController#$validators `$validators`} collection.

	Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
	`$viewValue`}.

	Returning `undefined` from a parser means a parse error occurred. In that case,
	no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
	will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
	is set to `true`. The parse error is stored in `ngModel.$error.parse`.

	 *
	 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
	       the model value changes. The functions are called in reverse array order, each passing the value through to the
	       next. The last return value is used as the actual DOM value.
	       Used to format / convert values for display in the control.
	 * ```js
	 * function formatter(value) {
	 *   if (value) {
	 *     return value.toUpperCase();
	 *   }
	 * }
	 * ngModel.$formatters.push(formatter);
	 * ```
	 *
	 * @property {Object.<string, function>} $validators A collection of validators that are applied
	 *      whenever the model value changes. The key value within the object refers to the name of the
	 *      validator while the function refers to the validation operation. The validation operation is
	 *      provided with the model value as an argument and must return a true or false value depending
	 *      on the response of that validation.
	 *
	 * ```js
	 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *   return /[0-9]+/.test(value) &&
	 *          /[a-z]+/.test(value) &&
	 *          /[A-Z]+/.test(value) &&
	 *          /\W+/.test(value);
	 * };
	 * ```
	 *
	 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
	 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
	 *      is expected to return a promise when it is run during the model validation process. Once the promise
	 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
	 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
	 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
	 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
	 *      will only run once all synchronous validators have passed.
	 *
	 * Please note that if $http is used then it is important that the server returns a success HTTP response code
	 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
	 *
	 * ```js
	 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *
	 *   // Lookup user by username
	 *   return $http.get('/api/users/' + value).
	 *      then(function resolved() {
	 *        //username exists, this means validation fails
	 *        return $q.reject('exists');
	 *      }, function rejected() {
	 *        //username does not exist, therefore this validation passes
	 *        return true;
	 *      });
	 * };
	 * ```
	 *
	 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
	 *     view value has changed. It is called with no arguments, and its return value is ignored.
	 *     This can be used in place of additional $watches against the model value.
	 *
	 * @property {Object} $error An object hash with all failing validator ids as keys.
	 * @property {Object} $pending An object hash with all pending validator ids as keys.
	 *
	 * @property {boolean} $untouched True if control has not lost focus yet.
	 * @property {boolean} $touched True if control has lost focus.
	 * @property {boolean} $pristine True if user has not interacted with the control yet.
	 * @property {boolean} $dirty True if user has already interacted with the control.
	 * @property {boolean} $valid True if there is no error.
	 * @property {boolean} $invalid True if at least one error on the control.
	 * @property {string} $name The name attribute of the control.
	 *
	 * @description
	 *
	 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
	 * The controller contains services for data-binding, validation, CSS updates, and value formatting
	 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
	 * listening to DOM events.
	 * Such DOM related logic should be provided by other directives which make use of
	 * `NgModelController` for data-binding to control elements.
	 * Angular provides this DOM logic for most {@link input `input`} elements.
	 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
	 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
	 *
	 * @example
	 * ### Custom Control Example
	 * This example shows how to use `NgModelController` with a custom control to achieve
	 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
	 * collaborate together to achieve the desired result.
	 *
	 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
	 * contents be edited in place by the user.
	 *
	 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
	 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
	 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
	 * that content using the `$sce` service.
	 *
	 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
	    <file name="style.css">
	      [contenteditable] {
	        border: 1px solid black;
	        background-color: white;
	        min-height: 20px;
	      }

	      .ng-invalid {
	        border: 1px solid red;
	      }

	    </file>
	    <file name="script.js">
	      angular.module('customControl', ['ngSanitize']).
	        directive('contenteditable', ['$sce', function($sce) {
	          return {
	            restrict: 'A', // only activate on element attribute
	            require: '?ngModel', // get a hold of NgModelController
	            link: function(scope, element, attrs, ngModel) {
	              if (!ngModel) return; // do nothing if no ng-model

	              // Specify how UI should be updated
	              ngModel.$render = function() {
	                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
	              };

	              // Listen for change events to enable binding
	              element.on('blur keyup change', function() {
	                scope.$evalAsync(read);
	              });
	              read(); // initialize

	              // Write data to the model
	              function read() {
	                var html = element.html();
	                // When we clear the content editable the browser leaves a <br> behind
	                // If strip-br attribute is provided then we strip this out
	                if ( attrs.stripBr && html == '<br>' ) {
	                  html = '';
	                }
	                ngModel.$setViewValue(html);
	              }
	            }
	          };
	        }]);
	    </file>
	    <file name="index.html">
	      <form name="myForm">
	       <div contenteditable
	            name="myWidget" ng-model="userContent"
	            strip-br="true"
	            required>Change me!</div>
	        <span ng-show="myForm.myWidget.$error.required">Required!</span>
	       <hr>
	       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	    it('should data-bind and become invalid', function() {
	      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
	        // SafariDriver can't handle contenteditable
	        // and Firefox driver can't clear contenteditables very well
	        return;
	      }
	      var contentEditable = element(by.css('[contenteditable]'));
	      var content = 'Change me!';

	      expect(contentEditable.getText()).toEqual(content);

	      contentEditable.clear();
	      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
	      expect(contentEditable.getText()).toEqual('');
	      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
	    });
	    </file>
	 * </example>
	 *
	 *
	 */
      var NgModelController = [
          '$scope',
          '$exceptionHandler',
          '$attrs',
          '$element',
          '$parse',
          '$animate',
          '$timeout',
          '$rootScope',
          '$q',
          '$interpolate',
          function ($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
            this.$viewValue = Number.NaN;
            this.$modelValue = Number.NaN;
            this.$$rawModelValue = undefined;
            // stores the parsed modelValue / model set from scope regardless of validity.
            this.$validators = {};
            this.$asyncValidators = {};
            this.$parsers = [];
            this.$formatters = [];
            this.$viewChangeListeners = [];
            this.$untouched = true;
            this.$touched = false;
            this.$pristine = true;
            this.$dirty = false;
            this.$valid = true;
            this.$invalid = false;
            this.$error = {};
            // keep invalid keys here
            this.$$success = {};
            // keep valid keys here
            this.$pending = undefined;
            // keep pending keys here
            this.$name = $interpolate($attr.name || '', false)($scope);
            this.$$parentForm = nullFormCtrl;
            var parsedNgModel = $parse($attr.ngModel), parsedNgModelAssign = parsedNgModel.assign, ngModelGet = parsedNgModel, ngModelSet = parsedNgModelAssign, pendingDebounce = null, parserValid, ctrl = this;
            this.$$setOptions = function (options) {
              ctrl.$options = options;
              if (options && options.getterSetter) {
                var invokeModelGetter = $parse($attr.ngModel + '()'), invokeModelSetter = $parse($attr.ngModel + '($$$p)');
                ngModelGet = function ($scope) {
                  var modelValue = parsedNgModel($scope);
                  if (isFunction(modelValue)) {
                    modelValue = invokeModelGetter($scope);
                  }
                  return modelValue;
                };
                ngModelSet = function ($scope, newValue) {
                  if (isFunction(parsedNgModel($scope))) {
                    invokeModelSetter($scope, { $$$p: ctrl.$modelValue });
                  } else {
                    parsedNgModelAssign($scope, ctrl.$modelValue);
                  }
                };
              } else if (!parsedNgModel.assign) {
                throw ngModelMinErr('nonassign', 'Expression \'{0}\' is non-assignable. Element: {1}', $attr.ngModel, startingTag($element));
              }
            };
            /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$render
	   *
	   * @description
	   * Called when the view needs to be updated. It is expected that the user of the ng-model
	   * directive will implement this method.
	   *
	   * The `$render()` method is invoked in the following situations:
	   *
	   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
	   *   committed value then `$render()` is called to update the input control.
	   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
	   *   the `$viewValue` are different from last time.
	   *
	   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
	   * `$modelValue` and `$viewValue` are actually different from their previous value. If `$modelValue`
	   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
	   * invoked if you only change a property on the objects.
	   */
            this.$render = noop;
            /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$isEmpty
	   *
	   * @description
	   * This is called when we need to determine if the value of an input is empty.
	   *
	   * For instance, the required directive does this to work out if the input has data or not.
	   *
	   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
	   *
	   * You can override this for input directives whose concept of being empty is different from the
	   * default. The `checkboxInputType` directive does this because in its case a value of `false`
	   * implies empty.
	   *
	   * @param {*} value The value of the input to check for emptiness.
	   * @returns {boolean} True if `value` is "empty".
	   */
            this.$isEmpty = function (value) {
              return isUndefined(value) || value === '' || value === null || value !== value;
            };
            var currentValidationRunId = 0;
            /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setValidity
	   *
	   * @description
	   * Change the validity state, and notify the form.
	   *
	   * This method can be called within $parsers/$formatters or a custom validation implementation.
	   * However, in most cases it should be sufficient to use the `ngModel.$validators` and
	   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
	   *
	   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
	   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
	   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
	   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
	   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
	   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
	   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
	   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
	   *                          Skipped is used by Angular when validators do not run because of parse errors and
	   *                          when `$asyncValidators` do not run because any of the `$validators` failed.
	   */
            addSetValidityMethod({
              ctrl: this,
              $element: $element,
              set: function (object, property) {
                object[property] = true;
              },
              unset: function (object, property) {
                delete object[property];
              },
              $animate: $animate
            });
            /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setPristine
	   *
	   * @description
	   * Sets the control to its pristine state.
	   *
	   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
	   * state (`ng-pristine` class). A model is considered to be pristine when the control
	   * has not been changed from when first compiled.
	   */
            this.$setPristine = function () {
              ctrl.$dirty = false;
              ctrl.$pristine = true;
              $animate.removeClass($element, DIRTY_CLASS);
              $animate.addClass($element, PRISTINE_CLASS);
            };
            /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setDirty
	   *
	   * @description
	   * Sets the control to its dirty state.
	   *
	   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
	   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
	   * from when first compiled.
	   */
            this.$setDirty = function () {
              ctrl.$dirty = true;
              ctrl.$pristine = false;
              $animate.removeClass($element, PRISTINE_CLASS);
              $animate.addClass($element, DIRTY_CLASS);
              ctrl.$$parentForm.$setDirty();
            };
            /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setUntouched
	   *
	   * @description
	   * Sets the control to its untouched state.
	   *
	   * This method can be called to remove the `ng-touched` class and set the control to its
	   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
	   * by default, however this function can be used to restore that state if the model has
	   * already been touched by the user.
	   */
            this.$setUntouched = function () {
              ctrl.$touched = false;
              ctrl.$untouched = true;
              $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);
            };
            /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setTouched
	   *
	   * @description
	   * Sets the control to its touched state.
	   *
	   * This method can be called to remove the `ng-untouched` class and set the control to its
	   * touched state (`ng-touched` class). A model is considered to be touched when the user has
	   * first focused the control element and then shifted focus away from the control (blur event).
	   */
            this.$setTouched = function () {
              ctrl.$touched = true;
              ctrl.$untouched = false;
              $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);
            };
            /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$rollbackViewValue
	   *
	   * @description
	   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
	   * which may be caused by a pending debounced event or because the input is waiting for a some
	   * future event.
	   *
	   * If you have an input that uses `ng-model-options` to set up debounced events or events such
	   * as blur you can have a situation where there is a period when the `$viewValue`
	   * is out of synch with the ngModel's `$modelValue`.
	   *
	   * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`
	   * programmatically before these debounced/future events have resolved/occurred, because Angular's
	   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
	   *
	   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
	   * input which may have such events pending. This is important in order to make sure that the
	   * input field will be updated with the new model value and any pending operations are cancelled.
	   *
	   * <example name="ng-model-cancel-update" module="cancel-update-example">
	   *   <file name="app.js">
	   *     angular.module('cancel-update-example', [])
	   *
	   *     .controller('CancelUpdateController', ['$scope', function($scope) {
	   *       $scope.resetWithCancel = function(e) {
	   *         if (e.keyCode == 27) {
	   *           $scope.myForm.myInput1.$rollbackViewValue();
	   *           $scope.myValue = '';
	   *         }
	   *       };
	   *       $scope.resetWithoutCancel = function(e) {
	   *         if (e.keyCode == 27) {
	   *           $scope.myValue = '';
	   *         }
	   *       };
	   *     }]);
	   *   </file>
	   *   <file name="index.html">
	   *     <div ng-controller="CancelUpdateController">
	   *       <p>Try typing something in each input.  See that the model only updates when you
	   *          blur off the input.
	   *        </p>
	   *        <p>Now see what happens if you start typing then press the Escape key</p>
	   *
	   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
	   *         <p id="inputDescription1">With $rollbackViewValue()</p>
	   *         <input name="myInput1" aria-describedby="inputDescription1" ng-model="myValue"
	   *                ng-keydown="resetWithCancel($event)"><br/>
	   *         myValue: "{{ myValue }}"
	   *
	   *         <p id="inputDescription2">Without $rollbackViewValue()</p>
	   *         <input name="myInput2" aria-describedby="inputDescription2" ng-model="myValue"
	   *                ng-keydown="resetWithoutCancel($event)"><br/>
	   *         myValue: "{{ myValue }}"
	   *       </form>
	   *     </div>
	   *   </file>
	   * </example>
	   */
            this.$rollbackViewValue = function () {
              $timeout.cancel(pendingDebounce);
              ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
              ctrl.$render();
            };
            /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$validate
	   *
	   * @description
	   * Runs each of the registered validators (first synchronous validators and then
	   * asynchronous validators).
	   * If the validity changes to invalid, the model will be set to `undefined`,
	   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
	   * If the validity changes to valid, it will set the model to the last available valid
	   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
	   */
            this.$validate = function () {
              // ignore $validate before model is initialized
              if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
                return;
              }
              var viewValue = ctrl.$$lastCommittedViewValue;
              // Note: we use the $$rawModelValue as $modelValue might have been
              // set to undefined during a view -> model update that found validation
              // errors. We can't parse the view here, since that could change
              // the model although neither viewValue nor the model on the scope changed
              var modelValue = ctrl.$$rawModelValue;
              var prevValid = ctrl.$valid;
              var prevModelValue = ctrl.$modelValue;
              var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
              ctrl.$$runValidators(modelValue, viewValue, function (allValid) {
                // If there was no change in validity, don't update the model
                // This prevents changing an invalid modelValue to undefined
                if (!allowInvalid && prevValid !== allValid) {
                  // Note: Don't check ctrl.$valid here, as we could have
                  // external validators (e.g. calculated on the server),
                  // that just call $setValidity and need the model value
                  // to calculate their validity.
                  ctrl.$modelValue = allValid ? modelValue : undefined;
                  if (ctrl.$modelValue !== prevModelValue) {
                    ctrl.$$writeModelToScope();
                  }
                }
              });
            };
            this.$$runValidators = function (modelValue, viewValue, doneCallback) {
              currentValidationRunId++;
              var localValidationRunId = currentValidationRunId;
              // check parser error
              if (!processParseErrors()) {
                validationDone(false);
                return;
              }
              if (!processSyncValidators()) {
                validationDone(false);
                return;
              }
              processAsyncValidators();
              function processParseErrors() {
                var errorKey = ctrl.$$parserName || 'parse';
                if (isUndefined(parserValid)) {
                  setValidity(errorKey, null);
                } else {
                  if (!parserValid) {
                    forEach(ctrl.$validators, function (v, name) {
                      setValidity(name, null);
                    });
                    forEach(ctrl.$asyncValidators, function (v, name) {
                      setValidity(name, null);
                    });
                  }
                  // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
                  setValidity(errorKey, parserValid);
                  return parserValid;
                }
                return true;
              }
              function processSyncValidators() {
                var syncValidatorsValid = true;
                forEach(ctrl.$validators, function (validator, name) {
                  var result = validator(modelValue, viewValue);
                  syncValidatorsValid = syncValidatorsValid && result;
                  setValidity(name, result);
                });
                if (!syncValidatorsValid) {
                  forEach(ctrl.$asyncValidators, function (v, name) {
                    setValidity(name, null);
                  });
                  return false;
                }
                return true;
              }
              function processAsyncValidators() {
                var validatorPromises = [];
                var allValid = true;
                forEach(ctrl.$asyncValidators, function (validator, name) {
                  var promise = validator(modelValue, viewValue);
                  if (!isPromiseLike(promise)) {
                    throw ngModelMinErr('$asyncValidators', 'Expected asynchronous validator to return a promise but got \'{0}\' instead.', promise);
                  }
                  setValidity(name, undefined);
                  validatorPromises.push(promise.then(function () {
                    setValidity(name, true);
                  }, function (error) {
                    allValid = false;
                    setValidity(name, false);
                  }));
                });
                if (!validatorPromises.length) {
                  validationDone(true);
                } else {
                  $q.all(validatorPromises).then(function () {
                    validationDone(allValid);
                  }, noop);
                }
              }
              function setValidity(name, isValid) {
                if (localValidationRunId === currentValidationRunId) {
                  ctrl.$setValidity(name, isValid);
                }
              }
              function validationDone(allValid) {
                if (localValidationRunId === currentValidationRunId) {
                  doneCallback(allValid);
                }
              }
            };
            /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$commitViewValue
	   *
	   * @description
	   * Commit a pending update to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
            this.$commitViewValue = function () {
              var viewValue = ctrl.$viewValue;
              $timeout.cancel(pendingDebounce);
              // If the view value has not changed then we should just exit, except in the case where there is
              // a native validator on the element. In this case the validation state may have changed even though
              // the viewValue has stayed empty.
              if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {
                return;
              }
              ctrl.$$lastCommittedViewValue = viewValue;
              // change to dirty
              if (ctrl.$pristine) {
                this.$setDirty();
              }
              this.$$parseAndValidate();
            };
            this.$$parseAndValidate = function () {
              var viewValue = ctrl.$$lastCommittedViewValue;
              var modelValue = viewValue;
              parserValid = isUndefined(modelValue) ? undefined : true;
              if (parserValid) {
                for (var i = 0; i < ctrl.$parsers.length; i++) {
                  modelValue = ctrl.$parsers[i](modelValue);
                  if (isUndefined(modelValue)) {
                    parserValid = false;
                    break;
                  }
                }
              }
              if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
                // ctrl.$modelValue has not been touched yet...
                ctrl.$modelValue = ngModelGet($scope);
              }
              var prevModelValue = ctrl.$modelValue;
              var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
              ctrl.$$rawModelValue = modelValue;
              if (allowInvalid) {
                ctrl.$modelValue = modelValue;
                writeToModelIfNeeded();
              }
              // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
              // This can happen if e.g. $setViewValue is called from inside a parser
              ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function (allValid) {
                if (!allowInvalid) {
                  // Note: Don't check ctrl.$valid here, as we could have
                  // external validators (e.g. calculated on the server),
                  // that just call $setValidity and need the model value
                  // to calculate their validity.
                  ctrl.$modelValue = allValid ? modelValue : undefined;
                  writeToModelIfNeeded();
                }
              });
              function writeToModelIfNeeded() {
                if (ctrl.$modelValue !== prevModelValue) {
                  ctrl.$$writeModelToScope();
                }
              }
            };
            this.$$writeModelToScope = function () {
              ngModelSet($scope, ctrl.$modelValue);
              forEach(ctrl.$viewChangeListeners, function (listener) {
                try {
                  listener();
                } catch (e) {
                  $exceptionHandler(e);
                }
              });
            };
            /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setViewValue
	   *
	   * @description
	   * Update the view value.
	   *
	   * This method should be called when a control wants to change the view value; typically,
	   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
	   * directive calls it when the value of the input changes and {@link ng.directive:select select}
	   * calls it when an option is selected.
	   *
	   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
	   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
	   * value sent directly for processing, finally to be applied to `$modelValue` and then the
	   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,
	   * in the `$viewChangeListeners` list, are called.
	   *
	   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
	   * and the `default` trigger is not listed, all those actions will remain pending until one of the
	   * `updateOn` events is triggered on the DOM element.
	   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
	   * directive is used with a custom debounce for this particular event.
	   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
	   * is specified, once the timer runs out.
	   *
	   * When used with standard inputs, the view value will always be a string (which is in some cases
	   * parsed into another type, such as a `Date` object for `input[date]`.)
	   * However, custom controls might also pass objects to this method. In this case, we should make
	   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
	   * perform a deep watch of objects, it only looks for a change of identity. If you only change
	   * the property of the object then ngModel will not realise that the object has changed and
	   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
	   * not change properties of the copy once it has been passed to `$setViewValue`.
	   * Otherwise you may cause the model value on the scope to change incorrectly.
	   *
	   * <div class="alert alert-info">
	   * In any case, the value passed to the method should always reflect the current value
	   * of the control. For example, if you are calling `$setViewValue` for an input element,
	   * you should pass the input DOM value. Otherwise, the control and the scope model become
	   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
	   * the control's DOM value in any way. If we want to change the control's DOM value
	   * programmatically, we should update the `ngModel` scope expression. Its new value will be
	   * picked up by the model controller, which will run it through the `$formatters`, `$render` it
	   * to update the DOM, and finally call `$validate` on it.
	   * </div>
	   *
	   * @param {*} value value from the view.
	   * @param {string} trigger Event that triggered the update.
	   */
            this.$setViewValue = function (value, trigger) {
              ctrl.$viewValue = value;
              if (!ctrl.$options || ctrl.$options.updateOnDefault) {
                ctrl.$$debounceViewValueCommit(trigger);
              }
            };
            this.$$debounceViewValueCommit = function (trigger) {
              var debounceDelay = 0, options = ctrl.$options, debounce;
              if (options && isDefined(options.debounce)) {
                debounce = options.debounce;
                if (isNumber(debounce)) {
                  debounceDelay = debounce;
                } else if (isNumber(debounce[trigger])) {
                  debounceDelay = debounce[trigger];
                } else if (isNumber(debounce['default'])) {
                  debounceDelay = debounce['default'];
                }
              }
              $timeout.cancel(pendingDebounce);
              if (debounceDelay) {
                pendingDebounce = $timeout(function () {
                  ctrl.$commitViewValue();
                }, debounceDelay);
              } else if ($rootScope.$$phase) {
                ctrl.$commitViewValue();
              } else {
                $scope.$apply(function () {
                  ctrl.$commitViewValue();
                });
              }
            };
            // model -> value
            // Note: we cannot use a normal scope.$watch as we want to detect the following:
            // 1. scope value is 'a'
            // 2. user enters 'b'
            // 3. ng-change kicks in and reverts scope value to 'a'
            //    -> scope value did not change since the last digest as
            //       ng-change executes in apply phase
            // 4. view should be changed back to 'a'
            $scope.$watch(function ngModelWatch() {
              var modelValue = ngModelGet($scope);
              // if scope model value and ngModel value are out of sync
              // TODO(perf): why not move this to the action fn?
              if (modelValue !== ctrl.$modelValue && (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)) {
                ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
                parserValid = undefined;
                var formatters = ctrl.$formatters, idx = formatters.length;
                var viewValue = modelValue;
                while (idx--) {
                  viewValue = formatters[idx](viewValue);
                }
                if (ctrl.$viewValue !== viewValue) {
                  ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
                  ctrl.$render();
                  ctrl.$$runValidators(modelValue, viewValue, noop);
                }
              }
              return modelValue;
            });
          }
        ];
      /**
	 * @ngdoc directive
	 * @name ngModel
	 *
	 * @element input
	 * @priority 1
	 *
	 * @description
	 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
	 * property on the scope using {@link ngModel.NgModelController NgModelController},
	 * which is created and exposed by this directive.
	 *
	 * `ngModel` is responsible for:
	 *
	 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
	 *   require.
	 * - Providing validation behavior (i.e. required, number, email, url).
	 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
	 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.
	 * - Registering the control with its parent {@link ng.directive:form form}.
	 *
	 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
	 * current scope. If the property doesn't already exist on this scope, it will be created
	 * implicitly and added to the scope.
	 *
	 * For best practices on using `ngModel`, see:
	 *
	 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
	 *
	 * For basic examples, how to use `ngModel`, see:
	 *
	 *  - {@link ng.directive:input input}
	 *    - {@link input[text] text}
	 *    - {@link input[checkbox] checkbox}
	 *    - {@link input[radio] radio}
	 *    - {@link input[number] number}
	 *    - {@link input[email] email}
	 *    - {@link input[url] url}
	 *    - {@link input[date] date}
	 *    - {@link input[datetime-local] datetime-local}
	 *    - {@link input[time] time}
	 *    - {@link input[month] month}
	 *    - {@link input[week] week}
	 *  - {@link ng.directive:select select}
	 *  - {@link ng.directive:textarea textarea}
	 *
	 * # CSS classes
	 * The following CSS classes are added and removed on the associated input/select/textarea element
	 * depending on the validity of the model.
	 *
	 *  - `ng-valid`: the model is valid
	 *  - `ng-invalid`: the model is invalid
	 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
	 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
	 *  - `ng-pristine`: the control hasn't been interacted with yet
	 *  - `ng-dirty`: the control has been interacted with
	 *  - `ng-touched`: the control has been blurred
	 *  - `ng-untouched`: the control hasn't been blurred
	 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 * ## Animation Hooks
	 *
	 * Animations within models are triggered when any of the associated CSS classes are added and removed
	 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,
	 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
	 * The animations that are triggered within ngModel are similar to how they work in ngClass and
	 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style an input element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-input {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-input.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
	     <file name="index.html">
	       <script>
	        angular.module('inputExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.val = '1';
	          }]);
	       </script>
	       <style>
	         .my-input {
	           transition:all linear 0.5s;
	           background: transparent;
	         }
	         .my-input.ng-invalid {
	           color:white;
	           background: red;
	         }
	       </style>
	       <p id="inputDescription">
	        Update input to see transitions when valid/invalid.
	        Integer is a valid value.
	       </p>
	       <form name="testForm" ng-controller="ExampleController">
	         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
	                aria-describedby="inputDescription" />
	       </form>
	     </file>
	 * </example>
	 *
	 * ## Binding to a getter/setter
	 *
	 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
	 * function that returns a representation of the model when called with zero arguments, and sets
	 * the internal state of a model when called with an argument. It's sometimes useful to use this
	 * for models that have an internal representation that's different from what the model exposes
	 * to the view.
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
	 * frequently than other parts of your code.
	 * </div>
	 *
	 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
	 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
	 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
	 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
	 *
	 * The following example shows how to use `ngModel` with a getter/setter:
	 *
	 * @example
	 * <example name="ngModel-getter-setter" module="getterSetterExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <form name="userForm">
	           <label>Name:
	             <input type="text" name="userName"
	                    ng-model="user.name"
	                    ng-model-options="{ getterSetter: true }" />
	           </label>
	         </form>
	         <pre>user.name = <span ng-bind="user.name()"></span></pre>
	       </div>
	     </file>
	     <file name="app.js">
	       angular.module('getterSetterExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var _name = 'Brian';
	           $scope.user = {
	             name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	             }
	           };
	         }]);
	     </file>
	 * </example>
	 */
      var ngModelDirective = [
          '$rootScope',
          function ($rootScope) {
            return {
              restrict: 'A',
              require: [
                'ngModel',
                '^?form',
                '^?ngModelOptions'
              ],
              controller: NgModelController,
              priority: 1,
              compile: function ngModelCompile(element) {
                // Setup initial state of the control
                element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);
                return {
                  pre: function ngModelPreLink(scope, element, attr, ctrls) {
                    var modelCtrl = ctrls[0], formCtrl = ctrls[1] || modelCtrl.$$parentForm;
                    modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);
                    // notify others, especially parent forms
                    formCtrl.$addControl(modelCtrl);
                    attr.$observe('name', function (newValue) {
                      if (modelCtrl.$name !== newValue) {
                        modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);
                      }
                    });
                    scope.$on('$destroy', function () {
                      modelCtrl.$$parentForm.$removeControl(modelCtrl);
                    });
                  },
                  post: function ngModelPostLink(scope, element, attr, ctrls) {
                    var modelCtrl = ctrls[0];
                    if (modelCtrl.$options && modelCtrl.$options.updateOn) {
                      element.on(modelCtrl.$options.updateOn, function (ev) {
                        modelCtrl.$$debounceViewValueCommit(ev && ev.type);
                      });
                    }
                    element.on('blur', function (ev) {
                      if (modelCtrl.$touched)
                        return;
                      if ($rootScope.$$phase) {
                        scope.$evalAsync(modelCtrl.$setTouched);
                      } else {
                        scope.$apply(modelCtrl.$setTouched);
                      }
                    });
                  }
                };
              }
            };
          }
        ];
      var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;
      /**
	 * @ngdoc directive
	 * @name ngModelOptions
	 *
	 * @description
	 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of
	 * events that will trigger a model update and/or a debouncing delay so that the actual update only
	 * takes place when a timer expires; this timer will be reset after another change takes place.
	 *
	 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
	 * be different from the value in the actual model. This means that if you update the model you
	 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in
	 * order to make sure it is synchronized with the model and that any debounced action is canceled.
	 *
	 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}
	 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
	 * important because `form` controllers are published to the related scope under the name in their
	 * `name` attribute.
	 *
	 * Any pending changes will take place immediately when an enclosing form is submitted via the
	 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * `ngModelOptions` has an effect on the element it's declared on and its descendants.
	 *
	 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:
	 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
	 *     events using an space delimited list. There is a special event called `default` that
	 *     matches the default events belonging of the control.
	 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
	 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
	 *     custom value for each event. For example:
	 *     `ng-model-options="{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }"`
	 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
	 *     not validate correctly instead of the default behavior of setting the model to undefined.
	 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
	       `ngModel` as getters/setters.
	 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
	 *     `<input type="date">`, `<input type="time">`, ... . It understands UTC/GMT and the
	 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *     If not specified, the timezone of the browser will be used.
	 *
	 * @example

	  The following example shows how to override immediate updates. Changes on the inputs within the
	  form will update the model only when the control loses focus (blur event). If `escape` key is
	  pressed while the input field is focused, the value is reset to the value in the current model.

	  <example name="ngModelOptions-directive-blur" module="optionsExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ updateOn: 'blur' }"
	                   ng-keyup="cancel($event)" />
	          </label><br />
	          <label>Other data:
	            <input type="text" ng-model="user.data" />
	          </label><br />
	        </form>
	        <pre>user.name = <span ng-bind="user.name"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('optionsExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.user = { name: 'say', data: '' };

	          $scope.cancel = function(e) {
	            if (e.keyCode == 27) {
	              $scope.userForm.userName.$rollbackViewValue();
	            }
	          };
	        }]);
	    </file>
	    <file name="protractor.js" type="protractor">
	      var model = element(by.binding('user.name'));
	      var input = element(by.model('user.name'));
	      var other = element(by.model('user.data'));

	      it('should allow custom events', function() {
	        input.sendKeys(' hello');
	        input.click();
	        expect(model.getText()).toEqual('say');
	        other.click();
	        expect(model.getText()).toEqual('say hello');
	      });

	      it('should $rollbackViewValue when model changes', function() {
	        input.sendKeys(' hello');
	        expect(input.getAttribute('value')).toEqual('say hello');
	        input.sendKeys(protractor.Key.ESCAPE);
	        expect(input.getAttribute('value')).toEqual('say');
	        other.click();
	        expect(model.getText()).toEqual('say');
	      });
	    </file>
	  </example>

	  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.
	  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.

	  <example name="ngModelOptions-directive-debounce" module="optionsExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ debounce: 1000 }" />
	          </label>
	          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button>
	          <br />
	        </form>
	        <pre>user.name = <span ng-bind="user.name"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('optionsExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.user = { name: 'say' };
	        }]);
	    </file>
	  </example>

	  This one shows how to bind to getter/setters:

	  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ getterSetter: true }" />
	          </label>
	        </form>
	        <pre>user.name = <span ng-bind="user.name()"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('getterSetterExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          var _name = 'Brian';
	          $scope.user = {
	            name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	            }
	          };
	        }]);
	    </file>
	  </example>
	 */
      var ngModelOptionsDirective = function () {
        return {
          restrict: 'A',
          controller: [
            '$scope',
            '$attrs',
            function ($scope, $attrs) {
              var that = this;
              this.$options = copy($scope.$eval($attrs.ngModelOptions));
              // Allow adding/overriding bound events
              if (isDefined(this.$options.updateOn)) {
                this.$options.updateOnDefault = false;
                // extract "default" pseudo-event from list of events that can trigger a model update
                this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function () {
                  that.$options.updateOnDefault = true;
                  return ' ';
                }));
              } else {
                this.$options.updateOnDefault = true;
              }
            }
          ]
        };
      };
      // helper methods
      function addSetValidityMethod(context) {
        var ctrl = context.ctrl, $element = context.$element, classCache = {}, set = context.set, unset = context.unset, $animate = context.$animate;
        classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));
        ctrl.$setValidity = setValidity;
        function setValidity(validationErrorKey, state, controller) {
          if (isUndefined(state)) {
            createAndSet('$pending', validationErrorKey, controller);
          } else {
            unsetAndCleanup('$pending', validationErrorKey, controller);
          }
          if (!isBoolean(state)) {
            unset(ctrl.$error, validationErrorKey, controller);
            unset(ctrl.$$success, validationErrorKey, controller);
          } else {
            if (state) {
              unset(ctrl.$error, validationErrorKey, controller);
              set(ctrl.$$success, validationErrorKey, controller);
            } else {
              set(ctrl.$error, validationErrorKey, controller);
              unset(ctrl.$$success, validationErrorKey, controller);
            }
          }
          if (ctrl.$pending) {
            cachedToggleClass(PENDING_CLASS, true);
            ctrl.$valid = ctrl.$invalid = undefined;
            toggleValidationCss('', null);
          } else {
            cachedToggleClass(PENDING_CLASS, false);
            ctrl.$valid = isObjectEmpty(ctrl.$error);
            ctrl.$invalid = !ctrl.$valid;
            toggleValidationCss('', ctrl.$valid);
          }
          // re-read the state as the set/unset methods could have
          // combined state in ctrl.$error[validationError] (used for forms),
          // where setting/unsetting only increments/decrements the value,
          // and does not replace it.
          var combinedState;
          if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {
            combinedState = undefined;
          } else if (ctrl.$error[validationErrorKey]) {
            combinedState = false;
          } else if (ctrl.$$success[validationErrorKey]) {
            combinedState = true;
          } else {
            combinedState = null;
          }
          toggleValidationCss(validationErrorKey, combinedState);
          ctrl.$$parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
        }
        function createAndSet(name, value, controller) {
          if (!ctrl[name]) {
            ctrl[name] = {};
          }
          set(ctrl[name], value, controller);
        }
        function unsetAndCleanup(name, value, controller) {
          if (ctrl[name]) {
            unset(ctrl[name], value, controller);
          }
          if (isObjectEmpty(ctrl[name])) {
            ctrl[name] = undefined;
          }
        }
        function cachedToggleClass(className, switchValue) {
          if (switchValue && !classCache[className]) {
            $animate.addClass($element, className);
            classCache[className] = true;
          } else if (!switchValue && classCache[className]) {
            $animate.removeClass($element, className);
            classCache[className] = false;
          }
        }
        function toggleValidationCss(validationErrorKey, isValid) {
          validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
          cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);
          cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);
        }
      }
      function isObjectEmpty(obj) {
        if (obj) {
          for (var prop in obj) {
            if (obj.hasOwnProperty(prop)) {
              return false;
            }
          }
        }
        return true;
      }
      /**
	 * @ngdoc directive
	 * @name ngNonBindable
	 * @restrict AC
	 * @priority 1000
	 *
	 * @description
	 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
	 * DOM element. This is useful if the element contains what appears to be Angular directives and
	 * bindings but which should be ignored by Angular. This could be the case if you have a site that
	 * displays snippets of code, for instance.
	 *
	 * @element ANY
	 *
	 * @example
	 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
	 * but the one wrapped in `ngNonBindable` is left alone.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <div>Normal: {{1 + 2}}</div>
	        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
	      </file>
	      <file name="protractor.js" type="protractor">
	       it('should check ng-non-bindable', function() {
	         expect(element(by.binding('1 + 2')).getText()).toContain('3');
	         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
	       });
	      </file>
	    </example>
	 */
      var ngNonBindableDirective = ngDirective({
          terminal: true,
          priority: 1000
        });
      /* global jqLiteRemove */
      var ngOptionsMinErr = minErr('ngOptions');
      /**
	 * @ngdoc directive
	 * @name ngOptions
	 * @restrict A
	 *
	 * @description
	 *
	 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
	 * elements for the `<select>` element using the array or object obtained by evaluating the
	 * `ngOptions` comprehension expression.
	 *
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a
	 * similar result. However, `ngOptions` provides some benefits such as reducing memory and
	 * increasing speed by not creating a new scope for each repeated instance, as well as providing
	 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound
	 *  to a non-string value. This is because an option element can only be bound to string values at
	 * present.
	 *
	 * When an item in the `<select>` menu is selected, the array element or object property
	 * represented by the selected option will be bound to the model identified by the `ngModel`
	 * directive.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * ## Complex Models (objects or collections)
	 *
	 * **Note:** By default, `ngModel` watches the model by reference, not value. This is important when
	 * binding any input directive to a model that is an object or a collection.
	 *
	 * Since this is a common situation for `ngOptions` the directive additionally watches the model using
	 * `$watchCollection` when the select has the `multiple` attribute or when there is a `track by` clause in
	 * the options expression. This allows ngOptions to trigger a re-rendering of the options even if the actual
	 * object/collection has not changed identity but only a property on the object or an item in the collection
	 * changes.
	 *
	 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
	 * if the model is an array). This means that changing a property deeper inside the object/collection that the
	 * first level will not trigger a re-rendering.
	 *
	 *
	 * ## `select` **`as`**
	 *
	 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
	 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
	 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
	 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
	 *
	 *
	 * ### `select` **`as`** and **`track by`**
	 *
	 * <div class="alert alert-warning">
	 * Do not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.
	 * </div>
	 *
	 * Consider the following example:
	 *
	 * ```html
	 * <select ng-options="item.subItem as item.label for item in values track by item.id" ng-model="selected"></select>
	 * ```
	 *
	 * ```js
	 * $scope.values = [{
	 *   id: 1,
	 *   label: 'aLabel',
	 *   subItem: { name: 'aSubItem' }
	 * }, {
	 *   id: 2,
	 *   label: 'bLabel',
	 *   subItem: { name: 'bSubItem' }
	 * }];
	 *
	 * $scope.selected = { name: 'aSubItem' };
	 * ```
	 *
	 * With the purpose of preserving the selection, the **`track by`** expression is always applied to the element
	 * of the data source (to `item` in this example). To calculate whether an element is selected, we do the
	 * following:
	 *
	 * 1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`
	 * 2. Apply **`track by`** to the already selected value in `ngModel`.
	 *    In the example: this is not possible as **`track by`** refers to `item.id`, but the selected
	 *    value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to
	 *    a wrong object, the selected element can't be found, `<select>` is always reset to the "not
	 *    selected" option.
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required The control is considered valid only if value is entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {comprehension_expression=} ngOptions in one of the following forms:
	 *
	 *   * for array data sources:
	 *     * `label` **`for`** `value` **`in`** `array`
	 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
	 *        (for including a filter with `track by`)
	 *   * for object data sources:
	 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`group by`** `group`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`disable when`** `disable`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *
	 * Where:
	 *
	 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
	 *   * `value`: local variable which will refer to each item in the `array` or each property value
	 *      of `object` during iteration.
	 *   * `key`: local variable which will refer to a property name in `object` during iteration.
	 *   * `label`: The result of this expression will be the label for `<option>` element. The
	 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
	 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
	 *      element. If not specified, `select` expression will default to `value`.
	 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
	 *      DOM element.
	 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
	 *      element. Return `true` to disable.
	 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
	 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
	 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
	 *      even when the options are recreated (e.g. reloaded from the server).
	 *
	 * @example
	    <example module="selectExample">
	      <file name="index.html">
	        <script>
	        angular.module('selectExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.colors = [
	              {name:'black', shade:'dark'},
	              {name:'white', shade:'light', notAnOption: true},
	              {name:'red', shade:'dark'},
	              {name:'blue', shade:'dark', notAnOption: true},
	              {name:'yellow', shade:'light', notAnOption: false}
	            ];
	            $scope.myColor = $scope.colors[2]; // red
	          }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <ul>
	            <li ng-repeat="color in colors">
	              <label>Name: <input ng-model="color.name"></label>
	              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
	              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
	            </li>
	            <li>
	              <button ng-click="colors.push({})">add</button>
	            </li>
	          </ul>
	          <hr/>
	          <label>Color (null not allowed):
	            <select ng-model="myColor" ng-options="color.name for color in colors"></select>
	          </label><br/>
	          <label>Color (null allowed):
	          <span  class="nullable">
	            <select ng-model="myColor" ng-options="color.name for color in colors">
	              <option value="">-- choose color --</option>
	            </select>
	          </span></label><br/>

	          <label>Color grouped by shade:
	            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
	            </select>
	          </label><br/>

	          <label>Color grouped by shade, with some disabled:
	            <select ng-model="myColor"
	                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
	            </select>
	          </label><br/>



	          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
	          <br/>
	          <hr/>
	          Currently selected: {{ {selected_color:myColor} }}
	          <div style="border:solid 1px black; height:20px"
	               ng-style="{'background-color':myColor.name}">
	          </div>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	         it('should check ng-options', function() {
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
	           element.all(by.model('myColor')).first().click();
	           element.all(by.css('select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
	           element(by.css('.nullable select[ng-model="myColor"]')).click();
	           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
	         });
	      </file>
	    </example>
	 */
      // jshint maxlen: false
      //                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
      var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
      // 1: value expression (valueFn)
      // 2: label expression (displayFn)
      // 3: group by expression (groupByFn)
      // 4: disable when expression (disableWhenFn)
      // 5: array item variable name
      // 6: object item key variable name
      // 7: object item value variable name
      // 8: collection expression
      // 9: track by expression
      // jshint maxlen: 100
      var ngOptionsDirective = [
          '$compile',
          '$parse',
          function ($compile, $parse) {
            function parseOptionsExpression(optionsExp, selectElement, scope) {
              var match = optionsExp.match(NG_OPTIONS_REGEXP);
              if (!match) {
                throw ngOptionsMinErr('iexp', 'Expected expression in form of ' + '\'_select_ (as _label_)? for (_key_,)?_value_ in _collection_\'' + ' but got \'{0}\'. Element: {1}', optionsExp, startingTag(selectElement));
              }
              // Extract the parts from the ngOptions expression
              // The variable name for the value of the item in the collection
              var valueName = match[5] || match[7];
              // The variable name for the key of the item in the collection
              var keyName = match[6];
              // An expression that generates the viewValue for an option if there is a label expression
              var selectAs = / as /.test(match[0]) && match[1];
              // An expression that is used to track the id of each object in the options collection
              var trackBy = match[9];
              // An expression that generates the viewValue for an option if there is no label expression
              var valueFn = $parse(match[2] ? match[1] : valueName);
              var selectAsFn = selectAs && $parse(selectAs);
              var viewValueFn = selectAsFn || valueFn;
              var trackByFn = trackBy && $parse(trackBy);
              // Get the value by which we are going to track the option
              // if we have a trackFn then use that (passing scope and locals)
              // otherwise just hash the given viewValue
              var getTrackByValueFn = trackBy ? function (value, locals) {
                  return trackByFn(scope, locals);
                } : function getHashOfValue(value) {
                  return hashKey(value);
                };
              var getTrackByValue = function (value, key) {
                return getTrackByValueFn(value, getLocals(value, key));
              };
              var displayFn = $parse(match[2] || match[1]);
              var groupByFn = $parse(match[3] || '');
              var disableWhenFn = $parse(match[4] || '');
              var valuesFn = $parse(match[8]);
              var locals = {};
              var getLocals = keyName ? function (value, key) {
                  locals[keyName] = key;
                  locals[valueName] = value;
                  return locals;
                } : function (value) {
                  locals[valueName] = value;
                  return locals;
                };
              function Option(selectValue, viewValue, label, group, disabled) {
                this.selectValue = selectValue;
                this.viewValue = viewValue;
                this.label = label;
                this.group = group;
                this.disabled = disabled;
              }
              function getOptionValuesKeys(optionValues) {
                var optionValuesKeys;
                if (!keyName && isArrayLike(optionValues)) {
                  optionValuesKeys = optionValues;
                } else {
                  // if object, extract keys, in enumeration order, unsorted
                  optionValuesKeys = [];
                  for (var itemKey in optionValues) {
                    if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
                      optionValuesKeys.push(itemKey);
                    }
                  }
                }
                return optionValuesKeys;
              }
              return {
                trackBy: trackBy,
                getTrackByValue: getTrackByValue,
                getWatchables: $parse(valuesFn, function (optionValues) {
                  // Create a collection of things that we would like to watch (watchedArray)
                  // so that they can all be watched using a single $watchCollection
                  // that only runs the handler once if anything changes
                  var watchedArray = [];
                  optionValues = optionValues || [];
                  var optionValuesKeys = getOptionValuesKeys(optionValues);
                  var optionValuesLength = optionValuesKeys.length;
                  for (var index = 0; index < optionValuesLength; index++) {
                    var key = optionValues === optionValuesKeys ? index : optionValuesKeys[index];
                    var value = optionValues[key];
                    var locals = getLocals(optionValues[key], key);
                    var selectValue = getTrackByValueFn(optionValues[key], locals);
                    watchedArray.push(selectValue);
                    // Only need to watch the displayFn if there is a specific label expression
                    if (match[2] || match[1]) {
                      var label = displayFn(scope, locals);
                      watchedArray.push(label);
                    }
                    // Only need to watch the disableWhenFn if there is a specific disable expression
                    if (match[4]) {
                      var disableWhen = disableWhenFn(scope, locals);
                      watchedArray.push(disableWhen);
                    }
                  }
                  return watchedArray;
                }),
                getOptions: function () {
                  var optionItems = [];
                  var selectValueMap = {};
                  // The option values were already computed in the `getWatchables` fn,
                  // which must have been called to trigger `getOptions`
                  var optionValues = valuesFn(scope) || [];
                  var optionValuesKeys = getOptionValuesKeys(optionValues);
                  var optionValuesLength = optionValuesKeys.length;
                  for (var index = 0; index < optionValuesLength; index++) {
                    var key = optionValues === optionValuesKeys ? index : optionValuesKeys[index];
                    var value = optionValues[key];
                    var locals = getLocals(value, key);
                    var viewValue = viewValueFn(scope, locals);
                    var selectValue = getTrackByValueFn(viewValue, locals);
                    var label = displayFn(scope, locals);
                    var group = groupByFn(scope, locals);
                    var disabled = disableWhenFn(scope, locals);
                    var optionItem = new Option(selectValue, viewValue, label, group, disabled);
                    optionItems.push(optionItem);
                    selectValueMap[selectValue] = optionItem;
                  }
                  return {
                    items: optionItems,
                    selectValueMap: selectValueMap,
                    getOptionFromViewValue: function (value) {
                      return selectValueMap[getTrackByValue(value)];
                    },
                    getViewValueFromOption: function (option) {
                      // If the viewValue could be an object that may be mutated by the application,
                      // we need to make a copy and not return the reference to the value on the option.
                      return trackBy ? angular.copy(option.viewValue) : option.viewValue;
                    }
                  };
                }
              };
            }
            // we can't just jqLite('<option>') since jqLite is not smart enough
            // to create it in <select> and IE barfs otherwise.
            var optionTemplate = document.createElement('option'), optGroupTemplate = document.createElement('optgroup');
            return {
              restrict: 'A',
              terminal: true,
              require: [
                'select',
                '?ngModel'
              ],
              link: function (scope, selectElement, attr, ctrls) {
                // if ngModel is not defined, we don't need to do anything
                var ngModelCtrl = ctrls[1];
                if (!ngModelCtrl)
                  return;
                var selectCtrl = ctrls[0];
                var multiple = attr.multiple;
                // The emptyOption allows the application developer to provide their own custom "empty"
                // option when the viewValue does not match any of the option values.
                var emptyOption;
                for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
                  if (children[i].value === '') {
                    emptyOption = children.eq(i);
                    break;
                  }
                }
                var providedEmptyOption = !!emptyOption;
                var unknownOption = jqLite(optionTemplate.cloneNode(false));
                unknownOption.val('?');
                var options;
                var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);
                var renderEmptyOption = function () {
                  if (!providedEmptyOption) {
                    selectElement.prepend(emptyOption);
                  }
                  selectElement.val('');
                  emptyOption.prop('selected', true);
                  // needed for IE
                  emptyOption.attr('selected', true);
                };
                var removeEmptyOption = function () {
                  if (!providedEmptyOption) {
                    emptyOption.remove();
                  }
                };
                var renderUnknownOption = function () {
                  selectElement.prepend(unknownOption);
                  selectElement.val('?');
                  unknownOption.prop('selected', true);
                  // needed for IE
                  unknownOption.attr('selected', true);
                };
                var removeUnknownOption = function () {
                  unknownOption.remove();
                };
                // Update the controller methods for multiple selectable options
                if (!multiple) {
                  selectCtrl.writeValue = function writeNgOptionsValue(value) {
                    var option = options.getOptionFromViewValue(value);
                    if (option && !option.disabled) {
                      if (selectElement[0].value !== option.selectValue) {
                        removeUnknownOption();
                        removeEmptyOption();
                        selectElement[0].value = option.selectValue;
                        option.element.selected = true;
                        option.element.setAttribute('selected', 'selected');
                      }
                    } else {
                      if (value === null || providedEmptyOption) {
                        removeUnknownOption();
                        renderEmptyOption();
                      } else {
                        removeEmptyOption();
                        renderUnknownOption();
                      }
                    }
                  };
                  selectCtrl.readValue = function readNgOptionsValue() {
                    var selectedOption = options.selectValueMap[selectElement.val()];
                    if (selectedOption && !selectedOption.disabled) {
                      removeEmptyOption();
                      removeUnknownOption();
                      return options.getViewValueFromOption(selectedOption);
                    }
                    return null;
                  };
                  // If we are using `track by` then we must watch the tracked value on the model
                  // since ngModel only watches for object identity change
                  if (ngOptions.trackBy) {
                    scope.$watch(function () {
                      return ngOptions.getTrackByValue(ngModelCtrl.$viewValue);
                    }, function () {
                      ngModelCtrl.$render();
                    });
                  }
                } else {
                  ngModelCtrl.$isEmpty = function (value) {
                    return !value || value.length === 0;
                  };
                  selectCtrl.writeValue = function writeNgOptionsMultiple(value) {
                    options.items.forEach(function (option) {
                      option.element.selected = false;
                    });
                    if (value) {
                      value.forEach(function (item) {
                        var option = options.getOptionFromViewValue(item);
                        if (option && !option.disabled)
                          option.element.selected = true;
                      });
                    }
                  };
                  selectCtrl.readValue = function readNgOptionsMultiple() {
                    var selectedValues = selectElement.val() || [], selections = [];
                    forEach(selectedValues, function (value) {
                      var option = options.selectValueMap[value];
                      if (option && !option.disabled)
                        selections.push(options.getViewValueFromOption(option));
                    });
                    return selections;
                  };
                  // If we are using `track by` then we must watch these tracked values on the model
                  // since ngModel only watches for object identity change
                  if (ngOptions.trackBy) {
                    scope.$watchCollection(function () {
                      if (isArray(ngModelCtrl.$viewValue)) {
                        return ngModelCtrl.$viewValue.map(function (value) {
                          return ngOptions.getTrackByValue(value);
                        });
                      }
                    }, function () {
                      ngModelCtrl.$render();
                    });
                  }
                }
                if (providedEmptyOption) {
                  // we need to remove it before calling selectElement.empty() because otherwise IE will
                  // remove the label from the element. wtf?
                  emptyOption.remove();
                  // compile the element since there might be bindings in it
                  $compile(emptyOption)(scope);
                  // remove the class, which is added automatically because we recompile the element and it
                  // becomes the compilation root
                  emptyOption.removeClass('ng-scope');
                } else {
                  emptyOption = jqLite(optionTemplate.cloneNode(false));
                }
                // We need to do this here to ensure that the options object is defined
                // when we first hit it in writeNgOptionsValue
                updateOptions();
                // We will re-render the option elements if the option values or labels change
                scope.$watchCollection(ngOptions.getWatchables, updateOptions);
                // ------------------------------------------------------------------ //
                function updateOptionElement(option, element) {
                  option.element = element;
                  element.disabled = option.disabled;
                  // NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive
                  // selects in certain circumstances when multiple selects are next to each other and display
                  // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
                  // See https://github.com/angular/angular.js/issues/11314 for more info.
                  // This is unfortunately untestable with unit / e2e tests
                  if (option.label !== element.label) {
                    element.label = option.label;
                    element.textContent = option.label;
                  }
                  if (option.value !== element.value)
                    element.value = option.selectValue;
                }
                function addOrReuseElement(parent, current, type, templateElement) {
                  var element;
                  // Check whether we can reuse the next element
                  if (current && lowercase(current.nodeName) === type) {
                    // The next element is the right type so reuse it
                    element = current;
                  } else {
                    // The next element is not the right type so create a new one
                    element = templateElement.cloneNode(false);
                    if (!current) {
                      // There are no more elements so just append it to the select
                      parent.appendChild(element);
                    } else {
                      // The next element is not a group so insert the new one
                      parent.insertBefore(element, current);
                    }
                  }
                  return element;
                }
                function removeExcessElements(current) {
                  var next;
                  while (current) {
                    next = current.nextSibling;
                    jqLiteRemove(current);
                    current = next;
                  }
                }
                function skipEmptyAndUnknownOptions(current) {
                  var emptyOption_ = emptyOption && emptyOption[0];
                  var unknownOption_ = unknownOption && unknownOption[0];
                  if (emptyOption_ || unknownOption_) {
                    while (current && (current === emptyOption_ || current === unknownOption_ || emptyOption_ && emptyOption_.nodeType === NODE_TYPE_COMMENT)) {
                      // Empty options might have directives that transclude
                      // and insert comments (e.g. ngIf)
                      current = current.nextSibling;
                    }
                  }
                  return current;
                }
                function updateOptions() {
                  var previousValue = options && selectCtrl.readValue();
                  options = ngOptions.getOptions();
                  var groupMap = {};
                  var currentElement = selectElement[0].firstChild;
                  // Ensure that the empty option is always there if it was explicitly provided
                  if (providedEmptyOption) {
                    selectElement.prepend(emptyOption);
                  }
                  currentElement = skipEmptyAndUnknownOptions(currentElement);
                  options.items.forEach(function updateOption(option) {
                    var group;
                    var groupElement;
                    var optionElement;
                    if (option.group) {
                      // This option is to live in a group
                      // See if we have already created this group
                      group = groupMap[option.group];
                      if (!group) {
                        // We have not already created this group
                        groupElement = addOrReuseElement(selectElement[0], currentElement, 'optgroup', optGroupTemplate);
                        // Move to the next element
                        currentElement = groupElement.nextSibling;
                        // Update the label on the group element
                        groupElement.label = option.group;
                        // Store it for use later
                        group = groupMap[option.group] = {
                          groupElement: groupElement,
                          currentOptionElement: groupElement.firstChild
                        };
                      }
                      // So now we have a group for this option we add the option to the group
                      optionElement = addOrReuseElement(group.groupElement, group.currentOptionElement, 'option', optionTemplate);
                      updateOptionElement(option, optionElement);
                      // Move to the next element
                      group.currentOptionElement = optionElement.nextSibling;
                    } else {
                      // This option is not in a group
                      optionElement = addOrReuseElement(selectElement[0], currentElement, 'option', optionTemplate);
                      updateOptionElement(option, optionElement);
                      // Move to the next element
                      currentElement = optionElement.nextSibling;
                    }
                  });
                  // Now remove all excess options and group
                  Object.keys(groupMap).forEach(function (key) {
                    removeExcessElements(groupMap[key].currentOptionElement);
                  });
                  removeExcessElements(currentElement);
                  ngModelCtrl.$render();
                  // Check to see if the value has changed due to the update to the options
                  if (!ngModelCtrl.$isEmpty(previousValue)) {
                    var nextValue = selectCtrl.readValue();
                    if (ngOptions.trackBy ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
                      ngModelCtrl.$setViewValue(nextValue);
                      ngModelCtrl.$render();
                    }
                  }
                }
              }
            };
          }
        ];
      /**
	 * @ngdoc directive
	 * @name ngPluralize
	 * @restrict EA
	 *
	 * @description
	 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
	 * These rules are bundled with angular.js, but can be overridden
	 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
	 * by specifying the mappings between
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * and the strings to be displayed.
	 *
	 * # Plural categories and explicit number rules
	 * There are two
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * in Angular's default en-US locale: "one" and "other".
	 *
	 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
	 * any number that is not 1), an explicit number rule can only match one number. For example, the
	 * explicit number rule for "3" matches the number 3. There are examples of plural categories
	 * and explicit number rules throughout the rest of this documentation.
	 *
	 * # Configuring ngPluralize
	 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
	 * You can also provide an optional attribute, `offset`.
	 *
	 * The value of the `count` attribute can be either a string or an {@link guide/expression
	 * Angular expression}; these are evaluated on the current scope for its bound value.
	 *
	 * The `when` attribute specifies the mappings between plural categories and the actual
	 * string to be displayed. The value of the attribute should be a JSON object.
	 *
	 * The following example shows how to configure ngPluralize:
	 *
	 * ```html
	 * <ng-pluralize count="personCount"
	                 when="{'0': 'Nobody is viewing.',
	 *                      'one': '1 person is viewing.',
	 *                      'other': '{} people are viewing.'}">
	 * </ng-pluralize>
	 *```
	 *
	 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
	 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
	 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
	 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
	 * show "a dozen people are viewing".
	 *
	 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
	 * into pluralized strings. In the previous example, Angular will replace `{}` with
	 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
	 * for <span ng-non-bindable>{{numberExpression}}</span>.
	 *
	 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
	 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
	 *
	 * # Configuring ngPluralize with offset
	 * The `offset` attribute allows further customization of pluralized text, which can result in
	 * a better user experience. For example, instead of the message "4 people are viewing this document",
	 * you might display "John, Kate and 2 others are viewing this document".
	 * The offset attribute allows you to offset a number by any desired value.
	 * Let's take a look at an example:
	 *
	 * ```html
	 * <ng-pluralize count="personCount" offset=2
	 *               when="{'0': 'Nobody is viewing.',
	 *                      '1': '{{person1}} is viewing.',
	 *                      '2': '{{person1}} and {{person2}} are viewing.',
	 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
	 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	 * </ng-pluralize>
	 * ```
	 *
	 * Notice that we are still using two plural categories(one, other), but we added
	 * three explicit number rules 0, 1 and 2.
	 * When one person, perhaps John, views the document, "John is viewing" will be shown.
	 * When three people view the document, no explicit number rule is found, so
	 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
	 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
	 * is shown.
	 *
	 * Note that when you specify offsets, you must provide explicit number rules for
	 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
	 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
	 * plural categories "one" and "other".
	 *
	 * @param {string|expression} count The variable to be bound to.
	 * @param {string} when The mapping between plural category to its corresponding strings.
	 * @param {number=} offset Offset to deduct from the total number.
	 *
	 * @example
	    <example module="pluralizeExample">
	      <file name="index.html">
	        <script>
	          angular.module('pluralizeExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.person1 = 'Igor';
	              $scope.person2 = 'Misko';
	              $scope.personCount = 1;
	            }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
	          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
	          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>

	          <!--- Example with simple pluralization rules for en locale --->
	          Without Offset:
	          <ng-pluralize count="personCount"
	                        when="{'0': 'Nobody is viewing.',
	                               'one': '1 person is viewing.',
	                               'other': '{} people are viewing.'}">
	          </ng-pluralize><br>

	          <!--- Example with offset --->
	          With Offset(2):
	          <ng-pluralize count="personCount" offset=2
	                        when="{'0': 'Nobody is viewing.',
	                               '1': '{{person1}} is viewing.',
	                               '2': '{{person1}} and {{person2}} are viewing.',
	                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
	                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	          </ng-pluralize>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should show correct pluralized string', function() {
	          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var countInput = element(by.model('personCount'));

	          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
	          expect(withOffset.getText()).toEqual('Igor is viewing.');

	          countInput.clear();
	          countInput.sendKeys('0');

	          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
	          expect(withOffset.getText()).toEqual('Nobody is viewing.');

	          countInput.clear();
	          countInput.sendKeys('2');

	          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

	          countInput.clear();
	          countInput.sendKeys('3');

	          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

	          countInput.clear();
	          countInput.sendKeys('4');

	          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
	        });
	        it('should show data-bound names', function() {
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var personCount = element(by.model('personCount'));
	          var person1 = element(by.model('person1'));
	          var person2 = element(by.model('person2'));
	          personCount.clear();
	          personCount.sendKeys('4');
	          person1.clear();
	          person1.sendKeys('Di');
	          person2.clear();
	          person2.sendKeys('Vojta');
	          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
	        });
	      </file>
	    </example>
	 */
      var ngPluralizeDirective = [
          '$locale',
          '$interpolate',
          '$log',
          function ($locale, $interpolate, $log) {
            var BRACE = /{}/g, IS_WHEN = /^when(Minus)?(.+)$/;
            return {
              link: function (scope, element, attr) {
                var numberExp = attr.count, whenExp = attr.$attr.when && element.attr(attr.$attr.when),
                  // we have {{}} in attrs
                  offset = attr.offset || 0, whens = scope.$eval(whenExp) || {}, whensExpFns = {}, startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol, watchRemover = angular.noop, lastCount;
                forEach(attr, function (expression, attributeName) {
                  var tmpMatch = IS_WHEN.exec(attributeName);
                  if (tmpMatch) {
                    var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
                    whens[whenKey] = element.attr(attr.$attr[attributeName]);
                  }
                });
                forEach(whens, function (expression, key) {
                  whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));
                });
                scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
                  var count = parseFloat(newVal);
                  var countIsNaN = isNaN(count);
                  if (!countIsNaN && !(count in whens)) {
                    // If an explicit number rule such as 1, 2, 3... is defined, just use it.
                    // Otherwise, check it against pluralization rules in $locale service.
                    count = $locale.pluralCat(count - offset);
                  }
                  // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
                  // In JS `NaN !== NaN`, so we have to exlicitly check.
                  if (count !== lastCount && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {
                    watchRemover();
                    var whenExpFn = whensExpFns[count];
                    if (isUndefined(whenExpFn)) {
                      if (newVal != null) {
                        $log.debug('ngPluralize: no rule defined for \'' + count + '\' in ' + whenExp);
                      }
                      watchRemover = noop;
                      updateElementText();
                    } else {
                      watchRemover = scope.$watch(whenExpFn, updateElementText);
                    }
                    lastCount = count;
                  }
                });
                function updateElementText(newText) {
                  element.text(newText || '');
                }
              }
            };
          }
        ];
      /**
	 * @ngdoc directive
	 * @name ngRepeat
	 * @multiElement
	 *
	 * @description
	 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
	 * instance gets its own scope, where the given loop variable is set to the current collection item,
	 * and `$index` is set to the item index or key.
	 *
	 * Special properties are exposed on the local scope of each template instance, including:
	 *
	 * | Variable  | Type            | Details                                                                     |
	 * |-----------|-----------------|-----------------------------------------------------------------------------|
	 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
	 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
	 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
	 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
	 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
	 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
	 *
	 * <div class="alert alert-info">
	 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
	 *   This may be useful when, for instance, nesting ngRepeats.
	 * </div>
	 *
	 *
	 * # Iterating over object properties
	 *
	 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
	 * syntax:
	 *
	 * ```js
	 * <div ng-repeat="(key, value) in myObj"> ... </div>
	 * ```
	 *
	 * You need to be aware that the JavaScript specification does not define the order of keys
	 * returned for an object. (To mitigate this in Angular 1.3 the `ngRepeat` directive
	 * used to sort the keys alphabetically.)
	 *
	 * Version 1.4 removed the alphabetic sorting. We now rely on the order returned by the browser
	 * when running `for key in myObj`. It seems that browsers generally follow the strategy of providing
	 * keys in the order in which they were defined, although there are exceptions when keys are deleted
	 * and reinstated. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_issues
	 *
	 * If this is not desired, the recommended workaround is to convert your object into an array
	 * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could
	 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
	 * or implement a `$watch` on the object yourself.
	 *
	 *
	 * # Tracking and Duplicates
	 *
	 * When the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 *
	 * By default, `ngRepeat` does not allow duplicate items in arrays. This is because when
	 * there are duplicates, it is not possible to maintain a one-to-one mapping between collection
	 * items and DOM elements.
	 *
	 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
	 * with your own using the `track by` expression.
	 *
	 * For example, you may track items by the index of each item in the collection, using the
	 * special scope property `$index`:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * You may use arbitrary expressions in `track by`, including references to custom functions
	 * on the scope:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * If you are working with objects that have an identifier property, you can track
	 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`
	 * will not have to rebuild the DOM elements for items it has already rendered, even if the
	 * JavaScript objects in the collection have been substituted for new ones:
	 * ```html
	 *    <div ng-repeat="model in collection track by model.id">
	 *      {{model.name}}
	 *    </div>
	 * ```
	 *
	 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
	 * `$id` function, which tracks items by their identity:
	 * ```html
	 *    <div ng-repeat="obj in collection track by $id(obj)">
	 *      {{obj.prop}}
	 *    </div>
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** `track by` must always be the last expression:
	 * </div>
	 * ```
	 * <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">
	 *     {{model.name}}
	 * </div>
	 * ```
	 *
	 * # Special repeat start and end points
	 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
	 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
	 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
	 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
	 *
	 * The example below makes use of this feature:
	 * ```html
	 *   <header ng-repeat-start="item in items">
	 *     Header {{ item }}
	 *   </header>
	 *   <div class="body">
	 *     Body {{ item }}
	 *   </div>
	 *   <footer ng-repeat-end>
	 *     Footer {{ item }}
	 *   </footer>
	 * ```
	 *
	 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
	 * ```html
	 *   <header>
	 *     Header A
	 *   </header>
	 *   <div class="body">
	 *     Body A
	 *   </div>
	 *   <footer>
	 *     Footer A
	 *   </footer>
	 *   <header>
	 *     Header B
	 *   </header>
	 *   <div class="body">
	 *     Body B
	 *   </div>
	 *   <footer>
	 *     Footer B
	 *   </footer>
	 * ```
	 *
	 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
	 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
	 *
	 * @animations
	 * **.enter** - when a new item is added to the list or when an item is revealed after a filter
	 *
	 * **.leave** - when an item is removed from the list or when an item is filtered out
	 *
	 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
	 *
	 * @element ANY
	 * @scope
	 * @priority 1000
	 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
	 *   formats are currently supported:
	 *
	 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
	 *     is a scope expression giving the collection to enumerate.
	 *
	 *     For example: `album in artist.albums`.
	 *
	 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
	 *     and `expression` is the scope expression giving the collection to enumerate.
	 *
	 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
	 *
	 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
	 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
	 *     is specified, ng-repeat associates elements by identity. It is an error to have
	 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
	 *     mapped to the same DOM element, which is not possible.)
	 *
	 *     Note that the tracking expression must come last, after any filters, and the alias expression.
	 *
	 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
	 *     will be associated by item identity in the array.
	 *
	 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
	 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
	 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
	 *     element in the same way in the DOM.
	 *
	 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
	 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
	 *     property is same.
	 *
	 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
	 *     to items in conjunction with a tracking expression.
	 *
	 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
	 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
	 *     when a filter is active on the repeater, but the filtered result set is empty.
	 *
	 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
	 *     the items have been processed through the filter.
	 *
	 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
	 *     (and not as operator, inside an expression).
	 *
	 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
	 *
	 * @example
	 * This example initializes the scope to a list of names and
	 * then uses `ngRepeat` to display every person:
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <div ng-init="friends = [
	        {name:'John', age:25, gender:'boy'},
	        {name:'Jessie', age:30, gender:'girl'},
	        {name:'Johanna', age:28, gender:'girl'},
	        {name:'Joy', age:15, gender:'girl'},
	        {name:'Mary', age:28, gender:'girl'},
	        {name:'Peter', age:95, gender:'boy'},
	        {name:'Sebastian', age:50, gender:'boy'},
	        {name:'Erika', age:27, gender:'girl'},
	        {name:'Patrick', age:40, gender:'boy'},
	        {name:'Samantha', age:60, gender:'girl'}
	      ]">
	        I have {{friends.length}} friends. They are:
	        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
	        <ul class="example-animate-container">
	          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
	            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
	          </li>
	          <li class="animate-repeat" ng-if="results.length == 0">
	            <strong>No results found...</strong>
	          </li>
	        </ul>
	      </div>
	    </file>
	    <file name="animations.css">
	      .example-animate-container {
	        background:white;
	        border:1px solid black;
	        list-style:none;
	        margin:0;
	        padding:0 10px;
	      }

	      .animate-repeat {
	        line-height:40px;
	        list-style:none;
	        box-sizing:border-box;
	      }

	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter,
	      .animate-repeat.ng-leave {
	        transition:all linear 0.5s;
	      }

	      .animate-repeat.ng-leave.ng-leave-active,
	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter {
	        opacity:0;
	        max-height:0;
	      }

	      .animate-repeat.ng-leave,
	      .animate-repeat.ng-move.ng-move-active,
	      .animate-repeat.ng-enter.ng-enter-active {
	        opacity:1;
	        max-height:40px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var friends = element.all(by.repeater('friend in friends'));

	      it('should render initial data set', function() {
	        expect(friends.count()).toBe(10);
	        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
	        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
	        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
	        expect(element(by.binding('friends.length')).getText())
	            .toMatch("I have 10 friends. They are:");
	      });

	       it('should update repeater when filter predicate changes', function() {
	         expect(friends.count()).toBe(10);

	         element(by.model('q')).sendKeys('ma');

	         expect(friends.count()).toBe(2);
	         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
	         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
	       });
	      </file>
	    </example>
	 */
      var ngRepeatDirective = [
          '$parse',
          '$animate',
          function ($parse, $animate) {
            var NG_REMOVED = '$$NG_REMOVED';
            var ngRepeatMinErr = minErr('ngRepeat');
            var updateScope = function (scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
              // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
              scope[valueIdentifier] = value;
              if (keyIdentifier)
                scope[keyIdentifier] = key;
              scope.$index = index;
              scope.$first = index === 0;
              scope.$last = index === arrayLength - 1;
              scope.$middle = !(scope.$first || scope.$last);
              // jshint bitwise: false
              scope.$odd = !(scope.$even = (index & 1) === 0);  // jshint bitwise: true
            };
            var getBlockStart = function (block) {
              return block.clone[0];
            };
            var getBlockEnd = function (block) {
              return block.clone[block.clone.length - 1];
            };
            return {
              restrict: 'A',
              multiElement: true,
              transclude: 'element',
              priority: 1000,
              terminal: true,
              $$tlb: true,
              compile: function ngRepeatCompile($element, $attr) {
                var expression = $attr.ngRepeat;
                var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');
                var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                if (!match) {
                  throw ngRepeatMinErr('iexp', 'Expected expression in form of \'_item_ in _collection_[ track by _id_]\' but got \'{0}\'.', expression);
                }
                var lhs = match[1];
                var rhs = match[2];
                var aliasAs = match[3];
                var trackByExp = match[4];
                match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);
                if (!match) {
                  throw ngRepeatMinErr('iidexp', '\'_item_\' in \'_item_ in _collection_\' should be an identifier or \'(_key_, _value_)\' expression, but got \'{0}\'.', lhs);
                }
                var valueIdentifier = match[3] || match[1];
                var keyIdentifier = match[2];
                if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) || /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
                  throw ngRepeatMinErr('badident', 'alias \'{0}\' is invalid --- must be a valid JS identifier which is not a reserved name.', aliasAs);
                }
                var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
                var hashFnLocals = { $id: hashKey };
                if (trackByExp) {
                  trackByExpGetter = $parse(trackByExp);
                } else {
                  trackByIdArrayFn = function (key, value) {
                    return hashKey(value);
                  };
                  trackByIdObjFn = function (key) {
                    return key;
                  };
                }
                return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {
                  if (trackByExpGetter) {
                    trackByIdExpFn = function (key, value, index) {
                      // assign key, value, and $index to the locals so that they can be used in hash functions
                      if (keyIdentifier)
                        hashFnLocals[keyIdentifier] = key;
                      hashFnLocals[valueIdentifier] = value;
                      hashFnLocals.$index = index;
                      return trackByExpGetter($scope, hashFnLocals);
                    };
                  }
                  // Store a list of elements from previous run. This is a hash where key is the item from the
                  // iterator, and the value is objects with following properties.
                  //   - scope: bound scope
                  //   - element: previous element.
                  //   - index: position
                  //
                  // We are using no-proto object so that we don't need to guard against inherited props via
                  // hasOwnProperty.
                  var lastBlockMap = createMap();
                  //watch props
                  $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
                    var index, length, previousNode = $element[0],
                      // node that cloned nodes should be inserted after
                      // initialized to the comment node anchor
                      nextNode,
                      // Same as lastBlockMap but it has the current state. It will become the
                      // lastBlockMap on the next iteration.
                      nextBlockMap = createMap(), collectionLength, key, value,
                      // key/value of iteration
                      trackById, trackByIdFn, collectionKeys, block,
                      // last object information {scope, element, id}
                      nextBlockOrder, elementsToRemove;
                    if (aliasAs) {
                      $scope[aliasAs] = collection;
                    }
                    if (isArrayLike(collection)) {
                      collectionKeys = collection;
                      trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
                    } else {
                      trackByIdFn = trackByIdExpFn || trackByIdObjFn;
                      // if object, extract keys, in enumeration order, unsorted
                      collectionKeys = [];
                      for (var itemKey in collection) {
                        if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {
                          collectionKeys.push(itemKey);
                        }
                      }
                    }
                    collectionLength = collectionKeys.length;
                    nextBlockOrder = new Array(collectionLength);
                    // locate existing items
                    for (index = 0; index < collectionLength; index++) {
                      key = collection === collectionKeys ? index : collectionKeys[index];
                      value = collection[key];
                      trackById = trackByIdFn(key, value, index);
                      if (lastBlockMap[trackById]) {
                        // found previously seen block
                        block = lastBlockMap[trackById];
                        delete lastBlockMap[trackById];
                        nextBlockMap[trackById] = block;
                        nextBlockOrder[index] = block;
                      } else if (nextBlockMap[trackById]) {
                        // if collision detected. restore lastBlockMap and throw an error
                        forEach(nextBlockOrder, function (block) {
                          if (block && block.scope)
                            lastBlockMap[block.id] = block;
                        });
                        throw ngRepeatMinErr('dupes', 'Duplicates in a repeater are not allowed. Use \'track by\' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}', expression, trackById, value);
                      } else {
                        // new never before seen block
                        nextBlockOrder[index] = {
                          id: trackById,
                          scope: undefined,
                          clone: undefined
                        };
                        nextBlockMap[trackById] = true;
                      }
                    }
                    // remove leftover items
                    for (var blockKey in lastBlockMap) {
                      block = lastBlockMap[blockKey];
                      elementsToRemove = getBlockNodes(block.clone);
                      $animate.leave(elementsToRemove);
                      if (elementsToRemove[0].parentNode) {
                        // if the element was not removed yet because of pending animation, mark it as deleted
                        // so that we can ignore it later
                        for (index = 0, length = elementsToRemove.length; index < length; index++) {
                          elementsToRemove[index][NG_REMOVED] = true;
                        }
                      }
                      block.scope.$destroy();
                    }
                    // we are not using forEach for perf reasons (trying to avoid #call)
                    for (index = 0; index < collectionLength; index++) {
                      key = collection === collectionKeys ? index : collectionKeys[index];
                      value = collection[key];
                      block = nextBlockOrder[index];
                      if (block.scope) {
                        // if we have already seen this object, then we need to reuse the
                        // associated scope/element
                        nextNode = previousNode;
                        // skip nodes that are already pending removal via leave animation
                        do {
                          nextNode = nextNode.nextSibling;
                        } while (nextNode && nextNode[NG_REMOVED]);
                        if (getBlockStart(block) != nextNode) {
                          // existing item which got moved
                          $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));
                        }
                        previousNode = getBlockEnd(block);
                        updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
                      } else {
                        // new item which we don't know about
                        $transclude(function ngRepeatTransclude(clone, scope) {
                          block.scope = scope;
                          // http://jsperf.com/clone-vs-createcomment
                          var endNode = ngRepeatEndComment.cloneNode(false);
                          clone[clone.length++] = endNode;
                          // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?
                          $animate.enter(clone, null, jqLite(previousNode));
                          previousNode = endNode;
                          // Note: We only need the first/last node of the cloned nodes.
                          // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                          // by a directive with templateUrl when its template arrives.
                          block.clone = clone;
                          nextBlockMap[block.id] = block;
                          updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
                        });
                      }
                    }
                    lastBlockMap = nextBlockMap;
                  });
                };
              }
            };
          }
        ];
      var NG_HIDE_CLASS = 'ng-hide';
      var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
      /**
	 * @ngdoc directive
	 * @name ngShow
	 * @multiElement
	 *
	 * @description
	 * The `ngShow` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
	 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is visible) -->
	 * <div ng-show="myValue"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is hidden) -->
	 * <div ng-show="myValue" class="ng-hide"></div>
	 * ```
	 *
	 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
	 * with extra animation classes that can be added.
	 *
	 * ```css
	 * .ng-hide:not(.ng-hide-animate) {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngShow`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass except that
	 * you must also include the !important flag to override the display property
	 * so that you can perform an animation when the element is hidden during the time of the animation.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   /&#42; this is required as of 1.3x to properly
	 *      apply all styling in a show/hide animation &#42;/
	 *   transition: 0s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add-active,
	 * .my-element.ng-hide-remove-active {
	 *   /&#42; the transition is defined in the active class &#42;/
	 *   transition: 1s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
	 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
	 *
	 * @element ANY
	 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
	 *     then the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-show" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-show" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-show {
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }

	      .animate-show.ng-hide-add, .animate-show.ng-hide-remove {
	        transition: all linear 0.5s;
	      }

	      .animate-show.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }

	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();

	        element(by.model('checked')).click();

	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
      var ngShowDirective = [
          '$animate',
          function ($animate) {
            return {
              restrict: 'A',
              multiElement: true,
              link: function (scope, element, attr) {
                scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
                  // we're adding a temporary, animation-specific class for ng-hide since this way
                  // we can control when the element is actually displayed on screen without having
                  // to have a global/greedy CSS selector that breaks when other animations are run.
                  // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
                  $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, { tempClasses: NG_HIDE_IN_PROGRESS_CLASS });
                });
              }
            };
          }
        ];
      /**
	 * @ngdoc directive
	 * @name ngHide
	 * @multiElement
	 *
	 * @description
	 * The `ngHide` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
	 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is hidden) -->
	 * <div ng-hide="myValue" class="ng-hide"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is visible) -->
	 * <div ng-hide="myValue"></div>
	 * ```
	 *
	 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class in CSS:
	 *
	 * ```css
	 * .ng-hide {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngHide`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
	 * CSS class is added and removed for you instead of your own CSS class.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   transition: 0.5s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
	 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
	 *
	 * @element ANY
	 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
	 *     the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-hide" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-hide" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-hide {
	        transition: all linear 0.5s;
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }

	      .animate-hide.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }

	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();

	        element(by.model('checked')).click();

	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
      var ngHideDirective = [
          '$animate',
          function ($animate) {
            return {
              restrict: 'A',
              multiElement: true,
              link: function (scope, element, attr) {
                scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
                  // The comment inside of the ngShowDirective explains why we add and
                  // remove a temporary class for the show/hide animation
                  $animate[value ? 'addClass' : 'removeClass'](element, NG_HIDE_CLASS, { tempClasses: NG_HIDE_IN_PROGRESS_CLASS });
                });
              }
            };
          }
        ];
      /**
	 * @ngdoc directive
	 * @name ngStyle
	 * @restrict AC
	 *
	 * @description
	 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
	 *
	 * @element ANY
	 * @param {expression} ngStyle
	 *
	 * {@link guide/expression Expression} which evals to an
	 * object whose keys are CSS style names and values are corresponding values for those CSS
	 * keys.
	 *
	 * Since some CSS style names are not valid keys for an object, they must be quoted.
	 * See the 'background-color' style in the example below.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
	        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
	        <input type="button" value="clear" ng-click="myStyle={}">
	        <br/>
	        <span ng-style="myStyle">Sample Text</span>
	        <pre>myStyle={{myStyle}}</pre>
	     </file>
	     <file name="style.css">
	       span {
	         color: black;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var colorSpan = element(by.css('span'));

	       it('should check ng-style', function() {
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	         element(by.css('input[value=\'set color\']')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
	         element(by.css('input[value=clear]')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	       });
	     </file>
	   </example>
	 */
      var ngStyleDirective = ngDirective(function (scope, element, attr) {
          scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
            if (oldStyles && newStyles !== oldStyles) {
              forEach(oldStyles, function (val, style) {
                element.css(style, '');
              });
            }
            if (newStyles)
              element.css(newStyles);
          }, true);
        });
      /**
	 * @ngdoc directive
	 * @name ngSwitch
	 * @restrict EA
	 *
	 * @description
	 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
	 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
	 * as specified in the template.
	 *
	 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
	 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
	 * matches the value obtained from the evaluated expression. In other words, you define a container element
	 * (where you place the directive), place an expression on the **`on="..."` attribute**
	 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
	 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
	 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
	 * attribute is displayed.
	 *
	 * <div class="alert alert-info">
	 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
	 * as literal string values to match against.
	 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
	 * value of the expression `$scope.someVal`.
	 * </div>

	 * @animations
	 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
	 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
	 *
	 * @usage
	 *
	 * ```
	 * <ANY ng-switch="expression">
	 *   <ANY ng-switch-when="matchValue1">...</ANY>
	 *   <ANY ng-switch-when="matchValue2">...</ANY>
	 *   <ANY ng-switch-default>...</ANY>
	 * </ANY>
	 * ```
	 *
	 *
	 * @scope
	 * @priority 1200
	 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
	 * On child elements add:
	 *
	 * * `ngSwitchWhen`: the case statement to match against. If match then this
	 *   case will be displayed. If the same match appears multiple times, all the
	 *   elements will be displayed.
	 * * `ngSwitchDefault`: the default case when no other case match. If there
	 *   are multiple default cases, all of them will be displayed when no other
	 *   case match.
	 *
	 *
	 * @example
	  <example module="switchExample" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <select ng-model="selection" ng-options="item for item in items">
	        </select>
	        <code>selection={{selection}}</code>
	        <hr/>
	        <div class="animate-switch-container"
	          ng-switch on="selection">
	            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
	            <div class="animate-switch" ng-switch-when="home">Home Span</div>
	            <div class="animate-switch" ng-switch-default>default</div>
	        </div>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('switchExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.items = ['settings', 'home', 'other'];
	          $scope.selection = $scope.items[0];
	        }]);
	    </file>
	    <file name="animations.css">
	      .animate-switch-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }

	      .animate-switch {
	        padding:10px;
	      }

	      .animate-switch.ng-animate {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	      }

	      .animate-switch.ng-leave.ng-leave-active,
	      .animate-switch.ng-enter {
	        top:-50px;
	      }
	      .animate-switch.ng-leave,
	      .animate-switch.ng-enter.ng-enter-active {
	        top:0;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var switchElem = element(by.css('[ng-switch]'));
	      var select = element(by.model('selection'));

	      it('should start in settings', function() {
	        expect(switchElem.getText()).toMatch(/Settings Div/);
	      });
	      it('should change to home', function() {
	        select.all(by.css('option')).get(1).click();
	        expect(switchElem.getText()).toMatch(/Home Span/);
	      });
	      it('should select default', function() {
	        select.all(by.css('option')).get(2).click();
	        expect(switchElem.getText()).toMatch(/default/);
	      });
	    </file>
	  </example>
	 */
      var ngSwitchDirective = [
          '$animate',
          function ($animate) {
            return {
              require: 'ngSwitch',
              controller: [
                '$scope',
                function ngSwitchController() {
                  this.cases = {};
                }
              ],
              link: function (scope, element, attr, ngSwitchController) {
                var watchExpr = attr.ngSwitch || attr.on, selectedTranscludes = [], selectedElements = [], previousLeaveAnimations = [], selectedScopes = [];
                var spliceFactory = function (array, index) {
                  return function () {
                    array.splice(index, 1);
                  };
                };
                scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
                  var i, ii;
                  for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {
                    $animate.cancel(previousLeaveAnimations[i]);
                  }
                  previousLeaveAnimations.length = 0;
                  for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
                    var selected = getBlockNodes(selectedElements[i].clone);
                    selectedScopes[i].$destroy();
                    var promise = previousLeaveAnimations[i] = $animate.leave(selected);
                    promise.then(spliceFactory(previousLeaveAnimations, i));
                  }
                  selectedElements.length = 0;
                  selectedScopes.length = 0;
                  if (selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?']) {
                    forEach(selectedTranscludes, function (selectedTransclude) {
                      selectedTransclude.transclude(function (caseElement, selectedScope) {
                        selectedScopes.push(selectedScope);
                        var anchor = selectedTransclude.element;
                        caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');
                        var block = { clone: caseElement };
                        selectedElements.push(block);
                        $animate.enter(caseElement, anchor.parent(), anchor);
                      });
                    });
                  }
                });
              }
            };
          }
        ];
      var ngSwitchWhenDirective = ngDirective({
          transclude: 'element',
          priority: 1200,
          require: '^ngSwitch',
          multiElement: true,
          link: function (scope, element, attrs, ctrl, $transclude) {
            ctrl.cases['!' + attrs.ngSwitchWhen] = ctrl.cases['!' + attrs.ngSwitchWhen] || [];
            ctrl.cases['!' + attrs.ngSwitchWhen].push({
              transclude: $transclude,
              element: element
            });
          }
        });
      var ngSwitchDefaultDirective = ngDirective({
          transclude: 'element',
          priority: 1200,
          require: '^ngSwitch',
          multiElement: true,
          link: function (scope, element, attr, ctrl, $transclude) {
            ctrl.cases['?'] = ctrl.cases['?'] || [];
            ctrl.cases['?'].push({
              transclude: $transclude,
              element: element
            });
          }
        });
      /**
	 * @ngdoc directive
	 * @name ngTransclude
	 * @restrict EAC
	 *
	 * @description
	 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
	 *
	 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
	 *
	 * @element ANY
	 *
	 * @example
	   <example module="transcludeExample">
	     <file name="index.html">
	       <script>
	         angular.module('transcludeExample', [])
	          .directive('pane', function(){
	             return {
	               restrict: 'E',
	               transclude: true,
	               scope: { title:'@' },
	               template: '<div style="border: 1px solid black;">' +
	                           '<div style="background-color: gray">{{title}}</div>' +
	                           '<ng-transclude></ng-transclude>' +
	                         '</div>'
	             };
	         })
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.title = 'Lorem Ipsum';
	           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	         }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input ng-model="title" aria-label="title"> <br/>
	         <textarea ng-model="text" aria-label="text"></textarea> <br/>
	         <pane title="{{title}}">{{text}}</pane>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	        it('should have transcluded', function() {
	          var titleElement = element(by.model('title'));
	          titleElement.clear();
	          titleElement.sendKeys('TITLE');
	          var textElement = element(by.model('text'));
	          textElement.clear();
	          textElement.sendKeys('TEXT');
	          expect(element(by.binding('title')).getText()).toEqual('TITLE');
	          expect(element(by.binding('text')).getText()).toEqual('TEXT');
	        });
	     </file>
	   </example>
	 *
	 */
      var ngTranscludeDirective = ngDirective({
          restrict: 'EAC',
          link: function ($scope, $element, $attrs, controller, $transclude) {
            if (!$transclude) {
              throw minErr('ngTransclude')('orphan', 'Illegal use of ngTransclude directive in the template! ' + 'No parent directive that requires a transclusion found. ' + 'Element: {0}', startingTag($element));
            }
            $transclude(function (clone) {
              $element.empty();
              $element.append(clone);
            });
          }
        });
      /**
	 * @ngdoc directive
	 * @name script
	 * @restrict E
	 *
	 * @description
	 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
	 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
	 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
	 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
	 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
	 *
	 * @param {string} type Must be set to `'text/ng-template'`.
	 * @param {string} id Cache name of the template.
	 *
	 * @example
	  <example>
	    <file name="index.html">
	      <script type="text/ng-template" id="/tpl.html">
	        Content of the template.
	      </script>

	      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
	      <div id="tpl-content" ng-include src="currentTpl"></div>
	    </file>
	    <file name="protractor.js" type="protractor">
	      it('should load template defined inside script tag', function() {
	        element(by.css('#tpl-link')).click();
	        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
	      });
	    </file>
	  </example>
	 */
      var scriptDirective = [
          '$templateCache',
          function ($templateCache) {
            return {
              restrict: 'E',
              terminal: true,
              compile: function (element, attr) {
                if (attr.type == 'text/ng-template') {
                  var templateUrl = attr.id, text = element[0].text;
                  $templateCache.put(templateUrl, text);
                }
              }
            };
          }
        ];
      var noopNgModelController = {
          $setViewValue: noop,
          $render: noop
        };
      /**
	 * @ngdoc type
	 * @name  select.SelectController
	 * @description
	 * The controller for the `<select>` directive. This provides support for reading
	 * and writing the selected value(s) of the control and also coordinates dynamically
	 * added `<option>` elements, perhaps by an `ngRepeat` directive.
	 */
      var SelectController = [
          '$element',
          '$scope',
          '$attrs',
          function ($element, $scope, $attrs) {
            var self = this, optionsMap = new HashMap();
            // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
            self.ngModelCtrl = noopNgModelController;
            // The "unknown" option is one that is prepended to the list if the viewValue
            // does not match any of the options. When it is rendered the value of the unknown
            // option is '? XXX ?' where XXX is the hashKey of the value that is not known.
            //
            // We can't just jqLite('<option>') since jqLite is not smart enough
            // to create it in <select> and IE barfs otherwise.
            self.unknownOption = jqLite(document.createElement('option'));
            self.renderUnknownOption = function (val) {
              var unknownVal = '? ' + hashKey(val) + ' ?';
              self.unknownOption.val(unknownVal);
              $element.prepend(self.unknownOption);
              $element.val(unknownVal);
            };
            $scope.$on('$destroy', function () {
              // disable unknown option so that we don't do work when the whole select is being destroyed
              self.renderUnknownOption = noop;
            });
            self.removeUnknownOption = function () {
              if (self.unknownOption.parent())
                self.unknownOption.remove();
            };
            // Read the value of the select control, the implementation of this changes depending
            // upon whether the select can have multiple values and whether ngOptions is at work.
            self.readValue = function readSingleValue() {
              self.removeUnknownOption();
              return $element.val();
            };
            // Write the value to the select control, the implementation of this changes depending
            // upon whether the select can have multiple values and whether ngOptions is at work.
            self.writeValue = function writeSingleValue(value) {
              if (self.hasOption(value)) {
                self.removeUnknownOption();
                $element.val(value);
                if (value === '')
                  self.emptyOption.prop('selected', true);  // to make IE9 happy
              } else {
                if (value == null && self.emptyOption) {
                  self.removeUnknownOption();
                  $element.val('');
                } else {
                  self.renderUnknownOption(value);
                }
              }
            };
            // Tell the select control that an option, with the given value, has been added
            self.addOption = function (value, element) {
              assertNotHasOwnProperty(value, '"option value"');
              if (value === '') {
                self.emptyOption = element;
              }
              var count = optionsMap.get(value) || 0;
              optionsMap.put(value, count + 1);
            };
            // Tell the select control that an option, with the given value, has been removed
            self.removeOption = function (value) {
              var count = optionsMap.get(value);
              if (count) {
                if (count === 1) {
                  optionsMap.remove(value);
                  if (value === '') {
                    self.emptyOption = undefined;
                  }
                } else {
                  optionsMap.put(value, count - 1);
                }
              }
            };
            // Check whether the select control has an option matching the given value
            self.hasOption = function (value) {
              return !!optionsMap.get(value);
            };
          }
        ];
      /**
	 * @ngdoc directive
	 * @name select
	 * @restrict E
	 *
	 * @description
	 * HTML `SELECT` element with angular data-binding.
	 *
	 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding
	 * between the scope and the `<select>` control (including setting default values).
	 * Ìt also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or
	 * {@link ngOptions `ngOptions`} directives.
	 *
	 * When an item in the `<select>` menu is selected, the value of the selected option will be bound
	 * to the model identified by the `ngModel` directive. With static or repeated options, this is
	 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.
	 * If you want dynamic value attributes, you can use interpolation inside the value attribute.
	 *
	 * <div class="alert alert-warning">
	 * Note that the value of a `select` directive used without `ngOptions` is always a string.
	 * When the model needs to be bound to a non-string value, you must either explictly convert it
	 * using a directive (see example below) or use `ngOptions` to specify the set of options.
	 * This is because an option element can only be bound to string values at present.
	 * </div>
	 *
	 * If the viewValue of `ngModel` does not match any of the options, then the control
	 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * <div class="alert alert-info">
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
	 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits, such as
	 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression, and additionally in reducing memory and increasing speed by not creating
	 * a new scope for each repeated instance.
	 * </div>
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds required attribute and required validation constraint to
	 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required
	 * when you want to data-bind to the required attribute.
	 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user
	 *    interaction with the select element.
	 * @param {string=} ngOptions sets the options that the select is populated with and defines what is
	 * set on the model on selection. See {@link ngOptions `ngOptions`}.
	 *
	 * @example
	 * ### Simple `select` elements with static options
	 *
	 * <example name="static-select" module="staticSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="singleSelect"> Single select: </label><br>
	 *     <select name="singleSelect" ng-model="data.singleSelect">
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *
	 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>
	 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">
	 *       <option value="">---Please select---</option> <!-- not selected / blank option -->
	 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
	 *     <tt>singleSelect = {{data.singleSelect}}</tt>
	 *
	 *     <hr>
	 *     <label for="multipleSelect"> Multiple select: </label><br>
	 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *       <option value="option-3">Option 3</option>
	 *     </select><br>
	 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>
	 *   </form>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('staticSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       singleSelect: null,
	 *       multipleSelect: [],
	 *       option1: 'option-1',
	 *      };
	 *
	 *      $scope.forceUnknownOption = function() {
	 *        $scope.data.singleSelect = 'nonsense';
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `ngRepeat` to generate `select` options
	 * <example name="ngrepeat-select" module="ngrepeatSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="repeatSelect"> Repeat select: </label>
	 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.repeatSelect">
	 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>
	 *     </select>
	 *   </form>
	 *   <hr>
	 *   <tt>repeatSelect = {{data.repeatSelect}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('ngrepeatSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       repeatSelect: null,
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ],
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 *
	 * ### Using `select` with `ngOptions` and setting a default value
	 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.
	 *
	 * <example name="select-with-default-values" module="defaultValueSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="mySelect">Make a choice:</label>
	 *     <select name="mySelect" id="mySelect"
	 *       ng-options="option.name for option in data.availableOptions track by option.id"
	 *       ng-model="data.selectedOption"></select>
	 *   </form>
	 *   <hr>
	 *   <tt>option = {{data.selectedOption}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('defaultValueSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ],
	 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui
	 *       };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 *
	 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting
	 *
	 * <example name="select-with-non-string-options" module="nonStringSelect">
	 *   <file name="index.html">
	 *     <select ng-model="model.id" convert-to-number>
	 *       <option value="0">Zero</option>
	 *       <option value="1">One</option>
	 *       <option value="2">Two</option>
	 *     </select>
	 *     {{ model }}
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('nonStringSelect', [])
	 *       .run(function($rootScope) {
	 *         $rootScope.model = { id: 2 };
	 *       })
	 *       .directive('convertToNumber', function() {
	 *         return {
	 *           require: 'ngModel',
	 *           link: function(scope, element, attrs, ngModel) {
	 *             ngModel.$parsers.push(function(val) {
	 *               return parseInt(val, 10);
	 *             });
	 *             ngModel.$formatters.push(function(val) {
	 *               return '' + val;
	 *             });
	 *           }
	 *         };
	 *       });
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should initialize to model', function() {
	 *       var select = element(by.css('select'));
	 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
	 *     });
	 *   </file>
	 * </example>
	 *
	 */
      var selectDirective = function () {
        return {
          restrict: 'E',
          require: [
            'select',
            '?ngModel'
          ],
          controller: SelectController,
          link: function (scope, element, attr, ctrls) {
            // if ngModel is not defined, we don't need to do anything
            var ngModelCtrl = ctrls[1];
            if (!ngModelCtrl)
              return;
            var selectCtrl = ctrls[0];
            selectCtrl.ngModelCtrl = ngModelCtrl;
            // We delegate rendering to the `writeValue` method, which can be changed
            // if the select can have multiple selected values or if the options are being
            // generated by `ngOptions`
            ngModelCtrl.$render = function () {
              selectCtrl.writeValue(ngModelCtrl.$viewValue);
            };
            // When the selected item(s) changes we delegate getting the value of the select control
            // to the `readValue` method, which can be changed if the select can have multiple
            // selected values or if the options are being generated by `ngOptions`
            element.on('change', function () {
              scope.$apply(function () {
                ngModelCtrl.$setViewValue(selectCtrl.readValue());
              });
            });
            // If the select allows multiple values then we need to modify how we read and write
            // values from and to the control; also what it means for the value to be empty and
            // we have to add an extra watch since ngModel doesn't work well with arrays - it
            // doesn't trigger rendering if only an item in the array changes.
            if (attr.multiple) {
              // Read value now needs to check each option to see if it is selected
              selectCtrl.readValue = function readMultipleValue() {
                var array = [];
                forEach(element.find('option'), function (option) {
                  if (option.selected) {
                    array.push(option.value);
                  }
                });
                return array;
              };
              // Write value now needs to set the selected property of each matching option
              selectCtrl.writeValue = function writeMultipleValue(value) {
                var items = new HashMap(value);
                forEach(element.find('option'), function (option) {
                  option.selected = isDefined(items.get(option.value));
                });
              };
              // we have to do it on each watch since ngModel watches reference, but
              // we need to work of an array, so we need to see if anything was inserted/removed
              var lastView, lastViewRef = NaN;
              scope.$watch(function selectMultipleWatch() {
                if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
                  lastView = shallowCopy(ngModelCtrl.$viewValue);
                  ngModelCtrl.$render();
                }
                lastViewRef = ngModelCtrl.$viewValue;
              });
              // If we are a multiple select then value is now a collection
              // so the meaning of $isEmpty changes
              ngModelCtrl.$isEmpty = function (value) {
                return !value || value.length === 0;
              };
            }
          }
        };
      };
      // The option directive is purely designed to communicate the existence (or lack of)
      // of dynamically created (and destroyed) option elements to their containing select
      // directive via its controller.
      var optionDirective = [
          '$interpolate',
          function ($interpolate) {
            function chromeHack(optionElement) {
              // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
              // Adding an <option selected="selected"> element to a <select required="required"> should
              // automatically select the new element
              if (optionElement[0].hasAttribute('selected')) {
                optionElement[0].selected = true;
              }
            }
            return {
              restrict: 'E',
              priority: 100,
              compile: function (element, attr) {
                if (isDefined(attr.value)) {
                  // If the value attribute is defined, check if it contains an interpolation
                  var valueInterpolated = $interpolate(attr.value, true);
                } else {
                  // If the value attribute is not defined then we fall back to the
                  // text content of the option element, which may be interpolated
                  var interpolateFn = $interpolate(element.text(), true);
                  if (!interpolateFn) {
                    attr.$set('value', element.text());
                  }
                }
                return function (scope, element, attr) {
                  // This is an optimization over using ^^ since we don't want to have to search
                  // all the way to the root of the DOM for every single option element
                  var selectCtrlName = '$selectController', parent = element.parent(), selectCtrl = parent.data(selectCtrlName) || parent.parent().data(selectCtrlName);
                  // in case we are in optgroup
                  function addOption(optionValue) {
                    selectCtrl.addOption(optionValue, element);
                    selectCtrl.ngModelCtrl.$render();
                    chromeHack(element);
                  }
                  // Only update trigger option updates if this is an option within a `select`
                  // that also has `ngModel` attached
                  if (selectCtrl && selectCtrl.ngModelCtrl) {
                    if (valueInterpolated) {
                      // The value attribute is interpolated
                      var oldVal;
                      attr.$observe('value', function valueAttributeObserveAction(newVal) {
                        if (isDefined(oldVal)) {
                          selectCtrl.removeOption(oldVal);
                        }
                        oldVal = newVal;
                        addOption(newVal);
                      });
                    } else if (interpolateFn) {
                      // The text content is interpolated
                      scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
                        attr.$set('value', newVal);
                        if (oldVal !== newVal) {
                          selectCtrl.removeOption(oldVal);
                        }
                        addOption(newVal);
                      });
                    } else {
                      // The value attribute is static
                      addOption(attr.value);
                    }
                    element.on('$destroy', function () {
                      selectCtrl.removeOption(attr.value);
                      selectCtrl.ngModelCtrl.$render();
                    });
                  }
                };
              }
            };
          }
        ];
      var styleDirective = valueFn({
          restrict: 'E',
          terminal: false
        });
      var requiredDirective = function () {
        return {
          restrict: 'A',
          require: '?ngModel',
          link: function (scope, elm, attr, ctrl) {
            if (!ctrl)
              return;
            attr.required = true;
            // force truthy in case we are on non input element
            ctrl.$validators.required = function (modelValue, viewValue) {
              return !attr.required || !ctrl.$isEmpty(viewValue);
            };
            attr.$observe('required', function () {
              ctrl.$validate();
            });
          }
        };
      };
      var patternDirective = function () {
        return {
          restrict: 'A',
          require: '?ngModel',
          link: function (scope, elm, attr, ctrl) {
            if (!ctrl)
              return;
            var regexp, patternExp = attr.ngPattern || attr.pattern;
            attr.$observe('pattern', function (regex) {
              if (isString(regex) && regex.length > 0) {
                regex = new RegExp('^' + regex + '$');
              }
              if (regex && !regex.test) {
                throw minErr('ngPattern')('noregexp', 'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp, regex, startingTag(elm));
              }
              regexp = regex || undefined;
              ctrl.$validate();
            });
            ctrl.$validators.pattern = function (modelValue, viewValue) {
              // HTML5 pattern constraint validates the input value, so we validate the viewValue
              return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);
            };
          }
        };
      };
      var maxlengthDirective = function () {
        return {
          restrict: 'A',
          require: '?ngModel',
          link: function (scope, elm, attr, ctrl) {
            if (!ctrl)
              return;
            var maxlength = -1;
            attr.$observe('maxlength', function (value) {
              var intVal = toInt(value);
              maxlength = isNaN(intVal) ? -1 : intVal;
              ctrl.$validate();
            });
            ctrl.$validators.maxlength = function (modelValue, viewValue) {
              return maxlength < 0 || ctrl.$isEmpty(viewValue) || viewValue.length <= maxlength;
            };
          }
        };
      };
      var minlengthDirective = function () {
        return {
          restrict: 'A',
          require: '?ngModel',
          link: function (scope, elm, attr, ctrl) {
            if (!ctrl)
              return;
            var minlength = 0;
            attr.$observe('minlength', function (value) {
              minlength = toInt(value) || 0;
              ctrl.$validate();
            });
            ctrl.$validators.minlength = function (modelValue, viewValue) {
              return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
            };
          }
        };
      };
      if (window.angular.bootstrap) {
        //AngularJS is already loaded, so we can return here...
        console.log('WARNING: Tried to load angular more than once.');
        return;
      }
      //try to bind to jquery now so that one can write jqLite(document).ready()
      //but we will rebind on bootstrap again.
      bindJQuery();
      publishExternalAPI(angular);
      angular.module('ngLocale', [], [
        '$provide',
        function ($provide) {
          var PLURAL_CATEGORY = {
              ZERO: 'zero',
              ONE: 'one',
              TWO: 'two',
              FEW: 'few',
              MANY: 'many',
              OTHER: 'other'
            };
          function getDecimals(n) {
            n = n + '';
            var i = n.indexOf('.');
            return i == -1 ? 0 : n.length - i - 1;
          }
          function getVF(n, opt_precision) {
            var v = opt_precision;
            if (undefined === v) {
              v = Math.min(getDecimals(n), 3);
            }
            var base = Math.pow(10, v);
            var f = (n * base | 0) % base;
            return {
              v: v,
              f: f
            };
          }
          $provide.value('$locale', {
            'DATETIME_FORMATS': {
              'AMPMS': [
                'AM',
                'PM'
              ],
              'DAY': [
                'Sunday',
                'Monday',
                'Tuesday',
                'Wednesday',
                'Thursday',
                'Friday',
                'Saturday'
              ],
              'ERANAMES': [
                'Before Christ',
                'Anno Domini'
              ],
              'ERAS': [
                'BC',
                'AD'
              ],
              'FIRSTDAYOFWEEK': 6,
              'MONTH': [
                'January',
                'February',
                'March',
                'April',
                'May',
                'June',
                'July',
                'August',
                'September',
                'October',
                'November',
                'December'
              ],
              'SHORTDAY': [
                'Sun',
                'Mon',
                'Tue',
                'Wed',
                'Thu',
                'Fri',
                'Sat'
              ],
              'SHORTMONTH': [
                'Jan',
                'Feb',
                'Mar',
                'Apr',
                'May',
                'Jun',
                'Jul',
                'Aug',
                'Sep',
                'Oct',
                'Nov',
                'Dec'
              ],
              'WEEKENDRANGE': [
                5,
                6
              ],
              'fullDate': 'EEEE, MMMM d, y',
              'longDate': 'MMMM d, y',
              'medium': 'MMM d, y h:mm:ss a',
              'mediumDate': 'MMM d, y',
              'mediumTime': 'h:mm:ss a',
              'short': 'M/d/yy h:mm a',
              'shortDate': 'M/d/yy',
              'shortTime': 'h:mm a'
            },
            'NUMBER_FORMATS': {
              'CURRENCY_SYM': '$',
              'DECIMAL_SEP': '.',
              'GROUP_SEP': ',',
              'PATTERNS': [
                {
                  'gSize': 3,
                  'lgSize': 3,
                  'maxFrac': 3,
                  'minFrac': 0,
                  'minInt': 1,
                  'negPre': '-',
                  'negSuf': '',
                  'posPre': '',
                  'posSuf': ''
                },
                {
                  'gSize': 3,
                  'lgSize': 3,
                  'maxFrac': 2,
                  'minFrac': 2,
                  'minInt': 1,
                  'negPre': '-\xa4',
                  'negSuf': '',
                  'posPre': '\xa4',
                  'posSuf': ''
                }
              ]
            },
            'id': 'en-us',
            'pluralCat': function (n, opt_precision) {
              var i = n | 0;
              var vf = getVF(n, opt_precision);
              if (i == 1 && vf.v == 0) {
                return PLURAL_CATEGORY.ONE;
              }
              return PLURAL_CATEGORY.OTHER;
            }
          });
        }
      ]);
      jqLite(document).ready(function () {
        angularInit(document, bootstrap);
      });
    }(window, document));
    !window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');  /***/
  },
  function (module, exports, __webpack_require__) {
    // style-loader: Adds some css to the DOM by adding a <style> tag
    // load the styles
    var content = __webpack_require__(9);
    if (typeof content === 'string')
      content = [[
          module.id,
          content,
          ''
        ]];
    // add the styles to the DOM
    var update = __webpack_require__(4)(content, {});
    if (content.locals)
      module.exports = content.locals;
    // Hot Module Replacement
    if (false) {
      // When the styles change, update the <style> tags
      if (!content.locals) {
        module.hot.accept('!!./../../node_modules/css-loader/index.js!./design.css', function () {
          var newContent = require('!!./../../node_modules/css-loader/index.js!./design.css');
          if (typeof newContent === 'string')
            newContent = [[
                module.id,
                newContent,
                ''
              ]];
          update(newContent);
        });
      }
      // When the module is disposed, remove the <style> tags
      module.hot.dispose(function () {
        update();
      });
    }  /***/
  },
  function (module, exports, __webpack_require__) {
    exports = module.exports = __webpack_require__(3)();
    // imports
    // module
    exports.push([
      module.id,
      'body{\n\tfont-family: cursive;\n}',
      ''
    ]);  // exports
         /***/
  },
  function (module, exports) {
    var invokeDirective = function (angularModule) {
      angularModule.directive('tree', [
        '$http',
        function ($http) {
          return {
            restrict: 'A',
            templateUrl: 'public/directive/sampleTemplate.html',
            link: function (scope, element, attrs) {
              var request = $http({
                  method: 'get',
                  url: 'public/dummy.json',
                  data: { name: 'pradeep' }
                });
              request.then(function (res) {
                scope.newComp = res.data.components;
              }, function (err) {
                debugger;
              });
            }
          };
        }
      ]);
    };
    module.exports = invokeDirective;  /***/
  },
  function (module, exports, __webpack_require__) {
    'use strict';
    module.exports = __webpack_require__(12);  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */
      /* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
      'use strict';
      var ReactCurrentOwner = __webpack_require__(14);
      var ReactDOMTextComponent = __webpack_require__(15);
      var ReactDefaultInjection = __webpack_require__(80);
      var ReactInstanceHandles = __webpack_require__(54);
      var ReactMount = __webpack_require__(37);
      var ReactPerf = __webpack_require__(27);
      var ReactReconciler = __webpack_require__(59);
      var ReactUpdates = __webpack_require__(63);
      var ReactVersion = __webpack_require__(155);
      var findDOMNode = __webpack_require__(100);
      var renderSubtreeIntoContainer = __webpack_require__(156);
      var warning = __webpack_require__(34);
      ReactDefaultInjection.inject();
      var render = ReactPerf.measure('React', 'render', ReactMount.render);
      var React = {
          findDOMNode: findDOMNode,
          render: render,
          unmountComponentAtNode: ReactMount.unmountComponentAtNode,
          version: ReactVersion,
          unstable_batchedUpdates: ReactUpdates.batchedUpdates,
          unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
        };
      // Inject the runtime into a devtools global hook regardless of browser.
      // Allows for debugging when the hook is injected on the page.
      /* eslint-enable camelcase */
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
          CurrentOwner: ReactCurrentOwner,
          InstanceHandles: ReactInstanceHandles,
          Mount: ReactMount,
          Reconciler: ReactReconciler,
          TextComponent: ReactDOMTextComponent
        });
      }
      if (process.env.NODE_ENV !== 'production') {
        var ExecutionEnvironment = __webpack_require__(18);
        if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
          // First check if devtools is not installed
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
            // If we're in Chrome or Firefox, provide a download link if not installed.
            if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
              console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
            }
          }
          // If we're in IE8, check to see if we are in compatibility mode and provide
          // information on preventing compatibility mode
          var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
          process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;
          var expectedFeatures = [
              Array.isArray,
              Array.prototype.every,
              Array.prototype.forEach,
              Array.prototype.indexOf,
              Array.prototype.map,
              Date.now,
              Function.prototype.bind,
              Object.keys,
              String.prototype.split,
              String.prototype.trim,
              Object.create,
              Object.freeze
            ];
          for (var i = 0; i < expectedFeatures.length; i++) {
            if (!expectedFeatures[i]) {
              console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
              break;
            }
          }
        }
      }
      module.exports = React;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports) {
    // shim for using process in browser
    var process = module.exports = {};
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    function cleanUpNextTick() {
      draining = false;
      if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }
      if (queue.length) {
        drainQueue();
      }
    }
    function drainQueue() {
      if (draining) {
        return;
      }
      var timeout = setTimeout(cleanUpNextTick);
      draining = true;
      var len = queue.length;
      while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }
        queueIndex = -1;
        len = queue.length;
      }
      currentQueue = null;
      draining = false;
      clearTimeout(timeout);
    }
    process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
      }
    };
    // v8 likes predictible objects
    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }
    Item.prototype.run = function () {
      this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = '';
    // empty string to avoid regexp issues
    process.versions = {};
    function noop() {
    }
    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.binding = function (name) {
      throw new Error('process.binding is not supported');
    };
    process.cwd = function () {
      return '/';
    };
    process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
    };
    process.umask = function () {
      return 0;
    };  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */
    'use strict';
    /**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
    var ReactCurrentOwner = { current: null };
    module.exports = ReactCurrentOwner;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */
      'use strict';
      var DOMChildrenOperations = __webpack_require__(16);
      var DOMPropertyOperations = __webpack_require__(31);
      var ReactComponentBrowserEnvironment = __webpack_require__(35);
      var ReactMount = __webpack_require__(37);
      var assign = __webpack_require__(48);
      var escapeTextContentForBrowser = __webpack_require__(30);
      var setTextContent = __webpack_require__(29);
      var validateDOMNesting = __webpack_require__(79);
      /**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
      var ReactDOMTextComponent = function (props) {
      };
      assign(ReactDOMTextComponent.prototype, {
        construct: function (text) {
          // TODO: This is really a ReactText (ReactNode), not a ReactElement
          this._currentElement = text;
          this._stringText = '' + text;
          // Properties
          this._rootNodeID = null;
          this._mountIndex = 0;
        },
        mountComponent: function (rootID, transaction, context) {
          if (process.env.NODE_ENV !== 'production') {
            if (context[validateDOMNesting.ancestorInfoContextKey]) {
              validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
            }
          }
          this._rootNodeID = rootID;
          if (transaction.useCreateElement) {
            var ownerDocument = context[ReactMount.ownerDocumentContextKey];
            var el = ownerDocument.createElement('span');
            DOMPropertyOperations.setAttributeForID(el, rootID);
            // Populate node cache
            ReactMount.getID(el);
            setTextContent(el, this._stringText);
            return el;
          } else {
            var escapedText = escapeTextContentForBrowser(this._stringText);
            if (transaction.renderToStaticMarkup) {
              // Normally we'd wrap this in a `span` for the reasons stated above, but
              // since this is a situation where React won't take over (static pages),
              // we can simply return the text as it is.
              return escapedText;
            }
            return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
          }
        },
        receiveComponent: function (nextText, transaction) {
          if (nextText !== this._currentElement) {
            this._currentElement = nextText;
            var nextStringText = '' + nextText;
            if (nextStringText !== this._stringText) {
              // TODO: Save this as pending props and use performUpdateIfNecessary
              // and/or updateComponent to do the actual update for consistency with
              // other component types?
              this._stringText = nextStringText;
              var node = ReactMount.getNode(this._rootNodeID);
              DOMChildrenOperations.updateTextContent(node, nextStringText);
            }
          }
        },
        unmountComponent: function () {
          ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
        }
      });
      module.exports = ReactDOMTextComponent;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */
      'use strict';
      var Danger = __webpack_require__(17);
      var ReactMultiChildUpdateTypes = __webpack_require__(25);
      var ReactPerf = __webpack_require__(27);
      var setInnerHTML = __webpack_require__(28);
      var setTextContent = __webpack_require__(29);
      var invariant = __webpack_require__(22);
      /**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
      function insertChildAt(parentNode, childNode, index) {
        // By exploiting arrays returning `undefined` for an undefined index, we can
        // rely exclusively on `insertBefore(node, null)` instead of also using
        // `appendChild(node)`. However, using `undefined` is not allowed by all
        // browsers so we must replace it with `null`.
        // fix render order error in safari
        // IE8 will throw error when index out of list size.
        var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);
        parentNode.insertBefore(childNode, beforeChild);
      }
      /**
	 * Operations for updating with DOM children.
	 */
      var DOMChildrenOperations = {
          dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,
          updateTextContent: setTextContent,
          processUpdates: function (updates, markupList) {
            var update;
            // Mapping from parent IDs to initial child orderings.
            var initialChildren = null;
            // List of children that will be moved or removed.
            var updatedChildren = null;
            for (var i = 0; i < updates.length; i++) {
              update = updates[i];
              if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
                var updatedIndex = update.fromIndex;
                var updatedChild = update.parentNode.childNodes[updatedIndex];
                var parentID = update.parentID;
                !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;
                initialChildren = initialChildren || {};
                initialChildren[parentID] = initialChildren[parentID] || [];
                initialChildren[parentID][updatedIndex] = updatedChild;
                updatedChildren = updatedChildren || [];
                updatedChildren.push(updatedChild);
              }
            }
            var renderedMarkup;
            // markupList is either a list of markup or just a list of elements
            if (markupList.length && typeof markupList[0] === 'string') {
              renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
            } else {
              renderedMarkup = markupList;
            }
            // Remove updated children first so that `toIndex` is consistent.
            if (updatedChildren) {
              for (var j = 0; j < updatedChildren.length; j++) {
                updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
              }
            }
            for (var k = 0; k < updates.length; k++) {
              update = updates[k];
              switch (update.type) {
              case ReactMultiChildUpdateTypes.INSERT_MARKUP:
                insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
                break;
              case ReactMultiChildUpdateTypes.MOVE_EXISTING:
                insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
                break;
              case ReactMultiChildUpdateTypes.SET_MARKUP:
                setInnerHTML(update.parentNode, update.content);
                break;
              case ReactMultiChildUpdateTypes.TEXT_CONTENT:
                setTextContent(update.parentNode, update.content);
                break;
              case ReactMultiChildUpdateTypes.REMOVE_NODE:
                // Already removed by the for-loop above.
                break;
              }
            }
          }
        };
      ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', { updateTextContent: 'updateTextContent' });
      module.exports = DOMChildrenOperations;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */
      'use strict';
      var ExecutionEnvironment = __webpack_require__(18);
      var createNodesFromMarkup = __webpack_require__(19);
      var emptyFunction = __webpack_require__(24);
      var getMarkupWrap = __webpack_require__(23);
      var invariant = __webpack_require__(22);
      var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
      var RESULT_INDEX_ATTR = 'data-danger-index';
      /**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
      function getNodeName(markup) {
        return markup.substring(1, markup.indexOf(' '));
      }
      var Danger = {
          dangerouslyRenderMarkup: function (markupList) {
            !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
            var nodeName;
            var markupByNodeName = {};
            // Group markup by `nodeName` if a wrap is necessary, else by '*'.
            for (var i = 0; i < markupList.length; i++) {
              !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
              nodeName = getNodeName(markupList[i]);
              nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
              markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
              markupByNodeName[nodeName][i] = markupList[i];
            }
            var resultList = [];
            var resultListAssignmentCount = 0;
            for (nodeName in markupByNodeName) {
              if (!markupByNodeName.hasOwnProperty(nodeName)) {
                continue;
              }
              var markupListByNodeName = markupByNodeName[nodeName];
              // This for-in loop skips the holes of the sparse array. The order of
              // iteration should follow the order of assignment, which happens to match
              // numerical index order, but we don't rely on that.
              var resultIndex;
              for (resultIndex in markupListByNodeName) {
                if (markupListByNodeName.hasOwnProperty(resultIndex)) {
                  var markup = markupListByNodeName[resultIndex];
                  // Push the requested markup with an additional RESULT_INDEX_ATTR
                  // attribute.  If the markup does not start with a < character, it
                  // will be discarded below (with an appropriate console.error).
                  markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP, '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
                }
              }
              // Render each group of markup with similar wrapping `nodeName`.
              var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction);
              for (var j = 0; j < renderNodes.length; ++j) {
                var renderNode = renderNodes[j];
                if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {
                  resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
                  renderNode.removeAttribute(RESULT_INDEX_ATTR);
                  !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;
                  resultList[resultIndex] = renderNode;
                  // This should match resultList.length and markupList.length when
                  // we're done.
                  resultListAssignmentCount += 1;
                } else if (process.env.NODE_ENV !== 'production') {
                  console.error('Danger: Discarding unexpected node:', renderNode);
                }
              }
            }
            // Although resultList was populated out of order, it should now be a dense
            // array.
            !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;
            !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;
            return resultList;
          },
          dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
            !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
            !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
            !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;
            var newChild;
            if (typeof markup === 'string') {
              newChild = createNodesFromMarkup(markup, emptyFunction)[0];
            } else {
              newChild = markup;
            }
            oldChild.parentNode.replaceChild(newChild, oldChild);
          }
        };
      module.exports = Danger;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */
    'use strict';
    var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
    /**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
    var ExecutionEnvironment = {
        canUseDOM: canUseDOM,
        canUseWorkers: typeof Worker !== 'undefined',
        canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
        canUseViewport: canUseDOM && !!window.screen,
        isInWorker: !canUseDOM
      };
    module.exports = ExecutionEnvironment;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */
      /*eslint-disable fb-www/unsafe-html*/
      'use strict';
      var ExecutionEnvironment = __webpack_require__(18);
      var createArrayFromMixed = __webpack_require__(20);
      var getMarkupWrap = __webpack_require__(23);
      var invariant = __webpack_require__(22);
      /**
	 * Dummy container used to render all markup.
	 */
      var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
      /**
	 * Pattern used by `getNodeName`.
	 */
      var nodeNamePattern = /^\s*<(\w+)/;
      /**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
      function getNodeName(markup) {
        var nodeNameMatch = markup.match(nodeNamePattern);
        return nodeNameMatch && nodeNameMatch[1].toLowerCase();
      }
      /**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
      function createNodesFromMarkup(markup, handleScript) {
        var node = dummyNode;
        !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
        var nodeName = getNodeName(markup);
        var wrap = nodeName && getMarkupWrap(nodeName);
        if (wrap) {
          node.innerHTML = wrap[1] + markup + wrap[2];
          var wrapDepth = wrap[0];
          while (wrapDepth--) {
            node = node.lastChild;
          }
        } else {
          node.innerHTML = markup;
        }
        var scripts = node.getElementsByTagName('script');
        if (scripts.length) {
          !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
          createArrayFromMixed(scripts).forEach(handleScript);
        }
        var nodes = createArrayFromMixed(node.childNodes);
        while (node.lastChild) {
          node.removeChild(node.lastChild);
        }
        return nodes;
      }
      module.exports = createNodesFromMarkup;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */
    'use strict';
    var toArray = __webpack_require__(21);
    /**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
    function hasArrayNature(obj) {
      return !!obj && (typeof obj == 'object' || typeof obj == 'function') && 'length' in obj && !('setInterval' in obj) && typeof obj.nodeType != 'number' && (Array.isArray(obj) || 'callee' in obj || 'item' in obj);
    }
    /**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
    function createArrayFromMixed(obj) {
      if (!hasArrayNature(obj)) {
        return [obj];
      } else if (Array.isArray(obj)) {
        return obj.slice();
      } else {
        return toArray(obj);
      }
    }
    module.exports = createArrayFromMixed;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */
      'use strict';
      var invariant = __webpack_require__(22);
      /**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
      function toArray(obj) {
        var length = obj.length;
        // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
        // old versions of Safari).
        !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;
        !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;
        !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;
        // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
        // without method will throw during the slice call and skip straight to the
        // fallback.
        if (obj.hasOwnProperty) {
          try {
            return Array.prototype.slice.call(obj);
          } catch (e) {
          }
        }
        // Fall back to copying key by key. This assumes all keys have a value,
        // so will not preserve sparsely populated inputs.
        var ret = Array(length);
        for (var ii = 0; ii < length; ii++) {
          ret[ii] = obj[ii];
        }
        return ret;
      }
      module.exports = toArray;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */
      'use strict';
      /**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
      var invariant = function (condition, format, a, b, c, d, e, f) {
        if (process.env.NODE_ENV !== 'production') {
          if (format === undefined) {
            throw new Error('invariant requires an error message argument');
          }
        }
        if (!condition) {
          var error;
          if (format === undefined) {
            error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
          } else {
            var args = [
                a,
                b,
                c,
                d,
                e,
                f
              ];
            var argIndex = 0;
            error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {
              return args[argIndex++];
            }));
          }
          error.framesToPop = 1;
          // we don't care about invariant's own frame
          throw error;
        }
      };
      module.exports = invariant;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */
      /*eslint-disable fb-www/unsafe-html */
      'use strict';
      var ExecutionEnvironment = __webpack_require__(18);
      var invariant = __webpack_require__(22);
      /**
	 * Dummy container used to detect which wraps are necessary.
	 */
      var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
      /**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
      var shouldWrap = {};
      var selectWrap = [
          1,
          '<select multiple="true">',
          '</select>'
        ];
      var tableWrap = [
          1,
          '<table>',
          '</table>'
        ];
      var trWrap = [
          3,
          '<table><tbody><tr>',
          '</tr></tbody></table>'
        ];
      var svgWrap = [
          1,
          '<svg xmlns="http://www.w3.org/2000/svg">',
          '</svg>'
        ];
      var markupWrap = {
          '*': [
            1,
            '?<div>',
            '</div>'
          ],
          'area': [
            1,
            '<map>',
            '</map>'
          ],
          'col': [
            2,
            '<table><tbody></tbody><colgroup>',
            '</colgroup></table>'
          ],
          'legend': [
            1,
            '<fieldset>',
            '</fieldset>'
          ],
          'param': [
            1,
            '<object>',
            '</object>'
          ],
          'tr': [
            2,
            '<table><tbody>',
            '</tbody></table>'
          ],
          'optgroup': selectWrap,
          'option': selectWrap,
          'caption': tableWrap,
          'colgroup': tableWrap,
          'tbody': tableWrap,
          'tfoot': tableWrap,
          'thead': tableWrap,
          'td': trWrap,
          'th': trWrap
        };
      // Initialize the SVG elements since we know they'll always need to be wrapped
      // consistently. If they are created inside a <div> they will be initialized in
      // the wrong namespace (and will not display).
      var svgElements = [
          'circle',
          'clipPath',
          'defs',
          'ellipse',
          'g',
          'image',
          'line',
          'linearGradient',
          'mask',
          'path',
          'pattern',
          'polygon',
          'polyline',
          'radialGradient',
          'rect',
          'stop',
          'text',
          'tspan'
        ];
      svgElements.forEach(function (nodeName) {
        markupWrap[nodeName] = svgWrap;
        shouldWrap[nodeName] = true;
      });
      /**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
      function getMarkupWrap(nodeName) {
        !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
        if (!markupWrap.hasOwnProperty(nodeName)) {
          nodeName = '*';
        }
        if (!shouldWrap.hasOwnProperty(nodeName)) {
          if (nodeName === '*') {
            dummyNode.innerHTML = '<link />';
          } else {
            dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
          }
          shouldWrap[nodeName] = !dummyNode.firstChild;
        }
        return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
      }
      module.exports = getMarkupWrap;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */
    'use strict';
    function makeEmptyFunction(arg) {
      return function () {
        return arg;
      };
    }
    /**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
    function emptyFunction() {
    }
    emptyFunction.thatReturns = makeEmptyFunction;
    emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
    emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
    emptyFunction.thatReturnsNull = makeEmptyFunction(null);
    emptyFunction.thatReturnsThis = function () {
      return this;
    };
    emptyFunction.thatReturnsArgument = function (arg) {
      return arg;
    };
    module.exports = emptyFunction;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */
    'use strict';
    var keyMirror = __webpack_require__(26);
    /**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
    var ReactMultiChildUpdateTypes = keyMirror({
        INSERT_MARKUP: null,
        MOVE_EXISTING: null,
        REMOVE_NODE: null,
        SET_MARKUP: null,
        TEXT_CONTENT: null
      });
    module.exports = ReactMultiChildUpdateTypes;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */
      'use strict';
      var invariant = __webpack_require__(22);
      /**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
      var keyMirror = function (obj) {
        var ret = {};
        var key;
        !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
        for (key in obj) {
          if (!obj.hasOwnProperty(key)) {
            continue;
          }
          ret[key] = key;
        }
        return ret;
      };
      module.exports = keyMirror;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */
      'use strict';
      /**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
      var ReactPerf = {
          enableMeasure: false,
          storedMeasure: _noMeasure,
          measureMethods: function (object, objectName, methodNames) {
            if (process.env.NODE_ENV !== 'production') {
              for (var key in methodNames) {
                if (!methodNames.hasOwnProperty(key)) {
                  continue;
                }
                object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
              }
            }
          },
          measure: function (objName, fnName, func) {
            if (process.env.NODE_ENV !== 'production') {
              var measuredFunc = null;
              var wrapper = function () {
                if (ReactPerf.enableMeasure) {
                  if (!measuredFunc) {
                    measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
                  }
                  return measuredFunc.apply(this, arguments);
                }
                return func.apply(this, arguments);
              };
              wrapper.displayName = objName + '_' + fnName;
              return wrapper;
            }
            return func;
          },
          injection: {
            injectMeasure: function (measure) {
              ReactPerf.storedMeasure = measure;
            }
          }
        };
      /**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
      function _noMeasure(objName, fnName, func) {
        return func;
      }
      module.exports = ReactPerf;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */
    /* globals MSApp */
    'use strict';
    var ExecutionEnvironment = __webpack_require__(18);
    var WHITESPACE_TEST = /^[ \r\n\t\f]/;
    var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
    /**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
    var setInnerHTML = function (node, html) {
      node.innerHTML = html;
    };
    // Win8 apps: Allow all html to be inserted
    if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
      setInnerHTML = function (node, html) {
        MSApp.execUnsafeLocalFunction(function () {
          node.innerHTML = html;
        });
      };
    }
    if (ExecutionEnvironment.canUseDOM) {
      // IE8: When updating a just created node with innerHTML only leading
      // whitespace is removed. When updating an existing node with innerHTML
      // whitespace in root TextNodes is also collapsed.
      // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
      // Feature detection; only IE8 is known to behave improperly like this.
      var testElement = document.createElement('div');
      testElement.innerHTML = ' ';
      if (testElement.innerHTML === '') {
        setInnerHTML = function (node, html) {
          // Magic theory: IE8 supposedly differentiates between added and updated
          // nodes when processing innerHTML, innerHTML on updated nodes suffers
          // from worse whitespace behavior. Re-adding a node like this triggers
          // the initial and more favorable whitespace behavior.
          // TODO: What to do on a detached node?
          if (node.parentNode) {
            node.parentNode.replaceChild(node, node);
          }
          // We also implement a workaround for non-visible tags disappearing into
          // thin air on IE8, this only happens if there is no visible text
          // in-front of the non-visible tags. Piggyback on the whitespace fix
          // and simply check if any non-visible tags appear in the source.
          if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
            // Recover leading whitespace by temporarily prepending any character.
            // \uFEFF has the potential advantage of being zero-width/invisible.
            // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
            // in hopes that this is preserved even if "\uFEFF" is transformed to
            // the actual Unicode character (by Babel, for example).
            // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
            node.innerHTML = String.fromCharCode(65279) + html;
            // deleteData leaves an empty `TextNode` which offsets the index of all
            // children. Definitely want to avoid this.
            var textNode = node.firstChild;
            if (textNode.data.length === 1) {
              node.removeChild(textNode);
            } else {
              textNode.deleteData(0, 1);
            }
          } else {
            node.innerHTML = html;
          }
        };
      }
    }
    module.exports = setInnerHTML;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */
    'use strict';
    var ExecutionEnvironment = __webpack_require__(18);
    var escapeTextContentForBrowser = __webpack_require__(30);
    var setInnerHTML = __webpack_require__(28);
    /**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
    var setTextContent = function (node, text) {
      node.textContent = text;
    };
    if (ExecutionEnvironment.canUseDOM) {
      if (!('textContent' in document.documentElement)) {
        setTextContent = function (node, text) {
          setInnerHTML(node, escapeTextContentForBrowser(text));
        };
      }
    }
    module.exports = setTextContent;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */
    'use strict';
    var ESCAPE_LOOKUP = {
        '&': '&amp;',
        '>': '&gt;',
        '<': '&lt;',
        '"': '&quot;',
        '\'': '&#x27;'
      };
    var ESCAPE_REGEX = /[&><"']/g;
    function escaper(match) {
      return ESCAPE_LOOKUP[match];
    }
    /**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
    function escapeTextContentForBrowser(text) {
      return ('' + text).replace(ESCAPE_REGEX, escaper);
    }
    module.exports = escapeTextContentForBrowser;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */
      'use strict';
      var DOMProperty = __webpack_require__(32);
      var ReactPerf = __webpack_require__(27);
      var quoteAttributeValueForBrowser = __webpack_require__(33);
      var warning = __webpack_require__(34);
      // Simplified subset
      var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
      var illegalAttributeNameCache = {};
      var validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
          return true;
        }
        if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
          return false;
        }
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
          validatedAttributeNameCache[attributeName] = true;
          return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
        return false;
      }
      function shouldIgnoreValue(propertyInfo, value) {
        return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
      }
      if (process.env.NODE_ENV !== 'production') {
        var reactProps = {
            children: true,
            dangerouslySetInnerHTML: true,
            key: true,
            ref: true
          };
        var warnedProperties = {};
        var warnUnknownProperty = function (name) {
          if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
            return;
          }
          warnedProperties[name] = true;
          var lowerCasedName = name.toLowerCase();
          // data-* attributes should be lowercase; suggest the lowercase version
          var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
          // For now, only warn when we have a suggested correction. This prevents
          // logging too much when using transferPropsTo.
          process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
        };
      }
      /**
	 * Operations for dealing with DOM properties.
	 */
      var DOMPropertyOperations = {
          createMarkupForID: function (id) {
            return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
          },
          setAttributeForID: function (node, id) {
            node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
          },
          createMarkupForProperty: function (name, value) {
            var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
            if (propertyInfo) {
              if (shouldIgnoreValue(propertyInfo, value)) {
                return '';
              }
              var attributeName = propertyInfo.attributeName;
              if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
                return attributeName + '=""';
              }
              return attributeName + '=' + quoteAttributeValueForBrowser(value);
            } else if (DOMProperty.isCustomAttribute(name)) {
              if (value == null) {
                return '';
              }
              return name + '=' + quoteAttributeValueForBrowser(value);
            } else if (process.env.NODE_ENV !== 'production') {
              warnUnknownProperty(name);
            }
            return null;
          },
          createMarkupForCustomAttribute: function (name, value) {
            if (!isAttributeNameSafe(name) || value == null) {
              return '';
            }
            return name + '=' + quoteAttributeValueForBrowser(value);
          },
          setValueForProperty: function (node, name, value) {
            var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
            if (propertyInfo) {
              var mutationMethod = propertyInfo.mutationMethod;
              if (mutationMethod) {
                mutationMethod(node, value);
              } else if (shouldIgnoreValue(propertyInfo, value)) {
                this.deleteValueForProperty(node, name);
              } else if (propertyInfo.mustUseAttribute) {
                var attributeName = propertyInfo.attributeName;
                var namespace = propertyInfo.attributeNamespace;
                // `setAttribute` with objects becomes only `[object]` in IE8/9,
                // ('' + value) makes it output the correct toString()-value.
                if (namespace) {
                  node.setAttributeNS(namespace, attributeName, '' + value);
                } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
                  node.setAttribute(attributeName, '');
                } else {
                  node.setAttribute(attributeName, '' + value);
                }
              } else {
                var propName = propertyInfo.propertyName;
                // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
                // property type before comparing; only `value` does and is string.
                if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
                  // Contrary to `setAttribute`, object properties are properly
                  // `toString`ed by IE8/9.
                  node[propName] = value;
                }
              }
            } else if (DOMProperty.isCustomAttribute(name)) {
              DOMPropertyOperations.setValueForAttribute(node, name, value);
            } else if (process.env.NODE_ENV !== 'production') {
              warnUnknownProperty(name);
            }
          },
          setValueForAttribute: function (node, name, value) {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (value == null) {
              node.removeAttribute(name);
            } else {
              node.setAttribute(name, '' + value);
            }
          },
          deleteValueForProperty: function (node, name) {
            var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
            if (propertyInfo) {
              var mutationMethod = propertyInfo.mutationMethod;
              if (mutationMethod) {
                mutationMethod(node, undefined);
              } else if (propertyInfo.mustUseAttribute) {
                node.removeAttribute(propertyInfo.attributeName);
              } else {
                var propName = propertyInfo.propertyName;
                var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
                if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
                  node[propName] = defaultValue;
                }
              }
            } else if (DOMProperty.isCustomAttribute(name)) {
              node.removeAttribute(name);
            } else if (process.env.NODE_ENV !== 'production') {
              warnUnknownProperty(name);
            }
          }
        };
      ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
        setValueForProperty: 'setValueForProperty',
        setValueForAttribute: 'setValueForAttribute',
        deleteValueForProperty: 'deleteValueForProperty'
      });
      module.exports = DOMPropertyOperations;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */
      'use strict';
      var invariant = __webpack_require__(22);
      function checkMask(value, bitmask) {
        return (value & bitmask) === bitmask;
      }
      var DOMPropertyInjection = {
          MUST_USE_ATTRIBUTE: 1,
          MUST_USE_PROPERTY: 2,
          HAS_SIDE_EFFECTS: 4,
          HAS_BOOLEAN_VALUE: 8,
          HAS_NUMERIC_VALUE: 16,
          HAS_POSITIVE_NUMERIC_VALUE: 32 | 16,
          HAS_OVERLOADED_BOOLEAN_VALUE: 64,
          injectDOMPropertyConfig: function (domPropertyConfig) {
            var Injection = DOMPropertyInjection;
            var Properties = domPropertyConfig.Properties || {};
            var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
            var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
            var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
            var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
            if (domPropertyConfig.isCustomAttribute) {
              DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
            }
            for (var propName in Properties) {
              !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;
              var lowerCased = propName.toLowerCase();
              var propConfig = Properties[propName];
              var propertyInfo = {
                  attributeName: lowerCased,
                  attributeNamespace: null,
                  propertyName: propName,
                  mutationMethod: null,
                  mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
                  mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
                  hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
                  hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
                  hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
                  hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
                  hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
                };
              !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
              !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
              !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;
              if (process.env.NODE_ENV !== 'production') {
                DOMProperty.getPossibleStandardName[lowerCased] = propName;
              }
              if (DOMAttributeNames.hasOwnProperty(propName)) {
                var attributeName = DOMAttributeNames[propName];
                propertyInfo.attributeName = attributeName;
                if (process.env.NODE_ENV !== 'production') {
                  DOMProperty.getPossibleStandardName[attributeName] = propName;
                }
              }
              if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
                propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
              }
              if (DOMPropertyNames.hasOwnProperty(propName)) {
                propertyInfo.propertyName = DOMPropertyNames[propName];
              }
              if (DOMMutationMethods.hasOwnProperty(propName)) {
                propertyInfo.mutationMethod = DOMMutationMethods[propName];
              }
              DOMProperty.properties[propName] = propertyInfo;
            }
          }
        };
      var defaultValueCache = {};
      /**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
      var DOMProperty = {
          ID_ATTRIBUTE_NAME: 'data-reactid',
          properties: {},
          getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,
          _isCustomAttributeFunctions: [],
          isCustomAttribute: function (attributeName) {
            for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
              var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
              if (isCustomAttributeFn(attributeName)) {
                return true;
              }
            }
            return false;
          },
          getDefaultValueForProperty: function (nodeName, prop) {
            var nodeDefaults = defaultValueCache[nodeName];
            var testElement;
            if (!nodeDefaults) {
              defaultValueCache[nodeName] = nodeDefaults = {};
            }
            if (!(prop in nodeDefaults)) {
              testElement = document.createElement(nodeName);
              nodeDefaults[prop] = testElement[prop];
            }
            return nodeDefaults[prop];
          },
          injection: DOMPropertyInjection
        };
      module.exports = DOMProperty;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */
    'use strict';
    var escapeTextContentForBrowser = __webpack_require__(30);
    /**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
    function quoteAttributeValueForBrowser(value) {
      return '"' + escapeTextContentForBrowser(value) + '"';
    }
    module.exports = quoteAttributeValueForBrowser;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */
      'use strict';
      var emptyFunction = __webpack_require__(24);
      /**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
      var warning = emptyFunction;
      if (process.env.NODE_ENV !== 'production') {
        warning = function (condition, format) {
          for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            args[_key - 2] = arguments[_key];
          }
          if (format === undefined) {
            throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
          }
          if (format.indexOf('Failed Composite propType: ') === 0) {
            return;  // Ignore CompositeComponent proptype check.
          }
          if (!condition) {
            var argIndex = 0;
            var message = 'Warning: ' + format.replace(/%s/g, function () {
                return args[argIndex++];
              });
            if (typeof console !== 'undefined') {
              console.error(message);
            }
            try {
              // --- Welcome to debugging React ---
              // This error was thrown as a convenience so that you can use this stack
              // to find the callsite that caused this warning to fire.
              throw new Error(message);
            } catch (x) {
            }
          }
        };
      }
      module.exports = warning;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */
    'use strict';
    var ReactDOMIDOperations = __webpack_require__(36);
    var ReactMount = __webpack_require__(37);
    /**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
    var ReactComponentBrowserEnvironment = {
        processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
        replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,
        unmountIDFromEnvironment: function (rootNodeID) {
          ReactMount.purgeID(rootNodeID);
        }
      };
    module.exports = ReactComponentBrowserEnvironment;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */
      'use strict';
      var DOMChildrenOperations = __webpack_require__(16);
      var DOMPropertyOperations = __webpack_require__(31);
      var ReactMount = __webpack_require__(37);
      var ReactPerf = __webpack_require__(27);
      var invariant = __webpack_require__(22);
      /**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
      var INVALID_PROPERTY_ERRORS = {
          dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
          style: '`style` must be set using `updateStylesByID()`.'
        };
      /**
	 * Operations used to process updates to DOM nodes.
	 */
      var ReactDOMIDOperations = {
          updatePropertyByID: function (id, name, value) {
            var node = ReactMount.getNode(id);
            !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;
            // If we're updating to null or undefined, we should remove the property
            // from the DOM node instead of inadvertantly setting to a string. This
            // brings us in line with the same behavior we have on initial render.
            if (value != null) {
              DOMPropertyOperations.setValueForProperty(node, name, value);
            } else {
              DOMPropertyOperations.deleteValueForProperty(node, name);
            }
          },
          dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
            var node = ReactMount.getNode(id);
            DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
          },
          dangerouslyProcessChildrenUpdates: function (updates, markup) {
            for (var i = 0; i < updates.length; i++) {
              updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
            }
            DOMChildrenOperations.processUpdates(updates, markup);
          }
        };
      ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
        dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
        dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
      });
      module.exports = ReactDOMIDOperations;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */
      'use strict';
      var DOMProperty = __webpack_require__(32);
      var ReactBrowserEventEmitter = __webpack_require__(38);
      var ReactCurrentOwner = __webpack_require__(14);
      var ReactDOMFeatureFlags = __webpack_require__(50);
      var ReactElement = __webpack_require__(51);
      var ReactEmptyComponentRegistry = __webpack_require__(53);
      var ReactInstanceHandles = __webpack_require__(54);
      var ReactInstanceMap = __webpack_require__(56);
      var ReactMarkupChecksum = __webpack_require__(57);
      var ReactPerf = __webpack_require__(27);
      var ReactReconciler = __webpack_require__(59);
      var ReactUpdateQueue = __webpack_require__(62);
      var ReactUpdates = __webpack_require__(63);
      var assign = __webpack_require__(48);
      var emptyObject = __webpack_require__(67);
      var containsNode = __webpack_require__(68);
      var instantiateReactComponent = __webpack_require__(71);
      var invariant = __webpack_require__(22);
      var setInnerHTML = __webpack_require__(28);
      var shouldUpdateReactComponent = __webpack_require__(76);
      var validateDOMNesting = __webpack_require__(79);
      var warning = __webpack_require__(34);
      var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
      var nodeCache = {};
      var ELEMENT_NODE_TYPE = 1;
      var DOC_NODE_TYPE = 9;
      var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
      var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);
      /** Mapping from reactRootID to React component instance. */
      var instancesByReactRootID = {};
      /** Mapping from reactRootID to `container` nodes. */
      var containersByReactRootID = {};
      if (process.env.NODE_ENV !== 'production') {
        /** __DEV__-only mapping from reactRootID to root elements. */
        var rootElementsByReactRootID = {};
      }
      // Used to store breadth-first search state in findComponentRoot.
      var findComponentRootReusableArray = [];
      /**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
      function firstDifferenceIndex(string1, string2) {
        var minLen = Math.min(string1.length, string2.length);
        for (var i = 0; i < minLen; i++) {
          if (string1.charAt(i) !== string2.charAt(i)) {
            return i;
          }
        }
        return string1.length === string2.length ? -1 : minLen;
      }
      /**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
      function getReactRootElementInContainer(container) {
        if (!container) {
          return null;
        }
        if (container.nodeType === DOC_NODE_TYPE) {
          return container.documentElement;
        } else {
          return container.firstChild;
        }
      }
      /**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
      function getReactRootID(container) {
        var rootElement = getReactRootElementInContainer(container);
        return rootElement && ReactMount.getID(rootElement);
      }
      /**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
      function getID(node) {
        var id = internalGetID(node);
        if (id) {
          if (nodeCache.hasOwnProperty(id)) {
            var cached = nodeCache[id];
            if (cached !== node) {
              !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;
              nodeCache[id] = node;
            }
          } else {
            nodeCache[id] = node;
          }
        }
        return id;
      }
      function internalGetID(node) {
        // If node is something like a window, document, or text node, none of
        // which support attributes or a .getAttribute method, gracefully return
        // the empty string, as if the attribute were missing.
        return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
      }
      /**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
      function setID(node, id) {
        var oldID = internalGetID(node);
        if (oldID !== id) {
          delete nodeCache[oldID];
        }
        node.setAttribute(ATTR_NAME, id);
        nodeCache[id] = node;
      }
      /**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
      function getNode(id) {
        if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
          nodeCache[id] = ReactMount.findReactNodeByID(id);
        }
        return nodeCache[id];
      }
      /**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
      function getNodeFromInstance(instance) {
        var id = ReactInstanceMap.get(instance)._rootNodeID;
        if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
          return null;
        }
        if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
          nodeCache[id] = ReactMount.findReactNodeByID(id);
        }
        return nodeCache[id];
      }
      /**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
      function isValid(node, id) {
        if (node) {
          !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;
          var container = ReactMount.findReactContainerForID(id);
          if (container && containsNode(container, node)) {
            return true;
          }
        }
        return false;
      }
      /**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
      function purgeID(id) {
        delete nodeCache[id];
      }
      var deepestNodeSoFar = null;
      function findDeepestCachedAncestorImpl(ancestorID) {
        var ancestor = nodeCache[ancestorID];
        if (ancestor && isValid(ancestor, ancestorID)) {
          deepestNodeSoFar = ancestor;
        } else {
          // This node isn't populated in the cache, so presumably none of its
          // descendants are. Break out of the loop.
          return false;
        }
      }
      /**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
      function findDeepestCachedAncestor(targetID) {
        deepestNodeSoFar = null;
        ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);
        var foundNode = deepestNodeSoFar;
        deepestNodeSoFar = null;
        return foundNode;
      }
      /**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
      function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
        if (ReactDOMFeatureFlags.useCreateElement) {
          context = assign({}, context);
          if (container.nodeType === DOC_NODE_TYPE) {
            context[ownerDocumentContextKey] = container;
          } else {
            context[ownerDocumentContextKey] = container.ownerDocument;
          }
        }
        if (process.env.NODE_ENV !== 'production') {
          if (context === emptyObject) {
            context = {};
          }
          var tag = container.nodeName.toLowerCase();
          context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
        }
        var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
        componentInstance._renderedComponent._topLevelWrapper = componentInstance;
        ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
      }
      /**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
      function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
        var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(shouldReuseMarkup);
        transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
        ReactUpdates.ReactReconcileTransaction.release(transaction);
      }
      /**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
      function unmountComponentFromNode(instance, container) {
        ReactReconciler.unmountComponent(instance);
        if (container.nodeType === DOC_NODE_TYPE) {
          container = container.documentElement;
        }
        // http://jsperf.com/emptying-a-node
        while (container.lastChild) {
          container.removeChild(container.lastChild);
        }
      }
      /**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
      function hasNonRootReactChild(node) {
        var reactRootID = getReactRootID(node);
        return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
      }
      /**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
      function findFirstReactDOMImpl(node) {
        // This node might be from another React instance, so we make sure not to
        // examine the node cache here
        for (; node && node.parentNode !== node; node = node.parentNode) {
          if (node.nodeType !== 1) {
            // Not a DOMElement, therefore not a React component
            continue;
          }
          var nodeID = internalGetID(node);
          if (!nodeID) {
            continue;
          }
          var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
          // If containersByReactRootID contains the container we find by crawling up
          // the tree, we know that this instance of React rendered the node.
          // nb. isValid's strategy (with containsNode) does not work because render
          // trees may be nested and we don't want a false positive in that case.
          var current = node;
          var lastID;
          do {
            lastID = internalGetID(current);
            current = current.parentNode;
            if (current == null) {
              // The passed-in node has been detached from the container it was
              // originally rendered into.
              return null;
            }
          } while (lastID !== reactRootID);
          if (current === containersByReactRootID[reactRootID]) {
            return node;
          }
        }
        return null;
      }
      /**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
      var TopLevelWrapper = function () {
      };
      TopLevelWrapper.prototype.isReactComponent = {};
      if (process.env.NODE_ENV !== 'production') {
        TopLevelWrapper.displayName = 'TopLevelWrapper';
      }
      TopLevelWrapper.prototype.render = function () {
        // this.props is actually a ReactElement
        return this.props;
      };
      /**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
      var ReactMount = {
          TopLevelWrapper: TopLevelWrapper,
          _instancesByReactRootID: instancesByReactRootID,
          scrollMonitor: function (container, renderCallback) {
            renderCallback();
          },
          _updateRootComponent: function (prevComponent, nextElement, container, callback) {
            ReactMount.scrollMonitor(container, function () {
              ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
              if (callback) {
                ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
              }
            });
            if (process.env.NODE_ENV !== 'production') {
              // Record the root element in case it later gets transplanted.
              rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
            }
            return prevComponent;
          },
          _registerComponent: function (nextComponent, container) {
            !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;
            ReactBrowserEventEmitter.ensureScrollValueMonitoring();
            var reactRootID = ReactMount.registerContainer(container);
            instancesByReactRootID[reactRootID] = nextComponent;
            return reactRootID;
          },
          _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
            // Various parts of our code (such as ReactCompositeComponent's
            // _renderValidatedComponent) assume that calls to render aren't nested;
            // verify that that's the case.
            process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;
            var componentInstance = instantiateReactComponent(nextElement, null);
            var reactRootID = ReactMount._registerComponent(componentInstance, container);
            // The initial render is synchronous but any updates that happen during
            // rendering, in componentWillMount or componentDidMount, will be batched
            // according to the current batching strategy.
            ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);
            if (process.env.NODE_ENV !== 'production') {
              // Record the root element in case it later gets transplanted.
              rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
            }
            return componentInstance;
          },
          renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
            !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
            return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
          },
          _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
            !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;
            process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;
            var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);
            var prevComponent = instancesByReactRootID[getReactRootID(container)];
            if (prevComponent) {
              var prevWrappedElement = prevComponent._currentElement;
              var prevElement = prevWrappedElement.props;
              if (shouldUpdateReactComponent(prevElement, nextElement)) {
                var publicInst = prevComponent._renderedComponent.getPublicInstance();
                var updatedCallback = callback && function () {
                    callback.call(publicInst);
                  };
                ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
                return publicInst;
              } else {
                ReactMount.unmountComponentAtNode(container);
              }
            }
            var reactRootElement = getReactRootElementInContainer(container);
            var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
            var containerHasNonRootReactChild = hasNonRootReactChild(container);
            if (process.env.NODE_ENV !== 'production') {
              process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;
              if (!containerHasReactMarkup || reactRootElement.nextSibling) {
                var rootElementSibling = reactRootElement;
                while (rootElementSibling) {
                  if (internalGetID(rootElementSibling)) {
                    process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
                    break;
                  }
                  rootElementSibling = rootElementSibling.nextSibling;
                }
              }
            }
            var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
            var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
            if (callback) {
              callback.call(component);
            }
            return component;
          },
          render: function (nextElement, container, callback) {
            return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
          },
          registerContainer: function (container) {
            var reactRootID = getReactRootID(container);
            if (reactRootID) {
              // If one exists, make sure it is a valid "reactRoot" ID.
              reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
            }
            if (!reactRootID) {
              // No valid "reactRoot" ID found, create one.
              reactRootID = ReactInstanceHandles.createReactRootID();
            }
            containersByReactRootID[reactRootID] = container;
            return reactRootID;
          },
          unmountComponentAtNode: function (container) {
            // Various parts of our code (such as ReactCompositeComponent's
            // _renderValidatedComponent) assume that calls to render aren't nested;
            // verify that that's the case. (Strictly speaking, unmounting won't cause a
            // render but we still don't expect to be in a render call here.)
            process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;
            !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;
            var reactRootID = getReactRootID(container);
            var component = instancesByReactRootID[reactRootID];
            if (!component) {
              // Check if the node being unmounted was rendered by React, but isn't a
              // root node.
              var containerHasNonRootReactChild = hasNonRootReactChild(container);
              // Check if the container itself is a React root node.
              var containerID = internalGetID(container);
              var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);
              if (process.env.NODE_ENV !== 'production') {
                process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
              }
              return false;
            }
            ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
            delete instancesByReactRootID[reactRootID];
            delete containersByReactRootID[reactRootID];
            if (process.env.NODE_ENV !== 'production') {
              delete rootElementsByReactRootID[reactRootID];
            }
            return true;
          },
          findReactContainerForID: function (id) {
            var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
            var container = containersByReactRootID[reactRootID];
            if (process.env.NODE_ENV !== 'production') {
              var rootElement = rootElementsByReactRootID[reactRootID];
              if (rootElement && rootElement.parentNode !== container) {
                process.env.NODE_ENV !== 'production' ? warning(internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
                var containerChild = container.firstChild;
                if (containerChild && reactRootID === internalGetID(containerChild)) {
                  // If the container has a new child with the same ID as the old
                  // root element, then rootElementsByReactRootID[reactRootID] is
                  // just stale and needs to be updated. The case that deserves a
                  // warning is when the container is empty.
                  rootElementsByReactRootID[reactRootID] = containerChild;
                } else {
                  process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
                }
              }
            }
            return container;
          },
          findReactNodeByID: function (id) {
            var reactRoot = ReactMount.findReactContainerForID(id);
            return ReactMount.findComponentRoot(reactRoot, id);
          },
          getFirstReactDOM: function (node) {
            return findFirstReactDOMImpl(node);
          },
          findComponentRoot: function (ancestorNode, targetID) {
            var firstChildren = findComponentRootReusableArray;
            var childIndex = 0;
            var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;
            if (process.env.NODE_ENV !== 'production') {
              // This will throw on the next line; give an early warning
              process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
            }
            firstChildren[0] = deepestAncestor.firstChild;
            firstChildren.length = 1;
            while (childIndex < firstChildren.length) {
              var child = firstChildren[childIndex++];
              var targetChild;
              while (child) {
                var childID = ReactMount.getID(child);
                if (childID) {
                  // Even if we find the node we're looking for, we finish looping
                  // through its siblings to ensure they're cached so that we don't have
                  // to revisit this node again. Otherwise, we make n^2 calls to getID
                  // when visiting the many children of a single node in order.
                  if (targetID === childID) {
                    targetChild = child;
                  } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
                    // If we find a child whose ID is an ancestor of the given ID,
                    // then we can be sure that we only want to search the subtree
                    // rooted at this child, so we can throw out the rest of the
                    // search state.
                    firstChildren.length = childIndex = 0;
                    firstChildren.push(child.firstChild);
                  }
                } else {
                  // If this child had no ID, then there's a chance that it was
                  // injected automatically by the browser, as when a `<table>`
                  // element sprouts an extra `<tbody>` child as a side effect of
                  // `.innerHTML` parsing. Optimistically continue down this
                  // branch, but not before examining the other siblings.
                  firstChildren.push(child.firstChild);
                }
                child = child.nextSibling;
              }
              if (targetChild) {
                // Emptying firstChildren/findComponentRootReusableArray is
                // not necessary for correctness, but it helps the GC reclaim
                // any nodes that were left at the end of the search.
                firstChildren.length = 0;
                return targetChild;
              }
            }
            firstChildren.length = 0;
            true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
          },
          _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
            !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;
            if (shouldReuseMarkup) {
              var rootElement = getReactRootElementInContainer(container);
              if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
                return;
              } else {
                var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
                rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
                var rootMarkup = rootElement.outerHTML;
                rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
                var normalizedMarkup = markup;
                if (process.env.NODE_ENV !== 'production') {
                  // because rootMarkup is retrieved from the DOM, various normalizations
                  // will have occurred which will not be present in `markup`. Here,
                  // insert markup into a <div> or <iframe> depending on the container
                  // type to perform the same normalizations before comparing.
                  var normalizer;
                  if (container.nodeType === ELEMENT_NODE_TYPE) {
                    normalizer = document.createElement('div');
                    normalizer.innerHTML = markup;
                    normalizedMarkup = normalizer.innerHTML;
                  } else {
                    normalizer = document.createElement('iframe');
                    document.body.appendChild(normalizer);
                    normalizer.contentDocument.write(markup);
                    normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
                    document.body.removeChild(normalizer);
                  }
                }
                var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
                var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
                !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;
                if (process.env.NODE_ENV !== 'production') {
                  process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
                }
              }
            }
            !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
            if (transaction.useCreateElement) {
              while (container.lastChild) {
                container.removeChild(container.lastChild);
              }
              container.appendChild(markup);
            } else {
              setInnerHTML(container, markup);
            }
          },
          ownerDocumentContextKey: ownerDocumentContextKey,
          getReactRootID: getReactRootID,
          getID: getID,
          setID: setID,
          getNode: getNode,
          getNodeFromInstance: getNodeFromInstance,
          isValid: isValid,
          purgeID: purgeID
        };
      ReactPerf.measureMethods(ReactMount, 'ReactMount', {
        _renderNewRootComponent: '_renderNewRootComponent',
        _mountImageIntoNode: '_mountImageIntoNode'
      });
      module.exports = ReactMount;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */
    'use strict';
    var EventConstants = __webpack_require__(39);
    var EventPluginHub = __webpack_require__(40);
    var EventPluginRegistry = __webpack_require__(41);
    var ReactEventEmitterMixin = __webpack_require__(46);
    var ReactPerf = __webpack_require__(27);
    var ViewportMetrics = __webpack_require__(47);
    var assign = __webpack_require__(48);
    var isEventSupported = __webpack_require__(49);
    /**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
    var alreadyListeningTo = {};
    var isMonitoringScrollValue = false;
    var reactTopListenersCounter = 0;
    // For events like 'submit' which don't consistently bubble (which we trap at a
    // lower node than `document`), binding at `document` would cause duplicate
    // events so we don't include them here
    var topEventMapping = {
        topAbort: 'abort',
        topBlur: 'blur',
        topCanPlay: 'canplay',
        topCanPlayThrough: 'canplaythrough',
        topChange: 'change',
        topClick: 'click',
        topCompositionEnd: 'compositionend',
        topCompositionStart: 'compositionstart',
        topCompositionUpdate: 'compositionupdate',
        topContextMenu: 'contextmenu',
        topCopy: 'copy',
        topCut: 'cut',
        topDoubleClick: 'dblclick',
        topDrag: 'drag',
        topDragEnd: 'dragend',
        topDragEnter: 'dragenter',
        topDragExit: 'dragexit',
        topDragLeave: 'dragleave',
        topDragOver: 'dragover',
        topDragStart: 'dragstart',
        topDrop: 'drop',
        topDurationChange: 'durationchange',
        topEmptied: 'emptied',
        topEncrypted: 'encrypted',
        topEnded: 'ended',
        topError: 'error',
        topFocus: 'focus',
        topInput: 'input',
        topKeyDown: 'keydown',
        topKeyPress: 'keypress',
        topKeyUp: 'keyup',
        topLoadedData: 'loadeddata',
        topLoadedMetadata: 'loadedmetadata',
        topLoadStart: 'loadstart',
        topMouseDown: 'mousedown',
        topMouseMove: 'mousemove',
        topMouseOut: 'mouseout',
        topMouseOver: 'mouseover',
        topMouseUp: 'mouseup',
        topPaste: 'paste',
        topPause: 'pause',
        topPlay: 'play',
        topPlaying: 'playing',
        topProgress: 'progress',
        topRateChange: 'ratechange',
        topScroll: 'scroll',
        topSeeked: 'seeked',
        topSeeking: 'seeking',
        topSelectionChange: 'selectionchange',
        topStalled: 'stalled',
        topSuspend: 'suspend',
        topTextInput: 'textInput',
        topTimeUpdate: 'timeupdate',
        topTouchCancel: 'touchcancel',
        topTouchEnd: 'touchend',
        topTouchMove: 'touchmove',
        topTouchStart: 'touchstart',
        topVolumeChange: 'volumechange',
        topWaiting: 'waiting',
        topWheel: 'wheel'
      };
    /**
	 * To ensure no conflicts with other potential React instances on the page
	 */
    var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
    function getListeningForDocument(mountAt) {
      // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
      // directly.
      if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
        mountAt[topListenersIDKey] = reactTopListenersCounter++;
        alreadyListeningTo[mountAt[topListenersIDKey]] = {};
      }
      return alreadyListeningTo[mountAt[topListenersIDKey]];
    }
    /**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
    var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {
        ReactEventListener: null,
        injection: {
          injectReactEventListener: function (ReactEventListener) {
            ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
            ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
          }
        },
        setEnabled: function (enabled) {
          if (ReactBrowserEventEmitter.ReactEventListener) {
            ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
          }
        },
        isEnabled: function () {
          return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
        },
        listenTo: function (registrationName, contentDocumentHandle) {
          var mountAt = contentDocumentHandle;
          var isListening = getListeningForDocument(mountAt);
          var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
          var topLevelTypes = EventConstants.topLevelTypes;
          for (var i = 0; i < dependencies.length; i++) {
            var dependency = dependencies[i];
            if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
              if (dependency === topLevelTypes.topWheel) {
                if (isEventSupported('wheel')) {
                  ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
                } else if (isEventSupported('mousewheel')) {
                  ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
                } else {
                  // Firefox needs to capture a different mouse scroll event.
                  // @see http://www.quirksmode.org/dom/events/tests/scroll.html
                  ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
                }
              } else if (dependency === topLevelTypes.topScroll) {
                if (isEventSupported('scroll', true)) {
                  ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
                } else {
                  ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
                }
              } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {
                if (isEventSupported('focus', true)) {
                  ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
                  ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
                } else if (isEventSupported('focusin')) {
                  // IE has `focusin` and `focusout` events which bubble.
                  // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
                  ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
                  ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
                }
                // to make sure blur and focus event listeners are only attached once
                isListening[topLevelTypes.topBlur] = true;
                isListening[topLevelTypes.topFocus] = true;
              } else if (topEventMapping.hasOwnProperty(dependency)) {
                ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
              }
              isListening[dependency] = true;
            }
          }
        },
        trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
          return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
        },
        trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
          return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
        },
        ensureScrollValueMonitoring: function () {
          if (!isMonitoringScrollValue) {
            var refresh = ViewportMetrics.refreshScrollValues;
            ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
            isMonitoringScrollValue = true;
          }
        },
        eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,
        registrationNameModules: EventPluginHub.registrationNameModules,
        putListener: EventPluginHub.putListener,
        getListener: EventPluginHub.getListener,
        deleteListener: EventPluginHub.deleteListener,
        deleteAllListeners: EventPluginHub.deleteAllListeners
      });
    ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
      putListener: 'putListener',
      deleteListener: 'deleteListener'
    });
    module.exports = ReactBrowserEventEmitter;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */
    'use strict';
    var keyMirror = __webpack_require__(26);
    var PropagationPhases = keyMirror({
        bubbled: null,
        captured: null
      });
    /**
	 * Types of raw signals from the browser caught at the top level.
	 */
    var topLevelTypes = keyMirror({
        topAbort: null,
        topBlur: null,
        topCanPlay: null,
        topCanPlayThrough: null,
        topChange: null,
        topClick: null,
        topCompositionEnd: null,
        topCompositionStart: null,
        topCompositionUpdate: null,
        topContextMenu: null,
        topCopy: null,
        topCut: null,
        topDoubleClick: null,
        topDrag: null,
        topDragEnd: null,
        topDragEnter: null,
        topDragExit: null,
        topDragLeave: null,
        topDragOver: null,
        topDragStart: null,
        topDrop: null,
        topDurationChange: null,
        topEmptied: null,
        topEncrypted: null,
        topEnded: null,
        topError: null,
        topFocus: null,
        topInput: null,
        topKeyDown: null,
        topKeyPress: null,
        topKeyUp: null,
        topLoad: null,
        topLoadedData: null,
        topLoadedMetadata: null,
        topLoadStart: null,
        topMouseDown: null,
        topMouseMove: null,
        topMouseOut: null,
        topMouseOver: null,
        topMouseUp: null,
        topPaste: null,
        topPause: null,
        topPlay: null,
        topPlaying: null,
        topProgress: null,
        topRateChange: null,
        topReset: null,
        topScroll: null,
        topSeeked: null,
        topSeeking: null,
        topSelectionChange: null,
        topStalled: null,
        topSubmit: null,
        topSuspend: null,
        topTextInput: null,
        topTimeUpdate: null,
        topTouchCancel: null,
        topTouchEnd: null,
        topTouchMove: null,
        topTouchStart: null,
        topVolumeChange: null,
        topWaiting: null,
        topWheel: null
      });
    var EventConstants = {
        topLevelTypes: topLevelTypes,
        PropagationPhases: PropagationPhases
      };
    module.exports = EventConstants;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */
      'use strict';
      var EventPluginRegistry = __webpack_require__(41);
      var EventPluginUtils = __webpack_require__(42);
      var ReactErrorUtils = __webpack_require__(43);
      var accumulateInto = __webpack_require__(44);
      var forEachAccumulated = __webpack_require__(45);
      var invariant = __webpack_require__(22);
      var warning = __webpack_require__(34);
      /**
	 * Internal store for event listeners
	 */
      var listenerBank = {};
      /**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
      var eventQueue = null;
      /**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
      var executeDispatchesAndRelease = function (event, simulated) {
        if (event) {
          EventPluginUtils.executeDispatchesInOrder(event, simulated);
          if (!event.isPersistent()) {
            event.constructor.release(event);
          }
        }
      };
      var executeDispatchesAndReleaseSimulated = function (e) {
        return executeDispatchesAndRelease(e, true);
      };
      var executeDispatchesAndReleaseTopLevel = function (e) {
        return executeDispatchesAndRelease(e, false);
      };
      /**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
      var InstanceHandle = null;
      function validateInstanceHandle() {
        var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
        process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
      }
      /**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
      var EventPluginHub = {
          injection: {
            injectMount: EventPluginUtils.injection.injectMount,
            injectInstanceHandle: function (InjectedInstanceHandle) {
              InstanceHandle = InjectedInstanceHandle;
              if (process.env.NODE_ENV !== 'production') {
                validateInstanceHandle();
              }
            },
            getInstanceHandle: function () {
              if (process.env.NODE_ENV !== 'production') {
                validateInstanceHandle();
              }
              return InstanceHandle;
            },
            injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
            injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
          },
          eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,
          registrationNameModules: EventPluginRegistry.registrationNameModules,
          putListener: function (id, registrationName, listener) {
            !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;
            var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
            bankForRegistrationName[id] = listener;
            var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
            if (PluginModule && PluginModule.didPutListener) {
              PluginModule.didPutListener(id, registrationName, listener);
            }
          },
          getListener: function (id, registrationName) {
            var bankForRegistrationName = listenerBank[registrationName];
            return bankForRegistrationName && bankForRegistrationName[id];
          },
          deleteListener: function (id, registrationName) {
            var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
            if (PluginModule && PluginModule.willDeleteListener) {
              PluginModule.willDeleteListener(id, registrationName);
            }
            var bankForRegistrationName = listenerBank[registrationName];
            // TODO: This should never be null -- when is it?
            if (bankForRegistrationName) {
              delete bankForRegistrationName[id];
            }
          },
          deleteAllListeners: function (id) {
            for (var registrationName in listenerBank) {
              if (!listenerBank[registrationName][id]) {
                continue;
              }
              var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
              if (PluginModule && PluginModule.willDeleteListener) {
                PluginModule.willDeleteListener(id, registrationName);
              }
              delete listenerBank[registrationName][id];
            }
          },
          extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
            var events;
            var plugins = EventPluginRegistry.plugins;
            for (var i = 0; i < plugins.length; i++) {
              // Not every plugin in the ordering may be loaded at runtime.
              var possiblePlugin = plugins[i];
              if (possiblePlugin) {
                var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
                if (extractedEvents) {
                  events = accumulateInto(events, extractedEvents);
                }
              }
            }
            return events;
          },
          enqueueEvents: function (events) {
            if (events) {
              eventQueue = accumulateInto(eventQueue, events);
            }
          },
          processEventQueue: function (simulated) {
            // Set `eventQueue` to null before processing it so that we can tell if more
            // events get enqueued while processing.
            var processingEventQueue = eventQueue;
            eventQueue = null;
            if (simulated) {
              forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
            } else {
              forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
            }
            !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
            // This would be a good time to rethrow if any of the event handlers threw.
            ReactErrorUtils.rethrowCaughtError();
          },
          __purge: function () {
            listenerBank = {};
          },
          __getListenerBank: function () {
            return listenerBank;
          }
        };
      module.exports = EventPluginHub;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */
      'use strict';
      var invariant = __webpack_require__(22);
      /**
	 * Injectable ordering of event plugins.
	 */
      var EventPluginOrder = null;
      /**
	 * Injectable mapping from names to event plugin modules.
	 */
      var namesToPlugins = {};
      /**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
      function recomputePluginOrdering() {
        if (!EventPluginOrder) {
          // Wait until an `EventPluginOrder` is injected.
          return;
        }
        for (var pluginName in namesToPlugins) {
          var PluginModule = namesToPlugins[pluginName];
          var pluginIndex = EventPluginOrder.indexOf(pluginName);
          !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
          if (EventPluginRegistry.plugins[pluginIndex]) {
            continue;
          }
          !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
          EventPluginRegistry.plugins[pluginIndex] = PluginModule;
          var publishedEvents = PluginModule.eventTypes;
          for (var eventName in publishedEvents) {
            !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
          }
        }
      }
      /**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
      function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
        !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
        EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
        var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
        if (phasedRegistrationNames) {
          for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
              var phasedRegistrationName = phasedRegistrationNames[phaseName];
              publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
            }
          }
          return true;
        } else if (dispatchConfig.registrationName) {
          publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
          return true;
        }
        return false;
      }
      /**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
      function publishRegistrationName(registrationName, PluginModule, eventName) {
        !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
        EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
        EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
      }
      /**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
      var EventPluginRegistry = {
          plugins: [],
          eventNameDispatchConfigs: {},
          registrationNameModules: {},
          registrationNameDependencies: {},
          injectEventPluginOrder: function (InjectedEventPluginOrder) {
            !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
            // Clone the ordering so it cannot be dynamically mutated.
            EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
            recomputePluginOrdering();
          },
          injectEventPluginsByName: function (injectedNamesToPlugins) {
            var isOrderingDirty = false;
            for (var pluginName in injectedNamesToPlugins) {
              if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                continue;
              }
              var PluginModule = injectedNamesToPlugins[pluginName];
              if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
                !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
                namesToPlugins[pluginName] = PluginModule;
                isOrderingDirty = true;
              }
            }
            if (isOrderingDirty) {
              recomputePluginOrdering();
            }
          },
          getPluginModuleForEvent: function (event) {
            var dispatchConfig = event.dispatchConfig;
            if (dispatchConfig.registrationName) {
              return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
            }
            for (var phase in dispatchConfig.phasedRegistrationNames) {
              if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
                continue;
              }
              var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
              if (PluginModule) {
                return PluginModule;
              }
            }
            return null;
          },
          _resetEventPlugins: function () {
            EventPluginOrder = null;
            for (var pluginName in namesToPlugins) {
              if (namesToPlugins.hasOwnProperty(pluginName)) {
                delete namesToPlugins[pluginName];
              }
            }
            EventPluginRegistry.plugins.length = 0;
            var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
            for (var eventName in eventNameDispatchConfigs) {
              if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
                delete eventNameDispatchConfigs[eventName];
              }
            }
            var registrationNameModules = EventPluginRegistry.registrationNameModules;
            for (var registrationName in registrationNameModules) {
              if (registrationNameModules.hasOwnProperty(registrationName)) {
                delete registrationNameModules[registrationName];
              }
            }
          }
        };
      module.exports = EventPluginRegistry;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */
      'use strict';
      var EventConstants = __webpack_require__(39);
      var ReactErrorUtils = __webpack_require__(43);
      var invariant = __webpack_require__(22);
      var warning = __webpack_require__(34);
      /**
	 * Injected dependencies:
	 */
      /**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
      var injection = {
          Mount: null,
          injectMount: function (InjectedMount) {
            injection.Mount = InjectedMount;
            if (process.env.NODE_ENV !== 'production') {
              process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
            }
          }
        };
      var topLevelTypes = EventConstants.topLevelTypes;
      function isEndish(topLevelType) {
        return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
      }
      function isMoveish(topLevelType) {
        return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
      }
      function isStartish(topLevelType) {
        return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
      }
      var validateEventDispatches;
      if (process.env.NODE_ENV !== 'production') {
        validateEventDispatches = function (event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchIDs = event._dispatchIDs;
          var listenersIsArr = Array.isArray(dispatchListeners);
          var idsIsArr = Array.isArray(dispatchIDs);
          var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
          var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
          process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
        };
      }
      /**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
      function executeDispatch(event, simulated, listener, domID) {
        var type = event.type || 'unknown-event';
        event.currentTarget = injection.Mount.getNode(domID);
        if (simulated) {
          ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
        } else {
          ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
        }
        event.currentTarget = null;
      }
      /**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
      function executeDispatchesInOrder(event, simulated) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchIDs = event._dispatchIDs;
        if (process.env.NODE_ENV !== 'production') {
          validateEventDispatches(event);
        }
        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }
            // Listeners and IDs are two parallel arrays that are always in sync.
            executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
          }
        } else if (dispatchListeners) {
          executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
        }
        event._dispatchListeners = null;
        event._dispatchIDs = null;
      }
      /**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
      function executeDispatchesInOrderStopAtTrueImpl(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchIDs = event._dispatchIDs;
        if (process.env.NODE_ENV !== 'production') {
          validateEventDispatches(event);
        }
        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }
            // Listeners and IDs are two parallel arrays that are always in sync.
            if (dispatchListeners[i](event, dispatchIDs[i])) {
              return dispatchIDs[i];
            }
          }
        } else if (dispatchListeners) {
          if (dispatchListeners(event, dispatchIDs)) {
            return dispatchIDs;
          }
        }
        return null;
      }
      /**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
      function executeDispatchesInOrderStopAtTrue(event) {
        var ret = executeDispatchesInOrderStopAtTrueImpl(event);
        event._dispatchIDs = null;
        event._dispatchListeners = null;
        return ret;
      }
      /**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
      function executeDirectDispatch(event) {
        if (process.env.NODE_ENV !== 'production') {
          validateEventDispatches(event);
        }
        var dispatchListener = event._dispatchListeners;
        var dispatchID = event._dispatchIDs;
        !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
        var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
        event._dispatchListeners = null;
        event._dispatchIDs = null;
        return res;
      }
      /**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
      function hasDispatches(event) {
        return !!event._dispatchListeners;
      }
      /**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
      var EventPluginUtils = {
          isEndish: isEndish,
          isMoveish: isMoveish,
          isStartish: isStartish,
          executeDirectDispatch: executeDirectDispatch,
          executeDispatchesInOrder: executeDispatchesInOrder,
          executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
          hasDispatches: hasDispatches,
          getNode: function (id) {
            return injection.Mount.getNode(id);
          },
          getID: function (node) {
            return injection.Mount.getID(node);
          },
          injection: injection
        };
      module.exports = EventPluginUtils;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */
      'use strict';
      var caughtError = null;
      /**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
      function invokeGuardedCallback(name, func, a, b) {
        try {
          return func(a, b);
        } catch (x) {
          if (caughtError === null) {
            caughtError = x;
          }
          return undefined;
        }
      }
      var ReactErrorUtils = {
          invokeGuardedCallback: invokeGuardedCallback,
          invokeGuardedCallbackWithCatch: invokeGuardedCallback,
          rethrowCaughtError: function () {
            if (caughtError) {
              var error = caughtError;
              caughtError = null;
              throw error;
            }
          }
        };
      if (process.env.NODE_ENV !== 'production') {
        /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
        if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
          var fakeNode = document.createElement('react');
          ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
            var boundFunc = func.bind(null, a, b);
            var evtType = 'react-' + name;
            fakeNode.addEventListener(evtType, boundFunc, false);
            var evt = document.createEvent('Event');
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            fakeNode.removeEventListener(evtType, boundFunc, false);
          };
        }
      }
      module.exports = ReactErrorUtils;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */
      'use strict';
      var invariant = __webpack_require__(22);
      /**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
      function accumulateInto(current, next) {
        !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
        if (current == null) {
          return next;
        }
        // Both are not empty. Warning: Never call x.concat(y) when you are not
        // certain that x is an Array (x could be a string with concat method).
        var currentIsArray = Array.isArray(current);
        var nextIsArray = Array.isArray(next);
        if (currentIsArray && nextIsArray) {
          current.push.apply(current, next);
          return current;
        }
        if (currentIsArray) {
          current.push(next);
          return current;
        }
        if (nextIsArray) {
          // A bit too dangerous to mutate `next`.
          return [current].concat(next);
        }
        return [
          current,
          next
        ];
      }
      module.exports = accumulateInto;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */
    'use strict';
    /**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
    var forEachAccumulated = function (arr, cb, scope) {
      if (Array.isArray(arr)) {
        arr.forEach(cb, scope);
      } else if (arr) {
        cb.call(scope, arr);
      }
    };
    module.exports = forEachAccumulated;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */
    'use strict';
    var EventPluginHub = __webpack_require__(40);
    function runEventQueueInBatch(events) {
      EventPluginHub.enqueueEvents(events);
      EventPluginHub.processEventQueue(false);
    }
    var ReactEventEmitterMixin = {
        handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
          var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
          runEventQueueInBatch(events);
        }
      };
    module.exports = ReactEventEmitterMixin;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */
    'use strict';
    var ViewportMetrics = {
        currentScrollLeft: 0,
        currentScrollTop: 0,
        refreshScrollValues: function (scrollPosition) {
          ViewportMetrics.currentScrollLeft = scrollPosition.x;
          ViewportMetrics.currentScrollTop = scrollPosition.y;
        }
      };
    module.exports = ViewportMetrics;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */
    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign
    'use strict';
    function assign(target, sources) {
      if (target == null) {
        throw new TypeError('Object.assign target cannot be null or undefined');
      }
      var to = Object(target);
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
        var nextSource = arguments[nextIndex];
        if (nextSource == null) {
          continue;
        }
        var from = Object(nextSource);
        // We don't currently support accessors nor proxies. Therefore this
        // copy cannot throw. If we ever supported this then we must handle
        // exceptions and side-effects. We don't support symbols so they won't
        // be transferred.
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
      }
      return to;
    }
    module.exports = assign;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */
    'use strict';
    var ExecutionEnvironment = __webpack_require__(18);
    var useHasFeature;
    if (ExecutionEnvironment.canUseDOM) {
      useHasFeature = document.implementation && document.implementation.hasFeature && document.implementation.hasFeature('', '') !== true;
    }
    /**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
    function isEventSupported(eventNameSuffix, capture) {
      if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
        return false;
      }
      var eventName = 'on' + eventNameSuffix;
      var isSupported = eventName in document;
      if (!isSupported) {
        var element = document.createElement('div');
        element.setAttribute(eventName, 'return;');
        isSupported = typeof element[eventName] === 'function';
      }
      if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
        // This is the only way to test support for the `wheel` event in IE9+.
        isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
      }
      return isSupported;
    }
    module.exports = isEventSupported;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */
    'use strict';
    var ReactDOMFeatureFlags = { useCreateElement: false };
    module.exports = ReactDOMFeatureFlags;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */
      'use strict';
      var ReactCurrentOwner = __webpack_require__(14);
      var assign = __webpack_require__(48);
      var canDefineProperty = __webpack_require__(52);
      // The Symbol used to tag the ReactElement type. If there is no native Symbol
      // nor polyfill, then a plain number is used for performance.
      var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 60103;
      var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
      /**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
      var ReactElement = function (type, key, ref, self, source, owner, props) {
        var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type,
            key: key,
            ref: ref,
            props: props,
            _owner: owner
          };
        if (process.env.NODE_ENV !== 'production') {
          // The validation flag is currently mutative. We put it on
          // an external backing store so that we can freeze the whole object.
          // This can be replaced with a WeakMap once they are implemented in
          // commonly used development environments.
          element._store = {};
          // To make comparing ReactElements easier for testing purposes, we make
          // the validation flag non-enumerable (where possible, which should
          // include every environment we run tests in), so the test framework
          // ignores it.
          if (canDefineProperty) {
            Object.defineProperty(element._store, 'validated', {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            // self and source are DEV only properties.
            Object.defineProperty(element, '_self', {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self
            });
            // Two elements created in two different places should be considered
            // equal for testing purposes and therefore we hide it from enumeration.
            Object.defineProperty(element, '_source', {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
          } else {
            element._store.validated = false;
            element._self = self;
            element._source = source;
          }
          Object.freeze(element.props);
          Object.freeze(element);
        }
        return element;
      };
      ReactElement.createElement = function (type, config, children) {
        var propName;
        // Reserved names are extracted
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
          ref = config.ref === undefined ? null : config.ref;
          key = config.key === undefined ? null : '' + config.key;
          self = config.__self === undefined ? null : config.__self;
          source = config.__source === undefined ? null : config.__source;
          // Remaining properties are added to a new props object
          for (propName in config) {
            if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }
        // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          props.children = childArray;
        }
        // Resolve default props
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (typeof props[propName] === 'undefined') {
              props[propName] = defaultProps[propName];
            }
          }
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      };
      ReactElement.createFactory = function (type) {
        var factory = ReactElement.createElement.bind(null, type);
        // Expose the type on the factory and the prototype so that it can be
        // easily accessed on elements. E.g. `<Foo />.type === Foo`.
        // This should not be named `constructor` since this may not be the function
        // that created the element, and it may not even be a constructor.
        // Legacy hook TODO: Warn if this is accessed
        factory.type = type;
        return factory;
      };
      ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      };
      ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
        var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);
        if (process.env.NODE_ENV !== 'production') {
          // If the key on the original is valid, then the clone is valid
          newElement._store.validated = oldElement._store.validated;
        }
        return newElement;
      };
      ReactElement.cloneElement = function (element, config, children) {
        var propName;
        // Original props are copied
        var props = assign({}, element.props);
        // Reserved names are extracted
        var key = element.key;
        var ref = element.ref;
        // Self is preserved since the owner is preserved.
        var self = element._self;
        // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source;
        // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
          if (config.ref !== undefined) {
            // Silently steal the ref from the parent.
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }
          if (config.key !== undefined) {
            key = '' + config.key;
          }
          // Remaining properties override existing props
          for (propName in config) {
            if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }
        // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
      };
      /**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
      ReactElement.isValidElement = function (object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      };
      module.exports = ReactElement;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */
      'use strict';
      var canDefineProperty = false;
      if (process.env.NODE_ENV !== 'production') {
        try {
          Object.defineProperty({}, 'x', {
            get: function () {
            }
          });
          canDefineProperty = true;
        } catch (x) {
        }
      }
      module.exports = canDefineProperty;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports) {
    /**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */
    'use strict';
    // This registry keeps track of the React IDs of the components that rendered to
    // `null` (in reality a placeholder such as `noscript`)
    var nullComponentIDsRegistry = {};
    /**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
    function isNullComponentID(id) {
      return !!nullComponentIDsRegistry[id];
    }
    /**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
    function registerNullComponentID(id) {
      nullComponentIDsRegistry[id] = true;
    }
    /**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
    function deregisterNullComponentID(id) {
      delete nullComponentIDsRegistry[id];
    }
    var ReactEmptyComponentRegistry = {
        isNullComponentID: isNullComponentID,
        registerNullComponentID: registerNullComponentID,
        deregisterNullComponentID: deregisterNullComponentID
      };
    module.exports = ReactEmptyComponentRegistry;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */
      'use strict';
      var ReactRootIndex = __webpack_require__(55);
      var invariant = __webpack_require__(22);
      var SEPARATOR = '.';
      var SEPARATOR_LENGTH = SEPARATOR.length;
      /**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
      var MAX_TREE_DEPTH = 10000;
      /**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
      function getReactRootIDString(index) {
        return SEPARATOR + index.toString(36);
      }
      /**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
      function isBoundary(id, index) {
        return id.charAt(index) === SEPARATOR || index === id.length;
      }
      /**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
      function isValidID(id) {
        return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
      }
      /**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
      function isAncestorIDOf(ancestorID, descendantID) {
        return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
      }
      /**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
      function getParentID(id) {
        return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
      }
      /**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
      function getNextDescendantID(ancestorID, destinationID) {
        !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
        !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
        if (ancestorID === destinationID) {
          return ancestorID;
        }
        // Skip over the ancestor and the immediate separator. Traverse until we hit
        // another separator or we reach the end of `destinationID`.
        var start = ancestorID.length + SEPARATOR_LENGTH;
        var i;
        for (i = start; i < destinationID.length; i++) {
          if (isBoundary(destinationID, i)) {
            break;
          }
        }
        return destinationID.substr(0, i);
      }
      /**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
      function getFirstCommonAncestorID(oneID, twoID) {
        var minLength = Math.min(oneID.length, twoID.length);
        if (minLength === 0) {
          return '';
        }
        var lastCommonMarkerIndex = 0;
        // Use `<=` to traverse until the "EOL" of the shorter string.
        for (var i = 0; i <= minLength; i++) {
          if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
            lastCommonMarkerIndex = i;
          } else if (oneID.charAt(i) !== twoID.charAt(i)) {
            break;
          }
        }
        var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
        !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
        return longestCommonID;
      }
      /**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
      function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
        start = start || '';
        stop = stop || '';
        !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
        var traverseUp = isAncestorIDOf(stop, start);
        !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
        // Traverse from `start` to `stop` one depth at a time.
        var depth = 0;
        var traverse = traverseUp ? getParentID : getNextDescendantID;
        for (var id = start;; id = traverse(id, stop)) {
          var ret;
          if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
            ret = cb(id, traverseUp, arg);
          }
          if (ret === false || id === stop) {
            // Only break //after// visiting `stop`.
            break;
          }
          !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
        }
      }
      /**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
      var ReactInstanceHandles = {
          createReactRootID: function () {
            return getReactRootIDString(ReactRootIndex.createReactRootIndex());
          },
          createReactID: function (rootID, name) {
            return rootID + name;
          },
          getReactRootIDFromNodeID: function (id) {
            if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
              var index = id.indexOf(SEPARATOR, 1);
              return index > -1 ? id.substr(0, index) : id;
            }
            return null;
          },
          traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
            var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
            if (ancestorID !== leaveID) {
              traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
            }
            if (ancestorID !== enterID) {
              traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
            }
          },
          traverseTwoPhase: function (targetID, cb, arg) {
            if (targetID) {
              traverseParentPath('', targetID, cb, arg, true, false);
              traverseParentPath(targetID, '', cb, arg, false, true);
            }
          },
          traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
            if (targetID) {
              traverseParentPath('', targetID, cb, arg, true, true);
              traverseParentPath(targetID, '', cb, arg, true, true);
            }
          },
          traverseAncestors: function (targetID, cb, arg) {
            traverseParentPath('', targetID, cb, arg, true, false);
          },
          getFirstCommonAncestorID: getFirstCommonAncestorID,
          _getNextDescendantID: getNextDescendantID,
          isAncestorIDOf: isAncestorIDOf,
          SEPARATOR: SEPARATOR
        };
      module.exports = ReactInstanceHandles;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */
    'use strict';
    var ReactRootIndexInjection = {
        injectCreateReactRootIndex: function (_createReactRootIndex) {
          ReactRootIndex.createReactRootIndex = _createReactRootIndex;
        }
      };
    var ReactRootIndex = {
        createReactRootIndex: null,
        injection: ReactRootIndexInjection
      };
    module.exports = ReactRootIndex;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */
    'use strict';
    /**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
    // TODO: Replace this with ES6: var ReactInstanceMap = new Map();
    var ReactInstanceMap = {
        remove: function (key) {
          key._reactInternalInstance = undefined;
        },
        get: function (key) {
          return key._reactInternalInstance;
        },
        has: function (key) {
          return key._reactInternalInstance !== undefined;
        },
        set: function (key, value) {
          key._reactInternalInstance = value;
        }
      };
    module.exports = ReactInstanceMap;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */
    'use strict';
    var adler32 = __webpack_require__(58);
    var TAG_END = /\/?>/;
    var ReactMarkupChecksum = {
        CHECKSUM_ATTR_NAME: 'data-react-checksum',
        addChecksumToMarkup: function (markup) {
          var checksum = adler32(markup);
          // Add checksum (handle both parent tags and self-closing tags)
          return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
        },
        canReuseMarkup: function (markup, element) {
          var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
          existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
          var markupChecksum = adler32(markup);
          return markupChecksum === existingChecksum;
        }
      };
    module.exports = ReactMarkupChecksum;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */
    'use strict';
    var MOD = 65521;
    // adler32 is not cryptographically strong, and is only used to sanity check that
    // markup generated on the server matches the markup generated on the client.
    // This implementation (a modified version of the SheetJS version) has been optimized
    // for our use case, at the expense of conforming to the adler32 specification
    // for non-ascii inputs.
    function adler32(data) {
      var a = 1;
      var b = 0;
      var i = 0;
      var l = data.length;
      var m = l & ~3;
      while (i < m) {
        for (; i < Math.min(i + 4096, m); i += 4) {
          b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
        }
        a %= MOD;
        b %= MOD;
      }
      for (; i < l; i++) {
        b += a += data.charCodeAt(i);
      }
      a %= MOD;
      b %= MOD;
      return a | b << 16;
    }
    module.exports = adler32;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */
    'use strict';
    var ReactRef = __webpack_require__(60);
    /**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
    function attachRefs() {
      ReactRef.attachRefs(this, this._currentElement);
    }
    var ReactReconciler = {
        mountComponent: function (internalInstance, rootID, transaction, context) {
          var markup = internalInstance.mountComponent(rootID, transaction, context);
          if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
            transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
          }
          return markup;
        },
        unmountComponent: function (internalInstance) {
          ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
          internalInstance.unmountComponent();
        },
        receiveComponent: function (internalInstance, nextElement, transaction, context) {
          var prevElement = internalInstance._currentElement;
          if (nextElement === prevElement && context === internalInstance._context) {
            // Since elements are immutable after the owner is rendered,
            // we can do a cheap identity compare here to determine if this is a
            // superfluous reconcile. It's possible for state to be mutable but such
            // change should trigger an update of the owner which would recreate
            // the element. We explicitly check for the existence of an owner since
            // it's possible for an element created outside a composite to be
            // deeply mutated and reused.
            // TODO: Bailing out early is just a perf optimization right?
            // TODO: Removing the return statement should affect correctness?
            return;
          }
          var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
          if (refsChanged) {
            ReactRef.detachRefs(internalInstance, prevElement);
          }
          internalInstance.receiveComponent(nextElement, transaction, context);
          if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
            transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
          }
        },
        performUpdateIfNecessary: function (internalInstance, transaction) {
          internalInstance.performUpdateIfNecessary(transaction);
        }
      };
    module.exports = ReactReconciler;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */
    'use strict';
    var ReactOwner = __webpack_require__(61);
    var ReactRef = {};
    function attachRef(ref, component, owner) {
      if (typeof ref === 'function') {
        ref(component.getPublicInstance());
      } else {
        // Legacy ref
        ReactOwner.addComponentAsRefTo(component, ref, owner);
      }
    }
    function detachRef(ref, component, owner) {
      if (typeof ref === 'function') {
        ref(null);
      } else {
        // Legacy ref
        ReactOwner.removeComponentAsRefFrom(component, ref, owner);
      }
    }
    ReactRef.attachRefs = function (instance, element) {
      if (element === null || element === false) {
        return;
      }
      var ref = element.ref;
      if (ref != null) {
        attachRef(ref, instance, element._owner);
      }
    };
    ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.
      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.
      var prevEmpty = prevElement === null || prevElement === false;
      var nextEmpty = nextElement === null || nextElement === false;
      return prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref;
    };
    ReactRef.detachRefs = function (instance, element) {
      if (element === null || element === false) {
        return;
      }
      var ref = element.ref;
      if (ref != null) {
        detachRef(ref, instance, element._owner);
      }
    };
    module.exports = ReactRef;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */
      'use strict';
      var invariant = __webpack_require__(22);
      /**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
      var ReactOwner = {
          isValidOwner: function (object) {
            return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
          },
          addComponentAsRefTo: function (component, ref, owner) {
            !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
            owner.attachRef(ref, component);
          },
          removeComponentAsRefFrom: function (component, ref, owner) {
            !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
            // Check that `component` is still the current ref because we do not want to
            // detach the ref if another component stole it.
            if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
              owner.detachRef(ref);
            }
          }
        };
      module.exports = ReactOwner;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */
      'use strict';
      var ReactCurrentOwner = __webpack_require__(14);
      var ReactElement = __webpack_require__(51);
      var ReactInstanceMap = __webpack_require__(56);
      var ReactUpdates = __webpack_require__(63);
      var assign = __webpack_require__(48);
      var invariant = __webpack_require__(22);
      var warning = __webpack_require__(34);
      function enqueueUpdate(internalInstance) {
        ReactUpdates.enqueueUpdate(internalInstance);
      }
      function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
        var internalInstance = ReactInstanceMap.get(publicInstance);
        if (!internalInstance) {
          if (process.env.NODE_ENV !== 'production') {
            // Only warn when we have a callerName. Otherwise we should be silent.
            // We're probably calling from enqueueCallback. We don't want to warn
            // there because we already warned for the corresponding lifecycle method.
            process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
          }
          return null;
        }
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
        }
        return internalInstance;
      }
      /**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
      var ReactUpdateQueue = {
          isMounted: function (publicInstance) {
            if (process.env.NODE_ENV !== 'production') {
              var owner = ReactCurrentOwner.current;
              if (owner !== null) {
                process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
                owner._warnedAboutRefsInRender = true;
              }
            }
            var internalInstance = ReactInstanceMap.get(publicInstance);
            if (internalInstance) {
              // During componentWillMount and render this will still be null but after
              // that will always render to something. At least for now. So we can use
              // this hack.
              return !!internalInstance._renderedComponent;
            } else {
              return false;
            }
          },
          enqueueCallback: function (publicInstance, callback) {
            !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
            var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
            // Previously we would throw an error if we didn't have an internal
            // instance. Since we want to make it a no-op instead, we mirror the same
            // behavior we have in other enqueue* methods.
            // We also need to ignore callbacks in componentWillMount. See
            // enqueueUpdates.
            if (!internalInstance) {
              return null;
            }
            if (internalInstance._pendingCallbacks) {
              internalInstance._pendingCallbacks.push(callback);
            } else {
              internalInstance._pendingCallbacks = [callback];
            }
            // TODO: The callback here is ignored when setState is called from
            // componentWillMount. Either fix it or disallow doing so completely in
            // favor of getInitialState. Alternatively, we can disallow
            // componentWillMount during server-side rendering.
            enqueueUpdate(internalInstance);
          },
          enqueueCallbackInternal: function (internalInstance, callback) {
            !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
            if (internalInstance._pendingCallbacks) {
              internalInstance._pendingCallbacks.push(callback);
            } else {
              internalInstance._pendingCallbacks = [callback];
            }
            enqueueUpdate(internalInstance);
          },
          enqueueForceUpdate: function (publicInstance) {
            var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
            if (!internalInstance) {
              return;
            }
            internalInstance._pendingForceUpdate = true;
            enqueueUpdate(internalInstance);
          },
          enqueueReplaceState: function (publicInstance, completeState) {
            var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
            if (!internalInstance) {
              return;
            }
            internalInstance._pendingStateQueue = [completeState];
            internalInstance._pendingReplaceState = true;
            enqueueUpdate(internalInstance);
          },
          enqueueSetState: function (publicInstance, partialState) {
            var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
            if (!internalInstance) {
              return;
            }
            var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
            queue.push(partialState);
            enqueueUpdate(internalInstance);
          },
          enqueueSetProps: function (publicInstance, partialProps) {
            var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
            if (!internalInstance) {
              return;
            }
            ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
          },
          enqueueSetPropsInternal: function (internalInstance, partialProps) {
            var topLevelWrapper = internalInstance._topLevelWrapper;
            !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;
            // Merge with the pending element if it exists, otherwise with existing
            // element props.
            var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
            var element = wrapElement.props;
            var props = assign({}, element.props, partialProps);
            topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));
            enqueueUpdate(topLevelWrapper);
          },
          enqueueReplaceProps: function (publicInstance, props) {
            var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
            if (!internalInstance) {
              return;
            }
            ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
          },
          enqueueReplacePropsInternal: function (internalInstance, props) {
            var topLevelWrapper = internalInstance._topLevelWrapper;
            !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;
            // Merge with the pending element if it exists, otherwise with existing
            // element props.
            var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
            var element = wrapElement.props;
            topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));
            enqueueUpdate(topLevelWrapper);
          },
          enqueueElementInternal: function (internalInstance, newElement) {
            internalInstance._pendingElement = newElement;
            enqueueUpdate(internalInstance);
          }
        };
      module.exports = ReactUpdateQueue;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */
      'use strict';
      var CallbackQueue = __webpack_require__(64);
      var PooledClass = __webpack_require__(65);
      var ReactPerf = __webpack_require__(27);
      var ReactReconciler = __webpack_require__(59);
      var Transaction = __webpack_require__(66);
      var assign = __webpack_require__(48);
      var invariant = __webpack_require__(22);
      var dirtyComponents = [];
      var asapCallbackQueue = CallbackQueue.getPooled();
      var asapEnqueued = false;
      var batchingStrategy = null;
      function ensureInjected() {
        !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
      }
      var NESTED_UPDATES = {
          initialize: function () {
            this.dirtyComponentsLength = dirtyComponents.length;
          },
          close: function () {
            if (this.dirtyComponentsLength !== dirtyComponents.length) {
              // Additional updates were enqueued by componentDidUpdate handlers or
              // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
              // these new updates so that if A's componentDidUpdate calls setState on
              // B, B will update before the callback A's updater provided when calling
              // setState.
              dirtyComponents.splice(0, this.dirtyComponentsLength);
              flushBatchedUpdates();
            } else {
              dirtyComponents.length = 0;
            }
          }
        };
      var UPDATE_QUEUEING = {
          initialize: function () {
            this.callbackQueue.reset();
          },
          close: function () {
            this.callbackQueue.notifyAll();
          }
        };
      var TRANSACTION_WRAPPERS = [
          NESTED_UPDATES,
          UPDATE_QUEUEING
        ];
      function ReactUpdatesFlushTransaction() {
        this.reinitializeTransaction();
        this.dirtyComponentsLength = null;
        this.callbackQueue = CallbackQueue.getPooled();
        this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(false);
      }
      assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
        getTransactionWrappers: function () {
          return TRANSACTION_WRAPPERS;
        },
        destructor: function () {
          this.dirtyComponentsLength = null;
          CallbackQueue.release(this.callbackQueue);
          this.callbackQueue = null;
          ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
          this.reconcileTransaction = null;
        },
        perform: function (method, scope, a) {
          // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
          // with this transaction's wrappers around it.
          return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
        }
      });
      PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
      function batchedUpdates(callback, a, b, c, d, e) {
        ensureInjected();
        batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
      }
      /**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
      function mountOrderComparator(c1, c2) {
        return c1._mountOrder - c2._mountOrder;
      }
      function runBatchedUpdates(transaction) {
        var len = transaction.dirtyComponentsLength;
        !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;
        // Since reconciling a component higher in the owner hierarchy usually (not
        // always -- see shouldComponentUpdate()) will reconcile children, reconcile
        // them before their children by sorting the array.
        dirtyComponents.sort(mountOrderComparator);
        for (var i = 0; i < len; i++) {
          // If a component is unmounted before pending changes apply, it will still
          // be here, but we assume that it has cleared its _pendingCallbacks and
          // that performUpdateIfNecessary is a noop.
          var component = dirtyComponents[i];
          // If performUpdateIfNecessary happens to enqueue any new updates, we
          // shouldn't execute the callbacks until the next render happens, so
          // stash the callbacks first
          var callbacks = component._pendingCallbacks;
          component._pendingCallbacks = null;
          ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);
          if (callbacks) {
            for (var j = 0; j < callbacks.length; j++) {
              transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
            }
          }
        }
      }
      var flushBatchedUpdates = function () {
        // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
        // array and perform any updates enqueued by mount-ready handlers (i.e.,
        // componentDidUpdate) but we need to check here too in order to catch
        // updates enqueued by setState callbacks and asap calls.
        while (dirtyComponents.length || asapEnqueued) {
          if (dirtyComponents.length) {
            var transaction = ReactUpdatesFlushTransaction.getPooled();
            transaction.perform(runBatchedUpdates, null, transaction);
            ReactUpdatesFlushTransaction.release(transaction);
          }
          if (asapEnqueued) {
            asapEnqueued = false;
            var queue = asapCallbackQueue;
            asapCallbackQueue = CallbackQueue.getPooled();
            queue.notifyAll();
            CallbackQueue.release(queue);
          }
        }
      };
      flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);
      /**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
      function enqueueUpdate(component) {
        ensureInjected();
        // Various parts of our code (such as ReactCompositeComponent's
        // _renderValidatedComponent) assume that calls to render aren't nested;
        // verify that that's the case. (This is called by each top-level update
        // function, like setProps, setState, forceUpdate, etc.; creation and
        // destruction of top-level components is guarded in ReactMount.)
        if (!batchingStrategy.isBatchingUpdates) {
          batchingStrategy.batchedUpdates(enqueueUpdate, component);
          return;
        }
        dirtyComponents.push(component);
      }
      /**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
      function asap(callback, context) {
        !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
        asapCallbackQueue.enqueue(callback, context);
        asapEnqueued = true;
      }
      var ReactUpdatesInjection = {
          injectReconcileTransaction: function (ReconcileTransaction) {
            !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
            ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
          },
          injectBatchingStrategy: function (_batchingStrategy) {
            !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
            !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
            !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
            batchingStrategy = _batchingStrategy;
          }
        };
      var ReactUpdates = {
          ReactReconcileTransaction: null,
          batchedUpdates: batchedUpdates,
          enqueueUpdate: enqueueUpdate,
          flushBatchedUpdates: flushBatchedUpdates,
          injection: ReactUpdatesInjection,
          asap: asap
        };
      module.exports = ReactUpdates;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */
      'use strict';
      var PooledClass = __webpack_require__(65);
      var assign = __webpack_require__(48);
      var invariant = __webpack_require__(22);
      /**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
      function CallbackQueue() {
        this._callbacks = null;
        this._contexts = null;
      }
      assign(CallbackQueue.prototype, {
        enqueue: function (callback, context) {
          this._callbacks = this._callbacks || [];
          this._contexts = this._contexts || [];
          this._callbacks.push(callback);
          this._contexts.push(context);
        },
        notifyAll: function () {
          var callbacks = this._callbacks;
          var contexts = this._contexts;
          if (callbacks) {
            !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
            this._callbacks = null;
            this._contexts = null;
            for (var i = 0; i < callbacks.length; i++) {
              callbacks[i].call(contexts[i]);
            }
            callbacks.length = 0;
            contexts.length = 0;
          }
        },
        reset: function () {
          this._callbacks = null;
          this._contexts = null;
        },
        destructor: function () {
          this.reset();
        }
      });
      PooledClass.addPoolingTo(CallbackQueue);
      module.exports = CallbackQueue;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */
      'use strict';
      var invariant = __webpack_require__(22);
      /**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
      var oneArgumentPooler = function (copyFieldsFrom) {
        var Klass = this;
        if (Klass.instancePool.length) {
          var instance = Klass.instancePool.pop();
          Klass.call(instance, copyFieldsFrom);
          return instance;
        } else {
          return new Klass(copyFieldsFrom);
        }
      };
      var twoArgumentPooler = function (a1, a2) {
        var Klass = this;
        if (Klass.instancePool.length) {
          var instance = Klass.instancePool.pop();
          Klass.call(instance, a1, a2);
          return instance;
        } else {
          return new Klass(a1, a2);
        }
      };
      var threeArgumentPooler = function (a1, a2, a3) {
        var Klass = this;
        if (Klass.instancePool.length) {
          var instance = Klass.instancePool.pop();
          Klass.call(instance, a1, a2, a3);
          return instance;
        } else {
          return new Klass(a1, a2, a3);
        }
      };
      var fourArgumentPooler = function (a1, a2, a3, a4) {
        var Klass = this;
        if (Klass.instancePool.length) {
          var instance = Klass.instancePool.pop();
          Klass.call(instance, a1, a2, a3, a4);
          return instance;
        } else {
          return new Klass(a1, a2, a3, a4);
        }
      };
      var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
        var Klass = this;
        if (Klass.instancePool.length) {
          var instance = Klass.instancePool.pop();
          Klass.call(instance, a1, a2, a3, a4, a5);
          return instance;
        } else {
          return new Klass(a1, a2, a3, a4, a5);
        }
      };
      var standardReleaser = function (instance) {
        var Klass = this;
        !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
        instance.destructor();
        if (Klass.instancePool.length < Klass.poolSize) {
          Klass.instancePool.push(instance);
        }
      };
      var DEFAULT_POOL_SIZE = 10;
      var DEFAULT_POOLER = oneArgumentPooler;
      /**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
      var addPoolingTo = function (CopyConstructor, pooler) {
        var NewKlass = CopyConstructor;
        NewKlass.instancePool = [];
        NewKlass.getPooled = pooler || DEFAULT_POOLER;
        if (!NewKlass.poolSize) {
          NewKlass.poolSize = DEFAULT_POOL_SIZE;
        }
        NewKlass.release = standardReleaser;
        return NewKlass;
      };
      var PooledClass = {
          addPoolingTo: addPoolingTo,
          oneArgumentPooler: oneArgumentPooler,
          twoArgumentPooler: twoArgumentPooler,
          threeArgumentPooler: threeArgumentPooler,
          fourArgumentPooler: fourArgumentPooler,
          fiveArgumentPooler: fiveArgumentPooler
        };
      module.exports = PooledClass;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */
      'use strict';
      var invariant = __webpack_require__(22);
      /**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
      var Mixin = {
          reinitializeTransaction: function () {
            this.transactionWrappers = this.getTransactionWrappers();
            if (this.wrapperInitData) {
              this.wrapperInitData.length = 0;
            } else {
              this.wrapperInitData = [];
            }
            this._isInTransaction = false;
          },
          _isInTransaction: false,
          getTransactionWrappers: null,
          isInTransaction: function () {
            return !!this._isInTransaction;
          },
          perform: function (method, scope, a, b, c, d, e, f) {
            !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
            var errorThrown;
            var ret;
            try {
              this._isInTransaction = true;
              // Catching errors makes debugging more difficult, so we start with
              // errorThrown set to true before setting it to false after calling
              // close -- if it's still set to true in the finally block, it means
              // one of these calls threw.
              errorThrown = true;
              this.initializeAll(0);
              ret = method.call(scope, a, b, c, d, e, f);
              errorThrown = false;
            } finally {
              try {
                if (errorThrown) {
                  // If `method` throws, prefer to show that stack trace over any thrown
                  // by invoking `closeAll`.
                  try {
                    this.closeAll(0);
                  } catch (err) {
                  }
                } else {
                  // Since `method` didn't throw, we don't want to silence the exception
                  // here.
                  this.closeAll(0);
                }
              } finally {
                this._isInTransaction = false;
              }
            }
            return ret;
          },
          initializeAll: function (startIndex) {
            var transactionWrappers = this.transactionWrappers;
            for (var i = startIndex; i < transactionWrappers.length; i++) {
              var wrapper = transactionWrappers[i];
              try {
                // Catching errors makes debugging more difficult, so we start with the
                // OBSERVED_ERROR state before overwriting it with the real return value
                // of initialize -- if it's still set to OBSERVED_ERROR in the finally
                // block, it means wrapper.initialize threw.
                this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
                this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
              } finally {
                if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
                  // The initializer for wrapper i threw an error; initialize the
                  // remaining wrappers but silence any exceptions from them to ensure
                  // that the first error is the one to bubble up.
                  try {
                    this.initializeAll(i + 1);
                  } catch (err) {
                  }
                }
              }
            }
          },
          closeAll: function (startIndex) {
            !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
            var transactionWrappers = this.transactionWrappers;
            for (var i = startIndex; i < transactionWrappers.length; i++) {
              var wrapper = transactionWrappers[i];
              var initData = this.wrapperInitData[i];
              var errorThrown;
              try {
                // Catching errors makes debugging more difficult, so we start with
                // errorThrown set to true before setting it to false after calling
                // close -- if it's still set to true in the finally block, it means
                // wrapper.close threw.
                errorThrown = true;
                if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
                  wrapper.close.call(this, initData);
                }
                errorThrown = false;
              } finally {
                if (errorThrown) {
                  // The closer for wrapper i threw an error; close the remaining
                  // wrappers but silence any exceptions from them to ensure that the
                  // first error is the one to bubble up.
                  try {
                    this.closeAll(i + 1);
                  } catch (e) {
                  }
                }
              }
            }
            this.wrapperInitData.length = 0;
          }
        };
      var Transaction = {
          Mixin: Mixin,
          OBSERVED_ERROR: {}
        };
      module.exports = Transaction;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */
      'use strict';
      var emptyObject = {};
      if (process.env.NODE_ENV !== 'production') {
        Object.freeze(emptyObject);
      }
      module.exports = emptyObject;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */
    'use strict';
    var isTextNode = __webpack_require__(69);
    /*eslint-disable no-bitwise */
    /**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
    function containsNode(_x, _x2) {
      var _again = true;
      _function:
        while (_again) {
          var outerNode = _x, innerNode = _x2;
          _again = false;
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            _x = outerNode;
            _x2 = innerNode.parentNode;
            _again = true;
            continue _function;
          } else if (outerNode.contains) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
    }
    module.exports = containsNode;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */
    'use strict';
    var isNode = __webpack_require__(70);
    /**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
    function isTextNode(object) {
      return isNode(object) && object.nodeType == 3;
    }
    module.exports = isTextNode;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */
    /**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
    'use strict';
    function isNode(object) {
      return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
    }
    module.exports = isNode;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */
      'use strict';
      var ReactCompositeComponent = __webpack_require__(72);
      var ReactEmptyComponent = __webpack_require__(77);
      var ReactNativeComponent = __webpack_require__(78);
      var assign = __webpack_require__(48);
      var invariant = __webpack_require__(22);
      var warning = __webpack_require__(34);
      // To avoid a cyclic dependency, we create the final class in this module
      var ReactCompositeComponentWrapper = function () {
      };
      assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, { _instantiateReactComponent: instantiateReactComponent });
      function getDeclarationErrorAddendum(owner) {
        if (owner) {
          var name = owner.getName();
          if (name) {
            return ' Check the render method of `' + name + '`.';
          }
        }
        return '';
      }
      /**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
      function isInternalComponentType(type) {
        return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
      }
      /**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
      function instantiateReactComponent(node) {
        var instance;
        if (node === null || node === false) {
          instance = new ReactEmptyComponent(instantiateReactComponent);
        } else if (typeof node === 'object') {
          var element = node;
          !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;
          // Special case string values
          if (typeof element.type === 'string') {
            instance = ReactNativeComponent.createInternalComponent(element);
          } else if (isInternalComponentType(element.type)) {
            // This is temporarily available for custom components that are not string
            // representations. I.e. ART. Once those are updated to use the string
            // representation, we can drop this code path.
            instance = new element.type(element);
          } else {
            instance = new ReactCompositeComponentWrapper();
          }
        } else if (typeof node === 'string' || typeof node === 'number') {
          instance = ReactNativeComponent.createInstanceForText(node);
        } else {
          true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
        }
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
        }
        // Sets up the instance. This can probably just move into the constructor now.
        instance.construct(node);
        // These two fields are used by the DOM and ART diffing algorithms
        // respectively. Instead of using expandos on components, we should be
        // storing the state needed by the diffing algorithms elsewhere.
        instance._mountIndex = 0;
        instance._mountImage = null;
        if (process.env.NODE_ENV !== 'production') {
          instance._isOwnerNecessary = false;
          instance._warnedAboutRefsInRender = false;
        }
        // Internal instances should fully constructed at this point, so they should
        // not get any new fields added to them at this point.
        if (process.env.NODE_ENV !== 'production') {
          if (Object.preventExtensions) {
            Object.preventExtensions(instance);
          }
        }
        return instance;
      }
      module.exports = instantiateReactComponent;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */
      'use strict';
      var ReactComponentEnvironment = __webpack_require__(73);
      var ReactCurrentOwner = __webpack_require__(14);
      var ReactElement = __webpack_require__(51);
      var ReactInstanceMap = __webpack_require__(56);
      var ReactPerf = __webpack_require__(27);
      var ReactPropTypeLocations = __webpack_require__(74);
      var ReactPropTypeLocationNames = __webpack_require__(75);
      var ReactReconciler = __webpack_require__(59);
      var ReactUpdateQueue = __webpack_require__(62);
      var assign = __webpack_require__(48);
      var emptyObject = __webpack_require__(67);
      var invariant = __webpack_require__(22);
      var shouldUpdateReactComponent = __webpack_require__(76);
      var warning = __webpack_require__(34);
      function getDeclarationErrorAddendum(component) {
        var owner = component._currentElement._owner || null;
        if (owner) {
          var name = owner.getName();
          if (name) {
            return ' Check the render method of `' + name + '`.';
          }
        }
        return '';
      }
      function StatelessComponent(Component) {
      }
      StatelessComponent.prototype.render = function () {
        var Component = ReactInstanceMap.get(this)._currentElement.type;
        return Component(this.props, this.context, this.updater);
      };
      /**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
      /**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
      var nextMountID = 1;
      /**
	 * @lends {ReactCompositeComponent.prototype}
	 */
      var ReactCompositeComponentMixin = {
          construct: function (element) {
            this._currentElement = element;
            this._rootNodeID = null;
            this._instance = null;
            // See ReactUpdateQueue
            this._pendingElement = null;
            this._pendingStateQueue = null;
            this._pendingReplaceState = false;
            this._pendingForceUpdate = false;
            this._renderedComponent = null;
            this._context = null;
            this._mountOrder = 0;
            this._topLevelWrapper = null;
            // See ReactUpdates and ReactUpdateQueue.
            this._pendingCallbacks = null;
          },
          mountComponent: function (rootID, transaction, context) {
            this._context = context;
            this._mountOrder = nextMountID++;
            this._rootNodeID = rootID;
            var publicProps = this._processProps(this._currentElement.props);
            var publicContext = this._processContext(context);
            var Component = this._currentElement.type;
            // Initialize the public class
            var inst;
            var renderedElement;
            // This is a way to detect if Component is a stateless arrow function
            // component, which is not newable. It might not be 100% reliable but is
            // something we can do until we start detecting that Component extends
            // React.Component. We already assume that typeof Component === 'function'.
            var canInstantiate = 'prototype' in Component;
            if (canInstantiate) {
              if (process.env.NODE_ENV !== 'production') {
                ReactCurrentOwner.current = this;
                try {
                  inst = new Component(publicProps, publicContext, ReactUpdateQueue);
                } finally {
                  ReactCurrentOwner.current = null;
                }
              } else {
                inst = new Component(publicProps, publicContext, ReactUpdateQueue);
              }
            }
            if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
              renderedElement = inst;
              inst = new StatelessComponent(Component);
            }
            if (process.env.NODE_ENV !== 'production') {
              // This will throw later in _renderValidatedComponent, but add an early
              // warning now to help debugging
              if (inst.render == null) {
                process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
              } else {
                // We support ES6 inheriting from React.Component, the module pattern,
                // and stateless components, but not ES6 classes that don't extend
                process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
              }
            }
            // These should be set up in the constructor, but as a convenience for
            // simpler class abstractions, we set them up after the fact.
            inst.props = publicProps;
            inst.context = publicContext;
            inst.refs = emptyObject;
            inst.updater = ReactUpdateQueue;
            this._instance = inst;
            // Store a reference from the instance back to the internal representation
            ReactInstanceMap.set(inst, this);
            if (process.env.NODE_ENV !== 'production') {
              // Since plain JS classes are defined without any special initialization
              // logic, we can not catch common errors early. Therefore, we have to
              // catch them here, at initialization time, instead.
              process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
              process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
              process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
              process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
              process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
              process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
              process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
            }
            var initialState = inst.state;
            if (initialState === undefined) {
              inst.state = initialState = null;
            }
            !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
            this._pendingStateQueue = null;
            this._pendingReplaceState = false;
            this._pendingForceUpdate = false;
            if (inst.componentWillMount) {
              inst.componentWillMount();
              // When mounting, calls to `setState` by `componentWillMount` will set
              // `this._pendingStateQueue` without triggering a re-render.
              if (this._pendingStateQueue) {
                inst.state = this._processPendingState(inst.props, inst.context);
              }
            }
            // If not a stateless component, we now render
            if (renderedElement === undefined) {
              renderedElement = this._renderValidatedComponent();
            }
            this._renderedComponent = this._instantiateReactComponent(renderedElement);
            var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
            if (inst.componentDidMount) {
              transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
            }
            return markup;
          },
          unmountComponent: function () {
            var inst = this._instance;
            if (inst.componentWillUnmount) {
              inst.componentWillUnmount();
            }
            ReactReconciler.unmountComponent(this._renderedComponent);
            this._renderedComponent = null;
            this._instance = null;
            // Reset pending fields
            // Even if this component is scheduled for another update in ReactUpdates,
            // it would still be ignored because these fields are reset.
            this._pendingStateQueue = null;
            this._pendingReplaceState = false;
            this._pendingForceUpdate = false;
            this._pendingCallbacks = null;
            this._pendingElement = null;
            // These fields do not really need to be reset since this object is no
            // longer accessible.
            this._context = null;
            this._rootNodeID = null;
            this._topLevelWrapper = null;
            // Delete the reference from the instance to this internal representation
            // which allow the internals to be properly cleaned up even if the user
            // leaks a reference to the public instance.
            ReactInstanceMap.remove(inst);  // Some existing components rely on inst.props even after they've been
                                            // destroyed (in event handlers).
                                            // TODO: inst.props = null;
                                            // TODO: inst.state = null;
                                            // TODO: inst.context = null;
          },
          _maskContext: function (context) {
            var maskedContext = null;
            var Component = this._currentElement.type;
            var contextTypes = Component.contextTypes;
            if (!contextTypes) {
              return emptyObject;
            }
            maskedContext = {};
            for (var contextName in contextTypes) {
              maskedContext[contextName] = context[contextName];
            }
            return maskedContext;
          },
          _processContext: function (context) {
            var maskedContext = this._maskContext(context);
            if (process.env.NODE_ENV !== 'production') {
              var Component = this._currentElement.type;
              if (Component.contextTypes) {
                this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
              }
            }
            return maskedContext;
          },
          _processChildContext: function (currentContext) {
            var Component = this._currentElement.type;
            var inst = this._instance;
            var childContext = inst.getChildContext && inst.getChildContext();
            if (childContext) {
              !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
              if (process.env.NODE_ENV !== 'production') {
                this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
              }
              for (var name in childContext) {
                !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
              }
              return assign({}, currentContext, childContext);
            }
            return currentContext;
          },
          _processProps: function (newProps) {
            if (process.env.NODE_ENV !== 'production') {
              var Component = this._currentElement.type;
              if (Component.propTypes) {
                this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
              }
            }
            return newProps;
          },
          _checkPropTypes: function (propTypes, props, location) {
            // TODO: Stop validating prop types here and only use the element
            // validation.
            var componentName = this.getName();
            for (var propName in propTypes) {
              if (propTypes.hasOwnProperty(propName)) {
                var error;
                try {
                  // This is intentionally an invariant that gets caught. It's the same
                  // behavior as without this statement except with a better message.
                  !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
                  error = propTypes[propName](props, propName, componentName, location);
                } catch (ex) {
                  error = ex;
                }
                if (error instanceof Error) {
                  // We may want to extend this logic for similar errors in
                  // top-level render calls, so I'm abstracting it away into
                  // a function to minimize refactoring in the future
                  var addendum = getDeclarationErrorAddendum(this);
                  if (location === ReactPropTypeLocations.prop) {
                    // Preface gives us something to blacklist in warning module
                    process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
                  } else {
                    process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
                  }
                }
              }
            }
          },
          receiveComponent: function (nextElement, transaction, nextContext) {
            var prevElement = this._currentElement;
            var prevContext = this._context;
            this._pendingElement = null;
            this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
          },
          performUpdateIfNecessary: function (transaction) {
            if (this._pendingElement != null) {
              ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
            }
            if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
              this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
            }
          },
          updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
            var inst = this._instance;
            var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
            var nextProps;
            // Distinguish between a props update versus a simple state update
            if (prevParentElement === nextParentElement) {
              // Skip checking prop types again -- we don't read inst.props to avoid
              // warning for DOM component props in this upgrade
              nextProps = nextParentElement.props;
            } else {
              nextProps = this._processProps(nextParentElement.props);
              // An update here will schedule an update but immediately set
              // _pendingStateQueue which will ensure that any state updates gets
              // immediately reconciled instead of waiting for the next batch.
              if (inst.componentWillReceiveProps) {
                inst.componentWillReceiveProps(nextProps, nextContext);
              }
            }
            var nextState = this._processPendingState(nextProps, nextContext);
            var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);
            if (process.env.NODE_ENV !== 'production') {
              process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
            }
            if (shouldUpdate) {
              this._pendingForceUpdate = false;
              // Will set `this.props`, `this.state` and `this.context`.
              this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
            } else {
              // If it's determined that a component should not update, we still want
              // to set props and state but we shortcut the rest of the update.
              this._currentElement = nextParentElement;
              this._context = nextUnmaskedContext;
              inst.props = nextProps;
              inst.state = nextState;
              inst.context = nextContext;
            }
          },
          _processPendingState: function (props, context) {
            var inst = this._instance;
            var queue = this._pendingStateQueue;
            var replace = this._pendingReplaceState;
            this._pendingReplaceState = false;
            this._pendingStateQueue = null;
            if (!queue) {
              return inst.state;
            }
            if (replace && queue.length === 1) {
              return queue[0];
            }
            var nextState = assign({}, replace ? queue[0] : inst.state);
            for (var i = replace ? 1 : 0; i < queue.length; i++) {
              var partial = queue[i];
              assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
            }
            return nextState;
          },
          _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
            var inst = this._instance;
            var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
            var prevProps;
            var prevState;
            var prevContext;
            if (hasComponentDidUpdate) {
              prevProps = inst.props;
              prevState = inst.state;
              prevContext = inst.context;
            }
            if (inst.componentWillUpdate) {
              inst.componentWillUpdate(nextProps, nextState, nextContext);
            }
            this._currentElement = nextElement;
            this._context = unmaskedContext;
            inst.props = nextProps;
            inst.state = nextState;
            inst.context = nextContext;
            this._updateRenderedComponent(transaction, unmaskedContext);
            if (hasComponentDidUpdate) {
              transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
            }
          },
          _updateRenderedComponent: function (transaction, context) {
            var prevComponentInstance = this._renderedComponent;
            var prevRenderedElement = prevComponentInstance._currentElement;
            var nextRenderedElement = this._renderValidatedComponent();
            if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
              ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
            } else {
              // These two IDs are actually the same! But nothing should rely on that.
              var thisID = this._rootNodeID;
              var prevComponentID = prevComponentInstance._rootNodeID;
              ReactReconciler.unmountComponent(prevComponentInstance);
              this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
              var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
              this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
            }
          },
          _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
            ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
          },
          _renderValidatedComponentWithoutOwnerOrContext: function () {
            var inst = this._instance;
            var renderedComponent = inst.render();
            if (process.env.NODE_ENV !== 'production') {
              // We allow auto-mocks to proceed as if they're returning null.
              if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
                // This is probably bad practice. Consider warning here and
                // deprecating this convenience.
                renderedComponent = null;
              }
            }
            return renderedComponent;
          },
          _renderValidatedComponent: function () {
            var renderedComponent;
            ReactCurrentOwner.current = this;
            try {
              renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
            } finally {
              ReactCurrentOwner.current = null;
            }
            !(renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
            return renderedComponent;
          },
          attachRef: function (ref, component) {
            var inst = this.getPublicInstance();
            !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
            var publicComponentInstance = component.getPublicInstance();
            if (process.env.NODE_ENV !== 'production') {
              var componentName = component && component.getName ? component.getName() : 'a component';
              process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
            }
            var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
            refs[ref] = publicComponentInstance;
          },
          detachRef: function (ref) {
            var refs = this.getPublicInstance().refs;
            delete refs[ref];
          },
          getName: function () {
            var type = this._currentElement.type;
            var constructor = this._instance && this._instance.constructor;
            return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
          },
          getPublicInstance: function () {
            var inst = this._instance;
            if (inst instanceof StatelessComponent) {
              return null;
            }
            return inst;
          },
          _instantiateReactComponent: null
        };
      ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
        mountComponent: 'mountComponent',
        updateComponent: 'updateComponent',
        _renderValidatedComponent: '_renderValidatedComponent'
      });
      var ReactCompositeComponent = { Mixin: ReactCompositeComponentMixin };
      module.exports = ReactCompositeComponent;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */
      'use strict';
      var invariant = __webpack_require__(22);
      var injected = false;
      var ReactComponentEnvironment = {
          unmountIDFromEnvironment: null,
          replaceNodeWithMarkupByID: null,
          processChildrenUpdates: null,
          injection: {
            injectEnvironment: function (environment) {
              !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
              ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
              ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
              ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
              injected = true;
            }
          }
        };
      module.exports = ReactComponentEnvironment;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */
    'use strict';
    var keyMirror = __webpack_require__(26);
    var ReactPropTypeLocations = keyMirror({
        prop: null,
        context: null,
        childContext: null
      });
    module.exports = ReactPropTypeLocations;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */
      'use strict';
      var ReactPropTypeLocationNames = {};
      if (process.env.NODE_ENV !== 'production') {
        ReactPropTypeLocationNames = {
          prop: 'prop',
          context: 'context',
          childContext: 'child context'
        };
      }
      module.exports = ReactPropTypeLocationNames;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */
    'use strict';
    /**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
    function shouldUpdateReactComponent(prevElement, nextElement) {
      var prevEmpty = prevElement === null || prevElement === false;
      var nextEmpty = nextElement === null || nextElement === false;
      if (prevEmpty || nextEmpty) {
        return prevEmpty === nextEmpty;
      }
      var prevType = typeof prevElement;
      var nextType = typeof nextElement;
      if (prevType === 'string' || prevType === 'number') {
        return nextType === 'string' || nextType === 'number';
      } else {
        return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
      }
      return false;
    }
    module.exports = shouldUpdateReactComponent;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */
    'use strict';
    var ReactElement = __webpack_require__(51);
    var ReactEmptyComponentRegistry = __webpack_require__(53);
    var ReactReconciler = __webpack_require__(59);
    var assign = __webpack_require__(48);
    var placeholderElement;
    var ReactEmptyComponentInjection = {
        injectEmptyComponent: function (component) {
          placeholderElement = ReactElement.createElement(component);
        }
      };
    var ReactEmptyComponent = function (instantiate) {
      this._currentElement = null;
      this._rootNodeID = null;
      this._renderedComponent = instantiate(placeholderElement);
    };
    assign(ReactEmptyComponent.prototype, {
      construct: function (element) {
      },
      mountComponent: function (rootID, transaction, context) {
        ReactEmptyComponentRegistry.registerNullComponentID(rootID);
        this._rootNodeID = rootID;
        return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
      },
      receiveComponent: function () {
      },
      unmountComponent: function (rootID, transaction, context) {
        ReactReconciler.unmountComponent(this._renderedComponent);
        ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
        this._rootNodeID = null;
        this._renderedComponent = null;
      }
    });
    ReactEmptyComponent.injection = ReactEmptyComponentInjection;
    module.exports = ReactEmptyComponent;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */
      'use strict';
      var assign = __webpack_require__(48);
      var invariant = __webpack_require__(22);
      var autoGenerateWrapperClass = null;
      var genericComponentClass = null;
      // This registry keeps track of wrapper classes around native tags.
      var tagToComponentClass = {};
      var textComponentClass = null;
      var ReactNativeComponentInjection = {
          injectGenericComponentClass: function (componentClass) {
            genericComponentClass = componentClass;
          },
          injectTextComponentClass: function (componentClass) {
            textComponentClass = componentClass;
          },
          injectComponentClasses: function (componentClasses) {
            assign(tagToComponentClass, componentClasses);
          }
        };
      /**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
      function getComponentClassForElement(element) {
        if (typeof element.type === 'function') {
          return element.type;
        }
        var tag = element.type;
        var componentClass = tagToComponentClass[tag];
        if (componentClass == null) {
          tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
        }
        return componentClass;
      }
      /**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
      function createInternalComponent(element) {
        !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
        return new genericComponentClass(element.type, element.props);
      }
      /**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
      function createInstanceForText(text) {
        return new textComponentClass(text);
      }
      /**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
      function isTextComponent(component) {
        return component instanceof textComponentClass;
      }
      var ReactNativeComponent = {
          getComponentClassForElement: getComponentClassForElement,
          createInternalComponent: createInternalComponent,
          createInstanceForText: createInstanceForText,
          isTextComponent: isTextComponent,
          injection: ReactNativeComponentInjection
        };
      module.exports = ReactNativeComponent;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */
      'use strict';
      var assign = __webpack_require__(48);
      var emptyFunction = __webpack_require__(24);
      var warning = __webpack_require__(34);
      var validateDOMNesting = emptyFunction;
      if (process.env.NODE_ENV !== 'production') {
        // This validation code was written based on the HTML5 parsing spec:
        // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
        //
        // Note: this does not catch all invalid nesting, nor does it try to (as it's
        // not clear what practical benefit doing so provides); instead, we warn only
        // for cases where the parser will give a parse tree differing from what React
        // intended. For example, <b><div></div></b> is invalid but we don't warn
        // because it still parses correctly; we do warn for other cases like nested
        // <p> tags where the beginning of the second element implicitly closes the
        // first, causing a confusing mess.
        // https://html.spec.whatwg.org/multipage/syntax.html#special
        var specialTags = [
            'address',
            'applet',
            'area',
            'article',
            'aside',
            'base',
            'basefont',
            'bgsound',
            'blockquote',
            'body',
            'br',
            'button',
            'caption',
            'center',
            'col',
            'colgroup',
            'dd',
            'details',
            'dir',
            'div',
            'dl',
            'dt',
            'embed',
            'fieldset',
            'figcaption',
            'figure',
            'footer',
            'form',
            'frame',
            'frameset',
            'h1',
            'h2',
            'h3',
            'h4',
            'h5',
            'h6',
            'head',
            'header',
            'hgroup',
            'hr',
            'html',
            'iframe',
            'img',
            'input',
            'isindex',
            'li',
            'link',
            'listing',
            'main',
            'marquee',
            'menu',
            'menuitem',
            'meta',
            'nav',
            'noembed',
            'noframes',
            'noscript',
            'object',
            'ol',
            'p',
            'param',
            'plaintext',
            'pre',
            'script',
            'section',
            'select',
            'source',
            'style',
            'summary',
            'table',
            'tbody',
            'td',
            'template',
            'textarea',
            'tfoot',
            'th',
            'thead',
            'title',
            'tr',
            'track',
            'ul',
            'wbr',
            'xmp'
          ];
        // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
        var inScopeTags = [
            'applet',
            'caption',
            'html',
            'table',
            'td',
            'th',
            'marquee',
            'object',
            'template',
            'foreignObject',
            'desc',
            'title'
          ];
        // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
        var buttonScopeTags = inScopeTags.concat(['button']);
        // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
        var impliedEndTags = [
            'dd',
            'dt',
            'li',
            'option',
            'optgroup',
            'p',
            'rp',
            'rt'
          ];
        var emptyAncestorInfo = {
            parentTag: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
        var updatedAncestorInfo = function (oldInfo, tag, instance) {
          var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
          var info = {
              tag: tag,
              instance: instance
            };
          if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
          }
          if (buttonScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.pTagInButtonScope = null;
          }
          // See rules for 'li', 'dd', 'dt' start tags in
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
          if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
          }
          ancestorInfo.parentTag = info;
          if (tag === 'form') {
            ancestorInfo.formTag = info;
          }
          if (tag === 'a') {
            ancestorInfo.aTagInScope = info;
          }
          if (tag === 'button') {
            ancestorInfo.buttonTagInScope = info;
          }
          if (tag === 'nobr') {
            ancestorInfo.nobrTagInScope = info;
          }
          if (tag === 'p') {
            ancestorInfo.pTagInButtonScope = info;
          }
          if (tag === 'li') {
            ancestorInfo.listItemTagAutoclosing = info;
          }
          if (tag === 'dd' || tag === 'dt') {
            ancestorInfo.dlItemTagAutoclosing = info;
          }
          return ancestorInfo;
        };
        /**
	   * Returns whether
	   */
        var isTagValidWithParent = function (tag, parentTag) {
          // First, let's check if we're in an unusual parsing mode...
          switch (parentTag) {
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
          case 'select':
            return tag === 'option' || tag === 'optgroup' || tag === '#text';
          case 'optgroup':
            return tag === 'option' || tag === '#text';
          // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
          // but
          case 'option':
            return tag === '#text';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
          // No special behavior since these rules fall back to "in body" mode for
          // all except special table nodes which cause bad parsing behavior anyway.
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
          case 'tr':
            return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
          case 'tbody':
          case 'thead':
          case 'tfoot':
            return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
          case 'colgroup':
            return tag === 'col' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
          case 'table':
            return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
          case 'head':
            return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
          case 'html':
            return tag === 'head' || tag === 'body';
          }
          // Probably in the "in body" parsing mode, so we outlaw only tag combos
          // where the parsing rules cause implicit opens or closes to be added.
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
          switch (tag) {
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
          case 'rp':
          case 'rt':
            return impliedEndTags.indexOf(parentTag) === -1;
          case 'caption':
          case 'col':
          case 'colgroup':
          case 'frame':
          case 'head':
          case 'tbody':
          case 'td':
          case 'tfoot':
          case 'th':
          case 'thead':
          case 'tr':
            // These tags are only valid with a few parents that have special child
            // parsing rules -- if we're down here, then none of those matched and
            // so we allow it only if we don't know what the parent is, as all other
            // cases are invalid.
            return parentTag == null;
          }
          return true;
        };
        /**
	   * Returns whether
	   */
        var findInvalidAncestorForTag = function (tag, ancestorInfo) {
          switch (tag) {
          case 'address':
          case 'article':
          case 'aside':
          case 'blockquote':
          case 'center':
          case 'details':
          case 'dialog':
          case 'dir':
          case 'div':
          case 'dl':
          case 'fieldset':
          case 'figcaption':
          case 'figure':
          case 'footer':
          case 'header':
          case 'hgroup':
          case 'main':
          case 'menu':
          case 'nav':
          case 'ol':
          case 'p':
          case 'section':
          case 'summary':
          case 'ul':
          case 'pre':
          case 'listing':
          case 'table':
          case 'hr':
          case 'xmp':
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return ancestorInfo.pTagInButtonScope;
          case 'form':
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
          case 'li':
            return ancestorInfo.listItemTagAutoclosing;
          case 'dd':
          case 'dt':
            return ancestorInfo.dlItemTagAutoclosing;
          case 'button':
            return ancestorInfo.buttonTagInScope;
          case 'a':
            // Spec says something about storing a list of markers, but it sounds
            // equivalent to this check.
            return ancestorInfo.aTagInScope;
          case 'nobr':
            return ancestorInfo.nobrTagInScope;
          }
          return null;
        };
        /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
        var findOwnerStack = function (instance) {
          if (!instance) {
            return [];
          }
          var stack = [];
          /*eslint-disable space-after-keywords */
          do {
            /*eslint-enable space-after-keywords */
            stack.push(instance);
          } while (instance = instance._currentElement._owner);
          stack.reverse();
          return stack;
        };
        var didWarn = {};
        validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo;
          var parentInfo = ancestorInfo.parentTag;
          var parentTag = parentInfo && parentInfo.tag;
          var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
          var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
          var problematic = invalidParent || invalidAncestor;
          if (problematic) {
            var ancestorTag = problematic.tag;
            var ancestorInstance = problematic.instance;
            var childOwner = childInstance && childInstance._currentElement._owner;
            var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
            var childOwners = findOwnerStack(childOwner);
            var ancestorOwners = findOwnerStack(ancestorOwner);
            var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
            var i;
            var deepestCommon = -1;
            for (i = 0; i < minStackLen; i++) {
              if (childOwners[i] === ancestorOwners[i]) {
                deepestCommon = i;
              } else {
                break;
              }
            }
            var UNKNOWN = '(unknown)';
            var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
                return inst.getName() || UNKNOWN;
              });
            var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
                return inst.getName() || UNKNOWN;
              });
            var ownerInfo = [].concat(deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag, invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
            var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
            if (didWarn[warnKey]) {
              return;
            }
            didWarn[warnKey] = true;
            if (invalidParent) {
              var info = '';
              if (ancestorTag === 'table' && childTag === 'tr') {
                info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
              }
              process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
            } else {
              process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
            }
          }
        };
        validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);
        validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
        // For testing
        validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo;
          var parentInfo = ancestorInfo.parentTag;
          var parentTag = parentInfo && parentInfo.tag;
          return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
        };
      }
      module.exports = validateDOMNesting;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */
      'use strict';
      var BeforeInputEventPlugin = __webpack_require__(81);
      var ChangeEventPlugin = __webpack_require__(89);
      var ClientReactRootIndex = __webpack_require__(92);
      var DefaultEventPluginOrder = __webpack_require__(93);
      var EnterLeaveEventPlugin = __webpack_require__(94);
      var ExecutionEnvironment = __webpack_require__(18);
      var HTMLDOMPropertyConfig = __webpack_require__(98);
      var ReactBrowserComponentMixin = __webpack_require__(99);
      var ReactComponentBrowserEnvironment = __webpack_require__(35);
      var ReactDefaultBatchingStrategy = __webpack_require__(101);
      var ReactDOMComponent = __webpack_require__(102);
      var ReactDOMTextComponent = __webpack_require__(15);
      var ReactEventListener = __webpack_require__(127);
      var ReactInjection = __webpack_require__(130);
      var ReactInstanceHandles = __webpack_require__(54);
      var ReactMount = __webpack_require__(37);
      var ReactReconcileTransaction = __webpack_require__(134);
      var SelectEventPlugin = __webpack_require__(139);
      var ServerReactRootIndex = __webpack_require__(140);
      var SimpleEventPlugin = __webpack_require__(141);
      var SVGDOMPropertyConfig = __webpack_require__(150);
      var alreadyInjected = false;
      function inject() {
        if (alreadyInjected) {
          // TODO: This is currently true because these injections are shared between
          // the client and the server package. They should be built independently
          // and not share any injection state. Then this problem will be solved.
          return;
        }
        alreadyInjected = true;
        ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
        /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
        ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
        ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
        ReactInjection.EventPluginHub.injectMount(ReactMount);
        /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
        ReactInjection.EventPluginHub.injectEventPluginsByName({
          SimpleEventPlugin: SimpleEventPlugin,
          EnterLeaveEventPlugin: EnterLeaveEventPlugin,
          ChangeEventPlugin: ChangeEventPlugin,
          SelectEventPlugin: SelectEventPlugin,
          BeforeInputEventPlugin: BeforeInputEventPlugin
        });
        ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);
        ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);
        ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);
        ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
        ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
        ReactInjection.EmptyComponent.injectEmptyComponent('noscript');
        ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
        ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
        ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);
        ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
        if (process.env.NODE_ENV !== 'production') {
          var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
          if (/[?&]react_perf\b/.test(url)) {
            var ReactDefaultPerf = __webpack_require__(151);
            ReactDefaultPerf.start();
          }
        }
      }
      module.exports = { inject: inject };  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */
    'use strict';
    var EventConstants = __webpack_require__(39);
    var EventPropagators = __webpack_require__(82);
    var ExecutionEnvironment = __webpack_require__(18);
    var FallbackCompositionState = __webpack_require__(83);
    var SyntheticCompositionEvent = __webpack_require__(85);
    var SyntheticInputEvent = __webpack_require__(87);
    var keyOf = __webpack_require__(88);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
      ];
    // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
      documentMode = document.documentMode;
    }
    // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
    // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    /**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
    function isPresto() {
      var opera = window.opera;
      return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
    }
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    var topLevelTypes = EventConstants.topLevelTypes;
    // Events and their corresponding property names.
    var eventTypes = {
        beforeInput: {
          phasedRegistrationNames: {
            bubbled: keyOf({ onBeforeInput: null }),
            captured: keyOf({ onBeforeInputCapture: null })
          },
          dependencies: [
            topLevelTypes.topCompositionEnd,
            topLevelTypes.topKeyPress,
            topLevelTypes.topTextInput,
            topLevelTypes.topPaste
          ]
        },
        compositionEnd: {
          phasedRegistrationNames: {
            bubbled: keyOf({ onCompositionEnd: null }),
            captured: keyOf({ onCompositionEndCapture: null })
          },
          dependencies: [
            topLevelTypes.topBlur,
            topLevelTypes.topCompositionEnd,
            topLevelTypes.topKeyDown,
            topLevelTypes.topKeyPress,
            topLevelTypes.topKeyUp,
            topLevelTypes.topMouseDown
          ]
        },
        compositionStart: {
          phasedRegistrationNames: {
            bubbled: keyOf({ onCompositionStart: null }),
            captured: keyOf({ onCompositionStartCapture: null })
          },
          dependencies: [
            topLevelTypes.topBlur,
            topLevelTypes.topCompositionStart,
            topLevelTypes.topKeyDown,
            topLevelTypes.topKeyPress,
            topLevelTypes.topKeyUp,
            topLevelTypes.topMouseDown
          ]
        },
        compositionUpdate: {
          phasedRegistrationNames: {
            bubbled: keyOf({ onCompositionUpdate: null }),
            captured: keyOf({ onCompositionUpdateCapture: null })
          },
          dependencies: [
            topLevelTypes.topBlur,
            topLevelTypes.topCompositionUpdate,
            topLevelTypes.topKeyDown,
            topLevelTypes.topKeyPress,
            topLevelTypes.topKeyUp,
            topLevelTypes.topMouseDown
          ]
        }
      };
    // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
    function isKeypressCommand(nativeEvent) {
      return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
    function getCompositionEventType(topLevelType) {
      switch (topLevelType) {
      case topLevelTypes.topCompositionStart:
        return eventTypes.compositionStart;
      case topLevelTypes.topCompositionEnd:
        return eventTypes.compositionEnd;
      case topLevelTypes.topCompositionUpdate:
        return eventTypes.compositionUpdate;
      }
    }
    /**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
    function isFallbackCompositionStart(topLevelType, nativeEvent) {
      return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
    function isFallbackCompositionEnd(topLevelType, nativeEvent) {
      switch (topLevelType) {
      case topLevelTypes.topKeyUp:
        // Command keys insert or clear IME input.
        return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
      case topLevelTypes.topKeyDown:
        // Expect IME keyCode on each keydown. If we get any other
        // code we must have exited earlier.
        return nativeEvent.keyCode !== START_KEYCODE;
      case topLevelTypes.topKeyPress:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topBlur:
        // Events are not possible without cancelling IME.
        return true;
      default:
        return false;
      }
    }
    /**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
    function getDataFromCustomEvent(nativeEvent) {
      var detail = nativeEvent.detail;
      if (typeof detail === 'object' && 'data' in detail) {
        return detail.data;
      }
      return null;
    }
    // Track the current IME composition fallback object, if any.
    var currentComposition = null;
    /**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
    function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
      var eventType;
      var fallbackData;
      if (canUseCompositionEvent) {
        eventType = getCompositionEventType(topLevelType);
      } else if (!currentComposition) {
        if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
          eventType = eventTypes.compositionStart;
        }
      } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionEnd;
      }
      if (!eventType) {
        return null;
      }
      if (useFallbackCompositionData) {
        // The current composition is stored statically and must not be
        // overwritten while composition continues.
        if (!currentComposition && eventType === eventTypes.compositionStart) {
          currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
        } else if (eventType === eventTypes.compositionEnd) {
          if (currentComposition) {
            fallbackData = currentComposition.getData();
          }
        }
      }
      var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);
      if (fallbackData) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = fallbackData;
      } else {
        var customData = getDataFromCustomEvent(nativeEvent);
        if (customData !== null) {
          event.data = customData;
        }
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
    /**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
    function getNativeBeforeInputChars(topLevelType, nativeEvent) {
      switch (topLevelType) {
      case topLevelTypes.topCompositionEnd:
        return getDataFromCustomEvent(nativeEvent);
      case topLevelTypes.topKeyPress:
        /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
        var which = nativeEvent.which;
        if (which !== SPACEBAR_CODE) {
          return null;
        }
        hasSpaceKeypress = true;
        return SPACEBAR_CHAR;
      case topLevelTypes.topTextInput:
        // Record the characters to be added to the DOM.
        var chars = nativeEvent.data;
        // If it's a spacebar character, assume that we have already handled
        // it at the keypress level and bail immediately. Android Chrome
        // doesn't give us keycodes, so we need to blacklist it.
        if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
          return null;
        }
        return chars;
      default:
        // For other native event types, do nothing.
        return null;
      }
    }
    /**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
    function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
      // If we are currently composing (IME) and using a fallback to do so,
      // try to extract the composed characters from the fallback object.
      if (currentComposition) {
        if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
          var chars = currentComposition.getData();
          FallbackCompositionState.release(currentComposition);
          currentComposition = null;
          return chars;
        }
        return null;
      }
      switch (topLevelType) {
      case topLevelTypes.topPaste:
        // If a paste event occurs after a keypress, throw out the input
        // chars. Paste events should not lead to BeforeInput events.
        return null;
      case topLevelTypes.topKeyPress:
        /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
        if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
          return String.fromCharCode(nativeEvent.which);
        }
        return null;
      case topLevelTypes.topCompositionEnd:
        return useFallbackCompositionData ? null : nativeEvent.data;
      default:
        return null;
      }
    }
    /**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
    function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
      var chars;
      if (canUseTextInputEvent) {
        chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
      } else {
        chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
      }
      // If no characters are being inserted, no BeforeInput event should
      // be fired.
      if (!chars) {
        return null;
      }
      var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);
      event.data = chars;
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
    /**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
    var BeforeInputEventPlugin = {
        eventTypes: eventTypes,
        extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
          return [
            extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget),
            extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)
          ];
        }
      };
    module.exports = BeforeInputEventPlugin;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */
      'use strict';
      var EventConstants = __webpack_require__(39);
      var EventPluginHub = __webpack_require__(40);
      var warning = __webpack_require__(34);
      var accumulateInto = __webpack_require__(44);
      var forEachAccumulated = __webpack_require__(45);
      var PropagationPhases = EventConstants.PropagationPhases;
      var getListener = EventPluginHub.getListener;
      /**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
      function listenerAtPhase(id, event, propagationPhase) {
        var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return getListener(id, registrationName);
      }
      /**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
      function accumulateDirectionalDispatches(domID, upwards, event) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
        }
        var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
        var listener = listenerAtPhase(domID, event, phase);
        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
        }
      }
      /**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
      function accumulateTwoPhaseDispatchesSingle(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
        }
      }
      /**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
      function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
        }
      }
      /**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
      function accumulateDispatches(id, ignoredDirection, event) {
        if (event && event.dispatchConfig.registrationName) {
          var registrationName = event.dispatchConfig.registrationName;
          var listener = getListener(id, registrationName);
          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
          }
        }
      }
      /**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
      function accumulateDirectDispatchesSingle(event) {
        if (event && event.dispatchConfig.registrationName) {
          accumulateDispatches(event.dispatchMarker, null, event);
        }
      }
      function accumulateTwoPhaseDispatches(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
      }
      function accumulateTwoPhaseDispatchesSkipTarget(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
      }
      function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
        EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
      }
      function accumulateDirectDispatches(events) {
        forEachAccumulated(events, accumulateDirectDispatchesSingle);
      }
      /**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
      var EventPropagators = {
          accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
          accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
          accumulateDirectDispatches: accumulateDirectDispatches,
          accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
        };
      module.exports = EventPropagators;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */
    'use strict';
    var PooledClass = __webpack_require__(65);
    var assign = __webpack_require__(48);
    var getTextContentAccessor = __webpack_require__(84);
    /**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
    function FallbackCompositionState(root) {
      this._root = root;
      this._startText = this.getText();
      this._fallbackText = null;
    }
    assign(FallbackCompositionState.prototype, {
      destructor: function () {
        this._root = null;
        this._startText = null;
        this._fallbackText = null;
      },
      getText: function () {
        if ('value' in this._root) {
          return this._root.value;
        }
        return this._root[getTextContentAccessor()];
      },
      getData: function () {
        if (this._fallbackText) {
          return this._fallbackText;
        }
        var start;
        var startValue = this._startText;
        var startLength = startValue.length;
        var end;
        var endValue = this.getText();
        var endLength = endValue.length;
        for (start = 0; start < startLength; start++) {
          if (startValue[start] !== endValue[start]) {
            break;
          }
        }
        var minEnd = startLength - start;
        for (end = 1; end <= minEnd; end++) {
          if (startValue[startLength - end] !== endValue[endLength - end]) {
            break;
          }
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        this._fallbackText = endValue.slice(start, sliceTail);
        return this._fallbackText;
      }
    });
    PooledClass.addPoolingTo(FallbackCompositionState);
    module.exports = FallbackCompositionState;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */
    'use strict';
    var ExecutionEnvironment = __webpack_require__(18);
    var contentKey = null;
    /**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
    function getTextContentAccessor() {
      if (!contentKey && ExecutionEnvironment.canUseDOM) {
        // Prefer textContent to innerText because many browsers support both but
        // SVG <text> elements don't support innerText even when <div> does.
        contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
      }
      return contentKey;
    }
    module.exports = getTextContentAccessor;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */
    'use strict';
    var SyntheticEvent = __webpack_require__(86);
    /**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
    var CompositionEventInterface = { data: null };
    /**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
    function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }
    SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
    module.exports = SyntheticCompositionEvent;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */
      'use strict';
      var PooledClass = __webpack_require__(65);
      var assign = __webpack_require__(48);
      var emptyFunction = __webpack_require__(24);
      var warning = __webpack_require__(34);
      /**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
      var EventInterface = {
          type: null,
          currentTarget: emptyFunction.thatReturnsNull,
          eventPhase: null,
          bubbles: null,
          cancelable: null,
          timeStamp: function (event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: null,
          isTrusted: null
        };
      /**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
      function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
        this.dispatchConfig = dispatchConfig;
        this.dispatchMarker = dispatchMarker;
        this.nativeEvent = nativeEvent;
        this.target = nativeEventTarget;
        this.currentTarget = nativeEventTarget;
        var Interface = this.constructor.Interface;
        for (var propName in Interface) {
          if (!Interface.hasOwnProperty(propName)) {
            continue;
          }
          var normalize = Interface[propName];
          if (normalize) {
            this[propName] = normalize(nativeEvent);
          } else {
            this[propName] = nativeEvent[propName];
          }
        }
        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
        if (defaultPrevented) {
          this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
        } else {
          this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
        }
        this.isPropagationStopped = emptyFunction.thatReturnsFalse;
      }
      assign(SyntheticEvent.prototype, {
        preventDefault: function () {
          this.defaultPrevented = true;
          var event = this.nativeEvent;
          if (process.env.NODE_ENV !== 'production') {
            process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
          }
          if (!event) {
            return;
          }
          if (event.preventDefault) {
            event.preventDefault();
          } else {
            event.returnValue = false;
          }
          this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
        },
        stopPropagation: function () {
          var event = this.nativeEvent;
          if (process.env.NODE_ENV !== 'production') {
            process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
          }
          if (!event) {
            return;
          }
          if (event.stopPropagation) {
            event.stopPropagation();
          } else {
            event.cancelBubble = true;
          }
          this.isPropagationStopped = emptyFunction.thatReturnsTrue;
        },
        persist: function () {
          this.isPersistent = emptyFunction.thatReturnsTrue;
        },
        isPersistent: emptyFunction.thatReturnsFalse,
        destructor: function () {
          var Interface = this.constructor.Interface;
          for (var propName in Interface) {
            this[propName] = null;
          }
          this.dispatchConfig = null;
          this.dispatchMarker = null;
          this.nativeEvent = null;
        }
      });
      SyntheticEvent.Interface = EventInterface;
      /**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
      SyntheticEvent.augmentClass = function (Class, Interface) {
        var Super = this;
        var prototype = Object.create(Super.prototype);
        assign(prototype, Class.prototype);
        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.Interface = assign({}, Super.Interface, Interface);
        Class.augmentClass = Super.augmentClass;
        PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
      };
      PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
      module.exports = SyntheticEvent;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */
    'use strict';
    var SyntheticEvent = __webpack_require__(86);
    /**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
    var InputEventInterface = { data: null };
    /**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
    function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }
    SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
    module.exports = SyntheticInputEvent;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */
    /**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
    'use strict';
    var keyOf = function (oneKeyObj) {
      var key;
      for (key in oneKeyObj) {
        if (!oneKeyObj.hasOwnProperty(key)) {
          continue;
        }
        return key;
      }
      return null;
    };
    module.exports = keyOf;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */
    'use strict';
    var EventConstants = __webpack_require__(39);
    var EventPluginHub = __webpack_require__(40);
    var EventPropagators = __webpack_require__(82);
    var ExecutionEnvironment = __webpack_require__(18);
    var ReactUpdates = __webpack_require__(63);
    var SyntheticEvent = __webpack_require__(86);
    var getEventTarget = __webpack_require__(90);
    var isEventSupported = __webpack_require__(49);
    var isTextInputElement = __webpack_require__(91);
    var keyOf = __webpack_require__(88);
    var topLevelTypes = EventConstants.topLevelTypes;
    var eventTypes = {
        change: {
          phasedRegistrationNames: {
            bubbled: keyOf({ onChange: null }),
            captured: keyOf({ onChangeCapture: null })
          },
          dependencies: [
            topLevelTypes.topBlur,
            topLevelTypes.topChange,
            topLevelTypes.topClick,
            topLevelTypes.topFocus,
            topLevelTypes.topInput,
            topLevelTypes.topKeyDown,
            topLevelTypes.topKeyUp,
            topLevelTypes.topSelectionChange
          ]
        }
      };
    /**
	 * For IE shims
	 */
    var activeElement = null;
    var activeElementID = null;
    var activeElementValue = null;
    var activeElementValueProp = null;
    /**
	 * SECTION: handle `change` event
	 */
    function shouldUseChangeEvent(elem) {
      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    var doesChangeEventBubble = false;
    if (ExecutionEnvironment.canUseDOM) {
      // See `handleChange` comment below
      doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
    }
    function manualDispatchChangeEvent(nativeEvent) {
      var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
      EventPropagators.accumulateTwoPhaseDispatches(event);
      // If change and propertychange bubbled, we'd just bind to it like all the
      // other events and have it go through ReactBrowserEventEmitter. Since it
      // doesn't, we manually listen for the events and so we have to enqueue and
      // process the abstract event manually.
      //
      // Batching is necessary here in order to ensure that all event handlers run
      // before the next rerender (including event handlers attached to ancestor
      // elements instead of directly on the input). Without this, controlled
      // components don't work properly in conjunction with event bubbling because
      // the component is rerendered and the value reverted before all the event
      // handlers can run. See https://github.com/facebook/react/issues/708.
      ReactUpdates.batchedUpdates(runEventInBatch, event);
    }
    function runEventInBatch(event) {
      EventPluginHub.enqueueEvents(event);
      EventPluginHub.processEventQueue(false);
    }
    function startWatchingForChangeEventIE8(target, targetID) {
      activeElement = target;
      activeElementID = targetID;
      activeElement.attachEvent('onchange', manualDispatchChangeEvent);
    }
    function stopWatchingForChangeEventIE8() {
      if (!activeElement) {
        return;
      }
      activeElement.detachEvent('onchange', manualDispatchChangeEvent);
      activeElement = null;
      activeElementID = null;
    }
    function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
      if (topLevelType === topLevelTypes.topChange) {
        return topLevelTargetID;
      }
    }
    function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
      if (topLevelType === topLevelTypes.topFocus) {
        // stopWatching() should be a noop here but we call it just in case we
        // missed a blur event somehow.
        stopWatchingForChangeEventIE8();
        startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
      } else if (topLevelType === topLevelTypes.topBlur) {
        stopWatchingForChangeEventIE8();
      }
    }
    /**
	 * SECTION: handle `input` event
	 */
    var isInputEventSupported = false;
    if (ExecutionEnvironment.canUseDOM) {
      // IE9 claims to support the input event but fails to trigger it when
      // deleting text, so we ignore its input events
      isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
    }
    /**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
    var newValueProp = {
        get: function () {
          return activeElementValueProp.get.call(this);
        },
        set: function (val) {
          // Cast to a string so we can do equality checks.
          activeElementValue = '' + val;
          activeElementValueProp.set.call(this, val);
        }
      };
    /**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
    function startWatchingForValueChange(target, targetID) {
      activeElement = target;
      activeElementID = targetID;
      activeElementValue = target.value;
      activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
      // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
      // on DOM elements
      Object.defineProperty(activeElement, 'value', newValueProp);
      activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
    function stopWatchingForValueChange() {
      if (!activeElement) {
        return;
      }
      // delete restores the original property definition
      delete activeElement.value;
      activeElement.detachEvent('onpropertychange', handlePropertyChange);
      activeElement = null;
      activeElementID = null;
      activeElementValue = null;
      activeElementValueProp = null;
    }
    /**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
    function handlePropertyChange(nativeEvent) {
      if (nativeEvent.propertyName !== 'value') {
        return;
      }
      var value = nativeEvent.srcElement.value;
      if (value === activeElementValue) {
        return;
      }
      activeElementValue = value;
      manualDispatchChangeEvent(nativeEvent);
    }
    /**
	 * If a `change` event should be fired, returns the target's ID.
	 */
    function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
      if (topLevelType === topLevelTypes.topInput) {
        // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
        // what we want so fall through here and trigger an abstract event
        return topLevelTargetID;
      }
    }
    // For IE8 and IE9.
    function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
      if (topLevelType === topLevelTypes.topFocus) {
        // In IE8, we can capture almost all .value changes by adding a
        // propertychange handler and looking for events with propertyName
        // equal to 'value'
        // In IE9, propertychange fires for most input events but is buggy and
        // doesn't fire when text is deleted, but conveniently, selectionchange
        // appears to fire in all of the remaining cases so we catch those and
        // forward the event if the value has changed
        // In either case, we don't want to call the event handler if the value
        // is changed from JS so we redefine a setter for `.value` that updates
        // our activeElementValue variable, allowing us to ignore those changes
        //
        // stopWatching() should be a noop here but we call it just in case we
        // missed a blur event somehow.
        stopWatchingForValueChange();
        startWatchingForValueChange(topLevelTarget, topLevelTargetID);
      } else if (topLevelType === topLevelTypes.topBlur) {
        stopWatchingForValueChange();
      }
    }
    // For IE8 and IE9.
    function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
      if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
        // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        if (activeElement && activeElement.value !== activeElementValue) {
          activeElementValue = activeElement.value;
          return activeElementID;
        }
      }
    }
    /**
	 * SECTION: handle `click` event
	 */
    function shouldUseClickEvent(elem) {
      // Use the `click` event to detect changes to checkbox and radio inputs.
      // This approach works across all browsers, whereas `change` does not fire
      // until `blur` in IE8.
      return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
      if (topLevelType === topLevelTypes.topClick) {
        return topLevelTargetID;
      }
    }
    /**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
    var ChangeEventPlugin = {
        eventTypes: eventTypes,
        extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
          var getTargetIDFunc, handleEventFunc;
          if (shouldUseChangeEvent(topLevelTarget)) {
            if (doesChangeEventBubble) {
              getTargetIDFunc = getTargetIDForChangeEvent;
            } else {
              handleEventFunc = handleEventsForChangeEventIE8;
            }
          } else if (isTextInputElement(topLevelTarget)) {
            if (isInputEventSupported) {
              getTargetIDFunc = getTargetIDForInputEvent;
            } else {
              getTargetIDFunc = getTargetIDForInputEventIE;
              handleEventFunc = handleEventsForInputEventIE;
            }
          } else if (shouldUseClickEvent(topLevelTarget)) {
            getTargetIDFunc = getTargetIDForClickEvent;
          }
          if (getTargetIDFunc) {
            var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
            if (targetID) {
              var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
              event.type = 'change';
              EventPropagators.accumulateTwoPhaseDispatches(event);
              return event;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
          }
        }
      };
    module.exports = ChangeEventPlugin;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */
    'use strict';
    /**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
    function getEventTarget(nativeEvent) {
      var target = nativeEvent.target || nativeEvent.srcElement || window;
      // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
      // @see http://www.quirksmode.org/js/events_properties.html
      return target.nodeType === 3 ? target.parentNode : target;
    }
    module.exports = getEventTarget;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */
    'use strict';
    /**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
    var supportedInputTypes = {
        'color': true,
        'date': true,
        'datetime': true,
        'datetime-local': true,
        'email': true,
        'month': true,
        'number': true,
        'password': true,
        'range': true,
        'search': true,
        'tel': true,
        'text': true,
        'time': true,
        'url': true,
        'week': true
      };
    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
    }
    module.exports = isTextInputElement;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */
    'use strict';
    var nextReactRootIndex = 0;
    var ClientReactRootIndex = {
        createReactRootIndex: function () {
          return nextReactRootIndex++;
        }
      };
    module.exports = ClientReactRootIndex;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */
    'use strict';
    var keyOf = __webpack_require__(88);
    /**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
    var DefaultEventPluginOrder = [
        keyOf({ ResponderEventPlugin: null }),
        keyOf({ SimpleEventPlugin: null }),
        keyOf({ TapEventPlugin: null }),
        keyOf({ EnterLeaveEventPlugin: null }),
        keyOf({ ChangeEventPlugin: null }),
        keyOf({ SelectEventPlugin: null }),
        keyOf({ BeforeInputEventPlugin: null })
      ];
    module.exports = DefaultEventPluginOrder;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */
    'use strict';
    var EventConstants = __webpack_require__(39);
    var EventPropagators = __webpack_require__(82);
    var SyntheticMouseEvent = __webpack_require__(95);
    var ReactMount = __webpack_require__(37);
    var keyOf = __webpack_require__(88);
    var topLevelTypes = EventConstants.topLevelTypes;
    var getFirstReactDOM = ReactMount.getFirstReactDOM;
    var eventTypes = {
        mouseEnter: {
          registrationName: keyOf({ onMouseEnter: null }),
          dependencies: [
            topLevelTypes.topMouseOut,
            topLevelTypes.topMouseOver
          ]
        },
        mouseLeave: {
          registrationName: keyOf({ onMouseLeave: null }),
          dependencies: [
            topLevelTypes.topMouseOut,
            topLevelTypes.topMouseOver
          ]
        }
      };
    var extractedEvents = [
        null,
        null
      ];
    var EnterLeaveEventPlugin = {
        eventTypes: eventTypes,
        extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
          if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
            return null;
          }
          if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
            // Must not be a mouse in or mouse out - ignoring.
            return null;
          }
          var win;
          if (topLevelTarget.window === topLevelTarget) {
            // `topLevelTarget` is probably a window object.
            win = topLevelTarget;
          } else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = topLevelTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          var fromID = '';
          var toID = '';
          if (topLevelType === topLevelTypes.topMouseOut) {
            from = topLevelTarget;
            fromID = topLevelTargetID;
            to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
            if (to) {
              toID = ReactMount.getID(to);
            } else {
              to = win;
            }
            to = to || win;
          } else {
            from = win;
            to = topLevelTarget;
            toID = topLevelTargetID;
          }
          if (from === to) {
            // Nothing pertains to our managed components.
            return null;
          }
          var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
          leave.type = 'mouseleave';
          leave.target = from;
          leave.relatedTarget = to;
          var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
          enter.type = 'mouseenter';
          enter.target = to;
          enter.relatedTarget = from;
          EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);
          extractedEvents[0] = leave;
          extractedEvents[1] = enter;
          return extractedEvents;
        }
      };
    module.exports = EnterLeaveEventPlugin;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */
    'use strict';
    var SyntheticUIEvent = __webpack_require__(96);
    var ViewportMetrics = __webpack_require__(47);
    var getEventModifierState = __webpack_require__(97);
    /**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
    var MouseEventInterface = {
        screenX: null,
        screenY: null,
        clientX: null,
        clientY: null,
        ctrlKey: null,
        shiftKey: null,
        altKey: null,
        metaKey: null,
        getModifierState: getEventModifierState,
        button: function (event) {
          // Webkit, Firefox, IE9+
          // which:  1 2 3
          // button: 0 1 2 (standard)
          var button = event.button;
          if ('which' in event) {
            return button;
          }
          // IE<9
          // which:  undefined
          // button: 0 0 0
          // button: 1 4 2 (onmouseup)
          return button === 2 ? 2 : button === 4 ? 1 : 0;
        },
        buttons: null,
        relatedTarget: function (event) {
          return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
        },
        pageX: function (event) {
          return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
        },
        pageY: function (event) {
          return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
        }
      };
    /**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
    function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }
    SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
    module.exports = SyntheticMouseEvent;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */
    'use strict';
    var SyntheticEvent = __webpack_require__(86);
    var getEventTarget = __webpack_require__(90);
    /**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
    var UIEventInterface = {
        view: function (event) {
          if (event.view) {
            return event.view;
          }
          var target = getEventTarget(event);
          if (target != null && target.window === target) {
            // target is a window object
            return target;
          }
          var doc = target.ownerDocument;
          // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
          if (doc) {
            return doc.defaultView || doc.parentWindow;
          } else {
            return window;
          }
        },
        detail: function (event) {
          return event.detail || 0;
        }
      };
    /**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
    function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }
    SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
    module.exports = SyntheticUIEvent;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */
    'use strict';
    /**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
    var modifierKeyToProp = {
        'Alt': 'altKey',
        'Control': 'ctrlKey',
        'Meta': 'metaKey',
        'Shift': 'shiftKey'
      };
    // IE8 does not implement getModifierState so we simply map it to the only
    // modifier keys exposed by the event itself, does not support Lock-keys.
    // Currently, all major browsers except Chrome seems to support Lock-keys.
    function modifierStateGetter(keyArg) {
      var syntheticEvent = this;
      var nativeEvent = syntheticEvent.nativeEvent;
      if (nativeEvent.getModifierState) {
        return nativeEvent.getModifierState(keyArg);
      }
      var keyProp = modifierKeyToProp[keyArg];
      return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
      return modifierStateGetter;
    }
    module.exports = getEventModifierState;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */
    'use strict';
    var DOMProperty = __webpack_require__(32);
    var ExecutionEnvironment = __webpack_require__(18);
    var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
    var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
    var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
    var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
    var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
    var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
    var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
    var hasSVG;
    if (ExecutionEnvironment.canUseDOM) {
      var implementation = document.implementation;
      hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
    }
    var HTMLDOMPropertyConfig = {
        isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
        Properties: {
          accept: null,
          acceptCharset: null,
          accessKey: null,
          action: null,
          allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
          allowTransparency: MUST_USE_ATTRIBUTE,
          alt: null,
          async: HAS_BOOLEAN_VALUE,
          autoComplete: null,
          autoPlay: HAS_BOOLEAN_VALUE,
          capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
          cellPadding: null,
          cellSpacing: null,
          charSet: MUST_USE_ATTRIBUTE,
          challenge: MUST_USE_ATTRIBUTE,
          checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
          classID: MUST_USE_ATTRIBUTE,
          className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
          cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
          colSpan: null,
          content: null,
          contentEditable: null,
          contextMenu: MUST_USE_ATTRIBUTE,
          controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
          coords: null,
          crossOrigin: null,
          data: null,
          dateTime: MUST_USE_ATTRIBUTE,
          'default': HAS_BOOLEAN_VALUE,
          defer: HAS_BOOLEAN_VALUE,
          dir: null,
          disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
          download: HAS_OVERLOADED_BOOLEAN_VALUE,
          draggable: null,
          encType: null,
          form: MUST_USE_ATTRIBUTE,
          formAction: MUST_USE_ATTRIBUTE,
          formEncType: MUST_USE_ATTRIBUTE,
          formMethod: MUST_USE_ATTRIBUTE,
          formNoValidate: HAS_BOOLEAN_VALUE,
          formTarget: MUST_USE_ATTRIBUTE,
          frameBorder: MUST_USE_ATTRIBUTE,
          headers: null,
          height: MUST_USE_ATTRIBUTE,
          hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
          high: null,
          href: null,
          hrefLang: null,
          htmlFor: null,
          httpEquiv: null,
          icon: null,
          id: MUST_USE_PROPERTY,
          inputMode: MUST_USE_ATTRIBUTE,
          integrity: null,
          is: MUST_USE_ATTRIBUTE,
          keyParams: MUST_USE_ATTRIBUTE,
          keyType: MUST_USE_ATTRIBUTE,
          kind: null,
          label: null,
          lang: null,
          list: MUST_USE_ATTRIBUTE,
          loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
          low: null,
          manifest: MUST_USE_ATTRIBUTE,
          marginHeight: null,
          marginWidth: null,
          max: null,
          maxLength: MUST_USE_ATTRIBUTE,
          media: MUST_USE_ATTRIBUTE,
          mediaGroup: null,
          method: null,
          min: null,
          minLength: MUST_USE_ATTRIBUTE,
          multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
          muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
          name: null,
          nonce: MUST_USE_ATTRIBUTE,
          noValidate: HAS_BOOLEAN_VALUE,
          open: HAS_BOOLEAN_VALUE,
          optimum: null,
          pattern: null,
          placeholder: null,
          poster: null,
          preload: null,
          radioGroup: null,
          readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
          rel: null,
          required: HAS_BOOLEAN_VALUE,
          reversed: HAS_BOOLEAN_VALUE,
          role: MUST_USE_ATTRIBUTE,
          rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
          rowSpan: null,
          sandbox: null,
          scope: null,
          scoped: HAS_BOOLEAN_VALUE,
          scrolling: null,
          seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
          selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
          shape: null,
          size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
          sizes: MUST_USE_ATTRIBUTE,
          span: HAS_POSITIVE_NUMERIC_VALUE,
          spellCheck: null,
          src: null,
          srcDoc: MUST_USE_PROPERTY,
          srcLang: null,
          srcSet: MUST_USE_ATTRIBUTE,
          start: HAS_NUMERIC_VALUE,
          step: null,
          style: null,
          summary: null,
          tabIndex: null,
          target: null,
          title: null,
          type: null,
          useMap: null,
          value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
          width: MUST_USE_ATTRIBUTE,
          wmode: MUST_USE_ATTRIBUTE,
          wrap: null,
          about: MUST_USE_ATTRIBUTE,
          datatype: MUST_USE_ATTRIBUTE,
          inlist: MUST_USE_ATTRIBUTE,
          prefix: MUST_USE_ATTRIBUTE,
          property: MUST_USE_ATTRIBUTE,
          resource: MUST_USE_ATTRIBUTE,
          'typeof': MUST_USE_ATTRIBUTE,
          vocab: MUST_USE_ATTRIBUTE,
          autoCapitalize: null,
          autoCorrect: null,
          autoSave: null,
          color: null,
          itemProp: MUST_USE_ATTRIBUTE,
          itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
          itemType: MUST_USE_ATTRIBUTE,
          itemID: MUST_USE_ATTRIBUTE,
          itemRef: MUST_USE_ATTRIBUTE,
          results: null,
          security: MUST_USE_ATTRIBUTE,
          unselectable: MUST_USE_ATTRIBUTE
        },
        DOMAttributeNames: {
          acceptCharset: 'accept-charset',
          className: 'class',
          htmlFor: 'for',
          httpEquiv: 'http-equiv'
        },
        DOMPropertyNames: {
          autoCapitalize: 'autocapitalize',
          autoComplete: 'autocomplete',
          autoCorrect: 'autocorrect',
          autoFocus: 'autofocus',
          autoPlay: 'autoplay',
          autoSave: 'autosave',
          encType: 'encoding',
          hrefLang: 'hreflang',
          radioGroup: 'radiogroup',
          spellCheck: 'spellcheck',
          srcDoc: 'srcdoc',
          srcSet: 'srcset'
        }
      };
    module.exports = HTMLDOMPropertyConfig;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */
      'use strict';
      var ReactInstanceMap = __webpack_require__(56);
      var findDOMNode = __webpack_require__(100);
      var warning = __webpack_require__(34);
      var didWarnKey = '_getDOMNodeDidWarn';
      var ReactBrowserComponentMixin = {
          getDOMNode: function () {
            process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
            this.constructor[didWarnKey] = true;
            return findDOMNode(this);
          }
        };
      module.exports = ReactBrowserComponentMixin;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */
      'use strict';
      var ReactCurrentOwner = __webpack_require__(14);
      var ReactInstanceMap = __webpack_require__(56);
      var ReactMount = __webpack_require__(37);
      var invariant = __webpack_require__(22);
      var warning = __webpack_require__(34);
      /**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
      function findDOMNode(componentOrElement) {
        if (process.env.NODE_ENV !== 'production') {
          var owner = ReactCurrentOwner.current;
          if (owner !== null) {
            process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
            owner._warnedAboutRefsInRender = true;
          }
        }
        if (componentOrElement == null) {
          return null;
        }
        if (componentOrElement.nodeType === 1) {
          return componentOrElement;
        }
        if (ReactInstanceMap.has(componentOrElement)) {
          return ReactMount.getNodeFromInstance(componentOrElement);
        }
        !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
        true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
      }
      module.exports = findDOMNode;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */
    'use strict';
    var ReactUpdates = __webpack_require__(63);
    var Transaction = __webpack_require__(66);
    var assign = __webpack_require__(48);
    var emptyFunction = __webpack_require__(24);
    var RESET_BATCHED_UPDATES = {
        initialize: emptyFunction,
        close: function () {
          ReactDefaultBatchingStrategy.isBatchingUpdates = false;
        }
      };
    var FLUSH_BATCHED_UPDATES = {
        initialize: emptyFunction,
        close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
      };
    var TRANSACTION_WRAPPERS = [
        FLUSH_BATCHED_UPDATES,
        RESET_BATCHED_UPDATES
      ];
    function ReactDefaultBatchingStrategyTransaction() {
      this.reinitializeTransaction();
    }
    assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
      getTransactionWrappers: function () {
        return TRANSACTION_WRAPPERS;
      }
    });
    var transaction = new ReactDefaultBatchingStrategyTransaction();
    var ReactDefaultBatchingStrategy = {
        isBatchingUpdates: false,
        batchedUpdates: function (callback, a, b, c, d, e) {
          var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
          ReactDefaultBatchingStrategy.isBatchingUpdates = true;
          // The code is written this way to avoid extra allocations
          if (alreadyBatchingUpdates) {
            callback(a, b, c, d, e);
          } else {
            transaction.perform(callback, null, a, b, c, d, e);
          }
        }
      };
    module.exports = ReactDefaultBatchingStrategy;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */
      /* global hasOwnProperty:true */
      'use strict';
      var AutoFocusUtils = __webpack_require__(103);
      var CSSPropertyOperations = __webpack_require__(105);
      var DOMProperty = __webpack_require__(32);
      var DOMPropertyOperations = __webpack_require__(31);
      var EventConstants = __webpack_require__(39);
      var ReactBrowserEventEmitter = __webpack_require__(38);
      var ReactComponentBrowserEnvironment = __webpack_require__(35);
      var ReactDOMButton = __webpack_require__(113);
      var ReactDOMInput = __webpack_require__(114);
      var ReactDOMOption = __webpack_require__(118);
      var ReactDOMSelect = __webpack_require__(121);
      var ReactDOMTextarea = __webpack_require__(122);
      var ReactMount = __webpack_require__(37);
      var ReactMultiChild = __webpack_require__(123);
      var ReactPerf = __webpack_require__(27);
      var ReactUpdateQueue = __webpack_require__(62);
      var assign = __webpack_require__(48);
      var canDefineProperty = __webpack_require__(52);
      var escapeTextContentForBrowser = __webpack_require__(30);
      var invariant = __webpack_require__(22);
      var isEventSupported = __webpack_require__(49);
      var keyOf = __webpack_require__(88);
      var setInnerHTML = __webpack_require__(28);
      var setTextContent = __webpack_require__(29);
      var shallowEqual = __webpack_require__(126);
      var validateDOMNesting = __webpack_require__(79);
      var warning = __webpack_require__(34);
      var deleteListener = ReactBrowserEventEmitter.deleteListener;
      var listenTo = ReactBrowserEventEmitter.listenTo;
      var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;
      // For quickly matching children type, to test if can be treated as content.
      var CONTENT_TYPES = {
          'string': true,
          'number': true
        };
      var CHILDREN = keyOf({ children: null });
      var STYLE = keyOf({ style: null });
      var HTML = keyOf({ __html: null });
      var ELEMENT_NODE_TYPE = 1;
      function getDeclarationErrorAddendum(internalInstance) {
        if (internalInstance) {
          var owner = internalInstance._currentElement._owner || null;
          if (owner) {
            var name = owner.getName();
            if (name) {
              return ' This DOM node was rendered by `' + name + '`.';
            }
          }
        }
        return '';
      }
      var legacyPropsDescriptor;
      if (process.env.NODE_ENV !== 'production') {
        legacyPropsDescriptor = {
          props: {
            enumerable: false,
            get: function () {
              var component = this._reactInternalComponent;
              process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
              return component._currentElement.props;
            }
          }
        };
      }
      function legacyGetDOMNode() {
        if (process.env.NODE_ENV !== 'production') {
          var component = this._reactInternalComponent;
          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
        }
        return this;
      }
      function legacyIsMounted() {
        var component = this._reactInternalComponent;
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
        }
        return !!component;
      }
      function legacySetStateEtc() {
        if (process.env.NODE_ENV !== 'production') {
          var component = this._reactInternalComponent;
          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
        }
      }
      function legacySetProps(partialProps, callback) {
        var component = this._reactInternalComponent;
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
        }
        if (!component) {
          return;
        }
        ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
        if (callback) {
          ReactUpdateQueue.enqueueCallbackInternal(component, callback);
        }
      }
      function legacyReplaceProps(partialProps, callback) {
        var component = this._reactInternalComponent;
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
        }
        if (!component) {
          return;
        }
        ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
        if (callback) {
          ReactUpdateQueue.enqueueCallbackInternal(component, callback);
        }
      }
      function friendlyStringify(obj) {
        if (typeof obj === 'object') {
          if (Array.isArray(obj)) {
            return '[' + obj.map(friendlyStringify).join(', ') + ']';
          } else {
            var pairs = [];
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key)) {
                var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
                pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
              }
            }
            return '{' + pairs.join(', ') + '}';
          }
        } else if (typeof obj === 'string') {
          return JSON.stringify(obj);
        } else if (typeof obj === 'function') {
          return '[function object]';
        }
        // Differs from JSON.stringify in that undefined becauses undefined and that
        // inf and nan don't become null
        return String(obj);
      }
      var styleMutationWarning = {};
      function checkAndWarnForMutatedStyle(style1, style2, component) {
        if (style1 == null || style2 == null) {
          return;
        }
        if (shallowEqual(style1, style2)) {
          return;
        }
        var componentName = component._tag;
        var owner = component._currentElement._owner;
        var ownerName;
        if (owner) {
          ownerName = owner.getName();
        }
        var hash = ownerName + '|' + componentName;
        if (styleMutationWarning.hasOwnProperty(hash)) {
          return;
        }
        styleMutationWarning[hash] = true;
        process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
      }
      /**
	 * @param {object} component
	 * @param {?object} props
	 */
      function assertValidProps(component, props) {
        if (!props) {
          return;
        }
        // Note the use of `==` which checks for null or undefined.
        if (process.env.NODE_ENV !== 'production') {
          if (voidElementTags[component._tag]) {
            process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
          }
        }
        if (props.dangerouslySetInnerHTML != null) {
          !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
          !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
        }
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
          process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
        }
        !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
      }
      function enqueuePutListener(id, registrationName, listener, transaction) {
        if (process.env.NODE_ENV !== 'production') {
          // IE8 has no API for event capturing and the `onScroll` event doesn't
          // bubble.
          process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
        }
        var container = ReactMount.findReactContainerForID(id);
        if (container) {
          var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
          listenTo(registrationName, doc);
        }
        transaction.getReactMountReady().enqueue(putListener, {
          id: id,
          registrationName: registrationName,
          listener: listener
        });
      }
      function putListener() {
        var listenerToPut = this;
        ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
      }
      // There are so many media events, it makes sense to just
      // maintain a list rather than create a `trapBubbledEvent` for each
      var mediaEvents = {
          topAbort: 'abort',
          topCanPlay: 'canplay',
          topCanPlayThrough: 'canplaythrough',
          topDurationChange: 'durationchange',
          topEmptied: 'emptied',
          topEncrypted: 'encrypted',
          topEnded: 'ended',
          topError: 'error',
          topLoadedData: 'loadeddata',
          topLoadedMetadata: 'loadedmetadata',
          topLoadStart: 'loadstart',
          topPause: 'pause',
          topPlay: 'play',
          topPlaying: 'playing',
          topProgress: 'progress',
          topRateChange: 'ratechange',
          topSeeked: 'seeked',
          topSeeking: 'seeking',
          topStalled: 'stalled',
          topSuspend: 'suspend',
          topTimeUpdate: 'timeupdate',
          topVolumeChange: 'volumechange',
          topWaiting: 'waiting'
        };
      function trapBubbledEventsLocal() {
        var inst = this;
        // If a component renders to null or if another component fatals and causes
        // the state of the tree to be corrupted, `node` here can be null.
        !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
        var node = ReactMount.getNode(inst._rootNodeID);
        !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;
        switch (inst._tag) {
        case 'iframe':
          inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
          break;
        case 'video':
        case 'audio':
          inst._wrapperState.listeners = [];
          // create listener for each media event
          for (var event in mediaEvents) {
            if (mediaEvents.hasOwnProperty(event)) {
              inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
            }
          }
          break;
        case 'img':
          inst._wrapperState.listeners = [
            ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node),
            ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)
          ];
          break;
        case 'form':
          inst._wrapperState.listeners = [
            ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node),
            ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)
          ];
          break;
        }
      }
      function mountReadyInputWrapper() {
        ReactDOMInput.mountReadyWrapper(this);
      }
      function postUpdateSelectWrapper() {
        ReactDOMSelect.postUpdateWrapper(this);
      }
      // For HTML, certain tags should omit their close tag. We keep a whitelist for
      // those special cased tags.
      var omittedCloseTags = {
          'area': true,
          'base': true,
          'br': true,
          'col': true,
          'embed': true,
          'hr': true,
          'img': true,
          'input': true,
          'keygen': true,
          'link': true,
          'meta': true,
          'param': true,
          'source': true,
          'track': true,
          'wbr': true
        };
      // NOTE: menuitem's close tag should be omitted, but that causes problems.
      var newlineEatingTags = {
          'listing': true,
          'pre': true,
          'textarea': true
        };
      // For HTML, certain tags cannot have children. This has the same purpose as
      // `omittedCloseTags` except that `menuitem` should still have its closing tag.
      var voidElementTags = assign({ 'menuitem': true }, omittedCloseTags);
      // We accept any tag to be rendered but since this gets injected into arbitrary
      // HTML, we want to make sure that it's a safe tag.
      // http://www.w3.org/TR/REC-xml/#NT-Name
      var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
      // Simplified subset
      var validatedTagCache = {};
      var hasOwnProperty = {}.hasOwnProperty;
      function validateDangerousTag(tag) {
        if (!hasOwnProperty.call(validatedTagCache, tag)) {
          !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
          validatedTagCache[tag] = true;
        }
      }
      function processChildContextDev(context, inst) {
        // Pass down our tag name to child components for validation purposes
        context = assign({}, context);
        var info = context[validateDOMNesting.ancestorInfoContextKey];
        context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
        return context;
      }
      function isCustomComponent(tagName, props) {
        return tagName.indexOf('-') >= 0 || props.is != null;
      }
      /**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
      function ReactDOMComponent(tag) {
        validateDangerousTag(tag);
        this._tag = tag.toLowerCase();
        this._renderedChildren = null;
        this._previousStyle = null;
        this._previousStyleCopy = null;
        this._rootNodeID = null;
        this._wrapperState = null;
        this._topLevelWrapper = null;
        this._nodeWithLegacyProperties = null;
        if (process.env.NODE_ENV !== 'production') {
          this._unprocessedContextDev = null;
          this._processedContextDev = null;
        }
      }
      ReactDOMComponent.displayName = 'ReactDOMComponent';
      ReactDOMComponent.Mixin = {
        construct: function (element) {
          this._currentElement = element;
        },
        mountComponent: function (rootID, transaction, context) {
          this._rootNodeID = rootID;
          var props = this._currentElement.props;
          switch (this._tag) {
          case 'iframe':
          case 'img':
          case 'form':
          case 'video':
          case 'audio':
            this._wrapperState = { listeners: null };
            transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
            break;
          case 'button':
            props = ReactDOMButton.getNativeProps(this, props, context);
            break;
          case 'input':
            ReactDOMInput.mountWrapper(this, props, context);
            props = ReactDOMInput.getNativeProps(this, props, context);
            break;
          case 'option':
            ReactDOMOption.mountWrapper(this, props, context);
            props = ReactDOMOption.getNativeProps(this, props, context);
            break;
          case 'select':
            ReactDOMSelect.mountWrapper(this, props, context);
            props = ReactDOMSelect.getNativeProps(this, props, context);
            context = ReactDOMSelect.processChildContext(this, props, context);
            break;
          case 'textarea':
            ReactDOMTextarea.mountWrapper(this, props, context);
            props = ReactDOMTextarea.getNativeProps(this, props, context);
            break;
          }
          assertValidProps(this, props);
          if (process.env.NODE_ENV !== 'production') {
            if (context[validateDOMNesting.ancestorInfoContextKey]) {
              validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
            }
          }
          if (process.env.NODE_ENV !== 'production') {
            this._unprocessedContextDev = context;
            this._processedContextDev = processChildContextDev(context, this);
            context = this._processedContextDev;
          }
          var mountImage;
          if (transaction.useCreateElement) {
            var ownerDocument = context[ReactMount.ownerDocumentContextKey];
            var el = ownerDocument.createElement(this._currentElement.type);
            DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
            // Populate node cache
            ReactMount.getID(el);
            this._updateDOMProperties({}, props, transaction, el);
            this._createInitialChildren(transaction, props, context, el);
            mountImage = el;
          } else {
            var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
            var tagContent = this._createContentMarkup(transaction, props, context);
            if (!tagContent && omittedCloseTags[this._tag]) {
              mountImage = tagOpen + '/>';
            } else {
              mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
            }
          }
          switch (this._tag) {
          case 'input':
            transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
          // falls through
          case 'button':
          case 'select':
          case 'textarea':
            if (props.autoFocus) {
              transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
            }
            break;
          }
          return mountImage;
        },
        _createOpenTagMarkupAndPutListeners: function (transaction, props) {
          var ret = '<' + this._currentElement.type;
          for (var propKey in props) {
            if (!props.hasOwnProperty(propKey)) {
              continue;
            }
            var propValue = props[propKey];
            if (propValue == null) {
              continue;
            }
            if (registrationNameModules.hasOwnProperty(propKey)) {
              if (propValue) {
                enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
              }
            } else {
              if (propKey === STYLE) {
                if (propValue) {
                  if (process.env.NODE_ENV !== 'production') {
                    // See `_updateDOMProperties`. style block
                    this._previousStyle = propValue;
                  }
                  propValue = this._previousStyleCopy = assign({}, props.style);
                }
                propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
              }
              var markup = null;
              if (this._tag != null && isCustomComponent(this._tag, props)) {
                if (propKey !== CHILDREN) {
                  markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
                }
              } else {
                markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
              }
              if (markup) {
                ret += ' ' + markup;
              }
            }
          }
          // For static pages, no need to put React ID and checksum. Saves lots of
          // bytes.
          if (transaction.renderToStaticMarkup) {
            return ret;
          }
          var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
          return ret + ' ' + markupForID;
        },
        _createContentMarkup: function (transaction, props, context) {
          var ret = '';
          // Intentional use of != to avoid catching zero/false.
          var innerHTML = props.dangerouslySetInnerHTML;
          if (innerHTML != null) {
            if (innerHTML.__html != null) {
              ret = innerHTML.__html;
            }
          } else {
            var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
            var childrenToUse = contentToUse != null ? null : props.children;
            if (contentToUse != null) {
              // TODO: Validate that text is allowed as a child of this node
              ret = escapeTextContentForBrowser(contentToUse);
            } else if (childrenToUse != null) {
              var mountImages = this.mountChildren(childrenToUse, transaction, context);
              ret = mountImages.join('');
            }
          }
          if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
            // text/html ignores the first character in these tags if it's a newline
            // Prefer to break application/xml over text/html (for now) by adding
            // a newline specifically to get eaten by the parser. (Alternately for
            // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
            // \r is normalized out by HTMLTextAreaElement#value.)
            // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
            // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
            // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
            // See: Parsing of "textarea" "listing" and "pre" elements
            //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
            return '\n' + ret;
          } else {
            return ret;
          }
        },
        _createInitialChildren: function (transaction, props, context, el) {
          // Intentional use of != to avoid catching zero/false.
          var innerHTML = props.dangerouslySetInnerHTML;
          if (innerHTML != null) {
            if (innerHTML.__html != null) {
              setInnerHTML(el, innerHTML.__html);
            }
          } else {
            var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
            var childrenToUse = contentToUse != null ? null : props.children;
            if (contentToUse != null) {
              // TODO: Validate that text is allowed as a child of this node
              setTextContent(el, contentToUse);
            } else if (childrenToUse != null) {
              var mountImages = this.mountChildren(childrenToUse, transaction, context);
              for (var i = 0; i < mountImages.length; i++) {
                el.appendChild(mountImages[i]);
              }
            }
          }
        },
        receiveComponent: function (nextElement, transaction, context) {
          var prevElement = this._currentElement;
          this._currentElement = nextElement;
          this.updateComponent(transaction, prevElement, nextElement, context);
        },
        updateComponent: function (transaction, prevElement, nextElement, context) {
          var lastProps = prevElement.props;
          var nextProps = this._currentElement.props;
          switch (this._tag) {
          case 'button':
            lastProps = ReactDOMButton.getNativeProps(this, lastProps);
            nextProps = ReactDOMButton.getNativeProps(this, nextProps);
            break;
          case 'input':
            ReactDOMInput.updateWrapper(this);
            lastProps = ReactDOMInput.getNativeProps(this, lastProps);
            nextProps = ReactDOMInput.getNativeProps(this, nextProps);
            break;
          case 'option':
            lastProps = ReactDOMOption.getNativeProps(this, lastProps);
            nextProps = ReactDOMOption.getNativeProps(this, nextProps);
            break;
          case 'select':
            lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
            nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
            break;
          case 'textarea':
            ReactDOMTextarea.updateWrapper(this);
            lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
            nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
            break;
          }
          if (process.env.NODE_ENV !== 'production') {
            // If the context is reference-equal to the old one, pass down the same
            // processed object so the update bailout in ReactReconciler behaves
            // correctly (and identically in dev and prod). See #5005.
            if (this._unprocessedContextDev !== context) {
              this._unprocessedContextDev = context;
              this._processedContextDev = processChildContextDev(context, this);
            }
            context = this._processedContextDev;
          }
          assertValidProps(this, nextProps);
          this._updateDOMProperties(lastProps, nextProps, transaction, null);
          this._updateDOMChildren(lastProps, nextProps, transaction, context);
          if (!canDefineProperty && this._nodeWithLegacyProperties) {
            this._nodeWithLegacyProperties.props = nextProps;
          }
          if (this._tag === 'select') {
            // <select> value update needs to occur after <option> children
            // reconciliation
            transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
          }
        },
        _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
          var propKey;
          var styleName;
          var styleUpdates;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = this._previousStyleCopy;
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  styleUpdates = styleUpdates || {};
                  styleUpdates[styleName] = '';
                }
              }
              this._previousStyleCopy = null;
            } else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (lastProps[propKey]) {
                // Only call deleteListener if there was a listener previously or
                // else willDeleteListener gets called when there wasn't actually a
                // listener (e.g., onClick={null})
                deleteListener(this._rootNodeID, propKey);
              }
            } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
              if (!node) {
                node = ReactMount.getNode(this._rootNodeID);
              }
              DOMPropertyOperations.deleteValueForProperty(node, propKey);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
              continue;
            }
            if (propKey === STYLE) {
              if (nextProp) {
                if (process.env.NODE_ENV !== 'production') {
                  checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
                  this._previousStyle = nextProp;
                }
                nextProp = this._previousStyleCopy = assign({}, nextProp);
              } else {
                this._previousStyleCopy = null;
              }
              if (lastProp) {
                // Unset styles on `lastProp` but not on `nextProp`.
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    styleUpdates = styleUpdates || {};
                    styleUpdates[styleName] = '';
                  }
                }
                // Update styles that changed since `lastProp`.
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    styleUpdates = styleUpdates || {};
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                // Relies on `updateStylesByID` not mutating `styleUpdates`.
                styleUpdates = nextProp;
              }
            } else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp) {
                enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
              } else if (lastProp) {
                deleteListener(this._rootNodeID, propKey);
              }
            } else if (isCustomComponent(this._tag, nextProps)) {
              if (!node) {
                node = ReactMount.getNode(this._rootNodeID);
              }
              if (propKey === CHILDREN) {
                nextProp = null;
              }
              DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
            } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
              if (!node) {
                node = ReactMount.getNode(this._rootNodeID);
              }
              // If we're updating to null or undefined, we should remove the property
              // from the DOM node instead of inadvertantly setting to a string. This
              // brings us in line with the same behavior we have on initial render.
              if (nextProp != null) {
                DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
              } else {
                DOMPropertyOperations.deleteValueForProperty(node, propKey);
              }
            }
          }
          if (styleUpdates) {
            if (!node) {
              node = ReactMount.getNode(this._rootNodeID);
            }
            CSSPropertyOperations.setValueForStyles(node, styleUpdates);
          }
        },
        _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
          var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
          var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
          var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
          var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
          // Note the use of `!=` which checks for null or undefined.
          var lastChildren = lastContent != null ? null : lastProps.children;
          var nextChildren = nextContent != null ? null : nextProps.children;
          // If we're switching from children to content/html or vice versa, remove
          // the old content
          var lastHasContentOrHtml = lastContent != null || lastHtml != null;
          var nextHasContentOrHtml = nextContent != null || nextHtml != null;
          if (lastChildren != null && nextChildren == null) {
            this.updateChildren(null, transaction, context);
          } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
            this.updateTextContent('');
          }
          if (nextContent != null) {
            if (lastContent !== nextContent) {
              this.updateTextContent('' + nextContent);
            }
          } else if (nextHtml != null) {
            if (lastHtml !== nextHtml) {
              this.updateMarkup('' + nextHtml);
            }
          } else if (nextChildren != null) {
            this.updateChildren(nextChildren, transaction, context);
          }
        },
        unmountComponent: function () {
          switch (this._tag) {
          case 'iframe':
          case 'img':
          case 'form':
          case 'video':
          case 'audio':
            var listeners = this._wrapperState.listeners;
            if (listeners) {
              for (var i = 0; i < listeners.length; i++) {
                listeners[i].remove();
              }
            }
            break;
          case 'input':
            ReactDOMInput.unmountWrapper(this);
            break;
          case 'html':
          case 'head':
          case 'body':
            /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
            true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
            break;
          }
          this.unmountChildren();
          ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
          ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
          this._rootNodeID = null;
          this._wrapperState = null;
          if (this._nodeWithLegacyProperties) {
            var node = this._nodeWithLegacyProperties;
            node._reactInternalComponent = null;
            this._nodeWithLegacyProperties = null;
          }
        },
        getPublicInstance: function () {
          if (!this._nodeWithLegacyProperties) {
            var node = ReactMount.getNode(this._rootNodeID);
            node._reactInternalComponent = this;
            node.getDOMNode = legacyGetDOMNode;
            node.isMounted = legacyIsMounted;
            node.setState = legacySetStateEtc;
            node.replaceState = legacySetStateEtc;
            node.forceUpdate = legacySetStateEtc;
            node.setProps = legacySetProps;
            node.replaceProps = legacyReplaceProps;
            if (process.env.NODE_ENV !== 'production') {
              if (canDefineProperty) {
                Object.defineProperties(node, legacyPropsDescriptor);
              } else {
                // updateComponent will update this property on subsequent renders
                node.props = this._currentElement.props;
              }
            } else {
              // updateComponent will update this property on subsequent renders
              node.props = this._currentElement.props;
            }
            this._nodeWithLegacyProperties = node;
          }
          return this._nodeWithLegacyProperties;
        }
      };
      ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
        mountComponent: 'mountComponent',
        updateComponent: 'updateComponent'
      });
      assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
      module.exports = ReactDOMComponent;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */
    'use strict';
    var ReactMount = __webpack_require__(37);
    var findDOMNode = __webpack_require__(100);
    var focusNode = __webpack_require__(104);
    var Mixin = {
        componentDidMount: function () {
          if (this.props.autoFocus) {
            focusNode(findDOMNode(this));
          }
        }
      };
    var AutoFocusUtils = {
        Mixin: Mixin,
        focusDOMComponent: function () {
          focusNode(ReactMount.getNode(this._rootNodeID));
        }
      };
    module.exports = AutoFocusUtils;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */
    'use strict';
    /**
	 * @param {DOMElement} node input/textarea to focus
	 */
    function focusNode(node) {
      // IE8 can throw "Can't move focus to the control because it is invisible,
      // not enabled, or of a type that does not accept the focus." for all kinds of
      // reasons that are too expensive and fragile to test.
      try {
        node.focus();
      } catch (e) {
      }
    }
    module.exports = focusNode;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */
      'use strict';
      var CSSProperty = __webpack_require__(106);
      var ExecutionEnvironment = __webpack_require__(18);
      var ReactPerf = __webpack_require__(27);
      var camelizeStyleName = __webpack_require__(107);
      var dangerousStyleValue = __webpack_require__(109);
      var hyphenateStyleName = __webpack_require__(110);
      var memoizeStringOnly = __webpack_require__(112);
      var warning = __webpack_require__(34);
      var processStyleName = memoizeStringOnly(function (styleName) {
          return hyphenateStyleName(styleName);
        });
      var hasShorthandPropertyBug = false;
      var styleFloatAccessor = 'cssFloat';
      if (ExecutionEnvironment.canUseDOM) {
        var tempStyle = document.createElement('div').style;
        try {
          // IE8 throws "Invalid argument." if resetting shorthand style properties.
          tempStyle.font = '';
        } catch (e) {
          hasShorthandPropertyBug = true;
        }
        // IE8 only supports accessing cssFloat (standard) as styleFloat
        if (document.documentElement.style.cssFloat === undefined) {
          styleFloatAccessor = 'styleFloat';
        }
      }
      if (process.env.NODE_ENV !== 'production') {
        // 'msTransform' is correct, but the other prefixes should be capitalized
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        // style values shouldn't contain a semicolon
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnHyphenatedStyleName = function (name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
        };
        var warnBadVendoredStyleName = function (name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
        };
        var warnStyleValueWithSemicolon = function (name, value) {
          if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
            return;
          }
          warnedStyleValues[value] = true;
          process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
        };
        /**
	   * @param {string} name
	   * @param {*} value
	   */
        var warnValidStyle = function (name, value) {
          if (name.indexOf('-') > -1) {
            warnHyphenatedStyleName(name);
          } else if (badVendoredStyleNamePattern.test(name)) {
            warnBadVendoredStyleName(name);
          } else if (badStyleValueWithSemicolonPattern.test(value)) {
            warnStyleValueWithSemicolon(name, value);
          }
        };
      }
      /**
	 * Operations for dealing with CSS properties.
	 */
      var CSSPropertyOperations = {
          createMarkupForStyles: function (styles) {
            var serialized = '';
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (process.env.NODE_ENV !== 'production') {
                warnValidStyle(styleName, styleValue);
              }
              if (styleValue != null) {
                serialized += processStyleName(styleName) + ':';
                serialized += dangerousStyleValue(styleName, styleValue) + ';';
              }
            }
            return serialized || null;
          },
          setValueForStyles: function (node, styles) {
            var style = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              if (process.env.NODE_ENV !== 'production') {
                warnValidStyle(styleName, styles[styleName]);
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName]);
              if (styleName === 'float') {
                styleName = styleFloatAccessor;
              }
              if (styleValue) {
                style[styleName] = styleValue;
              } else {
                var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
                if (expansion) {
                  // Shorthand property that IE8 won't like unsetting, so unset each
                  // component to placate it
                  for (var individualStyleName in expansion) {
                    style[individualStyleName] = '';
                  }
                } else {
                  style[styleName] = '';
                }
              }
            }
          }
        };
      ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', { setValueForStyles: 'setValueForStyles' });
      module.exports = CSSPropertyOperations;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */
    'use strict';
    /**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
    var isUnitlessNumber = {
        animationIterationCount: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        stopOpacity: true,
        strokeDashoffset: true,
        strokeOpacity: true,
        strokeWidth: true
      };
    /**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
    function prefixKey(prefix, key) {
      return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
    var prefixes = [
        'Webkit',
        'ms',
        'Moz',
        'O'
      ];
    // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function (prop) {
      prefixes.forEach(function (prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
      });
    });
    /**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
    var shorthandPropertyExpansions = {
        background: {
          backgroundAttachment: true,
          backgroundColor: true,
          backgroundImage: true,
          backgroundPositionX: true,
          backgroundPositionY: true,
          backgroundRepeat: true
        },
        backgroundPosition: {
          backgroundPositionX: true,
          backgroundPositionY: true
        },
        border: {
          borderWidth: true,
          borderStyle: true,
          borderColor: true
        },
        borderBottom: {
          borderBottomWidth: true,
          borderBottomStyle: true,
          borderBottomColor: true
        },
        borderLeft: {
          borderLeftWidth: true,
          borderLeftStyle: true,
          borderLeftColor: true
        },
        borderRight: {
          borderRightWidth: true,
          borderRightStyle: true,
          borderRightColor: true
        },
        borderTop: {
          borderTopWidth: true,
          borderTopStyle: true,
          borderTopColor: true
        },
        font: {
          fontStyle: true,
          fontVariant: true,
          fontWeight: true,
          fontSize: true,
          lineHeight: true,
          fontFamily: true
        },
        outline: {
          outlineWidth: true,
          outlineStyle: true,
          outlineColor: true
        }
      };
    var CSSProperty = {
        isUnitlessNumber: isUnitlessNumber,
        shorthandPropertyExpansions: shorthandPropertyExpansions
      };
    module.exports = CSSProperty;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */
    'use strict';
    var camelize = __webpack_require__(108);
    var msPattern = /^-ms-/;
    /**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
    function camelizeStyleName(string) {
      return camelize(string.replace(msPattern, 'ms-'));
    }
    module.exports = camelizeStyleName;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */
    'use strict';
    var _hyphenPattern = /-(.)/g;
    /**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
    function camelize(string) {
      return string.replace(_hyphenPattern, function (_, character) {
        return character.toUpperCase();
      });
    }
    module.exports = camelize;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */
    'use strict';
    var CSSProperty = __webpack_require__(106);
    var isUnitlessNumber = CSSProperty.isUnitlessNumber;
    /**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
    function dangerousStyleValue(name, value) {
      // Note that we've removed escapeTextForBrowser() calls here since the
      // whole string will be escaped when the attribute is injected into
      // the markup. If you provide unsafe user data here they can inject
      // arbitrary CSS which may be problematic (I couldn't repro this):
      // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
      // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
      // This is not an XSS hole but instead a potential CSS injection issue
      // which has lead to a greater discussion about how we're going to
      // trust URLs moving forward. See #2115901
      var isEmpty = value == null || typeof value === 'boolean' || value === '';
      if (isEmpty) {
        return '';
      }
      var isNonNumeric = isNaN(value);
      if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
        return '' + value;  // cast to string
      }
      if (typeof value === 'string') {
        value = value.trim();
      }
      return value + 'px';
    }
    module.exports = dangerousStyleValue;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */
    'use strict';
    var hyphenate = __webpack_require__(111);
    var msPattern = /^ms-/;
    /**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
    function hyphenateStyleName(string) {
      return hyphenate(string).replace(msPattern, '-ms-');
    }
    module.exports = hyphenateStyleName;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */
    'use strict';
    var _uppercasePattern = /([A-Z])/g;
    /**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
    function hyphenate(string) {
      return string.replace(_uppercasePattern, '-$1').toLowerCase();
    }
    module.exports = hyphenate;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */
    'use strict';
    /**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
    function memoizeStringOnly(callback) {
      var cache = {};
      return function (string) {
        if (!cache.hasOwnProperty(string)) {
          cache[string] = callback.call(this, string);
        }
        return cache[string];
      };
    }
    module.exports = memoizeStringOnly;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */
    'use strict';
    var mouseListenerNames = {
        onClick: true,
        onDoubleClick: true,
        onMouseDown: true,
        onMouseMove: true,
        onMouseUp: true,
        onClickCapture: true,
        onDoubleClickCapture: true,
        onMouseDownCapture: true,
        onMouseMoveCapture: true,
        onMouseUpCapture: true
      };
    /**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
    var ReactDOMButton = {
        getNativeProps: function (inst, props, context) {
          if (!props.disabled) {
            return props;
          }
          // Copy the props, except the mouse listeners
          var nativeProps = {};
          for (var key in props) {
            if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
              nativeProps[key] = props[key];
            }
          }
          return nativeProps;
        }
      };
    module.exports = ReactDOMButton;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */
      'use strict';
      var ReactDOMIDOperations = __webpack_require__(36);
      var LinkedValueUtils = __webpack_require__(115);
      var ReactMount = __webpack_require__(37);
      var ReactUpdates = __webpack_require__(63);
      var assign = __webpack_require__(48);
      var invariant = __webpack_require__(22);
      var instancesByReactID = {};
      function forceUpdateIfMounted() {
        if (this._rootNodeID) {
          // DOM component is still mounted; update
          ReactDOMInput.updateWrapper(this);
        }
      }
      /**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
      var ReactDOMInput = {
          getNativeProps: function (inst, props, context) {
            var value = LinkedValueUtils.getValue(props);
            var checked = LinkedValueUtils.getChecked(props);
            var nativeProps = assign({}, props, {
                defaultChecked: undefined,
                defaultValue: undefined,
                value: value != null ? value : inst._wrapperState.initialValue,
                checked: checked != null ? checked : inst._wrapperState.initialChecked,
                onChange: inst._wrapperState.onChange
              });
            return nativeProps;
          },
          mountWrapper: function (inst, props) {
            if (process.env.NODE_ENV !== 'production') {
              LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
            }
            var defaultValue = props.defaultValue;
            inst._wrapperState = {
              initialChecked: props.defaultChecked || false,
              initialValue: defaultValue != null ? defaultValue : null,
              onChange: _handleChange.bind(inst)
            };
          },
          mountReadyWrapper: function (inst) {
            // Can't be in mountWrapper or else server rendering leaks.
            instancesByReactID[inst._rootNodeID] = inst;
          },
          unmountWrapper: function (inst) {
            delete instancesByReactID[inst._rootNodeID];
          },
          updateWrapper: function (inst) {
            var props = inst._currentElement.props;
            // TODO: Shouldn't this be getChecked(props)?
            var checked = props.checked;
            if (checked != null) {
              ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
            }
            var value = LinkedValueUtils.getValue(props);
            if (value != null) {
              // Cast `value` to a string to ensure the value is set correctly. While
              // browsers typically do this as necessary, jsdom doesn't.
              ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
            }
          }
        };
      function _handleChange(event) {
        var props = this._currentElement.props;
        var returnValue = LinkedValueUtils.executeOnChange(props, event);
        // Here we use asap to wait until all updates have propagated, which
        // is important when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        ReactUpdates.asap(forceUpdateIfMounted, this);
        var name = props.name;
        if (props.type === 'radio' && name != null) {
          var rootNode = ReactMount.getNode(this._rootNodeID);
          var queryRoot = rootNode;
          while (queryRoot.parentNode) {
            queryRoot = queryRoot.parentNode;
          }
          // If `rootNode.form` was non-null, then we could try `form.elements`,
          // but that sometimes behaves strangely in IE8. We could also try using
          // `form.getElementsByName`, but that will only return direct children
          // and won't include inputs that use the HTML5 `form=` attribute. Since
          // the input might not even be in a form, let's just use the global
          // `querySelectorAll` to ensure we don't miss anything.
          var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
          for (var i = 0; i < group.length; i++) {
            var otherNode = group[i];
            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
              continue;
            }
            // This will throw if radio buttons rendered by different copies of React
            // and the same name are rendered into the same form (same as #1939).
            // That's probably okay; we don't support it just as we don't support
            // mixing React with non-React.
            var otherID = ReactMount.getID(otherNode);
            !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
            var otherInstance = instancesByReactID[otherID];
            !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
            // If this is a controlled radio button group, forcing the input that
            // was previously checked to update will cause it to be come re-checked
            // as appropriate.
            ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
          }
        }
        return returnValue;
      }
      module.exports = ReactDOMInput;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */
      'use strict';
      var ReactPropTypes = __webpack_require__(116);
      var ReactPropTypeLocations = __webpack_require__(74);
      var invariant = __webpack_require__(22);
      var warning = __webpack_require__(34);
      var hasReadOnlyValue = {
          'button': true,
          'checkbox': true,
          'image': true,
          'hidden': true,
          'radio': true,
          'reset': true,
          'submit': true
        };
      function _assertSingleLink(inputProps) {
        !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
      }
      function _assertValueLink(inputProps) {
        _assertSingleLink(inputProps);
        !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
      }
      function _assertCheckedLink(inputProps) {
        _assertSingleLink(inputProps);
        !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
      }
      var propTypes = {
          value: function (props, propName, componentName) {
            if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
              return null;
            }
            return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
          },
          checked: function (props, propName, componentName) {
            if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
              return null;
            }
            return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
          },
          onChange: ReactPropTypes.func
        };
      var loggedTypeFailures = {};
      function getDeclarationErrorAddendum(owner) {
        if (owner) {
          var name = owner.getName();
          if (name) {
            return ' Check the render method of `' + name + '`.';
          }
        }
        return '';
      }
      /**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
      var LinkedValueUtils = {
          checkPropTypes: function (tagName, props, owner) {
            for (var propName in propTypes) {
              if (propTypes.hasOwnProperty(propName)) {
                var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error.message] = true;
                var addendum = getDeclarationErrorAddendum(owner);
                process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
              }
            }
          },
          getValue: function (inputProps) {
            if (inputProps.valueLink) {
              _assertValueLink(inputProps);
              return inputProps.valueLink.value;
            }
            return inputProps.value;
          },
          getChecked: function (inputProps) {
            if (inputProps.checkedLink) {
              _assertCheckedLink(inputProps);
              return inputProps.checkedLink.value;
            }
            return inputProps.checked;
          },
          executeOnChange: function (inputProps, event) {
            if (inputProps.valueLink) {
              _assertValueLink(inputProps);
              return inputProps.valueLink.requestChange(event.target.value);
            } else if (inputProps.checkedLink) {
              _assertCheckedLink(inputProps);
              return inputProps.checkedLink.requestChange(event.target.checked);
            } else if (inputProps.onChange) {
              return inputProps.onChange.call(undefined, event);
            }
          }
        };
      module.exports = LinkedValueUtils;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */
    'use strict';
    var ReactElement = __webpack_require__(51);
    var ReactPropTypeLocationNames = __webpack_require__(75);
    var emptyFunction = __webpack_require__(24);
    var getIteratorFn = __webpack_require__(117);
    /**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */
    var ANONYMOUS = '<<anonymous>>';
    var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker
      };
    function createChainableTypeChecker(validate) {
      function checkType(isRequired, props, propName, componentName, location, propFullName) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;
        if (props[propName] == null) {
          var locationName = ReactPropTypeLocationNames[location];
          if (isRequired) {
            return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
          }
          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }
      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== expectedType) {
          var locationName = ReactPropTypeLocationNames[location];
          // `propValue` being instance of, say, date/regexp, pass the 'object'
          // check, but we can offer a more precise error message here rather than
          // 'of type `object`'.
          var preciseType = getPreciseType(propValue);
          return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunction.thatReturns(null));
    }
    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!Array.isArray(propValue)) {
          var locationName = ReactPropTypeLocationNames[location];
          var propType = getPropType(propValue);
          return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }
        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
          if (error instanceof Error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!ReactElement.isValidElement(props[propName])) {
          var locationName = ReactPropTypeLocationNames[location];
          return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var locationName = ReactPropTypeLocationNames[location];
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        return createChainableTypeChecker(function () {
          return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
        });
      }
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        for (var i = 0; i < expectedValues.length; i++) {
          if (propValue === expectedValues[i]) {
            return null;
          }
        }
        var locationName = ReactPropTypeLocationNames[location];
        var valuesString = JSON.stringify(expectedValues);
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }
      return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          var locationName = ReactPropTypeLocationNames[location];
          return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }
        for (var key in propValue) {
          if (propValue.hasOwnProperty(key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
            if (error instanceof Error) {
              return error;
            }
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        return createChainableTypeChecker(function () {
          return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
        });
      }
      function validate(props, propName, componentName, location, propFullName) {
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (checker(props, propName, componentName, location, propFullName) == null) {
            return null;
          }
        }
        var locationName = ReactPropTypeLocationNames[location];
        return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
      }
      return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          var locationName = ReactPropTypeLocationNames[location];
          return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          var locationName = ReactPropTypeLocationNames[location];
          return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }
        for (var key in shapeTypes) {
          var checker = shapeTypes[key];
          if (!checker) {
            continue;
          }
          var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
      switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || ReactElement.isValidElement(propValue)) {
          return true;
        }
        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }
        return true;
      default:
        return false;
      }
    }
    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
      var propType = typeof propValue;
      if (Array.isArray(propValue)) {
        return 'array';
      }
      if (propValue instanceof RegExp) {
        // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
      }
      return propType;
    }
    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
      var propType = getPropType(propValue);
      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }
      return propType;
    }
    // Returns class name of the object, if any.
    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return '<<anonymous>>';
      }
      return propValue.constructor.name;
    }
    module.exports = ReactPropTypes;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */
    'use strict';
    /* global Symbol */
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    // Before Symbol spec.
    /**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }
    module.exports = getIteratorFn;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */
      'use strict';
      var ReactChildren = __webpack_require__(119);
      var ReactDOMSelect = __webpack_require__(121);
      var assign = __webpack_require__(48);
      var warning = __webpack_require__(34);
      var valueContextKey = ReactDOMSelect.valueContextKey;
      /**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
      var ReactDOMOption = {
          mountWrapper: function (inst, props, context) {
            // TODO (yungsters): Remove support for `selected` in <option>.
            if (process.env.NODE_ENV !== 'production') {
              process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
            }
            // Look up whether this option is 'selected' via context
            var selectValue = context[valueContextKey];
            // If context key is null (e.g., no specified value or after initial mount)
            // or missing (e.g., for <datalist>), we don't change props.selected
            var selected = null;
            if (selectValue != null) {
              selected = false;
              if (Array.isArray(selectValue)) {
                // multiple
                for (var i = 0; i < selectValue.length; i++) {
                  if ('' + selectValue[i] === '' + props.value) {
                    selected = true;
                    break;
                  }
                }
              } else {
                selected = '' + selectValue === '' + props.value;
              }
            }
            inst._wrapperState = { selected: selected };
          },
          getNativeProps: function (inst, props, context) {
            var nativeProps = assign({
                selected: undefined,
                children: undefined
              }, props);
            // Read state only from initial mount because <select> updates value
            // manually; we need the initial state only for server rendering
            if (inst._wrapperState.selected != null) {
              nativeProps.selected = inst._wrapperState.selected;
            }
            var content = '';
            // Flatten children and warn if they aren't strings or numbers;
            // invalid types are ignored.
            ReactChildren.forEach(props.children, function (child) {
              if (child == null) {
                return;
              }
              if (typeof child === 'string' || typeof child === 'number') {
                content += child;
              } else {
                process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
              }
            });
            nativeProps.children = content;
            return nativeProps;
          }
        };
      module.exports = ReactDOMOption;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */
    'use strict';
    var PooledClass = __webpack_require__(65);
    var ReactElement = __webpack_require__(51);
    var emptyFunction = __webpack_require__(24);
    var traverseAllChildren = __webpack_require__(120);
    var twoArgumentPooler = PooledClass.twoArgumentPooler;
    var fourArgumentPooler = PooledClass.fourArgumentPooler;
    var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
    function escapeUserProvidedKey(text) {
      return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
    }
    /**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
    function ForEachBookKeeping(forEachFunction, forEachContext) {
      this.func = forEachFunction;
      this.context = forEachContext;
      this.count = 0;
    }
    ForEachBookKeeping.prototype.destructor = function () {
      this.func = null;
      this.context = null;
      this.count = 0;
    };
    PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
    function forEachSingleChild(bookKeeping, child, name) {
      var func = bookKeeping.func;
      var context = bookKeeping.context;
      func.call(context, child, bookKeeping.count++);
    }
    /**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
    function forEachChildren(children, forEachFunc, forEachContext) {
      if (children == null) {
        return children;
      }
      var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
      traverseAllChildren(children, forEachSingleChild, traverseContext);
      ForEachBookKeeping.release(traverseContext);
    }
    /**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
    function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
      this.result = mapResult;
      this.keyPrefix = keyPrefix;
      this.func = mapFunction;
      this.context = mapContext;
      this.count = 0;
    }
    MapBookKeeping.prototype.destructor = function () {
      this.result = null;
      this.keyPrefix = null;
      this.func = null;
      this.context = null;
      this.count = 0;
    };
    PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
    function mapSingleChildIntoContext(bookKeeping, child, childKey) {
      var result = bookKeeping.result;
      var keyPrefix = bookKeeping.keyPrefix;
      var func = bookKeeping.func;
      var context = bookKeeping.context;
      var mappedChild = func.call(context, child, bookKeeping.count++);
      if (Array.isArray(mappedChild)) {
        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
      } else if (mappedChild != null) {
        if (ReactElement.isValidElement(mappedChild)) {
          mappedChild = ReactElement.cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
        }
        result.push(mappedChild);
      }
    }
    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
      var escapedPrefix = '';
      if (prefix != null) {
        escapedPrefix = escapeUserProvidedKey(prefix) + '/';
      }
      var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
      MapBookKeeping.release(traverseContext);
    }
    /**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, func, context);
      return result;
    }
    function forEachSingleChildDummy(traverseContext, child, name) {
      return null;
    }
    /**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
    function countChildren(children, context) {
      return traverseAllChildren(children, forEachSingleChildDummy, null);
    }
    /**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
    function toArray(children) {
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
      return result;
    }
    var ReactChildren = {
        forEach: forEachChildren,
        map: mapChildren,
        mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
        count: countChildren,
        toArray: toArray
      };
    module.exports = ReactChildren;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */
      'use strict';
      var ReactCurrentOwner = __webpack_require__(14);
      var ReactElement = __webpack_require__(51);
      var ReactInstanceHandles = __webpack_require__(54);
      var getIteratorFn = __webpack_require__(117);
      var invariant = __webpack_require__(22);
      var warning = __webpack_require__(34);
      var SEPARATOR = ReactInstanceHandles.SEPARATOR;
      var SUBSEPARATOR = ':';
      /**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
      var userProvidedKeyEscaperLookup = {
          '=': '=0',
          '.': '=1',
          ':': '=2'
        };
      var userProvidedKeyEscapeRegex = /[=.:]/g;
      var didWarnAboutMaps = false;
      function userProvidedKeyEscaper(match) {
        return userProvidedKeyEscaperLookup[match];
      }
      /**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
      function getComponentKey(component, index) {
        if (component && component.key != null) {
          // Explicit key
          return wrapUserProvidedKey(component.key);
        }
        // Implicit key determined by the index in the set
        return index.toString(36);
      }
      /**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
      function escapeUserProvidedKey(text) {
        return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
      }
      /**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
      function wrapUserProvidedKey(key) {
        return '$' + escapeUserProvidedKey(key);
      }
      /**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
      function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') {
          // All of the above are perceived as null.
          children = null;
        }
        if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
          callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
          return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0;
        // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getComponentKey(child, i);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (iteratorFn) {
            var iterator = iteratorFn.call(children);
            var step;
            if (iteratorFn !== children.entries) {
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getComponentKey(child, ii++);
                subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
              }
            } else {
              if (process.env.NODE_ENV !== 'production') {
                process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
                didWarnAboutMaps = true;
              }
              // Iterator will provide entry [k,v] tuples rather than values.
              while (!(step = iterator.next()).done) {
                var entry = step.value;
                if (entry) {
                  child = entry[1];
                  nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
                  subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                }
              }
            }
          } else if (type === 'object') {
            var addendum = '';
            if (process.env.NODE_ENV !== 'production') {
              addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
              if (children._isReactElement) {
                addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
              }
              if (ReactCurrentOwner.current) {
                var name = ReactCurrentOwner.current.getName();
                if (name) {
                  addendum += ' Check the render method of `' + name + '`.';
                }
              }
            }
            var childrenString = String(children);
            true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
          }
        }
        return subtreeCount;
      }
      /**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
      function traverseAllChildren(children, callback, traverseContext) {
        if (children == null) {
          return 0;
        }
        return traverseAllChildrenImpl(children, '', callback, traverseContext);
      }
      module.exports = traverseAllChildren;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */
      'use strict';
      var LinkedValueUtils = __webpack_require__(115);
      var ReactMount = __webpack_require__(37);
      var ReactUpdates = __webpack_require__(63);
      var assign = __webpack_require__(48);
      var warning = __webpack_require__(34);
      var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);
      function updateOptionsIfPendingUpdateAndMounted() {
        if (this._rootNodeID && this._wrapperState.pendingUpdate) {
          this._wrapperState.pendingUpdate = false;
          var props = this._currentElement.props;
          var value = LinkedValueUtils.getValue(props);
          if (value != null) {
            updateOptions(this, props, value);
          }
        }
      }
      function getDeclarationErrorAddendum(owner) {
        if (owner) {
          var name = owner.getName();
          if (name) {
            return ' Check the render method of `' + name + '`.';
          }
        }
        return '';
      }
      var valuePropNames = [
          'value',
          'defaultValue'
        ];
      /**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
      function checkSelectPropTypes(inst, props) {
        var owner = inst._currentElement._owner;
        LinkedValueUtils.checkPropTypes('select', props, owner);
        for (var i = 0; i < valuePropNames.length; i++) {
          var propName = valuePropNames[i];
          if (props[propName] == null) {
            continue;
          }
          if (props.multiple) {
            process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
          } else {
            process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
          }
        }
      }
      /**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
      function updateOptions(inst, multiple, propValue) {
        var selectedValue, i;
        var options = ReactMount.getNode(inst._rootNodeID).options;
        if (multiple) {
          selectedValue = {};
          for (i = 0; i < propValue.length; i++) {
            selectedValue['' + propValue[i]] = true;
          }
          for (i = 0; i < options.length; i++) {
            var selected = selectedValue.hasOwnProperty(options[i].value);
            if (options[i].selected !== selected) {
              options[i].selected = selected;
            }
          }
        } else {
          // Do not set `select.value` as exact behavior isn't consistent across all
          // browsers for all cases.
          selectedValue = '' + propValue;
          for (i = 0; i < options.length; i++) {
            if (options[i].value === selectedValue) {
              options[i].selected = true;
              return;
            }
          }
          if (options.length) {
            options[0].selected = true;
          }
        }
      }
      /**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
      var ReactDOMSelect = {
          valueContextKey: valueContextKey,
          getNativeProps: function (inst, props, context) {
            return assign({}, props, {
              onChange: inst._wrapperState.onChange,
              value: undefined
            });
          },
          mountWrapper: function (inst, props) {
            if (process.env.NODE_ENV !== 'production') {
              checkSelectPropTypes(inst, props);
            }
            var value = LinkedValueUtils.getValue(props);
            inst._wrapperState = {
              pendingUpdate: false,
              initialValue: value != null ? value : props.defaultValue,
              onChange: _handleChange.bind(inst),
              wasMultiple: Boolean(props.multiple)
            };
          },
          processChildContext: function (inst, props, context) {
            // Pass down initial value so initial generated markup has correct
            // `selected` attributes
            var childContext = assign({}, context);
            childContext[valueContextKey] = inst._wrapperState.initialValue;
            return childContext;
          },
          postUpdateWrapper: function (inst) {
            var props = inst._currentElement.props;
            // After the initial mount, we control selected-ness manually so don't pass
            // the context value down
            inst._wrapperState.initialValue = undefined;
            var wasMultiple = inst._wrapperState.wasMultiple;
            inst._wrapperState.wasMultiple = Boolean(props.multiple);
            var value = LinkedValueUtils.getValue(props);
            if (value != null) {
              inst._wrapperState.pendingUpdate = false;
              updateOptions(inst, Boolean(props.multiple), value);
            } else if (wasMultiple !== Boolean(props.multiple)) {
              // For simplicity, reapply `defaultValue` if `multiple` is toggled.
              if (props.defaultValue != null) {
                updateOptions(inst, Boolean(props.multiple), props.defaultValue);
              } else {
                // Revert the select back to its default unselected state.
                updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
              }
            }
          }
        };
      function _handleChange(event) {
        var props = this._currentElement.props;
        var returnValue = LinkedValueUtils.executeOnChange(props, event);
        this._wrapperState.pendingUpdate = true;
        ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
        return returnValue;
      }
      module.exports = ReactDOMSelect;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */
      'use strict';
      var LinkedValueUtils = __webpack_require__(115);
      var ReactDOMIDOperations = __webpack_require__(36);
      var ReactUpdates = __webpack_require__(63);
      var assign = __webpack_require__(48);
      var invariant = __webpack_require__(22);
      var warning = __webpack_require__(34);
      function forceUpdateIfMounted() {
        if (this._rootNodeID) {
          // DOM component is still mounted; update
          ReactDOMTextarea.updateWrapper(this);
        }
      }
      /**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
      var ReactDOMTextarea = {
          getNativeProps: function (inst, props, context) {
            !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;
            // Always set children to the same thing. In IE9, the selection range will
            // get reset if `textContent` is mutated.
            var nativeProps = assign({}, props, {
                defaultValue: undefined,
                value: undefined,
                children: inst._wrapperState.initialValue,
                onChange: inst._wrapperState.onChange
              });
            return nativeProps;
          },
          mountWrapper: function (inst, props) {
            if (process.env.NODE_ENV !== 'production') {
              LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
            }
            var defaultValue = props.defaultValue;
            // TODO (yungsters): Remove support for children content in <textarea>.
            var children = props.children;
            if (children != null) {
              if (process.env.NODE_ENV !== 'production') {
                process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
              }
              !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
              if (Array.isArray(children)) {
                !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
                children = children[0];
              }
              defaultValue = '' + children;
            }
            if (defaultValue == null) {
              defaultValue = '';
            }
            var value = LinkedValueUtils.getValue(props);
            inst._wrapperState = {
              initialValue: '' + (value != null ? value : defaultValue),
              onChange: _handleChange.bind(inst)
            };
          },
          updateWrapper: function (inst) {
            var props = inst._currentElement.props;
            var value = LinkedValueUtils.getValue(props);
            if (value != null) {
              // Cast `value` to a string to ensure the value is set correctly. While
              // browsers typically do this as necessary, jsdom doesn't.
              ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
            }
          }
        };
      function _handleChange(event) {
        var props = this._currentElement.props;
        var returnValue = LinkedValueUtils.executeOnChange(props, event);
        ReactUpdates.asap(forceUpdateIfMounted, this);
        return returnValue;
      }
      module.exports = ReactDOMTextarea;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */
      'use strict';
      var ReactComponentEnvironment = __webpack_require__(73);
      var ReactMultiChildUpdateTypes = __webpack_require__(25);
      var ReactCurrentOwner = __webpack_require__(14);
      var ReactReconciler = __webpack_require__(59);
      var ReactChildReconciler = __webpack_require__(124);
      var flattenChildren = __webpack_require__(125);
      /**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
      var updateDepth = 0;
      /**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
      var updateQueue = [];
      /**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
      var markupQueue = [];
      /**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
      function enqueueInsertMarkup(parentID, markup, toIndex) {
        // NOTE: Null values reduce hidden classes.
        updateQueue.push({
          parentID: parentID,
          parentNode: null,
          type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
          markupIndex: markupQueue.push(markup) - 1,
          content: null,
          fromIndex: null,
          toIndex: toIndex
        });
      }
      /**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
      function enqueueMove(parentID, fromIndex, toIndex) {
        // NOTE: Null values reduce hidden classes.
        updateQueue.push({
          parentID: parentID,
          parentNode: null,
          type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
          markupIndex: null,
          content: null,
          fromIndex: fromIndex,
          toIndex: toIndex
        });
      }
      /**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
      function enqueueRemove(parentID, fromIndex) {
        // NOTE: Null values reduce hidden classes.
        updateQueue.push({
          parentID: parentID,
          parentNode: null,
          type: ReactMultiChildUpdateTypes.REMOVE_NODE,
          markupIndex: null,
          content: null,
          fromIndex: fromIndex,
          toIndex: null
        });
      }
      /**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
      function enqueueSetMarkup(parentID, markup) {
        // NOTE: Null values reduce hidden classes.
        updateQueue.push({
          parentID: parentID,
          parentNode: null,
          type: ReactMultiChildUpdateTypes.SET_MARKUP,
          markupIndex: null,
          content: markup,
          fromIndex: null,
          toIndex: null
        });
      }
      /**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
      function enqueueTextContent(parentID, textContent) {
        // NOTE: Null values reduce hidden classes.
        updateQueue.push({
          parentID: parentID,
          parentNode: null,
          type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
          markupIndex: null,
          content: textContent,
          fromIndex: null,
          toIndex: null
        });
      }
      /**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
      function processQueue() {
        if (updateQueue.length) {
          ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
          clearQueue();
        }
      }
      /**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
      function clearQueue() {
        updateQueue.length = 0;
        markupQueue.length = 0;
      }
      /**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
      var ReactMultiChild = {
          Mixin: {
            _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
              if (process.env.NODE_ENV !== 'production') {
                if (this._currentElement) {
                  try {
                    ReactCurrentOwner.current = this._currentElement._owner;
                    return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
                  } finally {
                    ReactCurrentOwner.current = null;
                  }
                }
              }
              return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
            },
            _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
              var nextChildren;
              if (process.env.NODE_ENV !== 'production') {
                if (this._currentElement) {
                  try {
                    ReactCurrentOwner.current = this._currentElement._owner;
                    nextChildren = flattenChildren(nextNestedChildrenElements);
                  } finally {
                    ReactCurrentOwner.current = null;
                  }
                  return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
                }
              }
              nextChildren = flattenChildren(nextNestedChildrenElements);
              return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
            },
            mountChildren: function (nestedChildren, transaction, context) {
              var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
              this._renderedChildren = children;
              var mountImages = [];
              var index = 0;
              for (var name in children) {
                if (children.hasOwnProperty(name)) {
                  var child = children[name];
                  // Inlined for performance, see `ReactInstanceHandles.createReactID`.
                  var rootID = this._rootNodeID + name;
                  var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
                  child._mountIndex = index++;
                  mountImages.push(mountImage);
                }
              }
              return mountImages;
            },
            updateTextContent: function (nextContent) {
              updateDepth++;
              var errorThrown = true;
              try {
                var prevChildren = this._renderedChildren;
                // Remove any rendered children.
                ReactChildReconciler.unmountChildren(prevChildren);
                // TODO: The setTextContent operation should be enough
                for (var name in prevChildren) {
                  if (prevChildren.hasOwnProperty(name)) {
                    this._unmountChild(prevChildren[name]);
                  }
                }
                // Set new text content.
                this.setTextContent(nextContent);
                errorThrown = false;
              } finally {
                updateDepth--;
                if (!updateDepth) {
                  if (errorThrown) {
                    clearQueue();
                  } else {
                    processQueue();
                  }
                }
              }
            },
            updateMarkup: function (nextMarkup) {
              updateDepth++;
              var errorThrown = true;
              try {
                var prevChildren = this._renderedChildren;
                // Remove any rendered children.
                ReactChildReconciler.unmountChildren(prevChildren);
                for (var name in prevChildren) {
                  if (prevChildren.hasOwnProperty(name)) {
                    this._unmountChildByName(prevChildren[name], name);
                  }
                }
                this.setMarkup(nextMarkup);
                errorThrown = false;
              } finally {
                updateDepth--;
                if (!updateDepth) {
                  if (errorThrown) {
                    clearQueue();
                  } else {
                    processQueue();
                  }
                }
              }
            },
            updateChildren: function (nextNestedChildrenElements, transaction, context) {
              updateDepth++;
              var errorThrown = true;
              try {
                this._updateChildren(nextNestedChildrenElements, transaction, context);
                errorThrown = false;
              } finally {
                updateDepth--;
                if (!updateDepth) {
                  if (errorThrown) {
                    clearQueue();
                  } else {
                    processQueue();
                  }
                }
              }
            },
            _updateChildren: function (nextNestedChildrenElements, transaction, context) {
              var prevChildren = this._renderedChildren;
              var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
              this._renderedChildren = nextChildren;
              if (!nextChildren && !prevChildren) {
                return;
              }
              var name;
              // `nextIndex` will increment for each child in `nextChildren`, but
              // `lastIndex` will be the last index visited in `prevChildren`.
              var lastIndex = 0;
              var nextIndex = 0;
              for (name in nextChildren) {
                if (!nextChildren.hasOwnProperty(name)) {
                  continue;
                }
                var prevChild = prevChildren && prevChildren[name];
                var nextChild = nextChildren[name];
                if (prevChild === nextChild) {
                  this.moveChild(prevChild, nextIndex, lastIndex);
                  lastIndex = Math.max(prevChild._mountIndex, lastIndex);
                  prevChild._mountIndex = nextIndex;
                } else {
                  if (prevChild) {
                    // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
                    lastIndex = Math.max(prevChild._mountIndex, lastIndex);
                    this._unmountChild(prevChild);
                  }
                  // The child must be instantiated before it's mounted.
                  this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
                }
                nextIndex++;
              }
              // Remove children that are no longer present.
              for (name in prevChildren) {
                if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
                  this._unmountChild(prevChildren[name]);
                }
              }
            },
            unmountChildren: function () {
              var renderedChildren = this._renderedChildren;
              ReactChildReconciler.unmountChildren(renderedChildren);
              this._renderedChildren = null;
            },
            moveChild: function (child, toIndex, lastIndex) {
              // If the index of `child` is less than `lastIndex`, then it needs to
              // be moved. Otherwise, we do not need to move it because a child will be
              // inserted or moved before `child`.
              if (child._mountIndex < lastIndex) {
                enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
              }
            },
            createChild: function (child, mountImage) {
              enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
            },
            removeChild: function (child) {
              enqueueRemove(this._rootNodeID, child._mountIndex);
            },
            setTextContent: function (textContent) {
              enqueueTextContent(this._rootNodeID, textContent);
            },
            setMarkup: function (markup) {
              enqueueSetMarkup(this._rootNodeID, markup);
            },
            _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
              // Inlined for performance, see `ReactInstanceHandles.createReactID`.
              var rootID = this._rootNodeID + name;
              var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
              child._mountIndex = index;
              this.createChild(child, mountImage);
            },
            _unmountChild: function (child) {
              this.removeChild(child);
              child._mountIndex = null;
            }
          }
        };
      module.exports = ReactMultiChild;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */
      'use strict';
      var ReactReconciler = __webpack_require__(59);
      var instantiateReactComponent = __webpack_require__(71);
      var shouldUpdateReactComponent = __webpack_require__(76);
      var traverseAllChildren = __webpack_require__(120);
      var warning = __webpack_require__(34);
      function instantiateChild(childInstances, child, name) {
        // We found a component instance.
        var keyUnique = childInstances[name] === undefined;
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
        }
        if (child != null && keyUnique) {
          childInstances[name] = instantiateReactComponent(child, null);
        }
      }
      /**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
      var ReactChildReconciler = {
          instantiateChildren: function (nestedChildNodes, transaction, context) {
            if (nestedChildNodes == null) {
              return null;
            }
            var childInstances = {};
            traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
            return childInstances;
          },
          updateChildren: function (prevChildren, nextChildren, transaction, context) {
            // We currently don't have a way to track moves here but if we use iterators
            // instead of for..in we can zip the iterators and check if an item has
            // moved.
            // TODO: If nothing has changed, return the prevChildren object so that we
            // can quickly bailout if nothing has changed.
            if (!nextChildren && !prevChildren) {
              return null;
            }
            var name;
            for (name in nextChildren) {
              if (!nextChildren.hasOwnProperty(name)) {
                continue;
              }
              var prevChild = prevChildren && prevChildren[name];
              var prevElement = prevChild && prevChild._currentElement;
              var nextElement = nextChildren[name];
              if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
                ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
                nextChildren[name] = prevChild;
              } else {
                if (prevChild) {
                  ReactReconciler.unmountComponent(prevChild, name);
                }
                // The child must be instantiated before it's mounted.
                var nextChildInstance = instantiateReactComponent(nextElement, null);
                nextChildren[name] = nextChildInstance;
              }
            }
            // Unmount children that are no longer present.
            for (name in prevChildren) {
              if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
                ReactReconciler.unmountComponent(prevChildren[name]);
              }
            }
            return nextChildren;
          },
          unmountChildren: function (renderedChildren) {
            for (var name in renderedChildren) {
              if (renderedChildren.hasOwnProperty(name)) {
                var renderedChild = renderedChildren[name];
                ReactReconciler.unmountComponent(renderedChild);
              }
            }
          }
        };
      module.exports = ReactChildReconciler;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */
      'use strict';
      var traverseAllChildren = __webpack_require__(120);
      var warning = __webpack_require__(34);
      /**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
      function flattenSingleChildIntoContext(traverseContext, child, name) {
        // We found a component instance.
        var result = traverseContext;
        var keyUnique = result[name] === undefined;
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
        }
        if (keyUnique && child != null) {
          result[name] = child;
        }
      }
      /**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
      function flattenChildren(children) {
        if (children == null) {
          return children;
        }
        var result = {};
        traverseAllChildren(children, flattenSingleChildIntoContext, result);
        return result;
      }
      module.exports = flattenChildren;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */
    'use strict';
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    /**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
    function shallowEqual(objA, objB) {
      if (objA === objB) {
        return true;
      }
      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      // Test for A's keys different from B.
      var bHasOwnProperty = hasOwnProperty.bind(objB);
      for (var i = 0; i < keysA.length; i++) {
        if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
          return false;
        }
      }
      return true;
    }
    module.exports = shallowEqual;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */
    'use strict';
    var EventListener = __webpack_require__(128);
    var ExecutionEnvironment = __webpack_require__(18);
    var PooledClass = __webpack_require__(65);
    var ReactInstanceHandles = __webpack_require__(54);
    var ReactMount = __webpack_require__(37);
    var ReactUpdates = __webpack_require__(63);
    var assign = __webpack_require__(48);
    var getEventTarget = __webpack_require__(90);
    var getUnboundedScrollPosition = __webpack_require__(129);
    var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
    /**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
    function findParent(node) {
      // TODO: It may be a good idea to cache this to prevent unnecessary DOM
      // traversal, but caching is difficult to do correctly without using a
      // mutation observer to listen for all DOM changes.
      var nodeID = ReactMount.getID(node);
      var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
      var container = ReactMount.findReactContainerForID(rootID);
      var parent = ReactMount.getFirstReactDOM(container);
      return parent;
    }
    // Used to store ancestor hierarchy in top level callback
    function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
      this.topLevelType = topLevelType;
      this.nativeEvent = nativeEvent;
      this.ancestors = [];
    }
    assign(TopLevelCallbackBookKeeping.prototype, {
      destructor: function () {
        this.topLevelType = null;
        this.nativeEvent = null;
        this.ancestors.length = 0;
      }
    });
    PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
    function handleTopLevelImpl(bookKeeping) {
      // TODO: Re-enable event.path handling
      //
      // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
      //   // New browsers have a path attribute on native events
      //   handleTopLevelWithPath(bookKeeping);
      // } else {
      //   // Legacy browsers don't have a path attribute on native events
      //   handleTopLevelWithoutPath(bookKeeping);
      // }
      void handleTopLevelWithPath;
      // temporarily unused
      handleTopLevelWithoutPath(bookKeeping);
    }
    // Legacy browsers don't have a path attribute on native events
    function handleTopLevelWithoutPath(bookKeeping) {
      var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;
      // Loop through the hierarchy, in case there's any nested components.
      // It's important that we build the array of ancestors before calling any
      // event handlers, because event handlers can modify the DOM, leading to
      // inconsistencies with ReactMount's node cache. See #1105.
      var ancestor = topLevelTarget;
      while (ancestor) {
        bookKeeping.ancestors.push(ancestor);
        ancestor = findParent(ancestor);
      }
      for (var i = 0; i < bookKeeping.ancestors.length; i++) {
        topLevelTarget = bookKeeping.ancestors[i];
        var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
        ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
      }
    }
    // New browsers have a path attribute on native events
    function handleTopLevelWithPath(bookKeeping) {
      var path = bookKeeping.nativeEvent.path;
      var currentNativeTarget = path[0];
      var eventsFired = 0;
      for (var i = 0; i < path.length; i++) {
        var currentPathElement = path[i];
        if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
          currentNativeTarget = path[i + 1];
        }
        // TODO: slow
        var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
        if (reactParent === currentPathElement) {
          var currentPathElementID = ReactMount.getID(currentPathElement);
          var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
          bookKeeping.ancestors.push(currentPathElement);
          var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
          eventsFired++;
          ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);
          // Jump to the root of this React render tree
          while (currentPathElementID !== newRootID) {
            i++;
            currentPathElement = path[i];
            currentPathElementID = ReactMount.getID(currentPathElement);
          }
        }
      }
      if (eventsFired === 0) {
        ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
      }
    }
    function scrollValueMonitor(cb) {
      var scrollPosition = getUnboundedScrollPosition(window);
      cb(scrollPosition);
    }
    var ReactEventListener = {
        _enabled: true,
        _handleTopLevel: null,
        WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
        setHandleTopLevel: function (handleTopLevel) {
          ReactEventListener._handleTopLevel = handleTopLevel;
        },
        setEnabled: function (enabled) {
          ReactEventListener._enabled = !!enabled;
        },
        isEnabled: function () {
          return ReactEventListener._enabled;
        },
        trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
          var element = handle;
          if (!element) {
            return null;
          }
          return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
        },
        trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
          var element = handle;
          if (!element) {
            return null;
          }
          return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
        },
        monitorScrollValue: function (refresh) {
          var callback = scrollValueMonitor.bind(null, refresh);
          EventListener.listen(window, 'scroll', callback);
        },
        dispatchEvent: function (topLevelType, nativeEvent) {
          if (!ReactEventListener._enabled) {
            return;
          }
          var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
          try {
            // Event queue being processed in the same cycle allows
            // `preventDefault`.
            ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
          } finally {
            TopLevelCallbackBookKeeping.release(bookKeeping);
          }
        }
      };
    module.exports = ReactEventListener;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */
      'use strict';
      var emptyFunction = __webpack_require__(24);
      /**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
      var EventListener = {
          listen: function (target, eventType, callback) {
            if (target.addEventListener) {
              target.addEventListener(eventType, callback, false);
              return {
                remove: function () {
                  target.removeEventListener(eventType, callback, false);
                }
              };
            } else if (target.attachEvent) {
              target.attachEvent('on' + eventType, callback);
              return {
                remove: function () {
                  target.detachEvent('on' + eventType, callback);
                }
              };
            }
          },
          capture: function (target, eventType, callback) {
            if (target.addEventListener) {
              target.addEventListener(eventType, callback, true);
              return {
                remove: function () {
                  target.removeEventListener(eventType, callback, true);
                }
              };
            } else {
              if (process.env.NODE_ENV !== 'production') {
                console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
              }
              return { remove: emptyFunction };
            }
          },
          registerDefault: function () {
          }
        };
      module.exports = EventListener;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */
    'use strict';
    /**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
    function getUnboundedScrollPosition(scrollable) {
      if (scrollable === window) {
        return {
          x: window.pageXOffset || document.documentElement.scrollLeft,
          y: window.pageYOffset || document.documentElement.scrollTop
        };
      }
      return {
        x: scrollable.scrollLeft,
        y: scrollable.scrollTop
      };
    }
    module.exports = getUnboundedScrollPosition;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */
    'use strict';
    var DOMProperty = __webpack_require__(32);
    var EventPluginHub = __webpack_require__(40);
    var ReactComponentEnvironment = __webpack_require__(73);
    var ReactClass = __webpack_require__(131);
    var ReactEmptyComponent = __webpack_require__(77);
    var ReactBrowserEventEmitter = __webpack_require__(38);
    var ReactNativeComponent = __webpack_require__(78);
    var ReactPerf = __webpack_require__(27);
    var ReactRootIndex = __webpack_require__(55);
    var ReactUpdates = __webpack_require__(63);
    var ReactInjection = {
        Component: ReactComponentEnvironment.injection,
        Class: ReactClass.injection,
        DOMProperty: DOMProperty.injection,
        EmptyComponent: ReactEmptyComponent.injection,
        EventPluginHub: EventPluginHub.injection,
        EventEmitter: ReactBrowserEventEmitter.injection,
        NativeComponent: ReactNativeComponent.injection,
        Perf: ReactPerf.injection,
        RootIndex: ReactRootIndex.injection,
        Updates: ReactUpdates.injection
      };
    module.exports = ReactInjection;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */
      'use strict';
      var ReactComponent = __webpack_require__(132);
      var ReactElement = __webpack_require__(51);
      var ReactPropTypeLocations = __webpack_require__(74);
      var ReactPropTypeLocationNames = __webpack_require__(75);
      var ReactNoopUpdateQueue = __webpack_require__(133);
      var assign = __webpack_require__(48);
      var emptyObject = __webpack_require__(67);
      var invariant = __webpack_require__(22);
      var keyMirror = __webpack_require__(26);
      var keyOf = __webpack_require__(88);
      var warning = __webpack_require__(34);
      var MIXINS_KEY = keyOf({ mixins: null });
      /**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
      var SpecPolicy = keyMirror({
          DEFINE_ONCE: null,
          DEFINE_MANY: null,
          OVERRIDE_BASE: null,
          DEFINE_MANY_MERGED: null
        });
      var injectedMixins = [];
      var warnedSetProps = false;
      function warnSetProps() {
        if (!warnedSetProps) {
          warnedSetProps = true;
          process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
        }
      }
      /**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
      var ReactClassInterface = {
          mixins: SpecPolicy.DEFINE_MANY,
          statics: SpecPolicy.DEFINE_MANY,
          propTypes: SpecPolicy.DEFINE_MANY,
          contextTypes: SpecPolicy.DEFINE_MANY,
          childContextTypes: SpecPolicy.DEFINE_MANY,
          getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,
          getInitialState: SpecPolicy.DEFINE_MANY_MERGED,
          getChildContext: SpecPolicy.DEFINE_MANY_MERGED,
          render: SpecPolicy.DEFINE_ONCE,
          componentWillMount: SpecPolicy.DEFINE_MANY,
          componentDidMount: SpecPolicy.DEFINE_MANY,
          componentWillReceiveProps: SpecPolicy.DEFINE_MANY,
          shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,
          componentWillUpdate: SpecPolicy.DEFINE_MANY,
          componentDidUpdate: SpecPolicy.DEFINE_MANY,
          componentWillUnmount: SpecPolicy.DEFINE_MANY,
          updateComponent: SpecPolicy.OVERRIDE_BASE
        };
      /**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
      var RESERVED_SPEC_KEYS = {
          displayName: function (Constructor, displayName) {
            Constructor.displayName = displayName;
          },
          mixins: function (Constructor, mixins) {
            if (mixins) {
              for (var i = 0; i < mixins.length; i++) {
                mixSpecIntoComponent(Constructor, mixins[i]);
              }
            }
          },
          childContextTypes: function (Constructor, childContextTypes) {
            if (process.env.NODE_ENV !== 'production') {
              validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
            }
            Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
          },
          contextTypes: function (Constructor, contextTypes) {
            if (process.env.NODE_ENV !== 'production') {
              validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
            }
            Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
          },
          getDefaultProps: function (Constructor, getDefaultProps) {
            if (Constructor.getDefaultProps) {
              Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
            } else {
              Constructor.getDefaultProps = getDefaultProps;
            }
          },
          propTypes: function (Constructor, propTypes) {
            if (process.env.NODE_ENV !== 'production') {
              validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
            }
            Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
          },
          statics: function (Constructor, statics) {
            mixStaticSpecIntoComponent(Constructor, statics);
          },
          autobind: function () {
          }
        };
      // noop
      function validateTypeDef(Constructor, typeDef, location) {
        for (var propName in typeDef) {
          if (typeDef.hasOwnProperty(propName)) {
            // use a warning instead of an invariant so components
            // don't show up in prod but not in __DEV__
            process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
          }
        }
      }
      function validateMethodOverride(proto, name) {
        var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
        // Disallow overriding of base class methods unless explicitly allowed.
        if (ReactClassMixin.hasOwnProperty(name)) {
          !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
        }
        // Disallow defining methods more than once unless explicitly allowed.
        if (proto.hasOwnProperty(name)) {
          !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
        }
      }
      /**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
      function mixSpecIntoComponent(Constructor, spec) {
        if (!spec) {
          return;
        }
        !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
        !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
        var proto = Constructor.prototype;
        // By handling mixins before any other properties, we ensure the same
        // chaining order is applied to methods with DEFINE_MANY policy, whether
        // mixins are listed before or after these methods in the spec.
        if (spec.hasOwnProperty(MIXINS_KEY)) {
          RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
        }
        for (var name in spec) {
          if (!spec.hasOwnProperty(name)) {
            continue;
          }
          if (name === MIXINS_KEY) {
            // We have already handled mixins in a special case above.
            continue;
          }
          var property = spec[name];
          validateMethodOverride(proto, name);
          if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
            RESERVED_SPEC_KEYS[name](Constructor, property);
          } else {
            // Setup methods on prototype:
            // The following member methods should not be automatically bound:
            // 1. Expected ReactClass methods (in the "interface").
            // 2. Overridden methods (that were mixed in).
            var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
            var isAlreadyDefined = proto.hasOwnProperty(name);
            var isFunction = typeof property === 'function';
            var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
            if (shouldAutoBind) {
              if (!proto.__reactAutoBindMap) {
                proto.__reactAutoBindMap = {};
              }
              proto.__reactAutoBindMap[name] = property;
              proto[name] = property;
            } else {
              if (isAlreadyDefined) {
                var specPolicy = ReactClassInterface[name];
                // These cases should already be caught by validateMethodOverride.
                !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;
                // For methods which are defined more than once, call the existing
                // methods before calling the new property, merging if appropriate.
                if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
                  proto[name] = createMergedResultFunction(proto[name], property);
                } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
                  proto[name] = createChainedFunction(proto[name], property);
                }
              } else {
                proto[name] = property;
                if (process.env.NODE_ENV !== 'production') {
                  // Add verbose displayName to the function, which helps when looking
                  // at profiling tools.
                  if (typeof property === 'function' && spec.displayName) {
                    proto[name].displayName = spec.displayName + '_' + name;
                  }
                }
              }
            }
          }
        }
      }
      function mixStaticSpecIntoComponent(Constructor, statics) {
        if (!statics) {
          return;
        }
        for (var name in statics) {
          var property = statics[name];
          if (!statics.hasOwnProperty(name)) {
            continue;
          }
          var isReserved = name in RESERVED_SPEC_KEYS;
          !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;
          var isInherited = name in Constructor;
          !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
          Constructor[name] = property;
        }
      }
      /**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
      function mergeIntoWithNoDuplicateKeys(one, two) {
        !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;
        for (var key in two) {
          if (two.hasOwnProperty(key)) {
            !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
            one[key] = two[key];
          }
        }
        return one;
      }
      /**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
      function createMergedResultFunction(one, two) {
        return function mergedResult() {
          var a = one.apply(this, arguments);
          var b = two.apply(this, arguments);
          if (a == null) {
            return b;
          } else if (b == null) {
            return a;
          }
          var c = {};
          mergeIntoWithNoDuplicateKeys(c, a);
          mergeIntoWithNoDuplicateKeys(c, b);
          return c;
        };
      }
      /**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
      function createChainedFunction(one, two) {
        return function chainedFunction() {
          one.apply(this, arguments);
          two.apply(this, arguments);
        };
      }
      /**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
      function bindAutoBindMethod(component, method) {
        var boundMethod = method.bind(component);
        if (process.env.NODE_ENV !== 'production') {
          boundMethod.__reactBoundContext = component;
          boundMethod.__reactBoundMethod = method;
          boundMethod.__reactBoundArguments = null;
          var componentName = component.constructor.displayName;
          var _bind = boundMethod.bind;
          /* eslint-disable block-scoped-var, no-undef */
          boundMethod.bind = function (newThis) {
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            // User is trying to bind() an autobound method; we effectively will
            // ignore the value of "this" that the user is trying to use, so
            // let's warn.
            if (newThis !== component && newThis !== null) {
              process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
            } else if (!args.length) {
              process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
              return boundMethod;
            }
            var reboundMethod = _bind.apply(boundMethod, arguments);
            reboundMethod.__reactBoundContext = component;
            reboundMethod.__reactBoundMethod = method;
            reboundMethod.__reactBoundArguments = args;
            return reboundMethod;  /* eslint-enable */
          };
        }
        return boundMethod;
      }
      /**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
      function bindAutoBindMethods(component) {
        for (var autoBindKey in component.__reactAutoBindMap) {
          if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
            var method = component.__reactAutoBindMap[autoBindKey];
            component[autoBindKey] = bindAutoBindMethod(component, method);
          }
        }
      }
      /**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
      var ReactClassMixin = {
          replaceState: function (newState, callback) {
            this.updater.enqueueReplaceState(this, newState);
            if (callback) {
              this.updater.enqueueCallback(this, callback);
            }
          },
          isMounted: function () {
            return this.updater.isMounted(this);
          },
          setProps: function (partialProps, callback) {
            if (process.env.NODE_ENV !== 'production') {
              warnSetProps();
            }
            this.updater.enqueueSetProps(this, partialProps);
            if (callback) {
              this.updater.enqueueCallback(this, callback);
            }
          },
          replaceProps: function (newProps, callback) {
            if (process.env.NODE_ENV !== 'production') {
              warnSetProps();
            }
            this.updater.enqueueReplaceProps(this, newProps);
            if (callback) {
              this.updater.enqueueCallback(this, callback);
            }
          }
        };
      var ReactClassComponent = function () {
      };
      assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
      /**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
      var ReactClass = {
          createClass: function (spec) {
            var Constructor = function (props, context, updater) {
              // This constructor is overridden by mocks. The argument is used
              // by mocks to assert on what gets mounted.
              if (process.env.NODE_ENV !== 'production') {
                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
              }
              // Wire up auto-binding
              if (this.__reactAutoBindMap) {
                bindAutoBindMethods(this);
              }
              this.props = props;
              this.context = context;
              this.refs = emptyObject;
              this.updater = updater || ReactNoopUpdateQueue;
              this.state = null;
              // ReactClasses doesn't have constructors. Instead, they use the
              // getInitialState and componentWillMount methods for initialization.
              var initialState = this.getInitialState ? this.getInitialState() : null;
              if (process.env.NODE_ENV !== 'production') {
                // We allow auto-mocks to proceed as if they're returning null.
                if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
                  // This is probably bad practice. Consider warning here and
                  // deprecating this convenience.
                  initialState = null;
                }
              }
              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;
              this.state = initialState;
            };
            Constructor.prototype = new ReactClassComponent();
            Constructor.prototype.constructor = Constructor;
            injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
            mixSpecIntoComponent(Constructor, spec);
            // Initialize the defaultProps property after all mixins have been merged.
            if (Constructor.getDefaultProps) {
              Constructor.defaultProps = Constructor.getDefaultProps();
            }
            if (process.env.NODE_ENV !== 'production') {
              // This is a tag to indicate that the use of these method names is ok,
              // since it's used with createClass. If it's not, then it's likely a
              // mistake so we'll warn you to use the static property, property
              // initializer or constructor respectively.
              if (Constructor.getDefaultProps) {
                Constructor.getDefaultProps.isReactClassApproved = {};
              }
              if (Constructor.prototype.getInitialState) {
                Constructor.prototype.getInitialState.isReactClassApproved = {};
              }
            }
            !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;
            if (process.env.NODE_ENV !== 'production') {
              process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
              process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
            }
            // Reduce time spent doing lookups by setting these on the prototype.
            for (var methodName in ReactClassInterface) {
              if (!Constructor.prototype[methodName]) {
                Constructor.prototype[methodName] = null;
              }
            }
            return Constructor;
          },
          injection: {
            injectMixin: function (mixin) {
              injectedMixins.push(mixin);
            }
          }
        };
      module.exports = ReactClass;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */
      'use strict';
      var ReactNoopUpdateQueue = __webpack_require__(133);
      var canDefineProperty = __webpack_require__(52);
      var emptyObject = __webpack_require__(67);
      var invariant = __webpack_require__(22);
      var warning = __webpack_require__(34);
      /**
	 * Base class helpers for the updating state of a component.
	 */
      function ReactComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
      }
      ReactComponent.prototype.isReactComponent = {};
      /**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
      ReactComponent.prototype.setState = function (partialState, callback) {
        !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
        }
        this.updater.enqueueSetState(this, partialState);
        if (callback) {
          this.updater.enqueueCallback(this, callback);
        }
      };
      /**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
      ReactComponent.prototype.forceUpdate = function (callback) {
        this.updater.enqueueForceUpdate(this);
        if (callback) {
          this.updater.enqueueCallback(this, callback);
        }
      };
      /**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
      if (process.env.NODE_ENV !== 'production') {
        var deprecatedAPIs = {
            getDOMNode: [
              'getDOMNode',
              'Use ReactDOM.findDOMNode(component) instead.'
            ],
            isMounted: [
              'isMounted',
              'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'
            ],
            replaceProps: [
              'replaceProps',
              'Instead, call render again at the top level.'
            ],
            replaceState: [
              'replaceState',
              'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'
            ],
            setProps: [
              'setProps',
              'Instead, call render again at the top level.'
            ]
          };
        var defineDeprecationWarning = function (methodName, info) {
          if (canDefineProperty) {
            Object.defineProperty(ReactComponent.prototype, methodName, {
              get: function () {
                process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
                return undefined;
              }
            });
          }
        };
        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }
      module.exports = ReactComponent;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */
      'use strict';
      var warning = __webpack_require__(34);
      function warnTDZ(publicInstance, callerName) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
        }
      }
      /**
	 * This is the abstract API for an update queue.
	 */
      var ReactNoopUpdateQueue = {
          isMounted: function (publicInstance) {
            return false;
          },
          enqueueCallback: function (publicInstance, callback) {
          },
          enqueueForceUpdate: function (publicInstance) {
            warnTDZ(publicInstance, 'forceUpdate');
          },
          enqueueReplaceState: function (publicInstance, completeState) {
            warnTDZ(publicInstance, 'replaceState');
          },
          enqueueSetState: function (publicInstance, partialState) {
            warnTDZ(publicInstance, 'setState');
          },
          enqueueSetProps: function (publicInstance, partialProps) {
            warnTDZ(publicInstance, 'setProps');
          },
          enqueueReplaceProps: function (publicInstance, props) {
            warnTDZ(publicInstance, 'replaceProps');
          }
        };
      module.exports = ReactNoopUpdateQueue;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */
    'use strict';
    var CallbackQueue = __webpack_require__(64);
    var PooledClass = __webpack_require__(65);
    var ReactBrowserEventEmitter = __webpack_require__(38);
    var ReactDOMFeatureFlags = __webpack_require__(50);
    var ReactInputSelection = __webpack_require__(135);
    var Transaction = __webpack_require__(66);
    var assign = __webpack_require__(48);
    /**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
    var SELECTION_RESTORATION = {
        initialize: ReactInputSelection.getSelectionInformation,
        close: ReactInputSelection.restoreSelection
      };
    /**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
    var EVENT_SUPPRESSION = {
        initialize: function () {
          var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
          ReactBrowserEventEmitter.setEnabled(false);
          return currentlyEnabled;
        },
        close: function (previouslyEnabled) {
          ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
        }
      };
    /**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
    var ON_DOM_READY_QUEUEING = {
        initialize: function () {
          this.reactMountReady.reset();
        },
        close: function () {
          this.reactMountReady.notifyAll();
        }
      };
    /**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
    var TRANSACTION_WRAPPERS = [
        SELECTION_RESTORATION,
        EVENT_SUPPRESSION,
        ON_DOM_READY_QUEUEING
      ];
    /**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
    function ReactReconcileTransaction(forceHTML) {
      this.reinitializeTransaction();
      // Only server-side rendering really needs this option (see
      // `ReactServerRendering`), but server-side uses
      // `ReactServerRenderingTransaction` instead. This option is here so that it's
      // accessible and defaults to false when `ReactDOMComponent` and
      // `ReactTextComponent` checks it in `mountComponent`.`
      this.renderToStaticMarkup = false;
      this.reactMountReady = CallbackQueue.getPooled(null);
      this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
    }
    var Mixin = {
        getTransactionWrappers: function () {
          return TRANSACTION_WRAPPERS;
        },
        getReactMountReady: function () {
          return this.reactMountReady;
        },
        destructor: function () {
          CallbackQueue.release(this.reactMountReady);
          this.reactMountReady = null;
        }
      };
    assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);
    PooledClass.addPoolingTo(ReactReconcileTransaction);
    module.exports = ReactReconcileTransaction;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */
    'use strict';
    var ReactDOMSelection = __webpack_require__(136);
    var containsNode = __webpack_require__(68);
    var focusNode = __webpack_require__(104);
    var getActiveElement = __webpack_require__(138);
    function isInDocument(node) {
      return containsNode(document.documentElement, node);
    }
    /**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
    var ReactInputSelection = {
        hasSelectionCapabilities: function (elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
        },
        getSelectionInformation: function () {
          var focusedElem = getActiveElement();
          return {
            focusedElem: focusedElem,
            selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
          };
        },
        restoreSelection: function (priorSelectionInformation) {
          var curFocusedElem = getActiveElement();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
              ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
            }
            focusNode(priorFocusedElem);
          }
        },
        getSelection: function (input) {
          var selection;
          if ('selectionStart' in input) {
            // Modern browser with input or textarea.
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
            // IE8 input.
            var range = document.selection.createRange();
            // There can only be one selection per document in IE, so it must
            // be in our element.
            if (range.parentElement() === input) {
              selection = {
                start: -range.moveStart('character', -input.value.length),
                end: -range.moveEnd('character', -input.value.length)
              };
            }
          } else {
            // Content editable or old IE textarea.
            selection = ReactDOMSelection.getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        },
        setSelection: function (input, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (typeof end === 'undefined') {
            end = start;
          }
          if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
            var range = input.createTextRange();
            range.collapse(true);
            range.moveStart('character', start);
            range.moveEnd('character', end - start);
            range.select();
          } else {
            ReactDOMSelection.setOffsets(input, offsets);
          }
        }
      };
    module.exports = ReactInputSelection;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */
    'use strict';
    var ExecutionEnvironment = __webpack_require__(18);
    var getNodeForCharacterOffset = __webpack_require__(137);
    var getTextContentAccessor = __webpack_require__(84);
    /**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
    function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
      return anchorNode === focusNode && anchorOffset === focusOffset;
    }
    /**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
    function getIEOffsets(node) {
      var selection = document.selection;
      var selectedRange = selection.createRange();
      var selectedLength = selectedRange.text.length;
      // Duplicate selection so we can move range without breaking user selection.
      var fromStart = selectedRange.duplicate();
      fromStart.moveToElementText(node);
      fromStart.setEndPoint('EndToStart', selectedRange);
      var startOffset = fromStart.text.length;
      var endOffset = startOffset + selectedLength;
      return {
        start: startOffset,
        end: endOffset
      };
    }
    /**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
    function getModernOffsets(node) {
      var selection = window.getSelection && window.getSelection();
      if (!selection || selection.rangeCount === 0) {
        return null;
      }
      var anchorNode = selection.anchorNode;
      var anchorOffset = selection.anchorOffset;
      var focusNode = selection.focusNode;
      var focusOffset = selection.focusOffset;
      var currentRange = selection.getRangeAt(0);
      // In Firefox, range.startContainer and range.endContainer can be "anonymous
      // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
      // divs do not seem to expose properties, triggering a "Permission denied
      // error" if any of its properties are accessed. The only seemingly possible
      // way to avoid erroring is to access a property that typically works for
      // non-anonymous divs and catch any error that may otherwise arise. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
      try {
        /* eslint-disable no-unused-expressions */
        currentRange.startContainer.nodeType;
        currentRange.endContainer.nodeType;  /* eslint-enable no-unused-expressions */
      } catch (e) {
        return null;
      }
      // If the node and offset values are the same, the selection is collapsed.
      // `Selection.isCollapsed` is available natively, but IE sometimes gets
      // this value wrong.
      var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
      var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
      var tempRange = currentRange.cloneRange();
      tempRange.selectNodeContents(node);
      tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
      var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
      var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
      var end = start + rangeLength;
      // Detect whether the selection is backward.
      var detectionRange = document.createRange();
      detectionRange.setStart(anchorNode, anchorOffset);
      detectionRange.setEnd(focusNode, focusOffset);
      var isBackward = detectionRange.collapsed;
      return {
        start: isBackward ? end : start,
        end: isBackward ? start : end
      };
    }
    /**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
    function setIEOffsets(node, offsets) {
      var range = document.selection.createRange().duplicate();
      var start, end;
      if (typeof offsets.end === 'undefined') {
        start = offsets.start;
        end = start;
      } else if (offsets.start > offsets.end) {
        start = offsets.end;
        end = offsets.start;
      } else {
        start = offsets.start;
        end = offsets.end;
      }
      range.moveToElementText(node);
      range.moveStart('character', start);
      range.setEndPoint('EndToStart', range);
      range.moveEnd('character', end - start);
      range.select();
    }
    /**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
    function setModernOffsets(node, offsets) {
      if (!window.getSelection) {
        return;
      }
      var selection = window.getSelection();
      var length = node[getTextContentAccessor()].length;
      var start = Math.min(offsets.start, length);
      var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);
      // IE 11 uses modern selection, but doesn't support the extend method.
      // Flip backward selections, so we can set with a single range.
      if (!selection.extend && start > end) {
        var temp = end;
        end = start;
        start = temp;
      }
      var startMarker = getNodeForCharacterOffset(node, start);
      var endMarker = getNodeForCharacterOffset(node, end);
      if (startMarker && endMarker) {
        var range = document.createRange();
        range.setStart(startMarker.node, startMarker.offset);
        selection.removeAllRanges();
        if (start > end) {
          selection.addRange(range);
          selection.extend(endMarker.node, endMarker.offset);
        } else {
          range.setEnd(endMarker.node, endMarker.offset);
          selection.addRange(range);
        }
      }
    }
    var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
    var ReactDOMSelection = {
        getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
        setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
      };
    module.exports = ReactDOMSelection;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */
    'use strict';
    /**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
    function getLeafNode(node) {
      while (node && node.firstChild) {
        node = node.firstChild;
      }
      return node;
    }
    /**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
    function getSiblingNode(node) {
      while (node) {
        if (node.nextSibling) {
          return node.nextSibling;
        }
        node = node.parentNode;
      }
    }
    /**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
    function getNodeForCharacterOffset(root, offset) {
      var node = getLeafNode(root);
      var nodeStart = 0;
      var nodeEnd = 0;
      while (node) {
        if (node.nodeType === 3) {
          nodeEnd = nodeStart + node.textContent.length;
          if (nodeStart <= offset && nodeEnd >= offset) {
            return {
              node: node,
              offset: offset - nodeStart
            };
          }
          nodeStart = nodeEnd;
        }
        node = getLeafNode(getSiblingNode(node));
      }
    }
    module.exports = getNodeForCharacterOffset;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */
    /**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not yet defined.
	 */
    'use strict';
    function getActiveElement()
      /*?DOMElement*/
      {
        if (typeof document === 'undefined') {
          return null;
        }
        try {
          return document.activeElement || document.body;
        } catch (e) {
          return document.body;
        }
      }
    module.exports = getActiveElement;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */
    'use strict';
    var EventConstants = __webpack_require__(39);
    var EventPropagators = __webpack_require__(82);
    var ExecutionEnvironment = __webpack_require__(18);
    var ReactInputSelection = __webpack_require__(135);
    var SyntheticEvent = __webpack_require__(86);
    var getActiveElement = __webpack_require__(138);
    var isTextInputElement = __webpack_require__(91);
    var keyOf = __webpack_require__(88);
    var shallowEqual = __webpack_require__(126);
    var topLevelTypes = EventConstants.topLevelTypes;
    var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    var eventTypes = {
        select: {
          phasedRegistrationNames: {
            bubbled: keyOf({ onSelect: null }),
            captured: keyOf({ onSelectCapture: null })
          },
          dependencies: [
            topLevelTypes.topBlur,
            topLevelTypes.topContextMenu,
            topLevelTypes.topFocus,
            topLevelTypes.topKeyDown,
            topLevelTypes.topMouseDown,
            topLevelTypes.topMouseUp,
            topLevelTypes.topSelectionChange
          ]
        }
      };
    var activeElement = null;
    var activeElementID = null;
    var lastSelection = null;
    var mouseDown = false;
    // Track whether a listener exists for this plugin. If none exist, we do
    // not extract events.
    var hasListener = false;
    var ON_SELECT_KEY = keyOf({ onSelect: null });
    /**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
    function getSelection(node) {
      if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
        return {
          start: node.selectionStart,
          end: node.selectionEnd
        };
      } else if (window.getSelection) {
        var selection = window.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      } else if (document.selection) {
        var range = document.selection.createRange();
        return {
          parentElement: range.parentElement(),
          text: range.text,
          top: range.boundingTop,
          left: range.boundingLeft
        };
      }
    }
    /**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
    function constructSelectEvent(nativeEvent, nativeEventTarget) {
      // Ensure we have the right element, and that the user is not dragging a
      // selection (this matches native `select` event behavior). In HTML5, select
      // fires only on input and textarea thus if there's no focused element we
      // won't dispatch.
      if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
        return null;
      }
      // Only fire when selection has actually changed.
      var currentSelection = getSelection(activeElement);
      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
        lastSelection = currentSelection;
        var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);
        syntheticEvent.type = 'select';
        syntheticEvent.target = activeElement;
        EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
        return syntheticEvent;
      }
      return null;
    }
    /**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
    var SelectEventPlugin = {
        eventTypes: eventTypes,
        extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
          if (!hasListener) {
            return null;
          }
          switch (topLevelType) {
          // Track the input node that has focus.
          case topLevelTypes.topFocus:
            if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
              activeElement = topLevelTarget;
              activeElementID = topLevelTargetID;
              lastSelection = null;
            }
            break;
          case topLevelTypes.topBlur:
            activeElement = null;
            activeElementID = null;
            lastSelection = null;
            break;
          // Don't fire the event while the user is dragging. This matches the
          // semantics of the native select event.
          case topLevelTypes.topMouseDown:
            mouseDown = true;
            break;
          case topLevelTypes.topContextMenu:
          case topLevelTypes.topMouseUp:
            mouseDown = false;
            return constructSelectEvent(nativeEvent, nativeEventTarget);
          // Chrome and IE fire non-standard event when selection is changed (and
          // sometimes when it hasn't). IE's event fires out of order with respect
          // to key and input events on deletion, so we discard it.
          //
          // Firefox doesn't support selectionchange, so check selection status
          // after each key entry. The selection changes after keydown and before
          // keyup, but we check on keydown as well in the case of holding down a
          // key, when multiple keydown events are fired but only one keyup is.
          // This is also our approach for IE handling, for the reason above.
          case topLevelTypes.topSelectionChange:
            if (skipSelectionChangeEvent) {
              break;
            }
          // falls through
          case topLevelTypes.topKeyDown:
          case topLevelTypes.topKeyUp:
            return constructSelectEvent(nativeEvent, nativeEventTarget);
          }
          return null;
        },
        didPutListener: function (id, registrationName, listener) {
          if (registrationName === ON_SELECT_KEY) {
            hasListener = true;
          }
        }
      };
    module.exports = SelectEventPlugin;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */
    'use strict';
    /**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
    var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);
    var ServerReactRootIndex = {
        createReactRootIndex: function () {
          return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
        }
      };
    module.exports = ServerReactRootIndex;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */
      'use strict';
      var EventConstants = __webpack_require__(39);
      var EventListener = __webpack_require__(128);
      var EventPropagators = __webpack_require__(82);
      var ReactMount = __webpack_require__(37);
      var SyntheticClipboardEvent = __webpack_require__(142);
      var SyntheticEvent = __webpack_require__(86);
      var SyntheticFocusEvent = __webpack_require__(143);
      var SyntheticKeyboardEvent = __webpack_require__(144);
      var SyntheticMouseEvent = __webpack_require__(95);
      var SyntheticDragEvent = __webpack_require__(147);
      var SyntheticTouchEvent = __webpack_require__(148);
      var SyntheticUIEvent = __webpack_require__(96);
      var SyntheticWheelEvent = __webpack_require__(149);
      var emptyFunction = __webpack_require__(24);
      var getEventCharCode = __webpack_require__(145);
      var invariant = __webpack_require__(22);
      var keyOf = __webpack_require__(88);
      var topLevelTypes = EventConstants.topLevelTypes;
      var eventTypes = {
          abort: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onAbort: true }),
              captured: keyOf({ onAbortCapture: true })
            }
          },
          blur: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onBlur: true }),
              captured: keyOf({ onBlurCapture: true })
            }
          },
          canPlay: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onCanPlay: true }),
              captured: keyOf({ onCanPlayCapture: true })
            }
          },
          canPlayThrough: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onCanPlayThrough: true }),
              captured: keyOf({ onCanPlayThroughCapture: true })
            }
          },
          click: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onClick: true }),
              captured: keyOf({ onClickCapture: true })
            }
          },
          contextMenu: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onContextMenu: true }),
              captured: keyOf({ onContextMenuCapture: true })
            }
          },
          copy: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onCopy: true }),
              captured: keyOf({ onCopyCapture: true })
            }
          },
          cut: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onCut: true }),
              captured: keyOf({ onCutCapture: true })
            }
          },
          doubleClick: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onDoubleClick: true }),
              captured: keyOf({ onDoubleClickCapture: true })
            }
          },
          drag: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onDrag: true }),
              captured: keyOf({ onDragCapture: true })
            }
          },
          dragEnd: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onDragEnd: true }),
              captured: keyOf({ onDragEndCapture: true })
            }
          },
          dragEnter: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onDragEnter: true }),
              captured: keyOf({ onDragEnterCapture: true })
            }
          },
          dragExit: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onDragExit: true }),
              captured: keyOf({ onDragExitCapture: true })
            }
          },
          dragLeave: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onDragLeave: true }),
              captured: keyOf({ onDragLeaveCapture: true })
            }
          },
          dragOver: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onDragOver: true }),
              captured: keyOf({ onDragOverCapture: true })
            }
          },
          dragStart: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onDragStart: true }),
              captured: keyOf({ onDragStartCapture: true })
            }
          },
          drop: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onDrop: true }),
              captured: keyOf({ onDropCapture: true })
            }
          },
          durationChange: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onDurationChange: true }),
              captured: keyOf({ onDurationChangeCapture: true })
            }
          },
          emptied: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onEmptied: true }),
              captured: keyOf({ onEmptiedCapture: true })
            }
          },
          encrypted: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onEncrypted: true }),
              captured: keyOf({ onEncryptedCapture: true })
            }
          },
          ended: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onEnded: true }),
              captured: keyOf({ onEndedCapture: true })
            }
          },
          error: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onError: true }),
              captured: keyOf({ onErrorCapture: true })
            }
          },
          focus: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onFocus: true }),
              captured: keyOf({ onFocusCapture: true })
            }
          },
          input: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onInput: true }),
              captured: keyOf({ onInputCapture: true })
            }
          },
          keyDown: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onKeyDown: true }),
              captured: keyOf({ onKeyDownCapture: true })
            }
          },
          keyPress: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onKeyPress: true }),
              captured: keyOf({ onKeyPressCapture: true })
            }
          },
          keyUp: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onKeyUp: true }),
              captured: keyOf({ onKeyUpCapture: true })
            }
          },
          load: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onLoad: true }),
              captured: keyOf({ onLoadCapture: true })
            }
          },
          loadedData: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onLoadedData: true }),
              captured: keyOf({ onLoadedDataCapture: true })
            }
          },
          loadedMetadata: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onLoadedMetadata: true }),
              captured: keyOf({ onLoadedMetadataCapture: true })
            }
          },
          loadStart: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onLoadStart: true }),
              captured: keyOf({ onLoadStartCapture: true })
            }
          },
          mouseDown: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onMouseDown: true }),
              captured: keyOf({ onMouseDownCapture: true })
            }
          },
          mouseMove: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onMouseMove: true }),
              captured: keyOf({ onMouseMoveCapture: true })
            }
          },
          mouseOut: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onMouseOut: true }),
              captured: keyOf({ onMouseOutCapture: true })
            }
          },
          mouseOver: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onMouseOver: true }),
              captured: keyOf({ onMouseOverCapture: true })
            }
          },
          mouseUp: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onMouseUp: true }),
              captured: keyOf({ onMouseUpCapture: true })
            }
          },
          paste: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onPaste: true }),
              captured: keyOf({ onPasteCapture: true })
            }
          },
          pause: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onPause: true }),
              captured: keyOf({ onPauseCapture: true })
            }
          },
          play: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onPlay: true }),
              captured: keyOf({ onPlayCapture: true })
            }
          },
          playing: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onPlaying: true }),
              captured: keyOf({ onPlayingCapture: true })
            }
          },
          progress: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onProgress: true }),
              captured: keyOf({ onProgressCapture: true })
            }
          },
          rateChange: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onRateChange: true }),
              captured: keyOf({ onRateChangeCapture: true })
            }
          },
          reset: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onReset: true }),
              captured: keyOf({ onResetCapture: true })
            }
          },
          scroll: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onScroll: true }),
              captured: keyOf({ onScrollCapture: true })
            }
          },
          seeked: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onSeeked: true }),
              captured: keyOf({ onSeekedCapture: true })
            }
          },
          seeking: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onSeeking: true }),
              captured: keyOf({ onSeekingCapture: true })
            }
          },
          stalled: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onStalled: true }),
              captured: keyOf({ onStalledCapture: true })
            }
          },
          submit: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onSubmit: true }),
              captured: keyOf({ onSubmitCapture: true })
            }
          },
          suspend: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onSuspend: true }),
              captured: keyOf({ onSuspendCapture: true })
            }
          },
          timeUpdate: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onTimeUpdate: true }),
              captured: keyOf({ onTimeUpdateCapture: true })
            }
          },
          touchCancel: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onTouchCancel: true }),
              captured: keyOf({ onTouchCancelCapture: true })
            }
          },
          touchEnd: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onTouchEnd: true }),
              captured: keyOf({ onTouchEndCapture: true })
            }
          },
          touchMove: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onTouchMove: true }),
              captured: keyOf({ onTouchMoveCapture: true })
            }
          },
          touchStart: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onTouchStart: true }),
              captured: keyOf({ onTouchStartCapture: true })
            }
          },
          volumeChange: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onVolumeChange: true }),
              captured: keyOf({ onVolumeChangeCapture: true })
            }
          },
          waiting: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onWaiting: true }),
              captured: keyOf({ onWaitingCapture: true })
            }
          },
          wheel: {
            phasedRegistrationNames: {
              bubbled: keyOf({ onWheel: true }),
              captured: keyOf({ onWheelCapture: true })
            }
          }
        };
      var topLevelEventsToDispatchConfig = {
          topAbort: eventTypes.abort,
          topBlur: eventTypes.blur,
          topCanPlay: eventTypes.canPlay,
          topCanPlayThrough: eventTypes.canPlayThrough,
          topClick: eventTypes.click,
          topContextMenu: eventTypes.contextMenu,
          topCopy: eventTypes.copy,
          topCut: eventTypes.cut,
          topDoubleClick: eventTypes.doubleClick,
          topDrag: eventTypes.drag,
          topDragEnd: eventTypes.dragEnd,
          topDragEnter: eventTypes.dragEnter,
          topDragExit: eventTypes.dragExit,
          topDragLeave: eventTypes.dragLeave,
          topDragOver: eventTypes.dragOver,
          topDragStart: eventTypes.dragStart,
          topDrop: eventTypes.drop,
          topDurationChange: eventTypes.durationChange,
          topEmptied: eventTypes.emptied,
          topEncrypted: eventTypes.encrypted,
          topEnded: eventTypes.ended,
          topError: eventTypes.error,
          topFocus: eventTypes.focus,
          topInput: eventTypes.input,
          topKeyDown: eventTypes.keyDown,
          topKeyPress: eventTypes.keyPress,
          topKeyUp: eventTypes.keyUp,
          topLoad: eventTypes.load,
          topLoadedData: eventTypes.loadedData,
          topLoadedMetadata: eventTypes.loadedMetadata,
          topLoadStart: eventTypes.loadStart,
          topMouseDown: eventTypes.mouseDown,
          topMouseMove: eventTypes.mouseMove,
          topMouseOut: eventTypes.mouseOut,
          topMouseOver: eventTypes.mouseOver,
          topMouseUp: eventTypes.mouseUp,
          topPaste: eventTypes.paste,
          topPause: eventTypes.pause,
          topPlay: eventTypes.play,
          topPlaying: eventTypes.playing,
          topProgress: eventTypes.progress,
          topRateChange: eventTypes.rateChange,
          topReset: eventTypes.reset,
          topScroll: eventTypes.scroll,
          topSeeked: eventTypes.seeked,
          topSeeking: eventTypes.seeking,
          topStalled: eventTypes.stalled,
          topSubmit: eventTypes.submit,
          topSuspend: eventTypes.suspend,
          topTimeUpdate: eventTypes.timeUpdate,
          topTouchCancel: eventTypes.touchCancel,
          topTouchEnd: eventTypes.touchEnd,
          topTouchMove: eventTypes.touchMove,
          topTouchStart: eventTypes.touchStart,
          topVolumeChange: eventTypes.volumeChange,
          topWaiting: eventTypes.waiting,
          topWheel: eventTypes.wheel
        };
      for (var type in topLevelEventsToDispatchConfig) {
        topLevelEventsToDispatchConfig[type].dependencies = [type];
      }
      var ON_CLICK_KEY = keyOf({ onClick: null });
      var onClickListeners = {};
      var SimpleEventPlugin = {
          eventTypes: eventTypes,
          extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
            var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
            if (!dispatchConfig) {
              return null;
            }
            var EventConstructor;
            switch (topLevelType) {
            case topLevelTypes.topAbort:
            case topLevelTypes.topCanPlay:
            case topLevelTypes.topCanPlayThrough:
            case topLevelTypes.topDurationChange:
            case topLevelTypes.topEmptied:
            case topLevelTypes.topEncrypted:
            case topLevelTypes.topEnded:
            case topLevelTypes.topError:
            case topLevelTypes.topInput:
            case topLevelTypes.topLoad:
            case topLevelTypes.topLoadedData:
            case topLevelTypes.topLoadedMetadata:
            case topLevelTypes.topLoadStart:
            case topLevelTypes.topPause:
            case topLevelTypes.topPlay:
            case topLevelTypes.topPlaying:
            case topLevelTypes.topProgress:
            case topLevelTypes.topRateChange:
            case topLevelTypes.topReset:
            case topLevelTypes.topSeeked:
            case topLevelTypes.topSeeking:
            case topLevelTypes.topStalled:
            case topLevelTypes.topSubmit:
            case topLevelTypes.topSuspend:
            case topLevelTypes.topTimeUpdate:
            case topLevelTypes.topVolumeChange:
            case topLevelTypes.topWaiting:
              // HTML Events
              // @see http://www.w3.org/TR/html5/index.html#events-0
              EventConstructor = SyntheticEvent;
              break;
            case topLevelTypes.topKeyPress:
              // FireFox creates a keypress event for function keys too. This removes
              // the unwanted keypress events. Enter is however both printable and
              // non-printable. One would expect Tab to be as well (but it isn't).
              if (getEventCharCode(nativeEvent) === 0) {
                return null;
              }
            /* falls through */
            case topLevelTypes.topKeyDown:
            case topLevelTypes.topKeyUp:
              EventConstructor = SyntheticKeyboardEvent;
              break;
            case topLevelTypes.topBlur:
            case topLevelTypes.topFocus:
              EventConstructor = SyntheticFocusEvent;
              break;
            case topLevelTypes.topClick:
              // Firefox creates a click event on right mouse clicks. This removes the
              // unwanted click events.
              if (nativeEvent.button === 2) {
                return null;
              }
            /* falls through */
            case topLevelTypes.topContextMenu:
            case topLevelTypes.topDoubleClick:
            case topLevelTypes.topMouseDown:
            case topLevelTypes.topMouseMove:
            case topLevelTypes.topMouseOut:
            case topLevelTypes.topMouseOver:
            case topLevelTypes.topMouseUp:
              EventConstructor = SyntheticMouseEvent;
              break;
            case topLevelTypes.topDrag:
            case topLevelTypes.topDragEnd:
            case topLevelTypes.topDragEnter:
            case topLevelTypes.topDragExit:
            case topLevelTypes.topDragLeave:
            case topLevelTypes.topDragOver:
            case topLevelTypes.topDragStart:
            case topLevelTypes.topDrop:
              EventConstructor = SyntheticDragEvent;
              break;
            case topLevelTypes.topTouchCancel:
            case topLevelTypes.topTouchEnd:
            case topLevelTypes.topTouchMove:
            case topLevelTypes.topTouchStart:
              EventConstructor = SyntheticTouchEvent;
              break;
            case topLevelTypes.topScroll:
              EventConstructor = SyntheticUIEvent;
              break;
            case topLevelTypes.topWheel:
              EventConstructor = SyntheticWheelEvent;
              break;
            case topLevelTypes.topCopy:
            case topLevelTypes.topCut:
            case topLevelTypes.topPaste:
              EventConstructor = SyntheticClipboardEvent;
              break;
            }
            !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
            var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
            EventPropagators.accumulateTwoPhaseDispatches(event);
            return event;
          },
          didPutListener: function (id, registrationName, listener) {
            // Mobile Safari does not fire properly bubble click events on
            // non-interactive elements, which means delegated click listeners do not
            // fire. The workaround for this bug involves attaching an empty click
            // listener on the target node.
            if (registrationName === ON_CLICK_KEY) {
              var node = ReactMount.getNode(id);
              if (!onClickListeners[id]) {
                onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
              }
            }
          },
          willDeleteListener: function (id, registrationName) {
            if (registrationName === ON_CLICK_KEY) {
              onClickListeners[id].remove();
              delete onClickListeners[id];
            }
          }
        };
      module.exports = SimpleEventPlugin;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */
    'use strict';
    var SyntheticEvent = __webpack_require__(86);
    /**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
    var ClipboardEventInterface = {
        clipboardData: function (event) {
          return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
      };
    /**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
    function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }
    SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
    module.exports = SyntheticClipboardEvent;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */
    'use strict';
    var SyntheticUIEvent = __webpack_require__(96);
    /**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
    var FocusEventInterface = { relatedTarget: null };
    /**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
    function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }
    SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
    module.exports = SyntheticFocusEvent;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */
    'use strict';
    var SyntheticUIEvent = __webpack_require__(96);
    var getEventCharCode = __webpack_require__(145);
    var getEventKey = __webpack_require__(146);
    var getEventModifierState = __webpack_require__(97);
    /**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
    var KeyboardEventInterface = {
        key: getEventKey,
        location: null,
        ctrlKey: null,
        shiftKey: null,
        altKey: null,
        metaKey: null,
        repeat: null,
        locale: null,
        getModifierState: getEventModifierState,
        charCode: function (event) {
          // `charCode` is the result of a KeyPress event and represents the value of
          // the actual printable character.
          // KeyPress is deprecated, but its replacement is not yet final and not
          // implemented in any major browser. Only KeyPress has charCode.
          if (event.type === 'keypress') {
            return getEventCharCode(event);
          }
          return 0;
        },
        keyCode: function (event) {
          // `keyCode` is the result of a KeyDown/Up event and represents the value of
          // physical keyboard key.
          // The actual meaning of the value depends on the users' keyboard layout
          // which cannot be detected. Assuming that it is a US keyboard layout
          // provides a surprisingly accurate mapping for US and European users.
          // Due to this, it is left to the user to implement at this time.
          if (event.type === 'keydown' || event.type === 'keyup') {
            return event.keyCode;
          }
          return 0;
        },
        which: function (event) {
          // `which` is an alias for either `keyCode` or `charCode` depending on the
          // type of the event.
          if (event.type === 'keypress') {
            return getEventCharCode(event);
          }
          if (event.type === 'keydown' || event.type === 'keyup') {
            return event.keyCode;
          }
          return 0;
        }
      };
    /**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
    function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }
    SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
    module.exports = SyntheticKeyboardEvent;  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */
    'use strict';
    /**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
    function getEventCharCode(nativeEvent) {
      var charCode;
      var keyCode = nativeEvent.keyCode;
      if ('charCode' in nativeEvent) {
        charCode = nativeEvent.charCode;
        // FF does not set `charCode` for the Enter-key, check against `keyCode`.
        if (charCode === 0 && keyCode === 13) {
          charCode = 13;
        }
      } else {
        // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
      }
      // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
      // Must not discard the (non-)printable Enter-key.
      if (charCode >= 32 || charCode === 13) {
        return charCode;
      }
      return 0;
    }
    module.exports = getEventCharCode;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */
    'use strict';
    var getEventCharCode = __webpack_require__(145);
    /**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
    var normalizeKey = {
        'Esc': 'Escape',
        'Spacebar': ' ',
        'Left': 'ArrowLeft',
        'Up': 'ArrowUp',
        'Right': 'ArrowRight',
        'Down': 'ArrowDown',
        'Del': 'Delete',
        'Win': 'OS',
        'Menu': 'ContextMenu',
        'Apps': 'ContextMenu',
        'Scroll': 'ScrollLock',
        'MozPrintableKey': 'Unidentified'
      };
    /**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
    var translateToKey = {
        8: 'Backspace',
        9: 'Tab',
        12: 'Clear',
        13: 'Enter',
        16: 'Shift',
        17: 'Control',
        18: 'Alt',
        19: 'Pause',
        20: 'CapsLock',
        27: 'Escape',
        32: ' ',
        33: 'PageUp',
        34: 'PageDown',
        35: 'End',
        36: 'Home',
        37: 'ArrowLeft',
        38: 'ArrowUp',
        39: 'ArrowRight',
        40: 'ArrowDown',
        45: 'Insert',
        46: 'Delete',
        112: 'F1',
        113: 'F2',
        114: 'F3',
        115: 'F4',
        116: 'F5',
        117: 'F6',
        118: 'F7',
        119: 'F8',
        120: 'F9',
        121: 'F10',
        122: 'F11',
        123: 'F12',
        144: 'NumLock',
        145: 'ScrollLock',
        224: 'Meta'
      };
    /**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
    function getEventKey(nativeEvent) {
      if (nativeEvent.key) {
        // Normalize inconsistent values reported by browsers due to
        // implementations of a working draft specification.
        // FireFox implements `key` but returns `MozPrintableKey` for all
        // printable characters (normalized to `Unidentified`), ignore it.
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
        if (key !== 'Unidentified') {
          return key;
        }
      }
      // Browser does not implement `key`, polyfill as much of it as we can.
      if (nativeEvent.type === 'keypress') {
        var charCode = getEventCharCode(nativeEvent);
        // The enter-key is technically both printable and non-printable and can
        // thus be captured by `keypress`, no other non-printable key should.
        return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
      }
      if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
        // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
      }
      return '';
    }
    module.exports = getEventKey;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */
    'use strict';
    var SyntheticMouseEvent = __webpack_require__(95);
    /**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
    var DragEventInterface = { dataTransfer: null };
    /**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
    function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }
    SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
    module.exports = SyntheticDragEvent;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */
    'use strict';
    var SyntheticUIEvent = __webpack_require__(96);
    var getEventModifierState = __webpack_require__(97);
    /**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
    var TouchEventInterface = {
        touches: null,
        targetTouches: null,
        changedTouches: null,
        altKey: null,
        metaKey: null,
        ctrlKey: null,
        shiftKey: null,
        getModifierState: getEventModifierState
      };
    /**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
    function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }
    SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
    module.exports = SyntheticTouchEvent;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */
    'use strict';
    var SyntheticMouseEvent = __webpack_require__(95);
    /**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
    var WheelEventInterface = {
        deltaX: function (event) {
          return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function (event) {
          return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: null,
        deltaMode: null
      };
    /**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
    function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
      SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
    }
    SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
    module.exports = SyntheticWheelEvent;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */
    'use strict';
    var DOMProperty = __webpack_require__(32);
    var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
    var NS = {
        xlink: 'http://www.w3.org/1999/xlink',
        xml: 'http://www.w3.org/XML/1998/namespace'
      };
    var SVGDOMPropertyConfig = {
        Properties: {
          clipPath: MUST_USE_ATTRIBUTE,
          cx: MUST_USE_ATTRIBUTE,
          cy: MUST_USE_ATTRIBUTE,
          d: MUST_USE_ATTRIBUTE,
          dx: MUST_USE_ATTRIBUTE,
          dy: MUST_USE_ATTRIBUTE,
          fill: MUST_USE_ATTRIBUTE,
          fillOpacity: MUST_USE_ATTRIBUTE,
          fontFamily: MUST_USE_ATTRIBUTE,
          fontSize: MUST_USE_ATTRIBUTE,
          fx: MUST_USE_ATTRIBUTE,
          fy: MUST_USE_ATTRIBUTE,
          gradientTransform: MUST_USE_ATTRIBUTE,
          gradientUnits: MUST_USE_ATTRIBUTE,
          markerEnd: MUST_USE_ATTRIBUTE,
          markerMid: MUST_USE_ATTRIBUTE,
          markerStart: MUST_USE_ATTRIBUTE,
          offset: MUST_USE_ATTRIBUTE,
          opacity: MUST_USE_ATTRIBUTE,
          patternContentUnits: MUST_USE_ATTRIBUTE,
          patternUnits: MUST_USE_ATTRIBUTE,
          points: MUST_USE_ATTRIBUTE,
          preserveAspectRatio: MUST_USE_ATTRIBUTE,
          r: MUST_USE_ATTRIBUTE,
          rx: MUST_USE_ATTRIBUTE,
          ry: MUST_USE_ATTRIBUTE,
          spreadMethod: MUST_USE_ATTRIBUTE,
          stopColor: MUST_USE_ATTRIBUTE,
          stopOpacity: MUST_USE_ATTRIBUTE,
          stroke: MUST_USE_ATTRIBUTE,
          strokeDasharray: MUST_USE_ATTRIBUTE,
          strokeLinecap: MUST_USE_ATTRIBUTE,
          strokeOpacity: MUST_USE_ATTRIBUTE,
          strokeWidth: MUST_USE_ATTRIBUTE,
          textAnchor: MUST_USE_ATTRIBUTE,
          transform: MUST_USE_ATTRIBUTE,
          version: MUST_USE_ATTRIBUTE,
          viewBox: MUST_USE_ATTRIBUTE,
          x1: MUST_USE_ATTRIBUTE,
          x2: MUST_USE_ATTRIBUTE,
          x: MUST_USE_ATTRIBUTE,
          xlinkActuate: MUST_USE_ATTRIBUTE,
          xlinkArcrole: MUST_USE_ATTRIBUTE,
          xlinkHref: MUST_USE_ATTRIBUTE,
          xlinkRole: MUST_USE_ATTRIBUTE,
          xlinkShow: MUST_USE_ATTRIBUTE,
          xlinkTitle: MUST_USE_ATTRIBUTE,
          xlinkType: MUST_USE_ATTRIBUTE,
          xmlBase: MUST_USE_ATTRIBUTE,
          xmlLang: MUST_USE_ATTRIBUTE,
          xmlSpace: MUST_USE_ATTRIBUTE,
          y1: MUST_USE_ATTRIBUTE,
          y2: MUST_USE_ATTRIBUTE,
          y: MUST_USE_ATTRIBUTE
        },
        DOMAttributeNamespaces: {
          xlinkActuate: NS.xlink,
          xlinkArcrole: NS.xlink,
          xlinkHref: NS.xlink,
          xlinkRole: NS.xlink,
          xlinkShow: NS.xlink,
          xlinkTitle: NS.xlink,
          xlinkType: NS.xlink,
          xmlBase: NS.xml,
          xmlLang: NS.xml,
          xmlSpace: NS.xml
        },
        DOMAttributeNames: {
          clipPath: 'clip-path',
          fillOpacity: 'fill-opacity',
          fontFamily: 'font-family',
          fontSize: 'font-size',
          gradientTransform: 'gradientTransform',
          gradientUnits: 'gradientUnits',
          markerEnd: 'marker-end',
          markerMid: 'marker-mid',
          markerStart: 'marker-start',
          patternContentUnits: 'patternContentUnits',
          patternUnits: 'patternUnits',
          preserveAspectRatio: 'preserveAspectRatio',
          spreadMethod: 'spreadMethod',
          stopColor: 'stop-color',
          stopOpacity: 'stop-opacity',
          strokeDasharray: 'stroke-dasharray',
          strokeLinecap: 'stroke-linecap',
          strokeOpacity: 'stroke-opacity',
          strokeWidth: 'stroke-width',
          textAnchor: 'text-anchor',
          viewBox: 'viewBox',
          xlinkActuate: 'xlink:actuate',
          xlinkArcrole: 'xlink:arcrole',
          xlinkHref: 'xlink:href',
          xlinkRole: 'xlink:role',
          xlinkShow: 'xlink:show',
          xlinkTitle: 'xlink:title',
          xlinkType: 'xlink:type',
          xmlBase: 'xml:base',
          xmlLang: 'xml:lang',
          xmlSpace: 'xml:space'
        }
      };
    module.exports = SVGDOMPropertyConfig;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */
    'use strict';
    var DOMProperty = __webpack_require__(32);
    var ReactDefaultPerfAnalysis = __webpack_require__(152);
    var ReactMount = __webpack_require__(37);
    var ReactPerf = __webpack_require__(27);
    var performanceNow = __webpack_require__(153);
    function roundFloat(val) {
      return Math.floor(val * 100) / 100;
    }
    function addValue(obj, key, val) {
      obj[key] = (obj[key] || 0) + val;
    }
    var ReactDefaultPerf = {
        _allMeasurements: [],
        _mountStack: [0],
        _injected: false,
        start: function () {
          if (!ReactDefaultPerf._injected) {
            ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
          }
          ReactDefaultPerf._allMeasurements.length = 0;
          ReactPerf.enableMeasure = true;
        },
        stop: function () {
          ReactPerf.enableMeasure = false;
        },
        getLastMeasurements: function () {
          return ReactDefaultPerf._allMeasurements;
        },
        printExclusive: function (measurements) {
          measurements = measurements || ReactDefaultPerf._allMeasurements;
          var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
          console.table(summary.map(function (item) {
            return {
              'Component class name': item.componentName,
              'Total inclusive time (ms)': roundFloat(item.inclusive),
              'Exclusive mount time (ms)': roundFloat(item.exclusive),
              'Exclusive render time (ms)': roundFloat(item.render),
              'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
              'Render time per instance (ms)': roundFloat(item.render / item.count),
              'Instances': item.count
            };
          }));  // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
                // number.
        },
        printInclusive: function (measurements) {
          measurements = measurements || ReactDefaultPerf._allMeasurements;
          var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
          console.table(summary.map(function (item) {
            return {
              'Owner > component': item.componentName,
              'Inclusive time (ms)': roundFloat(item.time),
              'Instances': item.count
            };
          }));
          console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
        },
        getMeasurementsSummaryMap: function (measurements) {
          var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
          return summary.map(function (item) {
            return {
              'Owner > component': item.componentName,
              'Wasted time (ms)': item.time,
              'Instances': item.count
            };
          });
        },
        printWasted: function (measurements) {
          measurements = measurements || ReactDefaultPerf._allMeasurements;
          console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
          console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
        },
        printDOM: function (measurements) {
          measurements = measurements || ReactDefaultPerf._allMeasurements;
          var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
          console.table(summary.map(function (item) {
            var result = {};
            result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
            result.type = item.type;
            result.args = JSON.stringify(item.args);
            return result;
          }));
          console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
        },
        _recordWrite: function (id, fnName, totalTime, args) {
          // TODO: totalTime isn't that useful since it doesn't count paints/reflows
          var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
          writes[id] = writes[id] || [];
          writes[id].push({
            type: fnName,
            time: totalTime,
            args: args
          });
        },
        measure: function (moduleName, fnName, func) {
          return function () {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            var totalTime;
            var rv;
            var start;
            if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
              // A "measurement" is a set of metrics recorded for each flush. We want
              // to group the metrics for a given flush together so we can look at the
              // components that rendered and the DOM operations that actually
              // happened to determine the amount of "wasted work" performed.
              ReactDefaultPerf._allMeasurements.push({
                exclusive: {},
                inclusive: {},
                render: {},
                counts: {},
                writes: {},
                displayNames: {},
                totalTime: 0,
                created: {}
              });
              start = performanceNow();
              rv = func.apply(this, args);
              ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
              return rv;
            } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
              start = performanceNow();
              rv = func.apply(this, args);
              totalTime = performanceNow() - start;
              if (fnName === '_mountImageIntoNode') {
                var mountID = ReactMount.getID(args[1]);
                ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
              } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
                // special format
                args[0].forEach(function (update) {
                  var writeArgs = {};
                  if (update.fromIndex !== null) {
                    writeArgs.fromIndex = update.fromIndex;
                  }
                  if (update.toIndex !== null) {
                    writeArgs.toIndex = update.toIndex;
                  }
                  if (update.textContent !== null) {
                    writeArgs.textContent = update.textContent;
                  }
                  if (update.markupIndex !== null) {
                    writeArgs.markup = args[1][update.markupIndex];
                  }
                  ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
                });
              } else {
                // basic format
                var id = args[0];
                if (typeof id === 'object') {
                  id = ReactMount.getID(args[0]);
                }
                ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
              }
              return rv;
            } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || fnName === '_renderValidatedComponent')) {
              if (this._currentElement.type === ReactMount.TopLevelWrapper) {
                return func.apply(this, args);
              }
              var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
              var isRender = fnName === '_renderValidatedComponent';
              var isMount = fnName === 'mountComponent';
              var mountStack = ReactDefaultPerf._mountStack;
              var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];
              if (isRender) {
                addValue(entry.counts, rootNodeID, 1);
              } else if (isMount) {
                entry.created[rootNodeID] = true;
                mountStack.push(0);
              }
              start = performanceNow();
              rv = func.apply(this, args);
              totalTime = performanceNow() - start;
              if (isRender) {
                addValue(entry.render, rootNodeID, totalTime);
              } else if (isMount) {
                var subMountTime = mountStack.pop();
                mountStack[mountStack.length - 1] += totalTime;
                addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
                addValue(entry.inclusive, rootNodeID, totalTime);
              } else {
                addValue(entry.inclusive, rootNodeID, totalTime);
              }
              entry.displayNames[rootNodeID] = {
                current: this.getName(),
                owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
              };
              return rv;
            } else {
              return func.apply(this, args);
            }
          };
        }
      };
    module.exports = ReactDefaultPerf;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */
    'use strict';
    var assign = __webpack_require__(48);
    // Don't try to save users less than 1.2ms (a number I made up)
    var DONT_CARE_THRESHOLD = 1.2;
    var DOM_OPERATION_TYPES = {
        '_mountImageIntoNode': 'set innerHTML',
        INSERT_MARKUP: 'set innerHTML',
        MOVE_EXISTING: 'move',
        REMOVE_NODE: 'remove',
        SET_MARKUP: 'set innerHTML',
        TEXT_CONTENT: 'set textContent',
        'setValueForProperty': 'update attribute',
        'setValueForAttribute': 'update attribute',
        'deleteValueForProperty': 'remove attribute',
        'dangerouslyReplaceNodeWithMarkupByID': 'replace'
      };
    function getTotalTime(measurements) {
      // TODO: return number of DOM ops? could be misleading.
      // TODO: measure dropped frames after reconcile?
      // TODO: log total time of each reconcile and the top-level component
      // class that triggered it.
      var totalTime = 0;
      for (var i = 0; i < measurements.length; i++) {
        var measurement = measurements[i];
        totalTime += measurement.totalTime;
      }
      return totalTime;
    }
    function getDOMSummary(measurements) {
      var items = [];
      measurements.forEach(function (measurement) {
        Object.keys(measurement.writes).forEach(function (id) {
          measurement.writes[id].forEach(function (write) {
            items.push({
              id: id,
              type: DOM_OPERATION_TYPES[write.type] || write.type,
              args: write.args
            });
          });
        });
      });
      return items;
    }
    function getExclusiveSummary(measurements) {
      var candidates = {};
      var displayName;
      for (var i = 0; i < measurements.length; i++) {
        var measurement = measurements[i];
        var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
        for (var id in allIDs) {
          displayName = measurement.displayNames[id].current;
          candidates[displayName] = candidates[displayName] || {
            componentName: displayName,
            inclusive: 0,
            exclusive: 0,
            render: 0,
            count: 0
          };
          if (measurement.render[id]) {
            candidates[displayName].render += measurement.render[id];
          }
          if (measurement.exclusive[id]) {
            candidates[displayName].exclusive += measurement.exclusive[id];
          }
          if (measurement.inclusive[id]) {
            candidates[displayName].inclusive += measurement.inclusive[id];
          }
          if (measurement.counts[id]) {
            candidates[displayName].count += measurement.counts[id];
          }
        }
      }
      // Now make a sorted array with the results.
      var arr = [];
      for (displayName in candidates) {
        if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
          arr.push(candidates[displayName]);
        }
      }
      arr.sort(function (a, b) {
        return b.exclusive - a.exclusive;
      });
      return arr;
    }
    function getInclusiveSummary(measurements, onlyClean) {
      var candidates = {};
      var inclusiveKey;
      for (var i = 0; i < measurements.length; i++) {
        var measurement = measurements[i];
        var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
        var cleanComponents;
        if (onlyClean) {
          cleanComponents = getUnchangedComponents(measurement);
        }
        for (var id in allIDs) {
          if (onlyClean && !cleanComponents[id]) {
            continue;
          }
          var displayName = measurement.displayNames[id];
          // Inclusive time is not useful for many components without knowing where
          // they are instantiated. So we aggregate inclusive time with both the
          // owner and current displayName as the key.
          inclusiveKey = displayName.owner + ' > ' + displayName.current;
          candidates[inclusiveKey] = candidates[inclusiveKey] || {
            componentName: inclusiveKey,
            time: 0,
            count: 0
          };
          if (measurement.inclusive[id]) {
            candidates[inclusiveKey].time += measurement.inclusive[id];
          }
          if (measurement.counts[id]) {
            candidates[inclusiveKey].count += measurement.counts[id];
          }
        }
      }
      // Now make a sorted array with the results.
      var arr = [];
      for (inclusiveKey in candidates) {
        if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
          arr.push(candidates[inclusiveKey]);
        }
      }
      arr.sort(function (a, b) {
        return b.time - a.time;
      });
      return arr;
    }
    function getUnchangedComponents(measurement) {
      // For a given reconcile, look at which components did not actually
      // render anything to the DOM and return a mapping of their ID to
      // the amount of time it took to render the entire subtree.
      var cleanComponents = {};
      var dirtyLeafIDs = Object.keys(measurement.writes);
      var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
      for (var id in allIDs) {
        var isDirty = false;
        // For each component that rendered, see if a component that triggered
        // a DOM op is in its subtree.
        for (var i = 0; i < dirtyLeafIDs.length; i++) {
          if (dirtyLeafIDs[i].indexOf(id) === 0) {
            isDirty = true;
            break;
          }
        }
        // check if component newly created
        if (measurement.created[id]) {
          isDirty = true;
        }
        if (!isDirty && measurement.counts[id] > 0) {
          cleanComponents[id] = true;
        }
      }
      return cleanComponents;
    }
    var ReactDefaultPerfAnalysis = {
        getExclusiveSummary: getExclusiveSummary,
        getInclusiveSummary: getInclusiveSummary,
        getDOMSummary: getDOMSummary,
        getTotalTime: getTotalTime
      };
    module.exports = ReactDefaultPerfAnalysis;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */
    'use strict';
    var performance = __webpack_require__(154);
    var curPerformance = performance;
    /**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
    if (!curPerformance || !curPerformance.now) {
      curPerformance = Date;
    }
    var performanceNow = curPerformance.now.bind(curPerformance);
    module.exports = performanceNow;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */
    'use strict';
    var ExecutionEnvironment = __webpack_require__(18);
    var performance;
    if (ExecutionEnvironment.canUseDOM) {
      performance = window.performance || window.msPerformance || window.webkitPerformance;
    }
    module.exports = performance || {};  /***/
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */
    'use strict';
    module.exports = '0.14.3';  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/
    'use strict';
    var ReactMount = __webpack_require__(37);
    module.exports = ReactMount.renderSubtreeIntoContainer;  /***/
  },
  function (module, exports, __webpack_require__) {
    'use strict';
    module.exports = __webpack_require__(158);  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */
    'use strict';
    var ReactDOM = __webpack_require__(12);
    var ReactDOMServer = __webpack_require__(159);
    var ReactIsomorphic = __webpack_require__(163);
    var assign = __webpack_require__(48);
    var deprecated = __webpack_require__(168);
    // `version` will be added here by ReactIsomorphic.
    var React = {};
    assign(React, ReactIsomorphic);
    assign(React, {
      findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
      render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
      unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),
      renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
      renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
    });
    React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
    React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;
    module.exports = React;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */
    'use strict';
    var ReactDefaultInjection = __webpack_require__(80);
    var ReactServerRendering = __webpack_require__(160);
    var ReactVersion = __webpack_require__(155);
    ReactDefaultInjection.inject();
    var ReactDOMServer = {
        renderToString: ReactServerRendering.renderToString,
        renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
        version: ReactVersion
      };
    module.exports = ReactDOMServer;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
      'use strict';
      var ReactDefaultBatchingStrategy = __webpack_require__(101);
      var ReactElement = __webpack_require__(51);
      var ReactInstanceHandles = __webpack_require__(54);
      var ReactMarkupChecksum = __webpack_require__(57);
      var ReactServerBatchingStrategy = __webpack_require__(161);
      var ReactServerRenderingTransaction = __webpack_require__(162);
      var ReactUpdates = __webpack_require__(63);
      var emptyObject = __webpack_require__(67);
      var instantiateReactComponent = __webpack_require__(71);
      var invariant = __webpack_require__(22);
      /**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
      function renderToString(element) {
        !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;
        var transaction;
        try {
          ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
          var id = ReactInstanceHandles.createReactRootID();
          transaction = ReactServerRenderingTransaction.getPooled(false);
          return transaction.perform(function () {
            var componentInstance = instantiateReactComponent(element, null);
            var markup = componentInstance.mountComponent(id, transaction, emptyObject);
            return ReactMarkupChecksum.addChecksumToMarkup(markup);
          }, null);
        } finally {
          ReactServerRenderingTransaction.release(transaction);
          // Revert to the DOM batching strategy since these two renderers
          // currently share these stateful modules.
          ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
        }
      }
      /**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
      function renderToStaticMarkup(element) {
        !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;
        var transaction;
        try {
          ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
          var id = ReactInstanceHandles.createReactRootID();
          transaction = ReactServerRenderingTransaction.getPooled(true);
          return transaction.perform(function () {
            var componentInstance = instantiateReactComponent(element, null);
            return componentInstance.mountComponent(id, transaction, emptyObject);
          }, null);
        } finally {
          ReactServerRenderingTransaction.release(transaction);
          // Revert to the DOM batching strategy since these two renderers
          // currently share these stateful modules.
          ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
        }
      }
      module.exports = {
        renderToString: renderToString,
        renderToStaticMarkup: renderToStaticMarkup
      };  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports) {
    /**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */
    'use strict';
    var ReactServerBatchingStrategy = {
        isBatchingUpdates: false,
        batchedUpdates: function (callback) {
        }
      };
    module.exports = ReactServerBatchingStrategy;  /***/
  },
  function (module, exports, __webpack_require__) {
    /**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */
    'use strict';
    var PooledClass = __webpack_require__(65);
    var CallbackQueue = __webpack_require__(64);
    var Transaction = __webpack_require__(66);
    var assign = __webpack_require__(48);
    var emptyFunction = __webpack_require__(24);
    /**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
    var ON_DOM_READY_QUEUEING = {
        initialize: function () {
          this.reactMountReady.reset();
        },
        close: emptyFunction
      };
    /**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
    var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];
    /**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
    function ReactServerRenderingTransaction(renderToStaticMarkup) {
      this.reinitializeTransaction();
      this.renderToStaticMarkup = renderToStaticMarkup;
      this.reactMountReady = CallbackQueue.getPooled(null);
      this.useCreateElement = false;
    }
    var Mixin = {
        getTransactionWrappers: function () {
          return TRANSACTION_WRAPPERS;
        },
        getReactMountReady: function () {
          return this.reactMountReady;
        },
        destructor: function () {
          CallbackQueue.release(this.reactMountReady);
          this.reactMountReady = null;
        }
      };
    assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);
    PooledClass.addPoolingTo(ReactServerRenderingTransaction);
    module.exports = ReactServerRenderingTransaction;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */
      'use strict';
      var ReactChildren = __webpack_require__(119);
      var ReactComponent = __webpack_require__(132);
      var ReactClass = __webpack_require__(131);
      var ReactDOMFactories = __webpack_require__(164);
      var ReactElement = __webpack_require__(51);
      var ReactElementValidator = __webpack_require__(165);
      var ReactPropTypes = __webpack_require__(116);
      var ReactVersion = __webpack_require__(155);
      var assign = __webpack_require__(48);
      var onlyChild = __webpack_require__(167);
      var createElement = ReactElement.createElement;
      var createFactory = ReactElement.createFactory;
      var cloneElement = ReactElement.cloneElement;
      if (process.env.NODE_ENV !== 'production') {
        createElement = ReactElementValidator.createElement;
        createFactory = ReactElementValidator.createFactory;
        cloneElement = ReactElementValidator.cloneElement;
      }
      var React = {
          Children: {
            map: ReactChildren.map,
            forEach: ReactChildren.forEach,
            count: ReactChildren.count,
            toArray: ReactChildren.toArray,
            only: onlyChild
          },
          Component: ReactComponent,
          createElement: createElement,
          cloneElement: cloneElement,
          isValidElement: ReactElement.isValidElement,
          PropTypes: ReactPropTypes,
          createClass: ReactClass.createClass,
          createFactory: createFactory,
          createMixin: function (mixin) {
            // Currently a noop. Will be used to validate and trace mixins.
            return mixin;
          },
          DOM: ReactDOMFactories,
          version: ReactVersion,
          __spread: assign
        };
      module.exports = React;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */
      'use strict';
      var ReactElement = __webpack_require__(51);
      var ReactElementValidator = __webpack_require__(165);
      var mapObject = __webpack_require__(166);
      /**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
      function createDOMFactory(tag) {
        if (process.env.NODE_ENV !== 'production') {
          return ReactElementValidator.createFactory(tag);
        }
        return ReactElement.createFactory(tag);
      }
      /**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
      var ReactDOMFactories = mapObject({
          a: 'a',
          abbr: 'abbr',
          address: 'address',
          area: 'area',
          article: 'article',
          aside: 'aside',
          audio: 'audio',
          b: 'b',
          base: 'base',
          bdi: 'bdi',
          bdo: 'bdo',
          big: 'big',
          blockquote: 'blockquote',
          body: 'body',
          br: 'br',
          button: 'button',
          canvas: 'canvas',
          caption: 'caption',
          cite: 'cite',
          code: 'code',
          col: 'col',
          colgroup: 'colgroup',
          data: 'data',
          datalist: 'datalist',
          dd: 'dd',
          del: 'del',
          details: 'details',
          dfn: 'dfn',
          dialog: 'dialog',
          div: 'div',
          dl: 'dl',
          dt: 'dt',
          em: 'em',
          embed: 'embed',
          fieldset: 'fieldset',
          figcaption: 'figcaption',
          figure: 'figure',
          footer: 'footer',
          form: 'form',
          h1: 'h1',
          h2: 'h2',
          h3: 'h3',
          h4: 'h4',
          h5: 'h5',
          h6: 'h6',
          head: 'head',
          header: 'header',
          hgroup: 'hgroup',
          hr: 'hr',
          html: 'html',
          i: 'i',
          iframe: 'iframe',
          img: 'img',
          input: 'input',
          ins: 'ins',
          kbd: 'kbd',
          keygen: 'keygen',
          label: 'label',
          legend: 'legend',
          li: 'li',
          link: 'link',
          main: 'main',
          map: 'map',
          mark: 'mark',
          menu: 'menu',
          menuitem: 'menuitem',
          meta: 'meta',
          meter: 'meter',
          nav: 'nav',
          noscript: 'noscript',
          object: 'object',
          ol: 'ol',
          optgroup: 'optgroup',
          option: 'option',
          output: 'output',
          p: 'p',
          param: 'param',
          picture: 'picture',
          pre: 'pre',
          progress: 'progress',
          q: 'q',
          rp: 'rp',
          rt: 'rt',
          ruby: 'ruby',
          s: 's',
          samp: 'samp',
          script: 'script',
          section: 'section',
          select: 'select',
          small: 'small',
          source: 'source',
          span: 'span',
          strong: 'strong',
          style: 'style',
          sub: 'sub',
          summary: 'summary',
          sup: 'sup',
          table: 'table',
          tbody: 'tbody',
          td: 'td',
          textarea: 'textarea',
          tfoot: 'tfoot',
          th: 'th',
          thead: 'thead',
          time: 'time',
          title: 'title',
          tr: 'tr',
          track: 'track',
          u: 'u',
          ul: 'ul',
          'var': 'var',
          video: 'video',
          wbr: 'wbr',
          circle: 'circle',
          clipPath: 'clipPath',
          defs: 'defs',
          ellipse: 'ellipse',
          g: 'g',
          image: 'image',
          line: 'line',
          linearGradient: 'linearGradient',
          mask: 'mask',
          path: 'path',
          pattern: 'pattern',
          polygon: 'polygon',
          polyline: 'polyline',
          radialGradient: 'radialGradient',
          rect: 'rect',
          stop: 'stop',
          svg: 'svg',
          text: 'text',
          tspan: 'tspan'
        }, createDOMFactory);
      module.exports = ReactDOMFactories;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */
      /**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
      'use strict';
      var ReactElement = __webpack_require__(51);
      var ReactPropTypeLocations = __webpack_require__(74);
      var ReactPropTypeLocationNames = __webpack_require__(75);
      var ReactCurrentOwner = __webpack_require__(14);
      var canDefineProperty = __webpack_require__(52);
      var getIteratorFn = __webpack_require__(117);
      var invariant = __webpack_require__(22);
      var warning = __webpack_require__(34);
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            return ' Check the render method of `' + name + '`.';
          }
        }
        return '';
      }
      /**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
      var ownerHasKeyUseWarning = {};
      var loggedTypeFailures = {};
      /**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
        if (addenda === null) {
          // we already showed the warning
          return;
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
      }
      /**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
      function getAddendaForKeyUse(messageType, element, parentType) {
        var addendum = getDeclarationErrorAddendum();
        if (!addendum) {
          var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            addendum = ' Check the top-level render call using <' + parentName + '>.';
          }
        }
        var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
        if (memoizer[addendum]) {
          return null;
        }
        memoizer[addendum] = true;
        var addenda = {
            parentOrOwner: addendum,
            url: ' See https://fb.me/react-warning-keys for more information.',
            childOwner: null
          };
        // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          // Give the component that originally created this child.
          addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
        }
        return addenda;
      }
      /**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
      function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') {
          return;
        }
        if (Array.isArray(node)) {
          for (var i = 0; i < node.length; i++) {
            var child = node[i];
            if (ReactElement.isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (ReactElement.isValidElement(node)) {
          // This element was passed in a valid location.
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          // Entry iterators provide implicit keys.
          if (iteratorFn) {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;
              while (!(step = iterator.next()).done) {
                if (ReactElement.isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
      /**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
      function checkPropTypes(componentName, propTypes, props, location) {
        for (var propName in propTypes) {
          if (propTypes.hasOwnProperty(propName)) {
            var error;
            // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
              error = propTypes[propName](props, propName, componentName, location);
            } catch (ex) {
              error = ex;
            }
            process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error.message] = true;
              var addendum = getDeclarationErrorAddendum();
              process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
            }
          }
        }
      }
      /**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
      function validatePropTypes(element) {
        var componentClass = element.type;
        if (typeof componentClass !== 'function') {
          return;
        }
        var name = componentClass.displayName || componentClass.name;
        if (componentClass.propTypes) {
          checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
        }
        if (typeof componentClass.getDefaultProps === 'function') {
          process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
        }
      }
      var ReactElementValidator = {
          createElement: function (type, props, children) {
            var validType = typeof type === 'string' || typeof type === 'function';
            // We warn in this case but don't throw. We expect the element creation to
            // succeed and there will likely be errors in render.
            process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;
            var element = ReactElement.createElement.apply(this, arguments);
            // The result can be nullish if a mock or a custom function is used.
            // TODO: Drop this when these are no longer allowed as the type argument.
            if (element == null) {
              return element;
            }
            // Skip key warning if the type isn't valid since our key validation logic
            // doesn't expect a non-string/function type and can throw confusing errors.
            // We don't want exception behavior to differ between dev and prod.
            // (Rendering will throw with a helpful message and as soon as the type is
            // fixed, the key warnings will appear.)
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            validatePropTypes(element);
            return element;
          },
          createFactory: function (type) {
            var validatedFactory = ReactElementValidator.createElement.bind(null, type);
            // Legacy hook TODO: Warn if this is accessed
            validatedFactory.type = type;
            if (process.env.NODE_ENV !== 'production') {
              if (canDefineProperty) {
                Object.defineProperty(validatedFactory, 'type', {
                  enumerable: false,
                  get: function () {
                    process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
                    Object.defineProperty(this, 'type', { value: type });
                    return type;
                  }
                });
              }
            }
            return validatedFactory;
          },
          cloneElement: function (element, props, children) {
            var newElement = ReactElement.cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
        };
      module.exports = ReactElementValidator;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports) {
    /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */
    'use strict';
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    /**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
    function mapObject(object, callback, context) {
      if (!object) {
        return null;
      }
      var result = {};
      for (var name in object) {
        if (hasOwnProperty.call(object, name)) {
          result[name] = callback.call(context, object[name], name, object);
        }
      }
      return result;
    }
    module.exports = mapObject;  /***/
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
      'use strict';
      var ReactElement = __webpack_require__(51);
      var invariant = __webpack_require__(22);
      /**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
      function onlyChild(children) {
        !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
        return children;
      }
      module.exports = onlyChild;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */
      'use strict';
      var assign = __webpack_require__(48);
      var warning = __webpack_require__(34);
      /**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
      function deprecated(fnName, newModule, newPackage, ctx, fn) {
        var warned = false;
        if (process.env.NODE_ENV !== 'production') {
          var newFn = function () {
            process.env.NODE_ENV !== 'production' ? warning(warned, 'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
            warned = true;
            return fn.apply(ctx, arguments);
          };
          // We need to make sure all properties of the original fn are copied over.
          // In particular, this is needed to support PropTypes
          return assign(newFn, fn);
        }
        return fn;
      }
      module.exports = deprecated;  /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(13)));
  },
  function (module, exports, __webpack_require__) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (true)
        module.exports = factory(__webpack_require__(157));
      else if (typeof define === 'function' && define.amd)
        define(['react'], factory);
      else if (typeof exports === 'object')
        exports['Highcharts'] = factory(require('react'));
      else
        root['Highcharts'] = factory(root['react']);
    }(this, function (__WEBPACK_EXTERNAL_MODULE_5__) {
      return function (modules) {
        // webpackBootstrap
        /******/
        // The module cache
        /******/
        var installedModules = {};
        /******/
        // The require function
        /******/
        function __webpack_require__(moduleId) {
          /******/
          // Check if module is in cache
          /******/
          if (installedModules[moduleId])
            /******/
            return installedModules[moduleId].exports;
          /******/
          // Create a new module (and put it into the cache)
          /******/
          var module = installedModules[moduleId] = {
              exports: {},
              id: moduleId,
              loaded: false
            };
          /******/
          // Execute the module function
          /******/
          modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
          /******/
          // Flag the module as loaded
          /******/
          module.loaded = true;
          /******/
          // Return the exports of the module
          /******/
          return module.exports;  /******/
        }
        /******/
        // expose the modules object (__webpack_modules__)
        /******/
        __webpack_require__.m = modules;
        /******/
        // expose the module cache
        /******/
        __webpack_require__.c = installedModules;
        /******/
        // __webpack_public_path__
        /******/
        __webpack_require__.p = '';
        /******/
        // Load entry module and return exports
        /******/
        return __webpack_require__(0);  /******/
      }([
        function (module, exports, __webpack_require__) {
          /* WEBPACK VAR INJECTION */
          (function (global) {
            'use strict';
            if (!Highcharts) {
              global.HighchartsAdapter = __webpack_require__(1);
              var Highcharts = __webpack_require__(2);
            }
            module.exports = __webpack_require__(3);  /* WEBPACK VAR INJECTION */
          }.call(exports, function () {
            return this;
          }()));
        },
        function (module, exports) {
          /**
		 * @license Highcharts JS v4.1.9 (2015-10-07)
		 *
		 * Standalone Highcharts Framework
		 *
		 * License: MIT License
		 */
          /*global Highcharts */
          var HighchartsAdapter = function () {
              var UNDEFINED, doc = document, emptyArray = [], timers = [], animSetters = {}, Fx;
              Math.easeInOutSine = function (t, b, c, d) {
                return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
              };
              /**
		 * Extend given object with custom events
		 */
              function augment(obj) {
                function removeOneEvent(el, type, fn) {
                  el.removeEventListener(type, fn, false);
                }
                function IERemoveOneEvent(el, type, fn) {
                  fn = el.HCProxiedMethods[fn.toString()];
                  el.detachEvent('on' + type, fn);
                }
                function removeAllEvents(el, type) {
                  var events = el.HCEvents, remove, types, len, n;
                  if (el.removeEventListener) {
                    remove = removeOneEvent;
                  } else if (el.attachEvent) {
                    remove = IERemoveOneEvent;
                  } else {
                    return;  // break on non-DOM events
                  }
                  if (type) {
                    types = {};
                    types[type] = true;
                  } else {
                    types = events;
                  }
                  for (n in types) {
                    if (events[n]) {
                      len = events[n].length;
                      while (len--) {
                        remove(el, n, events[n][len]);
                      }
                    }
                  }
                }
                if (!obj.HCExtended) {
                  Highcharts.extend(obj, {
                    HCExtended: true,
                    HCEvents: {},
                    bind: function (name, fn) {
                      var el = this, events = this.HCEvents, wrappedFn;
                      // handle DOM events in modern browsers
                      if (el.addEventListener) {
                        el.addEventListener(name, fn, false);  // handle old IE implementation
                      } else if (el.attachEvent) {
                        wrappedFn = function (e) {
                          e.target = e.srcElement || window;
                          // #2820
                          fn.call(el, e);
                        };
                        if (!el.HCProxiedMethods) {
                          el.HCProxiedMethods = {};
                        }
                        // link wrapped fn with original fn, so we can get this in removeEvent
                        el.HCProxiedMethods[fn.toString()] = wrappedFn;
                        el.attachEvent('on' + name, wrappedFn);
                      }
                      if (events[name] === UNDEFINED) {
                        events[name] = [];
                      }
                      events[name].push(fn);
                    },
                    unbind: function (name, fn) {
                      var events, index;
                      if (name) {
                        events = this.HCEvents[name] || [];
                        if (fn) {
                          index = HighchartsAdapter.inArray(fn, events);
                          if (index > -1) {
                            events.splice(index, 1);
                            this.HCEvents[name] = events;
                          }
                          if (this.removeEventListener) {
                            removeOneEvent(this, name, fn);
                          } else if (this.attachEvent) {
                            IERemoveOneEvent(this, name, fn);
                          }
                        } else {
                          removeAllEvents(this, name);
                          this.HCEvents[name] = [];
                        }
                      } else {
                        removeAllEvents(this);
                        this.HCEvents = {};
                      }
                    },
                    trigger: function (name, args) {
                      var events = this.HCEvents[name] || [], target = this, len = events.length, i, preventDefault, fn;
                      // Attach a simple preventDefault function to skip default handler if called
                      preventDefault = function () {
                        args.defaultPrevented = true;
                      };
                      for (i = 0; i < len; i++) {
                        fn = events[i];
                        // args is never null here
                        if (args.stopped) {
                          return;
                        }
                        args.preventDefault = preventDefault;
                        args.target = target;
                        // If the type is not set, we're running a custom event (#2297). If it is set,
                        // we're running a browser event, and setting it will cause en error in
                        // IE8 (#2465).
                        if (!args.type) {
                          args.type = name;
                        }
                        // If the event handler return false, prevent the default handler from executing
                        if (fn.call(this, args) === false) {
                          args.preventDefault();
                        }
                      }
                    }
                  });
                }
                return obj;
              }
              return {
                init: function (pathAnim) {
                  /**
				 * Compatibility section to add support for legacy IE. This can be removed if old IE 
				 * support is not needed.
				 */
                  if (!doc.defaultView) {
                    this._getStyle = function (el, prop) {
                      var val;
                      if (el.style[prop]) {
                        return el.style[prop];
                      } else {
                        if (prop === 'opacity') {
                          prop = 'filter';
                        }
                        /*jslint unparam: true*/
                        val = el.currentStyle[prop.replace(/\-(\w)/g, function (a, b) {
                          return b.toUpperCase();
                        })];
                        if (prop === 'filter') {
                          val = val.replace(/alpha\(opacity=([0-9]+)\)/, function (a, b) {
                            return b / 100;
                          });
                        }
                        /*jslint unparam: false*/
                        return val === '' ? 1 : val;
                      }
                    };
                    this.adapterRun = function (elem, method) {
                      var alias = {
                          width: 'clientWidth',
                          height: 'clientHeight'
                        }[method];
                      if (alias) {
                        elem.style.zoom = 1;
                        return elem[alias] - 2 * parseInt(HighchartsAdapter._getStyle(elem, 'padding'), 10);
                      }
                    };
                  }
                  if (!Array.prototype.forEach) {
                    this.each = function (arr, fn) {
                      // legacy
                      var i = 0, len = arr.length;
                      for (; i < len; i++) {
                        if (fn.call(arr[i], arr[i], i, arr) === false) {
                          return i;
                        }
                      }
                    };
                  }
                  if (!Array.prototype.indexOf) {
                    this.inArray = function (item, arr) {
                      var len, i = 0;
                      if (arr) {
                        len = arr.length;
                        for (; i < len; i++) {
                          if (arr[i] === item) {
                            return i;
                          }
                        }
                      }
                      return -1;
                    };
                  }
                  if (!Array.prototype.filter) {
                    this.grep = function (elements, callback) {
                      var ret = [], i = 0, length = elements.length;
                      for (; i < length; i++) {
                        if (!!callback(elements[i], i)) {
                          ret.push(elements[i]);
                        }
                      }
                      return ret;
                    };
                  }
                  //--- End compatibility section ---
                  /**
				 * Start of animation specific code
				 */
                  Fx = function (elem, options, prop) {
                    this.options = options;
                    this.elem = elem;
                    this.prop = prop;
                  };
                  Fx.prototype = {
                    update: function () {
                      var styles, paths = this.paths, elem = this.elem, elemelem = elem.element;
                      // if destroyed, it is null
                      // Animation setter defined from outside
                      if (animSetters[this.prop]) {
                        animSetters[this.prop](this);  // Animating a path definition on SVGElement
                      } else if (paths && elemelem) {
                        elem.attr('d', pathAnim.step(paths[0], paths[1], this.now, this.toD));  // Other animations on SVGElement
                      } else if (elem.attr) {
                        if (elemelem) {
                          elem.attr(this.prop, this.now);
                        }  // HTML styles
                      } else {
                        styles = {};
                        styles[this.prop] = this.now + this.unit;
                        Highcharts.css(elem, styles);
                      }
                      if (this.options.step) {
                        this.options.step.call(this.elem, this.now, this);
                      }
                    },
                    custom: function (from, to, unit) {
                      var self = this, t = function (gotoEnd) {
                          return self.step(gotoEnd);
                        }, i;
                      this.startTime = +new Date();
                      this.start = from;
                      this.end = to;
                      this.unit = unit;
                      this.now = this.start;
                      this.pos = this.state = 0;
                      t.elem = this.elem;
                      if (t() && timers.push(t) === 1) {
                        t.timerId = setInterval(function () {
                          for (i = 0; i < timers.length; i++) {
                            if (!timers[i]()) {
                              timers.splice(i--, 1);
                            }
                          }
                          if (!timers.length) {
                            clearInterval(t.timerId);
                          }
                        }, 13);
                      }
                    },
                    step: function (gotoEnd) {
                      var t = +new Date(), ret, done, options = this.options, elem = this.elem, i;
                      if (elem.attr && !elem.element) {
                        // #2616, element including flag is destroyed
                        ret = false;
                      } else if (gotoEnd || t >= options.duration + this.startTime) {
                        this.now = this.end;
                        this.pos = this.state = 1;
                        this.update();
                        this.options.curAnim[this.prop] = true;
                        done = true;
                        for (i in options.curAnim) {
                          if (options.curAnim[i] !== true) {
                            done = false;
                          }
                        }
                        if (done) {
                          if (options.complete) {
                            options.complete.call(elem);
                          }
                        }
                        ret = false;
                      } else {
                        var n = t - this.startTime;
                        this.state = n / options.duration;
                        this.pos = options.easing(n, 0, 1, options.duration);
                        this.now = this.start + (this.end - this.start) * this.pos;
                        this.update();
                        ret = true;
                      }
                      return ret;
                    }
                  };
                  /**
				 * The adapter animate method
				 */
                  this.animate = function (el, prop, opt) {
                    var start, unit = '', end, fx, args, name, PX = 'px';
                    if (typeof opt !== 'object' || opt === null) {
                      args = arguments;
                      opt = {
                        duration: args[2],
                        easing: args[3],
                        complete: args[4]
                      };
                    }
                    if (typeof opt.duration !== 'number') {
                      opt.duration = 400;
                    }
                    opt.easing = Math[opt.easing] || Math.easeInOutSine;
                    opt.curAnim = Highcharts.extend({}, prop);
                    for (name in prop) {
                      fx = new Fx(el, opt, name);
                      end = null;
                      if (name === 'd') {
                        fx.paths = pathAnim.init(el, el.d, prop.d);
                        fx.toD = prop.d;
                        start = 0;
                        end = 1;
                      } else if (el.attr) {
                        start = el.attr(name);
                      } else {
                        start = parseFloat(HighchartsAdapter._getStyle(el, name)) || 0;
                        if (name !== 'opacity') {
                          unit = PX;
                        }
                      }
                      if (!end) {
                        end = prop[name];
                      }
                      if (end.match && end.match(PX)) {
                        end = end.replace(/px/g, '');  // #4351
                      }
                      fx.custom(start, end, unit);
                    }
                  };
                },
                _getStyle: function (el, prop) {
                  return window.getComputedStyle(el, undefined).getPropertyValue(prop);
                },
                addAnimSetter: function (prop, fn) {
                  animSetters[prop] = fn;
                },
                getScript: function (scriptLocation, callback) {
                  // We cannot assume that Assets class from mootools-more is available so instead insert a script tag to download script.
                  var head = doc.getElementsByTagName('head')[0], script = doc.createElement('script');
                  script.type = 'text/javascript';
                  script.src = scriptLocation;
                  script.onload = callback;
                  head.appendChild(script);
                },
                inArray: function (item, arr) {
                  return arr.indexOf ? arr.indexOf(item) : emptyArray.indexOf.call(arr, item);
                },
                adapterRun: function (elem, method) {
                  return parseInt(HighchartsAdapter._getStyle(elem, method), 10);
                },
                grep: function (elements, callback) {
                  return emptyArray.filter.call(elements, callback);
                },
                map: function (arr, fn) {
                  var results = [], i = 0, len = arr.length;
                  for (; i < len; i++) {
                    results[i] = fn.call(arr[i], arr[i], i, arr);
                  }
                  return results;
                },
                offset: function (el) {
                  var docElem = document.documentElement, box = el.getBoundingClientRect();
                  return {
                    top: box.top + (window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
                    left: box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
                  };
                },
                addEvent: function (el, type, fn) {
                  augment(el).bind(type, fn);
                },
                removeEvent: function (el, type, fn) {
                  augment(el).unbind(type, fn);
                },
                fireEvent: function (el, type, eventArguments, defaultFunction) {
                  var e;
                  if (doc.createEvent && (el.dispatchEvent || el.fireEvent)) {
                    e = doc.createEvent('Events');
                    e.initEvent(type, true, true);
                    e.target = el;
                    Highcharts.extend(e, eventArguments);
                    if (el.dispatchEvent) {
                      el.dispatchEvent(e);
                    } else {
                      el.fireEvent(type, e);
                    }
                  } else if (el.HCExtended === true) {
                    eventArguments = eventArguments || {};
                    el.trigger(type, eventArguments);
                  }
                  if (eventArguments && eventArguments.defaultPrevented) {
                    defaultFunction = null;
                  }
                  if (defaultFunction) {
                    defaultFunction(eventArguments);
                  }
                },
                washMouseEvent: function (e) {
                  return e;
                },
                stop: function (el) {
                  var i = timers.length, timer;
                  // Remove timers related to this element (#4519)
                  while (i--) {
                    timer = timers[i];
                    if (timer.elem === el) {
                      timers.splice(i, 1);
                    }
                  }
                },
                each: function (arr, fn) {
                  // modern browsers
                  return Array.prototype.forEach.call(arr, fn);
                }
              };
            }();
          /*** EXPORTS FROM exports-loader ***/
          module.exports = HighchartsAdapter;
        },
        function (module, exports) {
          // ==ClosureCompiler==
          // @compilation_level SIMPLE_OPTIMIZATIONS
          /**
		 * @license Highcharts JS v4.1.9 (2015-10-07)
		 *
		 * (c) 2009-2014 Torstein Honsi
		 *
		 * License: www.highcharts.com/license
		 */
          // JSLint options:
          /*global Highcharts, HighchartsAdapter, document, window, navigator, setInterval, clearInterval, clearTimeout, setTimeout, location, jQuery, $, console, each, grep */
          /*jslint ass: true, sloppy: true, forin: true, plusplus: true, nomen: true, vars: true, regexp: true, newcap: true, browser: true, continue: true, white: true */
          (function () {
            // encapsulated variables
            var UNDEFINED, doc = document, win = window, math = Math, mathRound = math.round, mathFloor = math.floor, mathCeil = math.ceil, mathMax = math.max, mathMin = math.min, mathAbs = math.abs, mathCos = math.cos, mathSin = math.sin, mathPI = math.PI, deg2rad = mathPI * 2 / 360,
              // some variables
              userAgent = navigator.userAgent, isOpera = win.opera, isMS = /(msie|trident|edge)/i.test(userAgent) && !isOpera, docMode8 = doc.documentMode === 8, isWebKit = !isMS && /AppleWebKit/.test(userAgent), isFirefox = /Firefox/.test(userAgent), isTouchDevice = /(Mobile|Android|Windows Phone)/.test(userAgent), SVG_NS = 'http://www.w3.org/2000/svg', hasSVG = !!doc.createElementNS && !!doc.createElementNS(SVG_NS, 'svg').createSVGRect, hasBidiBug = isFirefox && parseInt(userAgent.split('Firefox/')[1], 10) < 4,
              // issue #38
              useCanVG = !hasSVG && !isMS && !!doc.createElement('canvas').getContext, Renderer, hasTouch, symbolSizes = {}, idCounter = 0, garbageBin, defaultOptions, dateFormat,
              // function
              pathAnim, timeUnits, noop = function () {
                return UNDEFINED;
              }, charts = [], chartCount = 0, PRODUCT = 'Highcharts', VERSION = '4.1.9',
              // some constants for frequently used strings
              DIV = 'div', ABSOLUTE = 'absolute', RELATIVE = 'relative', HIDDEN = 'hidden', PREFIX = 'highcharts-', VISIBLE = 'visible', PX = 'px', NONE = 'none', M = 'M', L = 'L', numRegex = /^[0-9]+$/, NORMAL_STATE = '', HOVER_STATE = 'hover', SELECT_STATE = 'select', marginNames = [
                'plotTop',
                'marginRight',
                'marginBottom',
                'plotLeft'
              ],
              // Object for extending Axis
              AxisPlotLineOrBandExtension,
              // constants for attributes
              STROKE_WIDTH = 'stroke-width',
              // time methods, changed based on whether or not UTC is used
              Date,
              // Allow using a different Date class
              makeTime, timezoneOffset, getTimezoneOffset, getMinutes, getHours, getDay, getDate, getMonth, getFullYear, setMilliseconds, setSeconds, setMinutes, setHours, setDate, setMonth, setFullYear,
              // lookup over the types and the associated classes
              seriesTypes = {}, Highcharts;
            // The Highcharts namespace
            Highcharts = win.Highcharts = win.Highcharts ? error(16, true) : {};
            Highcharts.seriesTypes = seriesTypes;
            /**
		 * Extend an object with the members of another
		 * @param {Object} a The object to be extended
		 * @param {Object} b The object to add to the first one
		 */
            var extend = Highcharts.extend = function (a, b) {
                var n;
                if (!a) {
                  a = {};
                }
                for (n in b) {
                  a[n] = b[n];
                }
                return a;
              };
            /**
		 * Deep merge two or more objects and return a third object. If the first argument is
		 * true, the contents of the second object is copied into the first object.
		 * Previously this function redirected to jQuery.extend(true), but this had two limitations.
		 * First, it deep merged arrays, which lead to workarounds in Highcharts. Second,
		 * it copied properties from extended prototypes. 
		 */
            function merge() {
              var i, args = arguments, len, ret = {}, doCopy = function (copy, original) {
                  var value, key;
                  // An object is replacing a primitive
                  if (typeof copy !== 'object') {
                    copy = {};
                  }
                  for (key in original) {
                    if (original.hasOwnProperty(key)) {
                      value = original[key];
                      // Copy the contents of objects, but not arrays or DOM nodes
                      if (value && typeof value === 'object' && Object.prototype.toString.call(value) !== '[object Array]' && key !== 'renderTo' && typeof value.nodeType !== 'number') {
                        copy[key] = doCopy(copy[key] || {}, value);  // Primitives and arrays are copied over directly
                      } else {
                        copy[key] = original[key];
                      }
                    }
                  }
                  return copy;
                };
              // If first argument is true, copy into the existing object. Used in setOptions.
              if (args[0] === true) {
                ret = args[1];
                args = Array.prototype.slice.call(args, 2);
              }
              // For each argument, extend the return
              len = args.length;
              for (i = 0; i < len; i++) {
                ret = doCopy(ret, args[i]);
              }
              return ret;
            }
            /**
		 * Shortcut for parseInt
		 * @param {Object} s
		 * @param {Number} mag Magnitude
		 */
            function pInt(s, mag) {
              return parseInt(s, mag || 10);
            }
            /**
		 * Check for string
		 * @param {Object} s
		 */
            function isString(s) {
              return typeof s === 'string';
            }
            /**
		 * Check for object
		 * @param {Object} obj
		 */
            function isObject(obj) {
              return obj && typeof obj === 'object';
            }
            /**
		 * Check for array
		 * @param {Object} obj
		 */
            function isArray(obj) {
              return Object.prototype.toString.call(obj) === '[object Array]';
            }
            /**
		 * Check for number
		 * @param {Object} n
		 */
            function isNumber(n) {
              return typeof n === 'number';
            }
            function log2lin(num) {
              return math.log(num) / math.LN10;
            }
            function lin2log(num) {
              return math.pow(10, num);
            }
            /**
		 * Remove last occurence of an item from an array
		 * @param {Array} arr
		 * @param {Mixed} item
		 */
            function erase(arr, item) {
              var i = arr.length;
              while (i--) {
                if (arr[i] === item) {
                  arr.splice(i, 1);
                  break;
                }
              }  //return arr;
            }
            /**
		 * Returns true if the object is not null or undefined. Like MooTools' $.defined.
		 * @param {Object} obj
		 */
            function defined(obj) {
              return obj !== UNDEFINED && obj !== null;
            }
            /**
		 * Set or get an attribute or an object of attributes. Can't use jQuery attr because
		 * it attempts to set expando properties on the SVG element, which is not allowed.
		 *
		 * @param {Object} elem The DOM element to receive the attribute(s)
		 * @param {String|Object} prop The property or an abject of key-value pairs
		 * @param {String} value The value if a single property is set
		 */
            function attr(elem, prop, value) {
              var key, ret;
              // if the prop is a string
              if (isString(prop)) {
                // set the value
                if (defined(value)) {
                  elem.setAttribute(prop, value);  // get the value
                } else if (elem && elem.getAttribute) {
                  // elem not defined when printing pie demo...
                  ret = elem.getAttribute(prop);
                }  // else if prop is defined, it is a hash of key/value pairs
              } else if (defined(prop) && isObject(prop)) {
                for (key in prop) {
                  elem.setAttribute(key, prop[key]);
                }
              }
              return ret;
            }
            /**
		 * Check if an element is an array, and if not, make it into an array. Like
		 * MooTools' $.splat.
		 */
            function splat(obj) {
              return isArray(obj) ? obj : [obj];
            }
            /**
		 * Return the first value that is defined. Like MooTools' $.pick.
		 */
            var pick = Highcharts.pick = function () {
                var args = arguments, i, arg, length = args.length;
                for (i = 0; i < length; i++) {
                  arg = args[i];
                  if (arg !== UNDEFINED && arg !== null) {
                    return arg;
                  }
                }
              };
            /**
		 * Set CSS on a given element
		 * @param {Object} el
		 * @param {Object} styles Style object with camel case property names
		 */
            function css(el, styles) {
              if (isMS && !hasSVG) {
                // #2686
                if (styles && styles.opacity !== UNDEFINED) {
                  styles.filter = 'alpha(opacity=' + styles.opacity * 100 + ')';
                }
              }
              extend(el.style, styles);
            }
            /**
		 * Utility function to create element with attributes and styles
		 * @param {Object} tag
		 * @param {Object} attribs
		 * @param {Object} styles
		 * @param {Object} parent
		 * @param {Object} nopad
		 */
            function createElement(tag, attribs, styles, parent, nopad) {
              var el = doc.createElement(tag);
              if (attribs) {
                extend(el, attribs);
              }
              if (nopad) {
                css(el, {
                  padding: 0,
                  border: NONE,
                  margin: 0
                });
              }
              if (styles) {
                css(el, styles);
              }
              if (parent) {
                parent.appendChild(el);
              }
              return el;
            }
            /**
		 * Extend a prototyped class by new members
		 * @param {Object} parent
		 * @param {Object} members
		 */
            function extendClass(parent, members) {
              var object = function () {
                return UNDEFINED;
              };
              object.prototype = new parent();
              extend(object.prototype, members);
              return object;
            }
            /**
		 * Pad a string to a given length by adding 0 to the beginning
		 * @param {Number} number
		 * @param {Number} length
		 */
            function pad(number, length) {
              // Create an array of the remaining length +1 and join it with 0's
              return new Array((length || 2) + 1 - String(number).length).join(0) + number;
            }
            /**
		 * Return a length based on either the integer value, or a percentage of a base.
		 */
            function relativeLength(value, base) {
              return /%$/.test(value) ? base * parseFloat(value) / 100 : parseFloat(value);
            }
            /**
		 * Wrap a method with extended functionality, preserving the original function
		 * @param {Object} obj The context object that the method belongs to 
		 * @param {String} method The name of the method to extend
		 * @param {Function} func A wrapper function callback. This function is called with the same arguments
		 * as the original function, except that the original function is unshifted and passed as the first 
		 * argument. 
		 */
            var wrap = Highcharts.wrap = function (obj, method, func) {
                var proceed = obj[method];
                obj[method] = function () {
                  var args = Array.prototype.slice.call(arguments);
                  args.unshift(proceed);
                  return func.apply(this, args);
                };
              };
            function getTZOffset(timestamp) {
              return (getTimezoneOffset && getTimezoneOffset(timestamp) || timezoneOffset || 0) * 60000;
            }
            /**
		 * Based on http://www.php.net/manual/en/function.strftime.php
		 * @param {String} format
		 * @param {Number} timestamp
		 * @param {Boolean} capitalize
		 */
            dateFormat = function (format, timestamp, capitalize) {
              if (!defined(timestamp) || isNaN(timestamp)) {
                return defaultOptions.lang.invalidDate || '';
              }
              format = pick(format, '%Y-%m-%d %H:%M:%S');
              var date = new Date(timestamp - getTZOffset(timestamp)), key,
                // used in for constuct below
                // get the basic time values
                hours = date[getHours](), day = date[getDay](), dayOfMonth = date[getDate](), month = date[getMonth](), fullYear = date[getFullYear](), lang = defaultOptions.lang, langWeekdays = lang.weekdays,
                // List all format keys. Custom formats can be added from the outside. 
                replacements = extend({
                  'a': langWeekdays[day].substr(0, 3),
                  'A': langWeekdays[day],
                  'd': pad(dayOfMonth),
                  'e': dayOfMonth,
                  'w': day,
                  'b': lang.shortMonths[month],
                  'B': lang.months[month],
                  'm': pad(month + 1),
                  'y': fullYear.toString().substr(2, 2),
                  'Y': fullYear,
                  'H': pad(hours),
                  'k': hours,
                  'I': pad(hours % 12 || 12),
                  'l': hours % 12 || 12,
                  'M': pad(date[getMinutes]()),
                  'p': hours < 12 ? 'AM' : 'PM',
                  'P': hours < 12 ? 'am' : 'pm',
                  'S': pad(date.getSeconds()),
                  'L': pad(mathRound(timestamp % 1000), 3)
                }, Highcharts.dateFormats);
              // do the replaces
              for (key in replacements) {
                while (format.indexOf('%' + key) !== -1) {
                  // regex would do it in one line, but this is faster
                  format = format.replace('%' + key, typeof replacements[key] === 'function' ? replacements[key](timestamp) : replacements[key]);
                }
              }
              // Optionally capitalize the string and return
              return capitalize ? format.substr(0, 1).toUpperCase() + format.substr(1) : format;
            };
            /** 
		 * Format a single variable. Similar to sprintf, without the % prefix.
		 */
            function formatSingle(format, val) {
              var floatRegex = /f$/, decRegex = /\.([0-9])/, lang = defaultOptions.lang, decimals;
              if (floatRegex.test(format)) {
                // float
                decimals = format.match(decRegex);
                decimals = decimals ? decimals[1] : -1;
                if (val !== null) {
                  val = Highcharts.numberFormat(val, decimals, lang.decimalPoint, format.indexOf(',') > -1 ? lang.thousandsSep : '');
                }
              } else {
                val = dateFormat(format, val);
              }
              return val;
            }
            /**
		 * Format a string according to a subset of the rules of Python's String.format method.
		 */
            function format(str, ctx) {
              var splitter = '{', isInside = false, segment, valueAndFormat, path, i, len, ret = [], val, index;
              while ((index = str.indexOf(splitter)) !== -1) {
                segment = str.slice(0, index);
                if (isInside) {
                  // we're on the closing bracket looking back
                  valueAndFormat = segment.split(':');
                  path = valueAndFormat.shift().split('.');
                  // get first and leave format
                  len = path.length;
                  val = ctx;
                  // Assign deeper paths
                  for (i = 0; i < len; i++) {
                    val = val[path[i]];
                  }
                  // Format the replacement
                  if (valueAndFormat.length) {
                    val = formatSingle(valueAndFormat.join(':'), val);
                  }
                  // Push the result and advance the cursor
                  ret.push(val);
                } else {
                  ret.push(segment);
                }
                str = str.slice(index + 1);
                // the rest
                isInside = !isInside;
                // toggle
                splitter = isInside ? '}' : '{';  // now look for next matching bracket
              }
              ret.push(str);
              return ret.join('');
            }
            /**
		 * Get the magnitude of a number
		 */
            function getMagnitude(num) {
              return math.pow(10, mathFloor(math.log(num) / math.LN10));
            }
            /**
		 * Take an interval and normalize it to multiples of 1, 2, 2.5 and 5
		 * @param {Number} interval
		 * @param {Array} multiples
		 * @param {Number} magnitude
		 * @param {Object} options
		 */
            function normalizeTickInterval(interval, multiples, magnitude, allowDecimals, preventExceed) {
              var normalized, i, retInterval = interval;
              // round to a tenfold of 1, 2, 2.5 or 5
              magnitude = pick(magnitude, 1);
              normalized = interval / magnitude;
              // multiples for a linear scale
              if (!multiples) {
                multiples = [
                  1,
                  2,
                  2.5,
                  5,
                  10
                ];
                // the allowDecimals option
                if (allowDecimals === false) {
                  if (magnitude === 1) {
                    multiples = [
                      1,
                      2,
                      5,
                      10
                    ];
                  } else if (magnitude <= 0.1) {
                    multiples = [1 / magnitude];
                  }
                }
              }
              // normalize the interval to the nearest multiple
              for (i = 0; i < multiples.length; i++) {
                retInterval = multiples[i];
                if (preventExceed && retInterval * magnitude >= interval || !preventExceed && normalized <= (multiples[i] + (multiples[i + 1] || multiples[i])) / 2) {
                  break;
                }
              }
              // multiply back to the correct magnitude
              retInterval *= magnitude;
              return retInterval;
            }
            /**
		 * Utility method that sorts an object array and keeping the order of equal items.
		 * ECMA script standard does not specify the behaviour when items are equal.
		 */
            function stableSort(arr, sortFunction) {
              var length = arr.length, sortValue, i;
              // Add index to each item
              for (i = 0; i < length; i++) {
                arr[i].ss_i = i;  // stable sort index
              }
              arr.sort(function (a, b) {
                sortValue = sortFunction(a, b);
                return sortValue === 0 ? a.ss_i - b.ss_i : sortValue;
              });
              // Remove index from items
              for (i = 0; i < length; i++) {
                delete arr[i].ss_i;  // stable sort index
              }
            }
            /**
		 * Non-recursive method to find the lowest member of an array. Math.min raises a maximum
		 * call stack size exceeded error in Chrome when trying to apply more than 150.000 points. This
		 * method is slightly slower, but safe.
		 */
            function arrayMin(data) {
              var i = data.length, min = data[0];
              while (i--) {
                if (data[i] < min) {
                  min = data[i];
                }
              }
              return min;
            }
            /**
		 * Non-recursive method to find the lowest member of an array. Math.min raises a maximum
		 * call stack size exceeded error in Chrome when trying to apply more than 150.000 points. This
		 * method is slightly slower, but safe.
		 */
            function arrayMax(data) {
              var i = data.length, max = data[0];
              while (i--) {
                if (data[i] > max) {
                  max = data[i];
                }
              }
              return max;
            }
            /**
		 * Utility method that destroys any SVGElement or VMLElement that are properties on the given object.
		 * It loops all properties and invokes destroy if there is a destroy method. The property is
		 * then delete'ed.
		 * @param {Object} The object to destroy properties on
		 * @param {Object} Exception, do not destroy this property, only delete it.
		 */
            function destroyObjectProperties(obj, except) {
              var n;
              for (n in obj) {
                // If the object is non-null and destroy is defined
                if (obj[n] && obj[n] !== except && obj[n].destroy) {
                  // Invoke the destroy
                  obj[n].destroy();
                }
                // Delete the property from the object.
                delete obj[n];
              }
            }
            /**
		 * Discard an element by moving it to the bin and delete
		 * @param {Object} The HTML node to discard
		 */
            function discardElement(element) {
              // create a garbage bin element, not part of the DOM
              if (!garbageBin) {
                garbageBin = createElement(DIV);
              }
              // move the node and empty bin
              if (element) {
                garbageBin.appendChild(element);
              }
              garbageBin.innerHTML = '';
            }
            /**
		 * Provide error messages for debugging, with links to online explanation 
		 */
            function error(code, stop) {
              var msg = 'Highcharts error #' + code + ': www.highcharts.com/errors/' + code;
              if (stop) {
                throw msg;
              }
              // else ...
              if (win.console) {
                console.log(msg);
              }
            }
            /**
		 * Fix JS round off float errors
		 * @param {Number} num
		 */
            function correctFloat(num, prec) {
              return parseFloat(num.toPrecision(prec || 14));
            }
            /**
		 * Set the global animation to either a given value, or fall back to the
		 * given chart's animation option
		 * @param {Object} animation
		 * @param {Object} chart
		 */
            function setAnimation(animation, chart) {
              chart.renderer.globalAnimation = pick(animation, chart.animation);
            }
            /**
		 * The time unit lookup
		 */
            timeUnits = {
              millisecond: 1,
              second: 1000,
              minute: 60000,
              hour: 3600000,
              day: 24 * 3600000,
              week: 7 * 24 * 3600000,
              month: 28 * 24 * 3600000,
              year: 364 * 24 * 3600000
            };
            /**
		 * Format a number and return a string based on input settings
		 * @param {Number} number The input number to format
		 * @param {Number} decimals The amount of decimals
		 * @param {String} decPoint The decimal point, defaults to the one given in the lang options
		 * @param {String} thousandsSep The thousands separator, defaults to the one given in the lang options
		 */
            Highcharts.numberFormat = function (number, decimals, decPoint, thousandsSep) {
              var lang = defaultOptions.lang,
                // http://kevin.vanzonneveld.net/techblog/article/javascript_equivalent_for_phps_number_format/
                n = +number || 0, c = decimals === -1 ? mathMin((n.toString().split('.')[1] || '').length, 20) : isNaN(decimals = mathAbs(decimals)) ? 2 : decimals, d = decPoint === undefined ? lang.decimalPoint : decPoint, t = thousandsSep === undefined ? lang.thousandsSep : thousandsSep, s = n < 0 ? '-' : '', i = String(pInt(n = mathAbs(n).toFixed(c))), j = i.length > 3 ? i.length % 3 : 0;
              return s + (j ? i.substr(0, j) + t : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, '$1' + t) + (c ? d + mathAbs(n - i).toFixed(c).slice(2) : '');
            };
            /**
		 * Path interpolation algorithm used across adapters
		 */
            pathAnim = {
              init: function (elem, fromD, toD) {
                fromD = fromD || '';
                var shift = elem.shift, bezier = fromD.indexOf('C') > -1, numParams = bezier ? 7 : 3, endLength, slice, i, start = fromD.split(' '), end = [].concat(toD),
                  // copy
                  startBaseLine, endBaseLine, sixify = function (arr) {
                    // in splines make move points have six parameters like bezier curves
                    i = arr.length;
                    while (i--) {
                      if (arr[i] === M) {
                        arr.splice(i + 1, 0, arr[i + 1], arr[i + 2], arr[i + 1], arr[i + 2]);
                      }
                    }
                  };
                if (bezier) {
                  sixify(start);
                  sixify(end);
                }
                // pull out the base lines before padding
                if (elem.isArea) {
                  startBaseLine = start.splice(start.length - 6, 6);
                  endBaseLine = end.splice(end.length - 6, 6);
                }
                // if shifting points, prepend a dummy point to the end path
                if (shift <= end.length / numParams && start.length === end.length) {
                  while (shift--) {
                    end = [].concat(end).splice(0, numParams).concat(end);
                  }
                }
                elem.shift = 0;
                // reset for following animations
                // copy and append last point until the length matches the end length
                if (start.length) {
                  endLength = end.length;
                  while (start.length < endLength) {
                    //bezier && sixify(start);
                    slice = [].concat(start).splice(start.length - numParams, numParams);
                    if (bezier) {
                      // disable first control point
                      slice[numParams - 6] = slice[numParams - 2];
                      slice[numParams - 5] = slice[numParams - 1];
                    }
                    start = start.concat(slice);
                  }
                }
                if (startBaseLine) {
                  // append the base lines for areas
                  start = start.concat(startBaseLine);
                  end = end.concat(endBaseLine);
                }
                return [
                  start,
                  end
                ];
              },
              step: function (start, end, pos, complete) {
                var ret = [], i = start.length, startVal;
                if (pos === 1) {
                  // land on the final path without adjustment points appended in the ends
                  ret = complete;
                } else if (i === end.length && pos < 1) {
                  while (i--) {
                    startVal = parseFloat(start[i]);
                    ret[i] = isNaN(startVal) ? start[i] : pos * parseFloat(end[i] - startVal) + startVal;
                  }
                } else {
                  // if animation is finished or length not matching, land on right value
                  ret = end;
                }
                return ret;
              }
            };
            (function ($) {
              /**
			 * The default HighchartsAdapter for jQuery
			 */
              win.HighchartsAdapter = win.HighchartsAdapter || $ && {
                init: function (pathAnim) {
                  // extend the animate function to allow SVG animations
                  var Fx = $.fx;
                  /*jslint unparam: true*/
                  /* allow unused param x in this function */
                  $.extend($.easing, {
                    easeOutQuad: function (x, t, b, c, d) {
                      return -c * (t /= d) * (t - 2) + b;
                    }
                  });
                  /*jslint unparam: false*/
                  // extend some methods to check for elem.attr, which means it is a Highcharts SVG object
                  $.each([
                    'cur',
                    '_default',
                    'width',
                    'height',
                    'opacity'
                  ], function (i, fn) {
                    var obj = Fx.step, base;
                    // Handle different parent objects
                    if (fn === 'cur') {
                      obj = Fx.prototype;  // 'cur', the getter, relates to Fx.prototype
                    } else if (fn === '_default' && $.Tween) {
                      // jQuery 1.8 model
                      obj = $.Tween.propHooks[fn];
                      fn = 'set';
                    }
                    // Overwrite the method
                    base = obj[fn];
                    if (base) {
                      // step.width and step.height don't exist in jQuery < 1.7
                      // create the extended function replacement
                      obj[fn] = function (fx) {
                        var elem;
                        // Fx.prototype.cur does not use fx argument
                        fx = i ? fx : this;
                        // Don't run animations on textual properties like align (#1821)
                        if (fx.prop === 'align') {
                          return;
                        }
                        // shortcut
                        elem = fx.elem;
                        // Fx.prototype.cur returns the current value. The other ones are setters
                        // and returning a value has no effect.
                        return elem.attr ? elem.attr(fx.prop, fn === 'cur' ? UNDEFINED : fx.now) : base.apply(this, arguments);  // use jQuery's built-in method
                      };
                    }
                  });
                  // Extend the opacity getter, needed for fading opacity with IE9 and jQuery 1.10+
                  wrap($.cssHooks.opacity, 'get', function (proceed, elem, computed) {
                    return elem.attr ? elem.opacity || 0 : proceed.call(this, elem, computed);
                  });
                  // Define the setter function for d (path definitions)
                  this.addAnimSetter('d', function (fx) {
                    var elem = fx.elem, ends;
                    // Normally start and end should be set in state == 0, but sometimes,
                    // for reasons unknown, this doesn't happen. Perhaps state == 0 is skipped
                    // in these cases
                    if (!fx.started) {
                      ends = pathAnim.init(elem, elem.d, elem.toD);
                      fx.start = ends[0];
                      fx.end = ends[1];
                      fx.started = true;
                    }
                    // Interpolate each value of the path
                    elem.attr('d', pathAnim.step(fx.start, fx.end, fx.pos, elem.toD));
                  });
                  /**
					 * Utility for iterating over an array. Parameters are reversed compared to jQuery.
					 * @param {Array} arr
					 * @param {Function} fn
					 */
                  this.each = Array.prototype.forEach ? function (arr, fn) {
                    // modern browsers
                    return Array.prototype.forEach.call(arr, fn);
                  } : function (arr, fn) {
                    // legacy
                    var i, len = arr.length;
                    for (i = 0; i < len; i++) {
                      if (fn.call(arr[i], arr[i], i, arr) === false) {
                        return i;
                      }
                    }
                  };
                  /**
					 * Register Highcharts as a plugin in the respective framework
					 */
                  $.fn.highcharts = function () {
                    var constr = 'Chart',
                      // default constructor
                      args = arguments, options, ret, chart;
                    if (this[0]) {
                      if (isString(args[0])) {
                        constr = args[0];
                        args = Array.prototype.slice.call(args, 1);
                      }
                      options = args[0];
                      // Create the chart
                      if (options !== UNDEFINED) {
                        /*jslint unused:false*/
                        options.chart = options.chart || {};
                        options.chart.renderTo = this[0];
                        chart = new Highcharts[constr](options, args[1]);
                        ret = this;  /*jslint unused:true*/
                      }
                      // When called without parameters or with the return argument, get a predefined chart
                      if (options === UNDEFINED) {
                        ret = charts[attr(this[0], 'data-highcharts-chart')];
                      }
                    }
                    return ret;
                  };
                },
                addAnimSetter: function (prop, setter) {
                  // jQuery 1.8 style
                  if ($.Tween) {
                    $.Tween.propHooks[prop] = { set: setter };  // pre 1.8
                  } else {
                    $.fx.step[prop] = setter;
                  }
                },
                getScript: $.getScript,
                inArray: $.inArray,
                adapterRun: function (elem, method) {
                  return $(elem)[method]();
                },
                grep: $.grep,
                map: function (arr, fn) {
                  //return jQuery.map(arr, fn);
                  var results = [], i = 0, len = arr.length;
                  for (; i < len; i++) {
                    results[i] = fn.call(arr[i], arr[i], i, arr);
                  }
                  return results;
                },
                offset: function (el) {
                  return $(el).offset();
                },
                addEvent: function (el, event, fn) {
                  $(el).bind(event, fn);
                },
                removeEvent: function (el, eventType, handler) {
                  // workaround for jQuery issue with unbinding custom events:
                  // http://forum.jQuery.com/topic/javascript-error-when-unbinding-a-custom-event-using-jQuery-1-4-2
                  var func = doc.removeEventListener ? 'removeEventListener' : 'detachEvent';
                  if (doc[func] && el && !el[func]) {
                    el[func] = function () {
                    };
                  }
                  $(el).unbind(eventType, handler);
                },
                fireEvent: function (el, type, eventArguments, defaultFunction) {
                  var event = $.Event(type), detachedType = 'detached' + type, defaultPrevented;
                  // Remove warnings in Chrome when accessing returnValue (#2790), layerX and layerY. Although Highcharts
                  // never uses these properties, Chrome includes them in the default click event and
                  // raises the warning when they are copied over in the extend statement below.
                  //
                  // To avoid problems in IE (see #1010) where we cannot delete the properties and avoid
                  // testing if they are there (warning in chrome) the only option is to test if running IE.
                  if (!isMS && eventArguments) {
                    delete eventArguments.layerX;
                    delete eventArguments.layerY;
                    delete eventArguments.returnValue;
                  }
                  extend(event, eventArguments);
                  // Prevent jQuery from triggering the object method that is named the
                  // same as the event. For example, if the event is 'select', jQuery
                  // attempts calling el.select and it goes into a loop.
                  if (el[type]) {
                    el[detachedType] = el[type];
                    el[type] = null;
                  }
                  // Wrap preventDefault and stopPropagation in try/catch blocks in
                  // order to prevent JS errors when cancelling events on non-DOM
                  // objects. #615.
                  /*jslint unparam: true*/
                  $.each([
                    'preventDefault',
                    'stopPropagation'
                  ], function (i, fn) {
                    var base = event[fn];
                    event[fn] = function () {
                      try {
                        base.call(event);
                      } catch (e) {
                        if (fn === 'preventDefault') {
                          defaultPrevented = true;
                        }
                      }
                    };
                  });
                  /*jslint unparam: false*/
                  // trigger it
                  $(el).trigger(event);
                  // attach the method
                  if (el[detachedType]) {
                    el[type] = el[detachedType];
                    el[detachedType] = null;
                  }
                  if (defaultFunction && !event.isDefaultPrevented() && !defaultPrevented) {
                    defaultFunction(event);
                  }
                },
                washMouseEvent: function (e) {
                  var ret = e.originalEvent || e;
                  // computed by jQuery, needed by IE8
                  if (ret.pageX === UNDEFINED) {
                    // #1236
                    ret.pageX = e.pageX;
                    ret.pageY = e.pageY;
                  }
                  return ret;
                },
                animate: function (el, params, options) {
                  var $el = $(el);
                  if (!el.style) {
                    el.style = {};  // #1881
                  }
                  if (params.d) {
                    el.toD = params.d;
                    // keep the array form for paths, used in $.fx.step.d
                    params.d = 1;  // because in jQuery, animating to an array has a different meaning
                  }
                  $el.stop();
                  if (params.opacity !== UNDEFINED && el.attr) {
                    params.opacity += 'px';  // force jQuery to use same logic as width and height (#2161)
                  }
                  el.hasAnim = 1;
                  // #3342
                  $el.animate(params, options);
                },
                stop: function (el) {
                  if (el.hasAnim) {
                    // #3342, memory leak on calling $(el) from destroy
                    $(el).stop();
                  }
                }
              };
            }(win.jQuery));
            // check for a custom HighchartsAdapter defined prior to this file
            var globalAdapter = win.HighchartsAdapter, adapter = globalAdapter || {};
            // Initialize the adapter
            if (globalAdapter) {
              globalAdapter.init.call(globalAdapter, pathAnim);
            }
            // Utility functions. If the HighchartsAdapter is not defined, adapter is an empty object
            // and all the utility functions will be null. In that case they are populated by the
            // default adapters below.
            var adapterRun = adapter.adapterRun, getScript = adapter.getScript, inArray = adapter.inArray, each = Highcharts.each = adapter.each, grep = adapter.grep, offset = adapter.offset, map = adapter.map, addEvent = adapter.addEvent, removeEvent = adapter.removeEvent, fireEvent = adapter.fireEvent, washMouseEvent = adapter.washMouseEvent, animate = adapter.animate, stop = adapter.stop;
            /* ****************************************************************************
		 * Handle the options                                                         *
		 *****************************************************************************/
            defaultOptions = {
              colors: [
                '#7cb5ec',
                '#434348',
                '#90ed7d',
                '#f7a35c',
                '#8085e9',
                '#f15c80',
                '#e4d354',
                '#2b908f',
                '#f45b5b',
                '#91e8e1'
              ],
              symbols: [
                'circle',
                'diamond',
                'square',
                'triangle',
                'triangle-down'
              ],
              lang: {
                loading: 'Loading...',
                months: [
                  'January',
                  'February',
                  'March',
                  'April',
                  'May',
                  'June',
                  'July',
                  'August',
                  'September',
                  'October',
                  'November',
                  'December'
                ],
                shortMonths: [
                  'Jan',
                  'Feb',
                  'Mar',
                  'Apr',
                  'May',
                  'Jun',
                  'Jul',
                  'Aug',
                  'Sep',
                  'Oct',
                  'Nov',
                  'Dec'
                ],
                weekdays: [
                  'Sunday',
                  'Monday',
                  'Tuesday',
                  'Wednesday',
                  'Thursday',
                  'Friday',
                  'Saturday'
                ],
                decimalPoint: '.',
                numericSymbols: [
                  'k',
                  'M',
                  'G',
                  'T',
                  'P',
                  'E'
                ],
                resetZoom: 'Reset zoom',
                resetZoomTitle: 'Reset zoom level 1:1',
                thousandsSep: ' '
              },
              global: {
                useUTC: true,
                canvasToolsURL: 'http://code.highcharts.com/4.1.9/modules/canvas-tools.js',
                VMLRadialGradientURL: 'http://code.highcharts.com/4.1.9/gfx/vml-radial-gradient.png'
              },
              chart: {
                borderColor: '#4572A7',
                borderRadius: 0,
                defaultSeriesType: 'line',
                ignoreHiddenSeries: true,
                spacing: [
                  10,
                  10,
                  15,
                  10
                ],
                backgroundColor: '#FFFFFF',
                plotBorderColor: '#C0C0C0',
                resetZoomButton: {
                  theme: { zIndex: 20 },
                  position: {
                    align: 'right',
                    x: -10,
                    y: 10
                  }
                }
              },
              title: {
                text: 'Chart title',
                align: 'center',
                margin: 15,
                style: {
                  color: '#333333',
                  fontSize: '18px'
                }
              },
              subtitle: {
                text: '',
                align: 'center',
                style: { color: '#555555' }
              },
              plotOptions: {
                line: {
                  allowPointSelect: false,
                  showCheckbox: false,
                  animation: { duration: 1000 },
                  events: {},
                  lineWidth: 2,
                  marker: {
                    lineWidth: 0,
                    radius: 4,
                    lineColor: '#FFFFFF',
                    states: {
                      hover: {
                        enabled: true,
                        lineWidthPlus: 1,
                        radiusPlus: 2
                      },
                      select: {
                        fillColor: '#FFFFFF',
                        lineColor: '#000000',
                        lineWidth: 2
                      }
                    }
                  },
                  point: { events: {} },
                  dataLabels: {
                    align: 'center',
                    formatter: function () {
                      return this.y === null ? '' : Highcharts.numberFormat(this.y, -1);
                    },
                    style: {
                      color: 'contrast',
                      fontSize: '11px',
                      fontWeight: 'bold',
                      textShadow: '0 0 6px contrast, 0 0 3px contrast'
                    },
                    verticalAlign: 'bottom',
                    x: 0,
                    y: 0,
                    padding: 5
                  },
                  cropThreshold: 300,
                  pointRange: 0,
                  softThreshold: true,
                  states: {
                    hover: {
                      lineWidthPlus: 1,
                      marker: {},
                      halo: {
                        size: 10,
                        opacity: 0.25
                      }
                    },
                    select: { marker: {} }
                  },
                  stickyTracking: true,
                  turboThreshold: 1000
                }
              },
              labels: {
                style: {
                  position: ABSOLUTE,
                  color: '#3E576F'
                }
              },
              legend: {
                enabled: true,
                align: 'center',
                layout: 'horizontal',
                labelFormatter: function () {
                  return this.name;
                },
                borderColor: '#909090',
                borderRadius: 0,
                navigation: {
                  activeColor: '#274b6d',
                  inactiveColor: '#CCC'
                },
                shadow: false,
                itemStyle: {
                  color: '#333333',
                  fontSize: '12px',
                  fontWeight: 'bold'
                },
                itemHoverStyle: { color: '#000' },
                itemHiddenStyle: { color: '#CCC' },
                itemCheckboxStyle: {
                  position: ABSOLUTE,
                  width: '13px',
                  height: '13px'
                },
                symbolPadding: 5,
                verticalAlign: 'bottom',
                x: 0,
                y: 0,
                title: { style: { fontWeight: 'bold' } }
              },
              loading: {
                labelStyle: {
                  fontWeight: 'bold',
                  position: RELATIVE,
                  top: '45%'
                },
                style: {
                  position: ABSOLUTE,
                  backgroundColor: 'white',
                  opacity: 0.5,
                  textAlign: 'center'
                }
              },
              tooltip: {
                enabled: true,
                animation: hasSVG,
                backgroundColor: 'rgba(249, 249, 249, .85)',
                borderWidth: 1,
                borderRadius: 3,
                dateTimeLabelFormats: {
                  millisecond: '%A, %b %e, %H:%M:%S.%L',
                  second: '%A, %b %e, %H:%M:%S',
                  minute: '%A, %b %e, %H:%M',
                  hour: '%A, %b %e, %H:%M',
                  day: '%A, %b %e, %Y',
                  week: 'Week from %A, %b %e, %Y',
                  month: '%B %Y',
                  year: '%Y'
                },
                footerFormat: '',
                headerFormat: '<span style="font-size: 10px">{point.key}</span><br/>',
                pointFormat: '<span style="color:{point.color}">\u25cf</span> {series.name}: <b>{point.y}</b><br/>',
                shadow: true,
                snap: isTouchDevice ? 25 : 10,
                style: {
                  color: '#333333',
                  cursor: 'default',
                  fontSize: '12px',
                  padding: '8px',
                  pointerEvents: 'none',
                  whiteSpace: 'nowrap'
                }
              },
              credits: {
                enabled: true,
                text: 'Highcharts.com',
                href: 'http://www.highcharts.com',
                position: {
                  align: 'right',
                  x: -10,
                  verticalAlign: 'bottom',
                  y: -5
                },
                style: {
                  cursor: 'pointer',
                  color: '#909090',
                  fontSize: '9px'
                }
              }
            };
            // Series defaults
            var defaultPlotOptions = defaultOptions.plotOptions, defaultSeriesOptions = defaultPlotOptions.line;
            // set the default time methods
            setTimeMethods();
            /**
		 * Set the time methods globally based on the useUTC option. Time method can be either
		 * local time or UTC (default).
		 */
            function setTimeMethods() {
              var globalOptions = defaultOptions.global, useUTC = globalOptions.useUTC, GET = useUTC ? 'getUTC' : 'get', SET = useUTC ? 'setUTC' : 'set';
              Date = globalOptions.Date || window.Date;
              timezoneOffset = useUTC && globalOptions.timezoneOffset;
              getTimezoneOffset = useUTC && globalOptions.getTimezoneOffset;
              makeTime = function (year, month, date, hours, minutes, seconds) {
                var d;
                if (useUTC) {
                  d = Date.UTC.apply(0, arguments);
                  d += getTZOffset(d);
                } else {
                  d = new Date(year, month, pick(date, 1), pick(hours, 0), pick(minutes, 0), pick(seconds, 0)).getTime();
                }
                return d;
              };
              getMinutes = GET + 'Minutes';
              getHours = GET + 'Hours';
              getDay = GET + 'Day';
              getDate = GET + 'Date';
              getMonth = GET + 'Month';
              getFullYear = GET + 'FullYear';
              setMilliseconds = SET + 'Milliseconds';
              setSeconds = SET + 'Seconds';
              setMinutes = SET + 'Minutes';
              setHours = SET + 'Hours';
              setDate = SET + 'Date';
              setMonth = SET + 'Month';
              setFullYear = SET + 'FullYear';
            }
            /**
		 * Merge the default options with custom options and return the new options structure
		 * @param {Object} options The new custom options
		 */
            function setOptions(options) {
              // Copy in the default options
              defaultOptions = merge(true, defaultOptions, options);
              // Apply UTC
              setTimeMethods();
              return defaultOptions;
            }
            /**
		 * Get the updated default options. Until 3.0.7, merely exposing defaultOptions for outside modules
		 * wasn't enough because the setOptions method created a new object.
		 */
            function getOptions() {
              return defaultOptions;
            }
            /**
		 * Handle color operations. The object methods are chainable.
		 * @param {String} input The input color in either rbga or hex format
		 */
            var rgbaRegEx = /rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]?(?:\.[0-9]+)?)\s*\)/, hexRegEx = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/, rgbRegEx = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/;
            var Color = function (input) {
              // declare variables
              var rgba = [], result, stops;
              /**
			 * Parse the input color to rgba array
			 * @param {String} input
			 */
              function init(input) {
                // Gradients
                if (input && input.stops) {
                  stops = map(input.stops, function (stop) {
                    return Color(stop[1]);
                  });  // Solid colors
                } else {
                  // rgba
                  result = rgbaRegEx.exec(input);
                  if (result) {
                    rgba = [
                      pInt(result[1]),
                      pInt(result[2]),
                      pInt(result[3]),
                      parseFloat(result[4], 10)
                    ];
                  } else {
                    // hex
                    result = hexRegEx.exec(input);
                    if (result) {
                      rgba = [
                        pInt(result[1], 16),
                        pInt(result[2], 16),
                        pInt(result[3], 16),
                        1
                      ];
                    } else {
                      // rgb
                      result = rgbRegEx.exec(input);
                      if (result) {
                        rgba = [
                          pInt(result[1]),
                          pInt(result[2]),
                          pInt(result[3]),
                          1
                        ];
                      }
                    }
                  }
                }
              }
              /**
			 * Return the color a specified format
			 * @param {String} format
			 */
              function get(format) {
                var ret;
                if (stops) {
                  ret = merge(input);
                  ret.stops = [].concat(ret.stops);
                  each(stops, function (stop, i) {
                    ret.stops[i] = [
                      ret.stops[i][0],
                      stop.get(format)
                    ];
                  });  // it's NaN if gradient colors on a column chart
                } else if (rgba && !isNaN(rgba[0])) {
                  if (format === 'rgb') {
                    ret = 'rgb(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ')';
                  } else if (format === 'a') {
                    ret = rgba[3];
                  } else {
                    ret = 'rgba(' + rgba.join(',') + ')';
                  }
                } else {
                  ret = input;
                }
                return ret;
              }
              /**
			 * Brighten the color
			 * @param {Number} alpha
			 */
              function brighten(alpha) {
                if (stops) {
                  each(stops, function (stop) {
                    stop.brighten(alpha);
                  });
                } else if (isNumber(alpha) && alpha !== 0) {
                  var i;
                  for (i = 0; i < 3; i++) {
                    rgba[i] += pInt(alpha * 255);
                    if (rgba[i] < 0) {
                      rgba[i] = 0;
                    }
                    if (rgba[i] > 255) {
                      rgba[i] = 255;
                    }
                  }
                }
                return this;
              }
              /**
			 * Set the color's opacity to a given alpha value
			 * @param {Number} alpha
			 */
              function setOpacity(alpha) {
                rgba[3] = alpha;
                return this;
              }
              // initialize: parse the input
              init(input);
              // public methods
              return {
                get: get,
                brighten: brighten,
                rgba: rgba,
                setOpacity: setOpacity,
                raw: input
              };
            };
            /**
		 * A wrapper object for SVG elements
		 */
            function SVGElement() {
            }
            SVGElement.prototype = {
              opacity: 1,
              textProps: [
                'fontSize',
                'fontWeight',
                'fontFamily',
                'fontStyle',
                'color',
                'lineHeight',
                'width',
                'textDecoration',
                'textOverflow',
                'textShadow'
              ],
              init: function (renderer, nodeName) {
                var wrapper = this;
                wrapper.element = nodeName === 'span' ? createElement(nodeName) : doc.createElementNS(SVG_NS, nodeName);
                wrapper.renderer = renderer;
              },
              animate: function (params, options, complete) {
                var animOptions = pick(options, this.renderer.globalAnimation, true);
                stop(this);
                // stop regardless of animation actually running, or reverting to .attr (#607)
                if (animOptions) {
                  animOptions = merge(animOptions, {});
                  //#2625
                  if (complete) {
                    // allows using a callback with the global animation without overwriting it
                    animOptions.complete = complete;
                  }
                  animate(this, params, animOptions);
                } else {
                  this.attr(params, null, complete);
                }
                return this;
              },
              colorGradient: function (color, prop, elem) {
                var renderer = this.renderer, colorObject, gradName, gradAttr, radAttr, gradients, gradientObject, stops, stopColor, stopOpacity, radialReference, n, id, key = [];
                // Apply linear or radial gradients
                if (color.linearGradient) {
                  gradName = 'linearGradient';
                } else if (color.radialGradient) {
                  gradName = 'radialGradient';
                }
                if (gradName) {
                  gradAttr = color[gradName];
                  gradients = renderer.gradients;
                  stops = color.stops;
                  radialReference = elem.radialReference;
                  // Keep < 2.2 kompatibility
                  if (isArray(gradAttr)) {
                    color[gradName] = gradAttr = {
                      x1: gradAttr[0],
                      y1: gradAttr[1],
                      x2: gradAttr[2],
                      y2: gradAttr[3],
                      gradientUnits: 'userSpaceOnUse'
                    };
                  }
                  // Correct the radial gradient for the radial reference system
                  if (gradName === 'radialGradient' && radialReference && !defined(gradAttr.gradientUnits)) {
                    radAttr = gradAttr;
                    // Save the radial attributes for updating
                    gradAttr = merge(gradAttr, renderer.getRadialAttr(radialReference, radAttr), { gradientUnits: 'userSpaceOnUse' });
                  }
                  // Build the unique key to detect whether we need to create a new element (#1282)
                  for (n in gradAttr) {
                    if (n !== 'id') {
                      key.push(n, gradAttr[n]);
                    }
                  }
                  for (n in stops) {
                    key.push(stops[n]);
                  }
                  key = key.join(',');
                  // Check if a gradient object with the same config object is created within this renderer
                  if (gradients[key]) {
                    id = gradients[key].attr('id');
                  } else {
                    // Set the id and create the element
                    gradAttr.id = id = PREFIX + idCounter++;
                    gradients[key] = gradientObject = renderer.createElement(gradName).attr(gradAttr).add(renderer.defs);
                    gradientObject.radAttr = radAttr;
                    // The gradient needs to keep a list of stops to be able to destroy them
                    gradientObject.stops = [];
                    each(stops, function (stop) {
                      var stopObject;
                      if (stop[1].indexOf('rgba') === 0) {
                        colorObject = Color(stop[1]);
                        stopColor = colorObject.get('rgb');
                        stopOpacity = colorObject.get('a');
                      } else {
                        stopColor = stop[1];
                        stopOpacity = 1;
                      }
                      stopObject = renderer.createElement('stop').attr({
                        offset: stop[0],
                        'stop-color': stopColor,
                        'stop-opacity': stopOpacity
                      }).add(gradientObject);
                      // Add the stop element to the gradient
                      gradientObject.stops.push(stopObject);
                    });
                  }
                  // Set the reference to the gradient object
                  elem.setAttribute(prop, 'url(' + renderer.url + '#' + id + ')');
                  elem.gradient = key;
                }
              },
              applyTextShadow: function (textShadow) {
                var elem = this.element, tspans, hasContrast = textShadow.indexOf('contrast') !== -1, styles = {}, forExport = this.renderer.forExport,
                  // IE10 and IE11 report textShadow in elem.style even though it doesn't work. Check
                  // this again with new IE release. In exports, the rendering is passed to PhantomJS. 
                  supports = forExport || elem.style.textShadow !== UNDEFINED && !isMS;
                // When the text shadow is set to contrast, use dark stroke for light text and vice versa
                if (hasContrast) {
                  styles.textShadow = textShadow = textShadow.replace(/contrast/g, this.renderer.getContrast(elem.style.fill));
                }
                // Safari with retina displays as well as PhantomJS bug (#3974). Firefox does not tolerate this,
                // it removes the text shadows.
                if (isWebKit || forExport) {
                  styles.textRendering = 'geometricPrecision';
                }
                /* Selective side-by-side testing in supported browser (http://jsfiddle.net/highcharts/73L1ptrh/)
				if (elem.textContent.indexOf('2.') === 0) {
					elem.style['text-shadow'] = 'none';
					supports = false;
				}
				// */
                // No reason to polyfill, we've got native support
                if (supports) {
                  this.css(styles);  // Apply altered textShadow or textRendering workaround
                } else {
                  this.fakeTS = true;
                  // Fake text shadow
                  // In order to get the right y position of the clones, 
                  // copy over the y setter
                  this.ySetter = this.xSetter;
                  tspans = [].slice.call(elem.getElementsByTagName('tspan'));
                  each(textShadow.split(/\s?,\s?/g), function (textShadow) {
                    var firstChild = elem.firstChild, color, strokeWidth;
                    textShadow = textShadow.split(' ');
                    color = textShadow[textShadow.length - 1];
                    // Approximately tune the settings to the text-shadow behaviour
                    strokeWidth = textShadow[textShadow.length - 2];
                    if (strokeWidth) {
                      each(tspans, function (tspan, y) {
                        var clone;
                        // Let the first line start at the correct X position
                        if (y === 0) {
                          tspan.setAttribute('x', elem.getAttribute('x'));
                          y = elem.getAttribute('y');
                          tspan.setAttribute('y', y || 0);
                          if (y === null) {
                            elem.setAttribute('y', 0);
                          }
                        }
                        // Create the clone and apply shadow properties
                        clone = tspan.cloneNode(1);
                        attr(clone, {
                          'class': PREFIX + 'text-shadow',
                          'fill': color,
                          'stroke': color,
                          'stroke-opacity': 1 / mathMax(pInt(strokeWidth), 3),
                          'stroke-width': strokeWidth,
                          'stroke-linejoin': 'round'
                        });
                        elem.insertBefore(clone, firstChild);
                      });
                    }
                  });
                }
              },
              attr: function (hash, val, complete) {
                var key, value, element = this.element, hasSetSymbolSize, ret = this, skipAttr;
                // single key-value pair
                if (typeof hash === 'string' && val !== UNDEFINED) {
                  key = hash;
                  hash = {};
                  hash[key] = val;
                }
                // used as a getter: first argument is a string, second is undefined
                if (typeof hash === 'string') {
                  ret = (this[hash + 'Getter'] || this._defaultGetter).call(this, hash, element);  // setter
                } else {
                  for (key in hash) {
                    value = hash[key];
                    skipAttr = false;
                    if (this.symbolName && /^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(key)) {
                      if (!hasSetSymbolSize) {
                        this.symbolAttr(hash);
                        hasSetSymbolSize = true;
                      }
                      skipAttr = true;
                    }
                    if (this.rotation && (key === 'x' || key === 'y')) {
                      this.doTransform = true;
                    }
                    if (!skipAttr) {
                      (this[key + 'Setter'] || this._defaultSetter).call(this, value, key, element);
                    }
                    // Let the shadow follow the main element
                    if (this.shadows && /^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(key)) {
                      this.updateShadows(key, value);
                    }
                  }
                  // Update transform. Do this outside the loop to prevent redundant updating for batch setting
                  // of attributes.
                  if (this.doTransform) {
                    this.updateTransform();
                    this.doTransform = false;
                  }
                }
                // In accordance with animate, run a complete callback
                if (complete) {
                  complete();
                }
                return ret;
              },
              updateShadows: function (key, value) {
                var shadows = this.shadows, i = shadows.length;
                while (i--) {
                  shadows[i].setAttribute(key, key === 'height' ? mathMax(value - (shadows[i].cutHeight || 0), 0) : key === 'd' ? this.d : value);
                }
              },
              addClass: function (className) {
                var element = this.element, currentClassName = attr(element, 'class') || '';
                if (currentClassName.indexOf(className) === -1) {
                  attr(element, 'class', currentClassName + ' ' + className);
                }
                return this;
              },
              symbolAttr: function (hash) {
                var wrapper = this;
                each([
                  'x',
                  'y',
                  'r',
                  'start',
                  'end',
                  'width',
                  'height',
                  'innerR',
                  'anchorX',
                  'anchorY'
                ], function (key) {
                  wrapper[key] = pick(hash[key], wrapper[key]);
                });
                wrapper.attr({ d: wrapper.renderer.symbols[wrapper.symbolName](wrapper.x, wrapper.y, wrapper.width, wrapper.height, wrapper) });
              },
              clip: function (clipRect) {
                return this.attr('clip-path', clipRect ? 'url(' + this.renderer.url + '#' + clipRect.id + ')' : NONE);
              },
              crisp: function (rect) {
                var wrapper = this, key, attribs = {}, normalizer, strokeWidth = rect.strokeWidth || wrapper.strokeWidth || 0;
                normalizer = mathRound(strokeWidth) % 2 / 2;
                // mathRound because strokeWidth can sometimes have roundoff errors
                // normalize for crisp edges
                rect.x = mathFloor(rect.x || wrapper.x || 0) + normalizer;
                rect.y = mathFloor(rect.y || wrapper.y || 0) + normalizer;
                rect.width = mathFloor((rect.width || wrapper.width || 0) - 2 * normalizer);
                rect.height = mathFloor((rect.height || wrapper.height || 0) - 2 * normalizer);
                rect.strokeWidth = strokeWidth;
                for (key in rect) {
                  if (wrapper[key] !== rect[key]) {
                    // only set attribute if changed
                    wrapper[key] = attribs[key] = rect[key];
                  }
                }
                return attribs;
              },
              css: function (styles) {
                var elemWrapper = this, oldStyles = elemWrapper.styles, newStyles = {}, elem = elemWrapper.element, textWidth, n, serializedCss = '', hyphenate, hasNew = !oldStyles;
                // convert legacy
                if (styles && styles.color) {
                  styles.fill = styles.color;
                }
                // Filter out existing styles to increase performance (#2640)
                if (oldStyles) {
                  for (n in styles) {
                    if (styles[n] !== oldStyles[n]) {
                      newStyles[n] = styles[n];
                      hasNew = true;
                    }
                  }
                }
                if (hasNew) {
                  textWidth = elemWrapper.textWidth = styles && styles.width && elem.nodeName.toLowerCase() === 'text' && pInt(styles.width) || elemWrapper.textWidth;
                  // #3501
                  // Merge the new styles with the old ones
                  if (oldStyles) {
                    styles = extend(oldStyles, newStyles);
                  }
                  // store object
                  elemWrapper.styles = styles;
                  if (textWidth && (useCanVG || !hasSVG && elemWrapper.renderer.forExport)) {
                    delete styles.width;
                  }
                  // serialize and set style attribute
                  if (isMS && !hasSVG) {
                    css(elemWrapper.element, styles);
                  } else {
                    /*jslint unparam: true*/
                    hyphenate = function (a, b) {
                      return '-' + b.toLowerCase();
                    };
                    /*jslint unparam: false*/
                    for (n in styles) {
                      serializedCss += n.replace(/([A-Z])/g, hyphenate) + ':' + styles[n] + ';';
                    }
                    attr(elem, 'style', serializedCss);  // #1881
                  }
                  // re-build text
                  if (textWidth && elemWrapper.added) {
                    elemWrapper.renderer.buildText(elemWrapper);
                  }
                }
                return elemWrapper;
              },
              on: function (eventType, handler) {
                var svgElement = this, element = svgElement.element;
                // touch
                if (hasTouch && eventType === 'click') {
                  element.ontouchstart = function (e) {
                    svgElement.touchEventFired = Date.now();
                    e.preventDefault();
                    handler.call(element, e);
                  };
                  element.onclick = function (e) {
                    if (userAgent.indexOf('Android') === -1 || Date.now() - (svgElement.touchEventFired || 0) > 1100) {
                      // #2269
                      handler.call(element, e);
                    }
                  };
                } else {
                  // simplest possible event model for internal use
                  element['on' + eventType] = handler;
                }
                return this;
              },
              setRadialReference: function (coordinates) {
                var existingGradient = this.renderer.gradients[this.element.gradient];
                this.element.radialReference = coordinates;
                // On redrawing objects with an existing gradient, the gradient needs
                // to be repositioned (#3801)
                if (existingGradient && existingGradient.radAttr) {
                  existingGradient.animate(this.renderer.getRadialAttr(coordinates, existingGradient.radAttr));
                }
                return this;
              },
              translate: function (x, y) {
                return this.attr({
                  translateX: x,
                  translateY: y
                });
              },
              invert: function () {
                var wrapper = this;
                wrapper.inverted = true;
                wrapper.updateTransform();
                return wrapper;
              },
              updateTransform: function () {
                var wrapper = this, translateX = wrapper.translateX || 0, translateY = wrapper.translateY || 0, scaleX = wrapper.scaleX, scaleY = wrapper.scaleY, inverted = wrapper.inverted, rotation = wrapper.rotation, element = wrapper.element, transform;
                // flipping affects translate as adjustment for flipping around the group's axis
                if (inverted) {
                  translateX += wrapper.attr('width');
                  translateY += wrapper.attr('height');
                }
                // Apply translate. Nearly all transformed elements have translation, so instead
                // of checking for translate = 0, do it always (#1767, #1846).
                transform = ['translate(' + translateX + ',' + translateY + ')'];
                // apply rotation
                if (inverted) {
                  transform.push('rotate(90) scale(-1,1)');
                } else if (rotation) {
                  // text rotation
                  transform.push('rotate(' + rotation + ' ' + (element.getAttribute('x') || 0) + ' ' + (element.getAttribute('y') || 0) + ')');  // Delete bBox memo when the rotation changes
                                                                                                                                                 //delete wrapper.bBox;
                }
                // apply scale
                if (defined(scaleX) || defined(scaleY)) {
                  transform.push('scale(' + pick(scaleX, 1) + ' ' + pick(scaleY, 1) + ')');
                }
                if (transform.length) {
                  element.setAttribute('transform', transform.join(' '));
                }
              },
              toFront: function () {
                var element = this.element;
                element.parentNode.appendChild(element);
                return this;
              },
              align: function (alignOptions, alignByTranslate, box) {
                var align, vAlign, x, y, attribs = {}, alignTo, renderer = this.renderer, alignedObjects = renderer.alignedObjects;
                // First call on instanciate
                if (alignOptions) {
                  this.alignOptions = alignOptions;
                  this.alignByTranslate = alignByTranslate;
                  if (!box || isString(box)) {
                    // boxes other than renderer handle this internally
                    this.alignTo = alignTo = box || 'renderer';
                    erase(alignedObjects, this);
                    // prevent duplicates, like legendGroup after resize
                    alignedObjects.push(this);
                    box = null;  // reassign it below
                  }  // When called on resize, no arguments are supplied
                } else {
                  alignOptions = this.alignOptions;
                  alignByTranslate = this.alignByTranslate;
                  alignTo = this.alignTo;
                }
                box = pick(box, renderer[alignTo], renderer);
                // Assign variables
                align = alignOptions.align;
                vAlign = alignOptions.verticalAlign;
                x = (box.x || 0) + (alignOptions.x || 0);
                // default: left align
                y = (box.y || 0) + (alignOptions.y || 0);
                // default: top align
                // Align
                if (align === 'right' || align === 'center') {
                  x += (box.width - (alignOptions.width || 0)) / {
                    right: 1,
                    center: 2
                  }[align];
                }
                attribs[alignByTranslate ? 'translateX' : 'x'] = mathRound(x);
                // Vertical align
                if (vAlign === 'bottom' || vAlign === 'middle') {
                  y += (box.height - (alignOptions.height || 0)) / ({
                    bottom: 1,
                    middle: 2
                  }[vAlign] || 1);
                }
                attribs[alignByTranslate ? 'translateY' : 'y'] = mathRound(y);
                // Animate only if already placed
                this[this.placed ? 'animate' : 'attr'](attribs);
                this.placed = true;
                this.alignAttr = attribs;
                return this;
              },
              getBBox: function (reload) {
                var wrapper = this, bBox,
                  // = wrapper.bBox,
                  renderer = wrapper.renderer, width, height, rotation = wrapper.rotation, element = wrapper.element, styles = wrapper.styles, rad = rotation * deg2rad, textStr = wrapper.textStr, textShadow, elemStyle = element.style, toggleTextShadowShim, cacheKey;
                if (textStr !== UNDEFINED) {
                  // Properties that affect bounding box
                  cacheKey = [
                    '',
                    rotation || 0,
                    styles && styles.fontSize,
                    element.style.width
                  ].join(',');
                  // Since numbers are monospaced, and numerical labels appear a lot in a chart,
                  // we assume that a label of n characters has the same bounding box as others 
                  // of the same length.
                  if (textStr === '' || numRegex.test(textStr)) {
                    cacheKey = 'num:' + textStr.toString().length + cacheKey;  // Caching all strings reduces rendering time by 4-5%.
                  } else {
                    cacheKey = textStr + cacheKey;
                  }
                }
                if (cacheKey && !reload) {
                  bBox = renderer.cache[cacheKey];
                }
                // No cache found
                if (!bBox) {
                  // SVG elements
                  if (element.namespaceURI === SVG_NS || renderer.forExport) {
                    try {
                      // Fails in Firefox if the container has display: none.
                      // When the text shadow shim is used, we need to hide the fake shadows
                      // to get the correct bounding box (#3872)
                      toggleTextShadowShim = this.fakeTS && function (display) {
                        each(element.querySelectorAll('.' + PREFIX + 'text-shadow'), function (tspan) {
                          tspan.style.display = display;
                        });
                      };
                      // Workaround for #3842, Firefox reporting wrong bounding box for shadows
                      if (isFirefox && elemStyle.textShadow) {
                        textShadow = elemStyle.textShadow;
                        elemStyle.textShadow = '';
                      } else if (toggleTextShadowShim) {
                        toggleTextShadowShim(NONE);
                      }
                      bBox = element.getBBox ? extend({}, element.getBBox()) : {
                        width: element.offsetWidth,
                        height: element.offsetHeight
                      };
                      // #3842
                      if (textShadow) {
                        elemStyle.textShadow = textShadow;
                      } else if (toggleTextShadowShim) {
                        toggleTextShadowShim('');
                      }
                    } catch (e) {
                    }
                    // If the bBox is not set, the try-catch block above failed. The other condition
                    // is for Opera that returns a width of -Infinity on hidden elements.
                    if (!bBox || bBox.width < 0) {
                      bBox = {
                        width: 0,
                        height: 0
                      };
                    }  // VML Renderer or useHTML within SVG
                  } else {
                    bBox = wrapper.htmlGetBBox();
                  }
                  // True SVG elements as well as HTML elements in modern browsers using the .useHTML option
                  // need to compensated for rotation
                  if (renderer.isSVG) {
                    width = bBox.width;
                    height = bBox.height;
                    // Workaround for wrong bounding box in IE9 and IE10 (#1101, #1505, #1669, #2568)
                    if (isMS && styles && styles.fontSize === '11px' && height.toPrecision(3) === '16.9') {
                      bBox.height = height = 14;
                    }
                    // Adjust for rotated text
                    if (rotation) {
                      bBox.width = mathAbs(height * mathSin(rad)) + mathAbs(width * mathCos(rad));
                      bBox.height = mathAbs(height * mathCos(rad)) + mathAbs(width * mathSin(rad));
                    }
                  }
                  // Cache it
                  if (cacheKey) {
                    renderer.cache[cacheKey] = bBox;
                  }
                }
                return bBox;
              },
              show: function (inherit) {
                return this.attr({ visibility: inherit ? 'inherit' : VISIBLE });
              },
              hide: function () {
                return this.attr({ visibility: HIDDEN });
              },
              fadeOut: function (duration) {
                var elemWrapper = this;
                elemWrapper.animate({ opacity: 0 }, {
                  duration: duration || 150,
                  complete: function () {
                    elemWrapper.attr({ y: -9999 });  // #3088, assuming we're only using this for tooltips
                  }
                });
              },
              add: function (parent) {
                var renderer = this.renderer, element = this.element, inserted;
                if (parent) {
                  this.parentGroup = parent;
                }
                // mark as inverted
                this.parentInverted = parent && parent.inverted;
                // build formatted text
                if (this.textStr !== undefined) {
                  renderer.buildText(this);
                }
                // Mark as added
                this.added = true;
                // If we're adding to renderer root, or other elements in the group 
                // have a z index, we need to handle it
                if (!parent || parent.handleZ || this.zIndex) {
                  inserted = this.zIndexSetter();
                }
                // If zIndex is not handled, append at the end
                if (!inserted) {
                  (parent ? parent.element : renderer.box).appendChild(element);
                }
                // fire an event for internal hooks
                if (this.onAdd) {
                  this.onAdd();
                }
                return this;
              },
              safeRemoveChild: function (element) {
                var parentNode = element.parentNode;
                if (parentNode) {
                  parentNode.removeChild(element);
                }
              },
              destroy: function () {
                var wrapper = this, element = wrapper.element || {}, shadows = wrapper.shadows, parentToClean = wrapper.renderer.isSVG && element.nodeName === 'SPAN' && wrapper.parentGroup, grandParent, key, i;
                // remove events
                element.onclick = element.onmouseout = element.onmouseover = element.onmousemove = element.point = null;
                stop(wrapper);
                // stop running animations
                if (wrapper.clipPath) {
                  wrapper.clipPath = wrapper.clipPath.destroy();
                }
                // Destroy stops in case this is a gradient object
                if (wrapper.stops) {
                  for (i = 0; i < wrapper.stops.length; i++) {
                    wrapper.stops[i] = wrapper.stops[i].destroy();
                  }
                  wrapper.stops = null;
                }
                // remove element
                wrapper.safeRemoveChild(element);
                // destroy shadows
                if (shadows) {
                  each(shadows, function (shadow) {
                    wrapper.safeRemoveChild(shadow);
                  });
                }
                // In case of useHTML, clean up empty containers emulating SVG groups (#1960, #2393, #2697).
                while (parentToClean && parentToClean.div && parentToClean.div.childNodes.length === 0) {
                  grandParent = parentToClean.parentGroup;
                  wrapper.safeRemoveChild(parentToClean.div);
                  delete parentToClean.div;
                  parentToClean = grandParent;
                }
                // remove from alignObjects
                if (wrapper.alignTo) {
                  erase(wrapper.renderer.alignedObjects, wrapper);
                }
                for (key in wrapper) {
                  delete wrapper[key];
                }
                return null;
              },
              shadow: function (shadowOptions, group, cutOff) {
                var shadows = [], i, shadow, element = this.element, strokeWidth, shadowWidth, shadowElementOpacity,
                  // compensate for inverted plot area
                  transform;
                if (shadowOptions) {
                  shadowWidth = pick(shadowOptions.width, 3);
                  shadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;
                  transform = this.parentInverted ? '(-1,-1)' : '(' + pick(shadowOptions.offsetX, 1) + ', ' + pick(shadowOptions.offsetY, 1) + ')';
                  for (i = 1; i <= shadowWidth; i++) {
                    shadow = element.cloneNode(0);
                    strokeWidth = shadowWidth * 2 + 1 - 2 * i;
                    attr(shadow, {
                      'isShadow': 'true',
                      'stroke': shadowOptions.color || 'black',
                      'stroke-opacity': shadowElementOpacity * i,
                      'stroke-width': strokeWidth,
                      'transform': 'translate' + transform,
                      'fill': NONE
                    });
                    if (cutOff) {
                      attr(shadow, 'height', mathMax(attr(shadow, 'height') - strokeWidth, 0));
                      shadow.cutHeight = strokeWidth;
                    }
                    if (group) {
                      group.element.appendChild(shadow);
                    } else {
                      element.parentNode.insertBefore(shadow, element);
                    }
                    shadows.push(shadow);
                  }
                  this.shadows = shadows;
                }
                return this;
              },
              xGetter: function (key) {
                if (this.element.nodeName === 'circle') {
                  key = {
                    x: 'cx',
                    y: 'cy'
                  }[key] || key;
                }
                return this._defaultGetter(key);
              },
              _defaultGetter: function (key) {
                var ret = pick(this[key], this.element ? this.element.getAttribute(key) : null, 0);
                if (/^[\-0-9\.]+$/.test(ret)) {
                  // is numerical
                  ret = parseFloat(ret);
                }
                return ret;
              },
              dSetter: function (value, key, element) {
                if (value && value.join) {
                  // join path
                  value = value.join(' ');
                }
                if (/(NaN| {2}|^$)/.test(value)) {
                  value = 'M 0 0';
                }
                element.setAttribute(key, value);
                this[key] = value;
              },
              dashstyleSetter: function (value) {
                var i;
                value = value && value.toLowerCase();
                if (value) {
                  value = value.replace('shortdashdotdot', '3,1,1,1,1,1,').replace('shortdashdot', '3,1,1,1').replace('shortdot', '1,1,').replace('shortdash', '3,1,').replace('longdash', '8,3,').replace(/dot/g, '1,3,').replace('dash', '4,3,').replace(/,$/, '').split(',');
                  // ending comma
                  i = value.length;
                  while (i--) {
                    value[i] = pInt(value[i]) * this['stroke-width'];
                  }
                  value = value.join(',').replace('NaN', 'none');
                  // #3226
                  this.element.setAttribute('stroke-dasharray', value);
                }
              },
              alignSetter: function (value) {
                this.element.setAttribute('text-anchor', {
                  left: 'start',
                  center: 'middle',
                  right: 'end'
                }[value]);
              },
              opacitySetter: function (value, key, element) {
                this[key] = value;
                element.setAttribute(key, value);
              },
              titleSetter: function (value) {
                var titleNode = this.element.getElementsByTagName('title')[0];
                if (!titleNode) {
                  titleNode = doc.createElementNS(SVG_NS, 'title');
                  this.element.appendChild(titleNode);
                }
                titleNode.appendChild(doc.createTextNode(String(pick(value), '').replace(/<[^>]*>/g, '')));
              },
              textSetter: function (value) {
                if (value !== this.textStr) {
                  // Delete bBox memo when the text changes
                  delete this.bBox;
                  this.textStr = value;
                  if (this.added) {
                    this.renderer.buildText(this);
                  }
                }
              },
              fillSetter: function (value, key, element) {
                if (typeof value === 'string') {
                  element.setAttribute(key, value);
                } else if (value) {
                  this.colorGradient(value, key, element);
                }
              },
              visibilitySetter: function (value, key, element) {
                // IE9-11 doesn't handle visibilty:inherit well, so we remove the attribute instead (#2881, #3909)
                if (value === 'inherit') {
                  element.removeAttribute(key);
                } else {
                  element.setAttribute(key, value);
                }
              },
              zIndexSetter: function (value, key) {
                var renderer = this.renderer, parentGroup = this.parentGroup, parentWrapper = parentGroup || renderer, parentNode = parentWrapper.element || renderer.box, childNodes, otherElement, otherZIndex, element = this.element, inserted, run = this.added, i;
                if (defined(value)) {
                  element.setAttribute(key, value);
                  // So we can read it for other elements in the group
                  value = +value;
                  if (this[key] === value) {
                    // Only update when needed (#3865)
                    run = false;
                  }
                  this[key] = value;
                }
                // Insert according to this and other elements' zIndex. Before .add() is called,
                // nothing is done. Then on add, or by later calls to zIndexSetter, the node
                // is placed on the right place in the DOM.
                if (run) {
                  value = this.zIndex;
                  if (value && parentGroup) {
                    parentGroup.handleZ = true;
                  }
                  childNodes = parentNode.childNodes;
                  for (i = 0; i < childNodes.length && !inserted; i++) {
                    otherElement = childNodes[i];
                    otherZIndex = attr(otherElement, 'zIndex');
                    if (otherElement !== element && (pInt(otherZIndex) > value || !defined(value) && defined(otherZIndex))) {
                      parentNode.insertBefore(element, otherElement);
                      inserted = true;
                    }
                  }
                  if (!inserted) {
                    parentNode.appendChild(element);
                  }
                }
                return inserted;
              },
              _defaultSetter: function (value, key, element) {
                element.setAttribute(key, value);
              }
            };
            // Some shared setters and getters
            SVGElement.prototype.yGetter = SVGElement.prototype.xGetter;
            SVGElement.prototype.translateXSetter = SVGElement.prototype.translateYSetter = SVGElement.prototype.rotationSetter = SVGElement.prototype.verticalAlignSetter = SVGElement.prototype.scaleXSetter = SVGElement.prototype.scaleYSetter = function (value, key) {
              this[key] = value;
              this.doTransform = true;
            };
            // WebKit and Batik have problems with a stroke-width of zero, so in this case we remove the 
            // stroke attribute altogether. #1270, #1369, #3065, #3072.
            SVGElement.prototype['stroke-widthSetter'] = SVGElement.prototype.strokeSetter = function (value, key, element) {
              this[key] = value;
              // Only apply the stroke attribute if the stroke width is defined and larger than 0
              if (this.stroke && this['stroke-width']) {
                this.strokeWidth = this['stroke-width'];
                SVGElement.prototype.fillSetter.call(this, this.stroke, 'stroke', element);
                // use prototype as instance may be overridden
                element.setAttribute('stroke-width', this['stroke-width']);
                this.hasStroke = true;
              } else if (key === 'stroke-width' && value === 0 && this.hasStroke) {
                element.removeAttribute('stroke');
                this.hasStroke = false;
              }
            };
            /**
		 * The default SVG renderer
		 */
            var SVGRenderer = function () {
              this.init.apply(this, arguments);
            };
            SVGRenderer.prototype = {
              Element: SVGElement,
              init: function (container, width, height, style, forExport, allowHTML) {
                var renderer = this, loc = location, boxWrapper, element, desc;
                boxWrapper = renderer.createElement('svg').attr({ version: '1.1' }).css(this.getStyle(style));
                element = boxWrapper.element;
                container.appendChild(element);
                // For browsers other than IE, add the namespace attribute (#1978)
                if (container.innerHTML.indexOf('xmlns') === -1) {
                  attr(element, 'xmlns', SVG_NS);
                }
                // object properties
                renderer.isSVG = true;
                renderer.box = element;
                renderer.boxWrapper = boxWrapper;
                renderer.alignedObjects = [];
                // Page url used for internal references. #24, #672, #1070
                renderer.url = (isFirefox || isWebKit) && doc.getElementsByTagName('base').length ? loc.href.replace(/#.*?$/, '').replace(/([\('\)])/g, '\\$1').replace(/ /g, '%20') : '';
                // Add description
                desc = this.createElement('desc').add();
                desc.element.appendChild(doc.createTextNode('Created with ' + PRODUCT + ' ' + VERSION));
                renderer.defs = this.createElement('defs').add();
                renderer.allowHTML = allowHTML;
                renderer.forExport = forExport;
                renderer.gradients = {};
                // Object where gradient SvgElements are stored
                renderer.cache = {};
                // Cache for numerical bounding boxes
                renderer.setSize(width, height, false);
                // Issue 110 workaround:
                // In Firefox, if a div is positioned by percentage, its pixel position may land
                // between pixels. The container itself doesn't display this, but an SVG element
                // inside this container will be drawn at subpixel precision. In order to draw
                // sharp lines, this must be compensated for. This doesn't seem to work inside
                // iframes though (like in jsFiddle).
                var subPixelFix, rect;
                if (isFirefox && container.getBoundingClientRect) {
                  renderer.subPixelFix = subPixelFix = function () {
                    css(container, {
                      left: 0,
                      top: 0
                    });
                    rect = container.getBoundingClientRect();
                    css(container, {
                      left: mathCeil(rect.left) - rect.left + PX,
                      top: mathCeil(rect.top) - rect.top + PX
                    });
                  };
                  // run the fix now
                  subPixelFix();
                  // run it on resize
                  addEvent(win, 'resize', subPixelFix);
                }
              },
              getStyle: function (style) {
                return this.style = extend({
                  fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif',
                  fontSize: '12px'
                }, style);
              },
              isHidden: function () {
                return !this.boxWrapper.getBBox().width;
              },
              destroy: function () {
                var renderer = this, rendererDefs = renderer.defs;
                renderer.box = null;
                renderer.boxWrapper = renderer.boxWrapper.destroy();
                // Call destroy on all gradient elements
                destroyObjectProperties(renderer.gradients || {});
                renderer.gradients = null;
                // Defs are null in VMLRenderer
                // Otherwise, destroy them here.
                if (rendererDefs) {
                  renderer.defs = rendererDefs.destroy();
                }
                // Remove sub pixel fix handler
                // We need to check that there is a handler, otherwise all functions that are registered for event 'resize' are removed
                // See issue #982
                if (renderer.subPixelFix) {
                  removeEvent(win, 'resize', renderer.subPixelFix);
                }
                renderer.alignedObjects = null;
                return null;
              },
              createElement: function (nodeName) {
                var wrapper = new this.Element();
                wrapper.init(this, nodeName);
                return wrapper;
              },
              draw: function () {
              },
              getRadialAttr: function (radialReference, gradAttr) {
                return {
                  cx: radialReference[0] - radialReference[2] / 2 + gradAttr.cx * radialReference[2],
                  cy: radialReference[1] - radialReference[2] / 2 + gradAttr.cy * radialReference[2],
                  r: gradAttr.r * radialReference[2]
                };
              },
              buildText: function (wrapper) {
                var textNode = wrapper.element, renderer = this, forExport = renderer.forExport, textStr = pick(wrapper.textStr, '').toString(), hasMarkup = textStr.indexOf('<') !== -1, lines, childNodes = textNode.childNodes, styleRegex, hrefRegex, parentX = attr(textNode, 'x'), textStyles = wrapper.styles, width = wrapper.textWidth, textLineHeight = textStyles && textStyles.lineHeight, textShadow = textStyles && textStyles.textShadow, ellipsis = textStyles && textStyles.textOverflow === 'ellipsis', i = childNodes.length, tempParent = width && !wrapper.added && this.box, getLineHeight = function (tspan) {
                    return textLineHeight ? pInt(textLineHeight) : renderer.fontMetrics(/(px|em)$/.test(tspan && tspan.style.fontSize) ? tspan.style.fontSize : textStyles && textStyles.fontSize || renderer.style.fontSize || 12, tspan).h;
                  }, unescapeAngleBrackets = function (inputStr) {
                    return inputStr.replace(/&lt;/g, '<').replace(/&gt;/g, '>');
                  };
                /// remove old text
                while (i--) {
                  textNode.removeChild(childNodes[i]);
                }
                // Skip tspans, add text directly to text node. The forceTSpan is a hook 
                // used in text outline hack.
                if (!hasMarkup && !textShadow && !ellipsis && textStr.indexOf(' ') === -1) {
                  textNode.appendChild(doc.createTextNode(unescapeAngleBrackets(textStr)));
                  return;  // Complex strings, add more logic
                } else {
                  styleRegex = /<.*style="([^"]+)".*>/;
                  hrefRegex = /<.*href="(http[^"]+)".*>/;
                  if (tempParent) {
                    tempParent.appendChild(textNode);  // attach it to the DOM to read offset width
                  }
                  if (hasMarkup) {
                    lines = textStr.replace(/<(b|strong)>/g, '<span style="font-weight:bold">').replace(/<(i|em)>/g, '<span style="font-style:italic">').replace(/<a/g, '<span').replace(/<\/(b|strong|i|em|a)>/g, '</span>').split(/<br.*?>/g);
                  } else {
                    lines = [textStr];
                  }
                  // remove empty line at end
                  if (lines[lines.length - 1] === '') {
                    lines.pop();
                  }
                  // build the lines
                  each(lines, function (line, lineNo) {
                    var spans, spanNo = 0;
                    line = line.replace(/<span/g, '|||<span').replace(/<\/span>/g, '</span>|||');
                    spans = line.split('|||');
                    each(spans, function (span) {
                      if (span !== '' || spans.length === 1) {
                        var attributes = {}, tspan = doc.createElementNS(SVG_NS, 'tspan'), spanStyle;
                        // #390
                        if (styleRegex.test(span)) {
                          spanStyle = span.match(styleRegex)[1].replace(/(;| |^)color([ :])/, '$1fill$2');
                          attr(tspan, 'style', spanStyle);
                        }
                        if (hrefRegex.test(span) && !forExport) {
                          // Not for export - #1529
                          attr(tspan, 'onclick', 'location.href="' + span.match(hrefRegex)[1] + '"');
                          css(tspan, { cursor: 'pointer' });
                        }
                        span = unescapeAngleBrackets(span.replace(/<(.|\n)*?>/g, '') || ' ');
                        // Nested tags aren't supported, and cause crash in Safari (#1596)
                        if (span !== ' ') {
                          // add the text node
                          tspan.appendChild(doc.createTextNode(span));
                          if (!spanNo) {
                            // first span in a line, align it to the left
                            if (lineNo && parentX !== null) {
                              attributes.x = parentX;
                            }
                          } else {
                            attributes.dx = 0;  // #16
                          }
                          // add attributes
                          attr(tspan, attributes);
                          // Append it
                          textNode.appendChild(tspan);
                          // first span on subsequent line, add the line height
                          if (!spanNo && lineNo) {
                            // allow getting the right offset height in exporting in IE
                            if (!hasSVG && forExport) {
                              css(tspan, { display: 'block' });
                            }
                            // Set the line height based on the font size of either
                            // the text element or the tspan element
                            attr(tspan, 'dy', getLineHeight(tspan));
                          }
                          /*if (width) {
										renderer.breakText(wrapper, width);
									}*/
                          // Check width and apply soft breaks or ellipsis
                          if (width) {
                            var words = span.replace(/([^\^])-/g, '$1- ').split(' '),
                              // #1273
                              hasWhiteSpace = spans.length > 1 || lineNo || words.length > 1 && textStyles.whiteSpace !== 'nowrap', tooLong, wasTooLong, actualWidth, rest = [], dy = getLineHeight(tspan), softLineNo = 1, rotation = wrapper.rotation, wordStr = span,
                              // for ellipsis
                              cursor = wordStr.length,
                              // binary search cursor
                              bBox;
                            while ((hasWhiteSpace || ellipsis) && (words.length || rest.length)) {
                              wrapper.rotation = 0;
                              // discard rotation when computing box
                              bBox = wrapper.getBBox(true);
                              actualWidth = bBox.width;
                              // Old IE cannot measure the actualWidth for SVG elements (#2314)
                              if (!hasSVG && renderer.forExport) {
                                actualWidth = renderer.measureSpanWidth(tspan.firstChild.data, wrapper.styles);
                              }
                              tooLong = actualWidth > width;
                              // For ellipsis, do a binary search for the correct string length
                              if (wasTooLong === undefined) {
                                wasTooLong = tooLong;  // First time
                              }
                              if (ellipsis && wasTooLong) {
                                cursor /= 2;
                                if (wordStr === '' || !tooLong && cursor < 0.5) {
                                  words = [];  // All ok, break out
                                } else {
                                  if (tooLong) {
                                    wasTooLong = true;
                                  }
                                  wordStr = span.substring(0, wordStr.length + (tooLong ? -1 : 1) * mathCeil(cursor));
                                  words = [wordStr + (width > 3 ? '\u2026' : '')];
                                  tspan.removeChild(tspan.firstChild);
                                }  // Looping down, this is the first word sequence that is not too long,
                                   // so we can move on to build the next line.
                              } else if (!tooLong || words.length === 1) {
                                words = rest;
                                rest = [];
                                if (words.length) {
                                  softLineNo++;
                                  tspan = doc.createElementNS(SVG_NS, 'tspan');
                                  attr(tspan, {
                                    dy: dy,
                                    x: parentX
                                  });
                                  if (spanStyle) {
                                    // #390
                                    attr(tspan, 'style', spanStyle);
                                  }
                                  textNode.appendChild(tspan);
                                }
                                if (actualWidth > width) {
                                  // a single word is pressing it out
                                  width = actualWidth;
                                }
                              } else {
                                // append to existing line tspan
                                tspan.removeChild(tspan.firstChild);
                                rest.unshift(words.pop());
                              }
                              if (words.length) {
                                tspan.appendChild(doc.createTextNode(words.join(' ').replace(/- /g, '-')));
                              }
                            }
                            if (wasTooLong) {
                              wrapper.attr('title', wrapper.textStr);
                            }
                            wrapper.rotation = rotation;
                          }
                          spanNo++;
                        }
                      }
                    });
                  });
                  if (tempParent) {
                    tempParent.removeChild(textNode);  // attach it to the DOM to read offset width
                  }
                  // Apply the text shadow
                  if (textShadow && wrapper.applyTextShadow) {
                    wrapper.applyTextShadow(textShadow);
                  }
                }
              },
              getContrast: function (color) {
                color = Color(color).rgba;
                return color[0] + color[1] + color[2] > 384 ? '#000000' : '#FFFFFF';
              },
              button: function (text, x, y, callback, normalState, hoverState, pressedState, disabledState, shape) {
                var label = this.label(text, x, y, shape, null, null, null, null, 'button'), curState = 0, stateOptions, stateStyle, normalStyle, hoverStyle, pressedStyle, disabledStyle, verticalGradient = {
                    x1: 0,
                    y1: 0,
                    x2: 0,
                    y2: 1
                  };
                // Normal state - prepare the attributes
                normalState = merge({
                  'stroke-width': 1,
                  stroke: '#CCCCCC',
                  fill: {
                    linearGradient: verticalGradient,
                    stops: [
                      [
                        0,
                        '#FEFEFE'
                      ],
                      [
                        1,
                        '#F6F6F6'
                      ]
                    ]
                  },
                  r: 2,
                  padding: 5,
                  style: { color: 'black' }
                }, normalState);
                normalStyle = normalState.style;
                delete normalState.style;
                // Hover state
                hoverState = merge(normalState, {
                  stroke: '#68A',
                  fill: {
                    linearGradient: verticalGradient,
                    stops: [
                      [
                        0,
                        '#FFF'
                      ],
                      [
                        1,
                        '#ACF'
                      ]
                    ]
                  }
                }, hoverState);
                hoverStyle = hoverState.style;
                delete hoverState.style;
                // Pressed state
                pressedState = merge(normalState, {
                  stroke: '#68A',
                  fill: {
                    linearGradient: verticalGradient,
                    stops: [
                      [
                        0,
                        '#9BD'
                      ],
                      [
                        1,
                        '#CDF'
                      ]
                    ]
                  }
                }, pressedState);
                pressedStyle = pressedState.style;
                delete pressedState.style;
                // Disabled state
                disabledState = merge(normalState, { style: { color: '#CCC' } }, disabledState);
                disabledStyle = disabledState.style;
                delete disabledState.style;
                // Add the events. IE9 and IE10 need mouseover and mouseout to funciton (#667).
                addEvent(label.element, isMS ? 'mouseover' : 'mouseenter', function () {
                  if (curState !== 3) {
                    label.attr(hoverState).css(hoverStyle);
                  }
                });
                addEvent(label.element, isMS ? 'mouseout' : 'mouseleave', function () {
                  if (curState !== 3) {
                    stateOptions = [
                      normalState,
                      hoverState,
                      pressedState
                    ][curState];
                    stateStyle = [
                      normalStyle,
                      hoverStyle,
                      pressedStyle
                    ][curState];
                    label.attr(stateOptions).css(stateStyle);
                  }
                });
                label.setState = function (state) {
                  label.state = curState = state;
                  if (!state) {
                    label.attr(normalState).css(normalStyle);
                  } else if (state === 2) {
                    label.attr(pressedState).css(pressedStyle);
                  } else if (state === 3) {
                    label.attr(disabledState).css(disabledStyle);
                  }
                };
                return label.on('click', function (e) {
                  if (curState !== 3) {
                    callback.call(label, e);
                  }
                }).attr(normalState).css(extend({ cursor: 'default' }, normalStyle));
              },
              crispLine: function (points, width) {
                // points format: [M, 0, 0, L, 100, 0]
                // normalize to a crisp line
                if (points[1] === points[4]) {
                  // Substract due to #1129. Now bottom and left axis gridlines behave the same.
                  points[1] = points[4] = mathRound(points[1]) - width % 2 / 2;
                }
                if (points[2] === points[5]) {
                  points[2] = points[5] = mathRound(points[2]) + width % 2 / 2;
                }
                return points;
              },
              path: function (path) {
                var attr = { fill: NONE };
                if (isArray(path)) {
                  attr.d = path;
                } else if (isObject(path)) {
                  // attributes
                  extend(attr, path);
                }
                return this.createElement('path').attr(attr);
              },
              circle: function (x, y, r) {
                var attr = isObject(x) ? x : {
                    x: x,
                    y: y,
                    r: r
                  }, wrapper = this.createElement('circle');
                wrapper.xSetter = function (value) {
                  this.element.setAttribute('cx', value);
                };
                wrapper.ySetter = function (value) {
                  this.element.setAttribute('cy', value);
                };
                return wrapper.attr(attr);
              },
              arc: function (x, y, r, innerR, start, end) {
                var arc;
                if (isObject(x)) {
                  y = x.y;
                  r = x.r;
                  innerR = x.innerR;
                  start = x.start;
                  end = x.end;
                  x = x.x;
                }
                // Arcs are defined as symbols for the ability to set
                // attributes in attr and animate
                arc = this.symbol('arc', x || 0, y || 0, r || 0, r || 0, {
                  innerR: innerR || 0,
                  start: start || 0,
                  end: end || 0
                });
                arc.r = r;
                // #959
                return arc;
              },
              rect: function (x, y, width, height, r, strokeWidth) {
                r = isObject(x) ? x.r : r;
                var wrapper = this.createElement('rect'), attribs = isObject(x) ? x : x === UNDEFINED ? {} : {
                    x: x,
                    y: y,
                    width: mathMax(width, 0),
                    height: mathMax(height, 0)
                  };
                if (strokeWidth !== UNDEFINED) {
                  attribs.strokeWidth = strokeWidth;
                  attribs = wrapper.crisp(attribs);
                }
                if (r) {
                  attribs.r = r;
                }
                wrapper.rSetter = function (value) {
                  attr(this.element, {
                    rx: value,
                    ry: value
                  });
                };
                return wrapper.attr(attribs);
              },
              setSize: function (width, height, animate) {
                var renderer = this, alignedObjects = renderer.alignedObjects, i = alignedObjects.length;
                renderer.width = width;
                renderer.height = height;
                renderer.boxWrapper[pick(animate, true) ? 'animate' : 'attr']({
                  width: width,
                  height: height
                });
                while (i--) {
                  alignedObjects[i].align();
                }
              },
              g: function (name) {
                var elem = this.createElement('g');
                return defined(name) ? elem.attr({ 'class': PREFIX + name }) : elem;
              },
              image: function (src, x, y, width, height) {
                var attribs = { preserveAspectRatio: NONE }, elemWrapper;
                // optional properties
                if (arguments.length > 1) {
                  extend(attribs, {
                    x: x,
                    y: y,
                    width: width,
                    height: height
                  });
                }
                elemWrapper = this.createElement('image').attr(attribs);
                // set the href in the xlink namespace
                if (elemWrapper.element.setAttributeNS) {
                  elemWrapper.element.setAttributeNS('http://www.w3.org/1999/xlink', 'href', src);
                } else {
                  // could be exporting in IE
                  // using href throws "not supported" in ie7 and under, requries regex shim to fix later
                  elemWrapper.element.setAttribute('hc-svg-href', src);
                }
                return elemWrapper;
              },
              symbol: function (symbol, x, y, width, height, options) {
                var obj,
                  // get the symbol definition function
                  symbolFn = this.symbols[symbol],
                  // check if there's a path defined for this symbol
                  path = symbolFn && symbolFn(mathRound(x), mathRound(y), width, height, options), imageElement, imageRegex = /^url\((.*?)\)$/, imageSrc, imageSize, centerImage;
                if (path) {
                  obj = this.path(path);
                  // expando properties for use in animate and attr
                  extend(obj, {
                    symbolName: symbol,
                    x: x,
                    y: y,
                    width: width,
                    height: height
                  });
                  if (options) {
                    extend(obj, options);
                  }  // image symbols
                } else if (imageRegex.test(symbol)) {
                  // On image load, set the size and position
                  centerImage = function (img, size) {
                    if (img.element) {
                      // it may be destroyed in the meantime (#1390)
                      img.attr({
                        width: size[0],
                        height: size[1]
                      });
                      if (!img.alignByTranslate) {
                        // #185
                        img.translate(mathRound((width - size[0]) / 2), mathRound((height - size[1]) / 2));
                      }
                    }
                  };
                  imageSrc = symbol.match(imageRegex)[1];
                  imageSize = symbolSizes[imageSrc] || options && options.width && options.height && [
                    options.width,
                    options.height
                  ];
                  // Ireate the image synchronously, add attribs async
                  obj = this.image(imageSrc).attr({
                    x: x,
                    y: y
                  });
                  obj.isImg = true;
                  if (imageSize) {
                    centerImage(obj, imageSize);
                  } else {
                    // Initialize image to be 0 size so export will still function if there's no cached sizes.
                    obj.attr({
                      width: 0,
                      height: 0
                    });
                    // Create a dummy JavaScript image to get the width and height. Due to a bug in IE < 8,
                    // the created element must be assigned to a variable in order to load (#292).
                    imageElement = createElement('img', {
                      onload: function () {
                        // Special case for SVGs on IE11, the width is not accessible until the image is 
                        // part of the DOM (#2854).
                        if (this.width === 0) {
                          css(this, {
                            position: ABSOLUTE,
                            top: '-999em'
                          });
                          document.body.appendChild(this);
                        }
                        // Center the image
                        centerImage(obj, symbolSizes[imageSrc] = [
                          this.width,
                          this.height
                        ]);
                        // Clean up after #2854 workaround.
                        if (this.parentNode) {
                          this.parentNode.removeChild(this);
                        }
                      },
                      src: imageSrc
                    });
                  }
                }
                return obj;
              },
              symbols: {
                'circle': function (x, y, w, h) {
                  var cpw = 0.166 * w;
                  return [
                    M,
                    x + w / 2,
                    y,
                    'C',
                    x + w + cpw,
                    y,
                    x + w + cpw,
                    y + h,
                    x + w / 2,
                    y + h,
                    'C',
                    x - cpw,
                    y + h,
                    x - cpw,
                    y,
                    x + w / 2,
                    y,
                    'Z'
                  ];
                },
                'square': function (x, y, w, h) {
                  return [
                    M,
                    x,
                    y,
                    L,
                    x + w,
                    y,
                    x + w,
                    y + h,
                    x,
                    y + h,
                    'Z'
                  ];
                },
                'triangle': function (x, y, w, h) {
                  return [
                    M,
                    x + w / 2,
                    y,
                    L,
                    x + w,
                    y + h,
                    x,
                    y + h,
                    'Z'
                  ];
                },
                'triangle-down': function (x, y, w, h) {
                  return [
                    M,
                    x,
                    y,
                    L,
                    x + w,
                    y,
                    x + w / 2,
                    y + h,
                    'Z'
                  ];
                },
                'diamond': function (x, y, w, h) {
                  return [
                    M,
                    x + w / 2,
                    y,
                    L,
                    x + w,
                    y + h / 2,
                    x + w / 2,
                    y + h,
                    x,
                    y + h / 2,
                    'Z'
                  ];
                },
                'arc': function (x, y, w, h, options) {
                  var start = options.start, radius = options.r || w || h, end = options.end - 0.001,
                    // to prevent cos and sin of start and end from becoming equal on 360 arcs (related: #1561)
                    innerRadius = options.innerR, open = options.open, cosStart = mathCos(start), sinStart = mathSin(start), cosEnd = mathCos(end), sinEnd = mathSin(end), longArc = options.end - start < mathPI ? 0 : 1;
                  return [
                    M,
                    x + radius * cosStart,
                    y + radius * sinStart,
                    'A',
                    radius,
                    radius,
                    0,
                    longArc,
                    1,
                    x + radius * cosEnd,
                    y + radius * sinEnd,
                    open ? M : L,
                    x + innerRadius * cosEnd,
                    y + innerRadius * sinEnd,
                    'A',
                    innerRadius,
                    innerRadius,
                    0,
                    longArc,
                    0,
                    x + innerRadius * cosStart,
                    y + innerRadius * sinStart,
                    open ? '' : 'Z'
                  ];
                },
                callout: function (x, y, w, h, options) {
                  var arrowLength = 6, halfDistance = 6, r = mathMin(options && options.r || 0, w, h), safeDistance = r + halfDistance, anchorX = options && options.anchorX, anchorY = options && options.anchorY, path;
                  path = [
                    'M',
                    x + r,
                    y,
                    'L',
                    x + w - r,
                    y,
                    'C',
                    x + w,
                    y,
                    x + w,
                    y,
                    x + w,
                    y + r,
                    'L',
                    x + w,
                    y + h - r,
                    'C',
                    x + w,
                    y + h,
                    x + w,
                    y + h,
                    x + w - r,
                    y + h,
                    'L',
                    x + r,
                    y + h,
                    'C',
                    x,
                    y + h,
                    x,
                    y + h,
                    x,
                    y + h - r,
                    'L',
                    x,
                    y + r,
                    'C',
                    x,
                    y,
                    x,
                    y,
                    x + r,
                    y
                  ];
                  if (anchorX && anchorX > w && anchorY > y + safeDistance && anchorY < y + h - safeDistance) {
                    // replace right side
                    path.splice(13, 3, 'L', x + w, anchorY - halfDistance, x + w + arrowLength, anchorY, x + w, anchorY + halfDistance, x + w, y + h - r);
                  } else if (anchorX && anchorX < 0 && anchorY > y + safeDistance && anchorY < y + h - safeDistance) {
                    // replace left side
                    path.splice(33, 3, 'L', x, anchorY + halfDistance, x - arrowLength, anchorY, x, anchorY - halfDistance, x, y + r);
                  } else if (anchorY && anchorY > h && anchorX > x + safeDistance && anchorX < x + w - safeDistance) {
                    // replace bottom
                    path.splice(23, 3, 'L', anchorX + halfDistance, y + h, anchorX, y + h + arrowLength, anchorX - halfDistance, y + h, x + r, y + h);
                  } else if (anchorY && anchorY < 0 && anchorX > x + safeDistance && anchorX < x + w - safeDistance) {
                    // replace top
                    path.splice(3, 3, 'L', anchorX - halfDistance, y, anchorX, y - arrowLength, anchorX + halfDistance, y, w - r, y);
                  }
                  return path;
                }
              },
              clipRect: function (x, y, width, height) {
                var wrapper, id = PREFIX + idCounter++, clipPath = this.createElement('clipPath').attr({ id: id }).add(this.defs);
                wrapper = this.rect(x, y, width, height, 0).add(clipPath);
                wrapper.id = id;
                wrapper.clipPath = clipPath;
                wrapper.count = 0;
                return wrapper;
              },
              text: function (str, x, y, useHTML) {
                // declare variables
                var renderer = this, fakeSVG = useCanVG || !hasSVG && renderer.forExport, wrapper, attr = {};
                if (useHTML && (renderer.allowHTML || !renderer.forExport)) {
                  return renderer.html(str, x, y);
                }
                attr.x = Math.round(x || 0);
                // X is always needed for line-wrap logic
                if (y) {
                  attr.y = Math.round(y);
                }
                if (str || str === 0) {
                  attr.text = str;
                }
                wrapper = renderer.createElement('text').attr(attr);
                // Prevent wrapping from creating false offsetWidths in export in legacy IE (#1079, #1063)
                if (fakeSVG) {
                  wrapper.css({ position: ABSOLUTE });
                }
                if (!useHTML) {
                  wrapper.xSetter = function (value, key, element) {
                    var tspans = element.getElementsByTagName('tspan'), tspan, parentVal = element.getAttribute(key), i;
                    for (i = 0; i < tspans.length; i++) {
                      tspan = tspans[i];
                      // If the x values are equal, the tspan represents a linebreak
                      if (tspan.getAttribute(key) === parentVal) {
                        tspan.setAttribute(key, value);
                      }
                    }
                    element.setAttribute(key, value);
                  };
                }
                return wrapper;
              },
              fontMetrics: function (fontSize, elem) {
                var lineHeight, baseline, style;
                fontSize = fontSize || this.style.fontSize;
                if (!fontSize && elem && win.getComputedStyle) {
                  elem = elem.element || elem;
                  // SVGElement
                  style = win.getComputedStyle(elem, '');
                  fontSize = style && style.fontSize;  // #4309, the style doesn't exist inside a hidden iframe in Firefox
                }
                fontSize = /px/.test(fontSize) ? pInt(fontSize) : /em/.test(fontSize) ? parseFloat(fontSize) * 12 : 12;
                // Empirical values found by comparing font size and bounding box height.
                // Applies to the default font family. http://jsfiddle.net/highcharts/7xvn7/
                lineHeight = fontSize < 24 ? fontSize + 3 : mathRound(fontSize * 1.2);
                baseline = mathRound(lineHeight * 0.8);
                return {
                  h: lineHeight,
                  b: baseline,
                  f: fontSize
                };
              },
              rotCorr: function (baseline, rotation, alterY) {
                var y = baseline;
                if (rotation && alterY) {
                  y = mathMax(y * mathCos(rotation * deg2rad), 4);
                }
                return {
                  x: -baseline / 3 * mathSin(rotation * deg2rad),
                  y: y
                };
              },
              label: function (str, x, y, shape, anchorX, anchorY, useHTML, baseline, className) {
                var renderer = this, wrapper = renderer.g(className), text = renderer.text('', 0, 0, useHTML).attr({ zIndex: 1 }),
                  //.add(wrapper),
                  box, bBox, alignFactor = 0, padding = 3, paddingLeft = 0, width, height, wrapperX, wrapperY, crispAdjust = 0, deferredAttr = {}, baselineOffset, needsBox;
                /**
				 * This function runs after the label is added to the DOM (when the bounding box is
				 * available), and after the text of the label is updated to detect the new bounding
				 * box and reflect it in the border box.
				 */
                function updateBoxSize() {
                  var boxX, boxY, style = text.element.style;
                  bBox = (width === undefined || height === undefined || wrapper.styles.textAlign) && defined(text.textStr) && text.getBBox();
                  //#3295 && 3514 box failure when string equals 0
                  wrapper.width = (width || bBox.width || 0) + 2 * padding + paddingLeft;
                  wrapper.height = (height || bBox.height || 0) + 2 * padding;
                  // update the label-scoped y offset
                  baselineOffset = padding + renderer.fontMetrics(style && style.fontSize, text).b;
                  if (needsBox) {
                    // create the border box if it is not already present
                    if (!box) {
                      boxX = mathRound(-alignFactor * padding) + crispAdjust;
                      boxY = (baseline ? -baselineOffset : 0) + crispAdjust;
                      wrapper.box = box = shape ? renderer.symbol(shape, boxX, boxY, wrapper.width, wrapper.height, deferredAttr) : renderer.rect(boxX, boxY, wrapper.width, wrapper.height, 0, deferredAttr[STROKE_WIDTH]);
                      if (!box.isImg) {
                        // #4324, fill "none" causes it to be ignored by mouse events in IE
                        box.attr('fill', NONE);
                      }
                      box.add(wrapper);
                    }
                    // apply the box attributes
                    if (!box.isImg) {
                      // #1630
                      box.attr(extend({
                        width: mathRound(wrapper.width),
                        height: mathRound(wrapper.height)
                      }, deferredAttr));
                    }
                    deferredAttr = null;
                  }
                }
                /**
				 * This function runs after setting text or padding, but only if padding is changed
				 */
                function updateTextPadding() {
                  var styles = wrapper.styles, textAlign = styles && styles.textAlign, x = paddingLeft + padding * (1 - alignFactor), y;
                  // determin y based on the baseline
                  y = baseline ? 0 : baselineOffset;
                  // compensate for alignment
                  if (defined(width) && bBox && (textAlign === 'center' || textAlign === 'right')) {
                    x += {
                      center: 0.5,
                      right: 1
                    }[textAlign] * (width - bBox.width);
                  }
                  // update if anything changed
                  if (x !== text.x || y !== text.y) {
                    text.attr('x', x);
                    if (y !== UNDEFINED) {
                      text.attr('y', y);
                    }
                  }
                  // record current values
                  text.x = x;
                  text.y = y;
                }
                /**
				 * Set a box attribute, or defer it if the box is not yet created
				 * @param {Object} key
				 * @param {Object} value
				 */
                function boxAttr(key, value) {
                  if (box) {
                    box.attr(key, value);
                  } else {
                    deferredAttr[key] = value;
                  }
                }
                /**
				 * After the text element is added, get the desired size of the border box
				 * and add it before the text in the DOM.
				 */
                wrapper.onAdd = function () {
                  text.add(wrapper);
                  wrapper.attr({
                    text: str || str === 0 ? str : '',
                    x: x,
                    y: y
                  });
                  if (box && defined(anchorX)) {
                    wrapper.attr({
                      anchorX: anchorX,
                      anchorY: anchorY
                    });
                  }
                };
                /*
				 * Add specific attribute setters.
				 */
                // only change local variables
                wrapper.widthSetter = function (value) {
                  width = value;
                };
                wrapper.heightSetter = function (value) {
                  height = value;
                };
                wrapper.paddingSetter = function (value) {
                  if (defined(value) && value !== padding) {
                    padding = wrapper.padding = value;
                    updateTextPadding();
                  }
                };
                wrapper.paddingLeftSetter = function (value) {
                  if (defined(value) && value !== paddingLeft) {
                    paddingLeft = value;
                    updateTextPadding();
                  }
                };
                // change local variable and prevent setting attribute on the group
                wrapper.alignSetter = function (value) {
                  alignFactor = {
                    left: 0,
                    center: 0.5,
                    right: 1
                  }[value];
                };
                // apply these to the box and the text alike
                wrapper.textSetter = function (value) {
                  if (value !== UNDEFINED) {
                    text.textSetter(value);
                  }
                  updateBoxSize();
                  updateTextPadding();
                };
                // apply these to the box but not to the text
                wrapper['stroke-widthSetter'] = function (value, key) {
                  if (value) {
                    needsBox = true;
                  }
                  crispAdjust = value % 2 / 2;
                  boxAttr(key, value);
                };
                wrapper.strokeSetter = wrapper.fillSetter = wrapper.rSetter = function (value, key) {
                  if (key === 'fill' && value) {
                    needsBox = true;
                  }
                  boxAttr(key, value);
                };
                wrapper.anchorXSetter = function (value, key) {
                  anchorX = value;
                  boxAttr(key, mathRound(value) - crispAdjust - wrapperX);
                };
                wrapper.anchorYSetter = function (value, key) {
                  anchorY = value;
                  boxAttr(key, value - wrapperY);
                };
                // rename attributes
                wrapper.xSetter = function (value) {
                  wrapper.x = value;
                  // for animation getter
                  if (alignFactor) {
                    value -= alignFactor * ((width || bBox.width) + padding);
                  }
                  wrapperX = mathRound(value);
                  wrapper.attr('translateX', wrapperX);
                };
                wrapper.ySetter = function (value) {
                  wrapperY = wrapper.y = mathRound(value);
                  wrapper.attr('translateY', wrapperY);
                };
                // Redirect certain methods to either the box or the text
                var baseCss = wrapper.css;
                return extend(wrapper, {
                  css: function (styles) {
                    if (styles) {
                      var textStyles = {};
                      styles = merge(styles);
                      // create a copy to avoid altering the original object (#537)
                      each(wrapper.textProps, function (prop) {
                        if (styles[prop] !== UNDEFINED) {
                          textStyles[prop] = styles[prop];
                          delete styles[prop];
                        }
                      });
                      text.css(textStyles);
                    }
                    return baseCss.call(wrapper, styles);
                  },
                  getBBox: function () {
                    return {
                      width: bBox.width + 2 * padding,
                      height: bBox.height + 2 * padding,
                      x: bBox.x - padding,
                      y: bBox.y - padding
                    };
                  },
                  shadow: function (b) {
                    if (box) {
                      box.shadow(b);
                    }
                    return wrapper;
                  },
                  destroy: function () {
                    // Added by button implementation
                    removeEvent(wrapper.element, 'mouseenter');
                    removeEvent(wrapper.element, 'mouseleave');
                    if (text) {
                      text = text.destroy();
                    }
                    if (box) {
                      box = box.destroy();
                    }
                    // Call base implementation to destroy the rest
                    SVGElement.prototype.destroy.call(wrapper);
                    // Release local pointers (#1298)
                    wrapper = renderer = updateBoxSize = updateTextPadding = boxAttr = null;
                  }
                });
              }
            };
            // end SVGRenderer
            // general renderer
            Renderer = SVGRenderer;
            // extend SvgElement for useHTML option
            extend(SVGElement.prototype, {
              htmlCss: function (styles) {
                var wrapper = this, element = wrapper.element, textWidth = styles && element.tagName === 'SPAN' && styles.width;
                if (textWidth) {
                  delete styles.width;
                  wrapper.textWidth = textWidth;
                  wrapper.updateTransform();
                }
                if (styles && styles.textOverflow === 'ellipsis') {
                  styles.whiteSpace = 'nowrap';
                  styles.overflow = 'hidden';
                }
                wrapper.styles = extend(wrapper.styles, styles);
                css(wrapper.element, styles);
                return wrapper;
              },
              htmlGetBBox: function () {
                var wrapper = this, element = wrapper.element;
                // faking getBBox in exported SVG in legacy IE
                // faking getBBox in exported SVG in legacy IE (is this a duplicate of the fix for #1079?)
                if (element.nodeName === 'text') {
                  element.style.position = ABSOLUTE;
                }
                return {
                  x: element.offsetLeft,
                  y: element.offsetTop,
                  width: element.offsetWidth,
                  height: element.offsetHeight
                };
              },
              htmlUpdateTransform: function () {
                // aligning non added elements is expensive
                if (!this.added) {
                  this.alignOnAdd = true;
                  return;
                }
                var wrapper = this, renderer = wrapper.renderer, elem = wrapper.element, translateX = wrapper.translateX || 0, translateY = wrapper.translateY || 0, x = wrapper.x || 0, y = wrapper.y || 0, align = wrapper.textAlign || 'left', alignCorrection = {
                    left: 0,
                    center: 0.5,
                    right: 1
                  }[align], shadows = wrapper.shadows, styles = wrapper.styles;
                // apply translate
                css(elem, {
                  marginLeft: translateX,
                  marginTop: translateY
                });
                if (shadows) {
                  // used in labels/tooltip
                  each(shadows, function (shadow) {
                    css(shadow, {
                      marginLeft: translateX + 1,
                      marginTop: translateY + 1
                    });
                  });
                }
                // apply inversion
                if (wrapper.inverted) {
                  // wrapper is a group
                  each(elem.childNodes, function (child) {
                    renderer.invertChild(child, elem);
                  });
                }
                if (elem.tagName === 'SPAN') {
                  var width, rotation = wrapper.rotation, baseline, textWidth = pInt(wrapper.textWidth), currentTextTransform = [
                      rotation,
                      align,
                      elem.innerHTML,
                      wrapper.textWidth,
                      wrapper.textAlign
                    ].join(',');
                  if (currentTextTransform !== wrapper.cTT) {
                    // do the calculations and DOM access only if properties changed
                    baseline = renderer.fontMetrics(elem.style.fontSize).b;
                    // Renderer specific handling of span rotation
                    if (defined(rotation)) {
                      wrapper.setSpanRotation(rotation, alignCorrection, baseline);
                    }
                    width = pick(wrapper.elemWidth, elem.offsetWidth);
                    // Update textWidth
                    if (width > textWidth && /[ \-]/.test(elem.textContent || elem.innerText)) {
                      // #983, #1254
                      css(elem, {
                        width: textWidth + PX,
                        display: 'block',
                        whiteSpace: styles && styles.whiteSpace || 'normal'
                      });
                      width = textWidth;
                    }
                    wrapper.getSpanCorrection(width, baseline, alignCorrection, rotation, align);
                  }
                  // apply position with correction
                  css(elem, {
                    left: x + (wrapper.xCorr || 0) + PX,
                    top: y + (wrapper.yCorr || 0) + PX
                  });
                  // force reflow in webkit to apply the left and top on useHTML element (#1249)
                  if (isWebKit) {
                    baseline = elem.offsetHeight;  // assigned to baseline for JSLint purpose
                  }
                  // record current text transform
                  wrapper.cTT = currentTextTransform;
                }
              },
              setSpanRotation: function (rotation, alignCorrection, baseline) {
                var rotationStyle = {}, cssTransformKey = isMS ? '-ms-transform' : isWebKit ? '-webkit-transform' : isFirefox ? 'MozTransform' : isOpera ? '-o-transform' : '';
                rotationStyle[cssTransformKey] = rotationStyle.transform = 'rotate(' + rotation + 'deg)';
                rotationStyle[cssTransformKey + (isFirefox ? 'Origin' : '-origin')] = rotationStyle.transformOrigin = alignCorrection * 100 + '% ' + baseline + 'px';
                css(this.element, rotationStyle);
              },
              getSpanCorrection: function (width, baseline, alignCorrection) {
                this.xCorr = -width * alignCorrection;
                this.yCorr = -baseline;
              }
            });
            // Extend SvgRenderer for useHTML option.
            extend(SVGRenderer.prototype, {
              html: function (str, x, y) {
                var wrapper = this.createElement('span'), element = wrapper.element, renderer = wrapper.renderer;
                // Text setter
                wrapper.textSetter = function (value) {
                  if (value !== element.innerHTML) {
                    delete this.bBox;
                  }
                  element.innerHTML = this.textStr = value;
                  wrapper.htmlUpdateTransform();
                };
                // Various setters which rely on update transform
                wrapper.xSetter = wrapper.ySetter = wrapper.alignSetter = wrapper.rotationSetter = function (value, key) {
                  if (key === 'align') {
                    key = 'textAlign';  // Do not overwrite the SVGElement.align method. Same as VML.
                  }
                  wrapper[key] = value;
                  wrapper.htmlUpdateTransform();
                };
                // Set the default attributes
                wrapper.attr({
                  text: str,
                  x: mathRound(x),
                  y: mathRound(y)
                }).css({
                  position: ABSOLUTE,
                  fontFamily: this.style.fontFamily,
                  fontSize: this.style.fontSize
                });
                // Keep the whiteSpace style outside the wrapper.styles collection
                element.style.whiteSpace = 'nowrap';
                // Use the HTML specific .css method
                wrapper.css = wrapper.htmlCss;
                // This is specific for HTML within SVG
                if (renderer.isSVG) {
                  wrapper.add = function (svgGroupWrapper) {
                    var htmlGroup, container = renderer.box.parentNode, parentGroup, parents = [];
                    this.parentGroup = svgGroupWrapper;
                    // Create a mock group to hold the HTML elements
                    if (svgGroupWrapper) {
                      htmlGroup = svgGroupWrapper.div;
                      if (!htmlGroup) {
                        // Read the parent chain into an array and read from top down
                        parentGroup = svgGroupWrapper;
                        while (parentGroup) {
                          parents.push(parentGroup);
                          // Move up to the next parent group
                          parentGroup = parentGroup.parentGroup;
                        }
                        // Ensure dynamically updating position when any parent is translated
                        each(parents.reverse(), function (parentGroup) {
                          var htmlGroupStyle, cls = attr(parentGroup.element, 'class');
                          if (cls) {
                            cls = { className: cls };
                          }
                          // else null
                          // Create a HTML div and append it to the parent div to emulate
                          // the SVG group structure
                          htmlGroup = parentGroup.div = parentGroup.div || createElement(DIV, cls, {
                            position: ABSOLUTE,
                            left: (parentGroup.translateX || 0) + PX,
                            top: (parentGroup.translateY || 0) + PX
                          }, htmlGroup || container);
                          // the top group is appended to container
                          // Shortcut
                          htmlGroupStyle = htmlGroup.style;
                          // Set listeners to update the HTML div's position whenever the SVG group
                          // position is changed
                          extend(parentGroup, {
                            translateXSetter: function (value, key) {
                              htmlGroupStyle.left = value + PX;
                              parentGroup[key] = value;
                              parentGroup.doTransform = true;
                            },
                            translateYSetter: function (value, key) {
                              htmlGroupStyle.top = value + PX;
                              parentGroup[key] = value;
                              parentGroup.doTransform = true;
                            }
                          });
                          // These properties are set as attributes on the SVG group, and as
                          // identical CSS properties on the div. (#3542)
                          each([
                            'opacity',
                            'visibility'
                          ], function (prop) {
                            wrap(parentGroup, prop + 'Setter', function (proceed, value, key, elem) {
                              proceed.call(this, value, key, elem);
                              htmlGroupStyle[key] = value;
                            });
                          });
                        });
                      }
                    } else {
                      htmlGroup = container;
                    }
                    htmlGroup.appendChild(element);
                    // Shared with VML:
                    wrapper.added = true;
                    if (wrapper.alignOnAdd) {
                      wrapper.htmlUpdateTransform();
                    }
                    return wrapper;
                  };
                }
                return wrapper;
              }
            });
            /* ****************************************************************************
		 *                                                                            *
		 * START OF INTERNET EXPLORER <= 8 SPECIFIC CODE                              *
		 *                                                                            *
		 * For applications and websites that don't need IE support, like platform    *
		 * targeted mobile apps and web apps, this code can be removed.               *
		 *                                                                            *
		 *****************************************************************************/
            /**
		 * @constructor
		 */
            var VMLRenderer, VMLElement;
            if (!hasSVG && !useCanVG) {
              /**
		 * The VML element wrapper.
		 */
              VMLElement = {
                init: function (renderer, nodeName) {
                  var wrapper = this, markup = [
                      '<',
                      nodeName,
                      ' filled="f" stroked="f"'
                    ], style = [
                      'position: ',
                      ABSOLUTE,
                      ';'
                    ], isDiv = nodeName === DIV;
                  // divs and shapes need size
                  if (nodeName === 'shape' || isDiv) {
                    style.push('left:0;top:0;width:1px;height:1px;');
                  }
                  style.push('visibility: ', isDiv ? HIDDEN : VISIBLE);
                  markup.push(' style="', style.join(''), '"/>');
                  // create element with default attributes and style
                  if (nodeName) {
                    markup = isDiv || nodeName === 'span' || nodeName === 'img' ? markup.join('') : renderer.prepVML(markup);
                    wrapper.element = createElement(markup);
                  }
                  wrapper.renderer = renderer;
                },
                add: function (parent) {
                  var wrapper = this, renderer = wrapper.renderer, element = wrapper.element, box = renderer.box, inverted = parent && parent.inverted,
                    // get the parent node
                    parentNode = parent ? parent.element || parent : box;
                  // if the parent group is inverted, apply inversion on all children
                  if (inverted) {
                    // only on groups
                    renderer.invertChild(element, parentNode);
                  }
                  // append it
                  parentNode.appendChild(element);
                  // align text after adding to be able to read offset
                  wrapper.added = true;
                  if (wrapper.alignOnAdd && !wrapper.deferUpdateTransform) {
                    wrapper.updateTransform();
                  }
                  // fire an event for internal hooks
                  if (wrapper.onAdd) {
                    wrapper.onAdd();
                  }
                  return wrapper;
                },
                updateTransform: SVGElement.prototype.htmlUpdateTransform,
                setSpanRotation: function () {
                  // Adjust for alignment and rotation. Rotation of useHTML content is not yet implemented
                  // but it can probably be implemented for Firefox 3.5+ on user request. FF3.5+
                  // has support for CSS3 transform. The getBBox method also needs to be updated
                  // to compensate for the rotation, like it currently does for SVG.
                  // Test case: http://jsfiddle.net/highcharts/Ybt44/
                  var rotation = this.rotation, costheta = mathCos(rotation * deg2rad), sintheta = mathSin(rotation * deg2rad);
                  css(this.element, {
                    filter: rotation ? [
                      'progid:DXImageTransform.Microsoft.Matrix(M11=',
                      costheta,
                      ', M12=',
                      -sintheta,
                      ', M21=',
                      sintheta,
                      ', M22=',
                      costheta,
                      ', sizingMethod=\'auto expand\')'
                    ].join('') : NONE
                  });
                },
                getSpanCorrection: function (width, baseline, alignCorrection, rotation, align) {
                  var costheta = rotation ? mathCos(rotation * deg2rad) : 1, sintheta = rotation ? mathSin(rotation * deg2rad) : 0, height = pick(this.elemHeight, this.element.offsetHeight), quad, nonLeft = align && align !== 'left';
                  // correct x and y
                  this.xCorr = costheta < 0 && -width;
                  this.yCorr = sintheta < 0 && -height;
                  // correct for baseline and corners spilling out after rotation
                  quad = costheta * sintheta < 0;
                  this.xCorr += sintheta * baseline * (quad ? 1 - alignCorrection : alignCorrection);
                  this.yCorr -= costheta * baseline * (rotation ? quad ? alignCorrection : 1 - alignCorrection : 1);
                  // correct for the length/height of the text
                  if (nonLeft) {
                    this.xCorr -= width * alignCorrection * (costheta < 0 ? -1 : 1);
                    if (rotation) {
                      this.yCorr -= height * alignCorrection * (sintheta < 0 ? -1 : 1);
                    }
                    css(this.element, { textAlign: align });
                  }
                },
                pathToVML: function (value) {
                  // convert paths
                  var i = value.length, path = [];
                  while (i--) {
                    // Multiply by 10 to allow subpixel precision.
                    // Substracting half a pixel seems to make the coordinates
                    // align with SVG, but this hasn't been tested thoroughly
                    if (isNumber(value[i])) {
                      path[i] = mathRound(value[i] * 10) - 5;
                    } else if (value[i] === 'Z') {
                      // close the path
                      path[i] = 'x';
                    } else {
                      path[i] = value[i];
                      // When the start X and end X coordinates of an arc are too close,
                      // they are rounded to the same value above. In this case, substract or 
                      // add 1 from the end X and Y positions. #186, #760, #1371, #1410.
                      if (value.isArc && (value[i] === 'wa' || value[i] === 'at')) {
                        // Start and end X
                        if (path[i + 5] === path[i + 7]) {
                          path[i + 7] += value[i + 7] > value[i + 5] ? 1 : -1;
                        }
                        // Start and end Y
                        if (path[i + 6] === path[i + 8]) {
                          path[i + 8] += value[i + 8] > value[i + 6] ? 1 : -1;
                        }
                      }
                    }
                  }
                  // Loop up again to handle path shortcuts (#2132)
                  /*while (i++ < path.length) {
					if (path[i] === 'H') { // horizontal line to
						path[i] = 'L';
						path.splice(i + 2, 0, path[i - 1]);
					} else if (path[i] === 'V') { // vertical line to
						path[i] = 'L';
						path.splice(i + 1, 0, path[i - 2]);
					}
				}*/
                  return path.join(' ') || 'x';
                },
                clip: function (clipRect) {
                  var wrapper = this, clipMembers, cssRet;
                  if (clipRect) {
                    clipMembers = clipRect.members;
                    erase(clipMembers, wrapper);
                    // Ensure unique list of elements (#1258)
                    clipMembers.push(wrapper);
                    wrapper.destroyClip = function () {
                      erase(clipMembers, wrapper);
                    };
                    cssRet = clipRect.getCSS(wrapper);
                  } else {
                    if (wrapper.destroyClip) {
                      wrapper.destroyClip();
                    }
                    cssRet = { clip: docMode8 ? 'inherit' : 'rect(auto)' };  // #1214
                  }
                  return wrapper.css(cssRet);
                },
                css: SVGElement.prototype.htmlCss,
                safeRemoveChild: function (element) {
                  // discardElement will detach the node from its parent before attaching it
                  // to the garbage bin. Therefore it is important that the node is attached and have parent.
                  if (element.parentNode) {
                    discardElement(element);
                  }
                },
                destroy: function () {
                  if (this.destroyClip) {
                    this.destroyClip();
                  }
                  return SVGElement.prototype.destroy.apply(this);
                },
                on: function (eventType, handler) {
                  // simplest possible event model for internal use
                  this.element['on' + eventType] = function () {
                    var evt = win.event;
                    evt.target = evt.srcElement;
                    handler(evt);
                  };
                  return this;
                },
                cutOffPath: function (path, length) {
                  var len;
                  path = path.split(/[ ,]/);
                  len = path.length;
                  if (len === 9 || len === 11) {
                    path[len - 4] = path[len - 2] = pInt(path[len - 2]) - 10 * length;
                  }
                  return path.join(' ');
                },
                shadow: function (shadowOptions, group, cutOff) {
                  var shadows = [], i, element = this.element, renderer = this.renderer, shadow, elemStyle = element.style, markup, path = element.path, strokeWidth, modifiedPath, shadowWidth, shadowElementOpacity;
                  // some times empty paths are not strings
                  if (path && typeof path.value !== 'string') {
                    path = 'x';
                  }
                  modifiedPath = path;
                  if (shadowOptions) {
                    shadowWidth = pick(shadowOptions.width, 3);
                    shadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;
                    for (i = 1; i <= 3; i++) {
                      strokeWidth = shadowWidth * 2 + 1 - 2 * i;
                      // Cut off shadows for stacked column items
                      if (cutOff) {
                        modifiedPath = this.cutOffPath(path.value, strokeWidth + 0.5);
                      }
                      markup = [
                        '<shape isShadow="true" strokeweight="',
                        strokeWidth,
                        '" filled="false" path="',
                        modifiedPath,
                        '" coordsize="10 10" style="',
                        element.style.cssText,
                        '" />'
                      ];
                      shadow = createElement(renderer.prepVML(markup), null, {
                        left: pInt(elemStyle.left) + pick(shadowOptions.offsetX, 1),
                        top: pInt(elemStyle.top) + pick(shadowOptions.offsetY, 1)
                      });
                      if (cutOff) {
                        shadow.cutOff = strokeWidth + 1;
                      }
                      // apply the opacity
                      markup = [
                        '<stroke color="',
                        shadowOptions.color || 'black',
                        '" opacity="',
                        shadowElementOpacity * i,
                        '"/>'
                      ];
                      createElement(renderer.prepVML(markup), null, null, shadow);
                      // insert it
                      if (group) {
                        group.element.appendChild(shadow);
                      } else {
                        element.parentNode.insertBefore(shadow, element);
                      }
                      // record it
                      shadows.push(shadow);
                    }
                    this.shadows = shadows;
                  }
                  return this;
                },
                updateShadows: noop,
                setAttr: function (key, value) {
                  if (docMode8) {
                    // IE8 setAttribute bug
                    this.element[key] = value;
                  } else {
                    this.element.setAttribute(key, value);
                  }
                },
                classSetter: function (value) {
                  // IE8 Standards mode has problems retrieving the className unless set like this
                  this.element.className = value;
                },
                dashstyleSetter: function (value, key, element) {
                  var strokeElem = element.getElementsByTagName('stroke')[0] || createElement(this.renderer.prepVML(['<stroke/>']), null, null, element);
                  strokeElem[key] = value || 'solid';
                  this[key] = value;  /* because changing stroke-width will change the dash length
					and cause an epileptic effect */
                },
                dSetter: function (value, key, element) {
                  var i, shadows = this.shadows;
                  value = value || [];
                  this.d = value.join && value.join(' ');
                  // used in getter for animation
                  element.path = value = this.pathToVML(value);
                  // update shadows
                  if (shadows) {
                    i = shadows.length;
                    while (i--) {
                      shadows[i].path = shadows[i].cutOff ? this.cutOffPath(value, shadows[i].cutOff) : value;
                    }
                  }
                  this.setAttr(key, value);
                },
                fillSetter: function (value, key, element) {
                  var nodeName = element.nodeName;
                  if (nodeName === 'SPAN') {
                    // text color
                    element.style.color = value;
                  } else if (nodeName !== 'IMG') {
                    // #1336
                    element.filled = value !== NONE;
                    this.setAttr('fillcolor', this.renderer.color(value, element, key, this));
                  }
                },
                opacitySetter: noop,
                rotationSetter: function (value, key, element) {
                  var style = element.style;
                  this[key] = style[key] = value;
                  // style is for #1873
                  // Correction for the 1x1 size of the shape container. Used in gauge needles.
                  style.left = -mathRound(mathSin(value * deg2rad) + 1) + PX;
                  style.top = mathRound(mathCos(value * deg2rad)) + PX;
                },
                strokeSetter: function (value, key, element) {
                  this.setAttr('strokecolor', this.renderer.color(value, element, key));
                },
                'stroke-widthSetter': function (value, key, element) {
                  element.stroked = !!value;
                  // VML "stroked" attribute
                  this[key] = value;
                  // used in getter, issue #113
                  if (isNumber(value)) {
                    value += PX;
                  }
                  this.setAttr('strokeweight', value);
                },
                titleSetter: function (value, key) {
                  this.setAttr(key, value);
                },
                visibilitySetter: function (value, key, element) {
                  // Handle inherited visibility
                  if (value === 'inherit') {
                    value = VISIBLE;
                  }
                  // Let the shadow follow the main element
                  if (this.shadows) {
                    each(this.shadows, function (shadow) {
                      shadow.style[key] = value;
                    });
                  }
                  // Instead of toggling the visibility CSS property, move the div out of the viewport.
                  // This works around #61 and #586
                  if (element.nodeName === 'DIV') {
                    value = value === HIDDEN ? '-999em' : 0;
                    // In order to redraw, IE7 needs the div to be visible when tucked away
                    // outside the viewport. So the visibility is actually opposite of
                    // the expected value. This applies to the tooltip only.
                    if (!docMode8) {
                      element.style[key] = value ? VISIBLE : HIDDEN;
                    }
                    key = 'top';
                  }
                  element.style[key] = value;
                },
                xSetter: function (value, key, element) {
                  this[key] = value;
                  // used in getter
                  if (key === 'x') {
                    key = 'left';
                  } else if (key === 'y') {
                    key = 'top';
                  }
                  /* else {
					value = mathMax(0, value); // don't set width or height below zero (#311)
				}*/
                  // clipping rectangle special
                  if (this.updateClipping) {
                    this[key] = value;
                    // the key is now 'left' or 'top' for 'x' and 'y'
                    this.updateClipping();
                  } else {
                    // normal
                    element.style[key] = value;
                  }
                },
                zIndexSetter: function (value, key, element) {
                  element.style[key] = value;
                }
              };
              Highcharts.VMLElement = VMLElement = extendClass(SVGElement, VMLElement);
              // Some shared setters
              VMLElement.prototype.ySetter = VMLElement.prototype.widthSetter = VMLElement.prototype.heightSetter = VMLElement.prototype.xSetter;
              /**
		 * The VML renderer
		 */
              var VMLRendererExtension = {
                  Element: VMLElement,
                  isIE8: userAgent.indexOf('MSIE 8.0') > -1,
                  init: function (container, width, height, style) {
                    var renderer = this, boxWrapper, box, css;
                    renderer.alignedObjects = [];
                    boxWrapper = renderer.createElement(DIV).css(extend(this.getStyle(style), { position: RELATIVE }));
                    box = boxWrapper.element;
                    container.appendChild(boxWrapper.element);
                    // generate the containing box
                    renderer.isVML = true;
                    renderer.box = box;
                    renderer.boxWrapper = boxWrapper;
                    renderer.cache = {};
                    renderer.setSize(width, height, false);
                    // The only way to make IE6 and IE7 print is to use a global namespace. However,
                    // with IE8 the only way to make the dynamic shapes visible in screen and print mode
                    // seems to be to add the xmlns attribute and the behaviour style inline.
                    if (!doc.namespaces.hcv) {
                      doc.namespaces.add('hcv', 'urn:schemas-microsoft-com:vml');
                      // Setup default CSS (#2153, #2368, #2384)
                      css = 'hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke' + '{ behavior:url(#default#VML); display: inline-block; } ';
                      try {
                        doc.createStyleSheet().cssText = css;
                      } catch (e) {
                        doc.styleSheets[0].cssText += css;
                      }
                    }
                  },
                  isHidden: function () {
                    return !this.box.offsetWidth;
                  },
                  clipRect: function (x, y, width, height) {
                    // create a dummy element
                    var clipRect = this.createElement(), isObj = isObject(x);
                    // mimic a rectangle with its style object for automatic updating in attr
                    return extend(clipRect, {
                      members: [],
                      count: 0,
                      left: (isObj ? x.x : x) + 1,
                      top: (isObj ? x.y : y) + 1,
                      width: (isObj ? x.width : width) - 1,
                      height: (isObj ? x.height : height) - 1,
                      getCSS: function (wrapper) {
                        var element = wrapper.element, nodeName = element.nodeName, isShape = nodeName === 'shape', inverted = wrapper.inverted, rect = this, top = rect.top - (isShape ? element.offsetTop : 0), left = rect.left, right = left + rect.width, bottom = top + rect.height, ret = { clip: 'rect(' + mathRound(inverted ? left : top) + 'px,' + mathRound(inverted ? bottom : right) + 'px,' + mathRound(inverted ? right : bottom) + 'px,' + mathRound(inverted ? top : left) + 'px)' };
                        // issue 74 workaround
                        if (!inverted && docMode8 && nodeName === 'DIV') {
                          extend(ret, {
                            width: right + PX,
                            height: bottom + PX
                          });
                        }
                        return ret;
                      },
                      updateClipping: function () {
                        each(clipRect.members, function (member) {
                          if (member.element) {
                            // Deleted series, like in stock/members/series-remove demo. Should be removed from members, but this will do.
                            member.css(clipRect.getCSS(member));
                          }
                        });
                      }
                    });
                  },
                  color: function (color, elem, prop, wrapper) {
                    var renderer = this, colorObject, regexRgba = /^rgba/, markup, fillType, ret = NONE;
                    // Check for linear or radial gradient
                    if (color && color.linearGradient) {
                      fillType = 'gradient';
                    } else if (color && color.radialGradient) {
                      fillType = 'pattern';
                    }
                    if (fillType) {
                      var stopColor, stopOpacity, gradient = color.linearGradient || color.radialGradient, x1, y1, x2, y2, opacity1, opacity2, color1, color2, fillAttr = '', stops = color.stops, firstStop, lastStop, colors = [], addFillNode = function () {
                          // Add the fill subnode. When colors attribute is used, the meanings of opacity and o:opacity2
                          // are reversed.
                          markup = [
                            '<fill colors="' + colors.join(',') + '" opacity="',
                            opacity2,
                            '" o:opacity2="',
                            opacity1,
                            '" type="',
                            fillType,
                            '" ',
                            fillAttr,
                            'focus="100%" method="any" />'
                          ];
                          createElement(renderer.prepVML(markup), null, null, elem);
                        };
                      // Extend from 0 to 1
                      firstStop = stops[0];
                      lastStop = stops[stops.length - 1];
                      if (firstStop[0] > 0) {
                        stops.unshift([
                          0,
                          firstStop[1]
                        ]);
                      }
                      if (lastStop[0] < 1) {
                        stops.push([
                          1,
                          lastStop[1]
                        ]);
                      }
                      // Compute the stops
                      each(stops, function (stop, i) {
                        if (regexRgba.test(stop[1])) {
                          colorObject = Color(stop[1]);
                          stopColor = colorObject.get('rgb');
                          stopOpacity = colorObject.get('a');
                        } else {
                          stopColor = stop[1];
                          stopOpacity = 1;
                        }
                        // Build the color attribute
                        colors.push(stop[0] * 100 + '% ' + stopColor);
                        // Only start and end opacities are allowed, so we use the first and the last
                        if (!i) {
                          opacity1 = stopOpacity;
                          color2 = stopColor;
                        } else {
                          opacity2 = stopOpacity;
                          color1 = stopColor;
                        }
                      });
                      // Apply the gradient to fills only.
                      if (prop === 'fill') {
                        // Handle linear gradient angle
                        if (fillType === 'gradient') {
                          x1 = gradient.x1 || gradient[0] || 0;
                          y1 = gradient.y1 || gradient[1] || 0;
                          x2 = gradient.x2 || gradient[2] || 0;
                          y2 = gradient.y2 || gradient[3] || 0;
                          fillAttr = 'angle="' + (90 - math.atan((y2 - y1) / (x2 - x1)) * 180 / mathPI) + '"';
                          addFillNode();  // Radial (circular) gradient
                        } else {
                          var r = gradient.r, sizex = r * 2, sizey = r * 2, cx = gradient.cx, cy = gradient.cy, radialReference = elem.radialReference, bBox, applyRadialGradient = function () {
                              if (radialReference) {
                                bBox = wrapper.getBBox();
                                cx += (radialReference[0] - bBox.x) / bBox.width - 0.5;
                                cy += (radialReference[1] - bBox.y) / bBox.height - 0.5;
                                sizex *= radialReference[2] / bBox.width;
                                sizey *= radialReference[2] / bBox.height;
                              }
                              fillAttr = 'src="' + defaultOptions.global.VMLRadialGradientURL + '" ' + 'size="' + sizex + ',' + sizey + '" ' + 'origin="0.5,0.5" ' + 'position="' + cx + ',' + cy + '" ' + 'color2="' + color2 + '" ';
                              addFillNode();
                            };
                          // Apply radial gradient
                          if (wrapper.added) {
                            applyRadialGradient();
                          } else {
                            // We need to know the bounding box to get the size and position right
                            wrapper.onAdd = applyRadialGradient;
                          }
                          // The fill element's color attribute is broken in IE8 standards mode, so we
                          // need to set the parent shape's fillcolor attribute instead.
                          ret = color1;
                        }  // Gradients are not supported for VML stroke, return the first color. #722.
                      } else {
                        ret = stopColor;
                      }  // if the color is an rgba color, split it and add a fill node
                         // to hold the opacity component
                    } else if (regexRgba.test(color) && elem.tagName !== 'IMG') {
                      colorObject = Color(color);
                      markup = [
                        '<',
                        prop,
                        ' opacity="',
                        colorObject.get('a'),
                        '"/>'
                      ];
                      createElement(this.prepVML(markup), null, null, elem);
                      ret = colorObject.get('rgb');
                    } else {
                      var propNodes = elem.getElementsByTagName(prop);
                      // 'stroke' or 'fill' node
                      if (propNodes.length) {
                        propNodes[0].opacity = 1;
                        propNodes[0].type = 'solid';
                      }
                      ret = color;
                    }
                    return ret;
                  },
                  prepVML: function (markup) {
                    var vmlStyle = 'display:inline-block;behavior:url(#default#VML);', isIE8 = this.isIE8;
                    markup = markup.join('');
                    if (isIE8) {
                      // add xmlns and style inline
                      markup = markup.replace('/>', ' xmlns="urn:schemas-microsoft-com:vml" />');
                      if (markup.indexOf('style="') === -1) {
                        markup = markup.replace('/>', ' style="' + vmlStyle + '" />');
                      } else {
                        markup = markup.replace('style="', 'style="' + vmlStyle);
                      }
                    } else {
                      // add namespace
                      markup = markup.replace('<', '<hcv:');
                    }
                    return markup;
                  },
                  text: SVGRenderer.prototype.html,
                  path: function (path) {
                    var attr = { coordsize: '10 10' };
                    if (isArray(path)) {
                      attr.d = path;
                    } else if (isObject(path)) {
                      // attributes
                      extend(attr, path);
                    }
                    // create the shape
                    return this.createElement('shape').attr(attr);
                  },
                  circle: function (x, y, r) {
                    var circle = this.symbol('circle');
                    if (isObject(x)) {
                      r = x.r;
                      y = x.y;
                      x = x.x;
                    }
                    circle.isCircle = true;
                    // Causes x and y to mean center (#1682)
                    circle.r = r;
                    return circle.attr({
                      x: x,
                      y: y
                    });
                  },
                  g: function (name) {
                    var wrapper, attribs;
                    // set the class name
                    if (name) {
                      attribs = {
                        'className': PREFIX + name,
                        'class': PREFIX + name
                      };
                    }
                    // the div to hold HTML and clipping
                    wrapper = this.createElement(DIV).attr(attribs);
                    return wrapper;
                  },
                  image: function (src, x, y, width, height) {
                    var obj = this.createElement('img').attr({ src: src });
                    if (arguments.length > 1) {
                      obj.attr({
                        x: x,
                        y: y,
                        width: width,
                        height: height
                      });
                    }
                    return obj;
                  },
                  createElement: function (nodeName) {
                    return nodeName === 'rect' ? this.symbol(nodeName) : SVGRenderer.prototype.createElement.call(this, nodeName);
                  },
                  invertChild: function (element, parentNode) {
                    var ren = this, parentStyle = parentNode.style, imgStyle = element.tagName === 'IMG' && element.style;
                    // #1111
                    css(element, {
                      flip: 'x',
                      left: pInt(parentStyle.width) - (imgStyle ? pInt(imgStyle.top) : 1),
                      top: pInt(parentStyle.height) - (imgStyle ? pInt(imgStyle.left) : 1),
                      rotation: -90
                    });
                    // Recursively invert child elements, needed for nested composite shapes like box plots and error bars. #1680, #1806.
                    each(element.childNodes, function (child) {
                      ren.invertChild(child, element);
                    });
                  },
                  symbols: {
                    arc: function (x, y, w, h, options) {
                      var start = options.start, end = options.end, radius = options.r || w || h, innerRadius = options.innerR, cosStart = mathCos(start), sinStart = mathSin(start), cosEnd = mathCos(end), sinEnd = mathSin(end), ret;
                      if (end - start === 0) {
                        // no angle, don't show it.
                        return ['x'];
                      }
                      ret = [
                        'wa',
                        x - radius,
                        y - radius,
                        x + radius,
                        y + radius,
                        x + radius * cosStart,
                        y + radius * sinStart,
                        x + radius * cosEnd,
                        y + radius * sinEnd
                      ];
                      if (options.open && !innerRadius) {
                        ret.push('e', M, x, y);
                      }
                      ret.push('at', x - innerRadius, y - innerRadius, x + innerRadius, y + innerRadius, x + innerRadius * cosEnd, y + innerRadius * sinEnd, x + innerRadius * cosStart, y + innerRadius * sinStart, 'x', 'e');
                      ret.isArc = true;
                      return ret;
                    },
                    circle: function (x, y, w, h, wrapper) {
                      if (wrapper) {
                        w = h = 2 * wrapper.r;
                      }
                      // Center correction, #1682
                      if (wrapper && wrapper.isCircle) {
                        x -= w / 2;
                        y -= h / 2;
                      }
                      // Return the path
                      return [
                        'wa',
                        x,
                        y,
                        x + w,
                        y + h,
                        x + w,
                        y + h / 2,
                        x + w,
                        y + h / 2,
                        'e'
                      ];
                    },
                    rect: function (x, y, w, h, options) {
                      return SVGRenderer.prototype.symbols[!defined(options) || !options.r ? 'square' : 'callout'].call(0, x, y, w, h, options);
                    }
                  }
                };
              Highcharts.VMLRenderer = VMLRenderer = function () {
                this.init.apply(this, arguments);
              };
              VMLRenderer.prototype = merge(SVGRenderer.prototype, VMLRendererExtension);
              // general renderer
              Renderer = VMLRenderer;
            }
            // This method is used with exporting in old IE, when emulating SVG (see #2314)
            SVGRenderer.prototype.measureSpanWidth = function (text, styles) {
              var measuringSpan = doc.createElement('span'), offsetWidth, textNode = doc.createTextNode(text);
              measuringSpan.appendChild(textNode);
              css(measuringSpan, styles);
              this.box.appendChild(measuringSpan);
              offsetWidth = measuringSpan.offsetWidth;
              discardElement(measuringSpan);
              // #2463
              return offsetWidth;
            };
            /* ****************************************************************************
		 *                                                                            *
		 * END OF INTERNET EXPLORER <= 8 SPECIFIC CODE                                *
		 *                                                                            *
		 *****************************************************************************/
            /* ****************************************************************************
		 *                                                                            *
		 * START OF ANDROID < 3 SPECIFIC CODE. THIS CAN BE REMOVED IF YOU'RE NOT      *
		 * TARGETING THAT SYSTEM.                                                     *
		 *                                                                            *
		 *****************************************************************************/
            var CanVGRenderer, CanVGController;
            if (useCanVG) {
              /**
			 * The CanVGRenderer is empty from start to keep the source footprint small.
			 * When requested, the CanVGController downloads the rest of the source packaged
			 * together with the canvg library.
			 */
              Highcharts.CanVGRenderer = CanVGRenderer = function () {
                // Override the global SVG namespace to fake SVG/HTML that accepts CSS
                SVG_NS = 'http://www.w3.org/1999/xhtml';
              };
              /**
			 * Start with an empty symbols object. This is needed when exporting is used (exporting.src.js will add a few symbols), but 
			 * the implementation from SvgRenderer will not be merged in until first render.
			 */
              CanVGRenderer.prototype.symbols = {};
              /**
			 * Handles on demand download of canvg rendering support.
			 */
              CanVGController = function () {
                // List of renderering calls
                var deferredRenderCalls = [];
                /**
				 * When downloaded, we are ready to draw deferred charts.
				 */
                function drawDeferred() {
                  var callLength = deferredRenderCalls.length, callIndex;
                  // Draw all pending render calls
                  for (callIndex = 0; callIndex < callLength; callIndex++) {
                    deferredRenderCalls[callIndex]();
                  }
                  // Clear the list
                  deferredRenderCalls = [];
                }
                return {
                  push: function (func, scriptLocation) {
                    // Only get the script once
                    if (deferredRenderCalls.length === 0) {
                      getScript(scriptLocation, drawDeferred);
                    }
                    // Register render call
                    deferredRenderCalls.push(func);
                  }
                };
              }();
              Renderer = CanVGRenderer;
            }
            // end CanVGRenderer
            /* ****************************************************************************
		 *                                                                            *
		 * END OF ANDROID < 3 SPECIFIC CODE                                           *
		 *                                                                            *
		 *****************************************************************************/
            /**
		 * The Tick class
		 */
            function Tick(axis, pos, type, noLabel) {
              this.axis = axis;
              this.pos = pos;
              this.type = type || '';
              this.isNew = true;
              if (!type && !noLabel) {
                this.addLabel();
              }
            }
            Tick.prototype = {
              addLabel: function () {
                var tick = this, axis = tick.axis, options = axis.options, chart = axis.chart, categories = axis.categories, names = axis.names, pos = tick.pos, labelOptions = options.labels, str, tickPositions = axis.tickPositions, isFirst = pos === tickPositions[0], isLast = pos === tickPositions[tickPositions.length - 1], value = categories ? pick(categories[pos], names[pos], pos) : pos, label = tick.label, tickPositionInfo = tickPositions.info, dateTimeLabelFormat;
                // Set the datetime label format. If a higher rank is set for this position, use that. If not,
                // use the general format.
                if (axis.isDatetimeAxis && tickPositionInfo) {
                  dateTimeLabelFormat = options.dateTimeLabelFormats[tickPositionInfo.higherRanks[pos] || tickPositionInfo.unitName];
                }
                // set properties for access in render method
                tick.isFirst = isFirst;
                tick.isLast = isLast;
                // get the string
                str = axis.labelFormatter.call({
                  axis: axis,
                  chart: chart,
                  isFirst: isFirst,
                  isLast: isLast,
                  dateTimeLabelFormat: dateTimeLabelFormat,
                  value: axis.isLog ? correctFloat(lin2log(value)) : value
                });
                // prepare CSS
                //css = width && { width: mathMax(1, mathRound(width - 2 * (labelOptions.padding || 10))) + PX };
                // first call
                if (!defined(label)) {
                  tick.label = label = defined(str) && labelOptions.enabled ? chart.renderer.text(str, 0, 0, labelOptions.useHTML).css(merge(labelOptions.style)).add(axis.labelGroup) : null;
                  tick.labelLength = label && label.getBBox().width;
                  // Un-rotated length
                  tick.rotation = 0;  // Base value to detect change for new calls to getBBox
                                      // update
                } else if (label) {
                  label.attr({ text: str });
                }
              },
              getLabelSize: function () {
                return this.label ? this.label.getBBox()[this.axis.horiz ? 'height' : 'width'] : 0;
              },
              handleOverflow: function (xy) {
                var axis = this.axis, pxPos = xy.x, chartWidth = axis.chart.chartWidth, spacing = axis.chart.spacing, leftBound = pick(axis.labelLeft, mathMin(axis.pos, spacing[3])), rightBound = pick(axis.labelRight, mathMax(axis.pos + axis.len, chartWidth - spacing[1])), label = this.label, rotation = this.rotation, factor = {
                    left: 0,
                    center: 0.5,
                    right: 1
                  }[axis.labelAlign], labelWidth = label.getBBox().width, slotWidth = axis.slotWidth, xCorrection = factor, goRight = 1, leftPos, rightPos, textWidth, css = {};
                // Check if the label overshoots the chart spacing box. If it does, move it.
                // If it now overshoots the slotWidth, add ellipsis.
                if (!rotation) {
                  leftPos = pxPos - factor * labelWidth;
                  rightPos = pxPos + (1 - factor) * labelWidth;
                  if (leftPos < leftBound) {
                    slotWidth = xy.x + slotWidth * (1 - factor) - leftBound;
                  } else if (rightPos > rightBound) {
                    slotWidth = rightBound - xy.x + slotWidth * factor;
                    goRight = -1;
                  }
                  slotWidth = mathMin(axis.slotWidth, slotWidth);
                  // #4177
                  if (slotWidth < axis.slotWidth && axis.labelAlign === 'center') {
                    xy.x += goRight * (axis.slotWidth - slotWidth - xCorrection * (axis.slotWidth - mathMin(labelWidth, slotWidth)));
                  }
                  // If the label width exceeds the available space, set a text width to be 
                  // picked up below. Also, if a width has been set before, we need to set a new
                  // one because the reported labelWidth will be limited by the box (#3938).
                  if (labelWidth > slotWidth || axis.autoRotation && label.styles.width) {
                    textWidth = slotWidth;
                  }  // Add ellipsis to prevent rotated labels to be clipped against the edge of the chart
                } else if (rotation < 0 && pxPos - factor * labelWidth < leftBound) {
                  textWidth = mathRound(pxPos / mathCos(rotation * deg2rad) - leftBound);
                } else if (rotation > 0 && pxPos + factor * labelWidth > rightBound) {
                  textWidth = mathRound((chartWidth - pxPos) / mathCos(rotation * deg2rad));
                }
                if (textWidth) {
                  css.width = textWidth;
                  if (!axis.options.labels.style.textOverflow) {
                    css.textOverflow = 'ellipsis';
                  }
                  label.css(css);
                }
              },
              getPosition: function (horiz, pos, tickmarkOffset, old) {
                var axis = this.axis, chart = axis.chart, cHeight = old && chart.oldChartHeight || chart.chartHeight;
                return {
                  x: horiz ? axis.translate(pos + tickmarkOffset, null, null, old) + axis.transB : axis.left + axis.offset + (axis.opposite ? (old && chart.oldChartWidth || chart.chartWidth) - axis.right - axis.left : 0),
                  y: horiz ? cHeight - axis.bottom + axis.offset - (axis.opposite ? axis.height : 0) : cHeight - axis.translate(pos + tickmarkOffset, null, null, old) - axis.transB
                };
              },
              getLabelPosition: function (x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {
                var axis = this.axis, transA = axis.transA, reversed = axis.reversed, staggerLines = axis.staggerLines, rotCorr = axis.tickRotCorr || {
                    x: 0,
                    y: 0
                  }, yOffset = pick(labelOptions.y, rotCorr.y + (axis.side === 2 ? 8 : -(label.getBBox().height / 2))), line;
                x = x + labelOptions.x + rotCorr.x - (tickmarkOffset && horiz ? tickmarkOffset * transA * (reversed ? -1 : 1) : 0);
                y = y + yOffset - (tickmarkOffset && !horiz ? tickmarkOffset * transA * (reversed ? 1 : -1) : 0);
                // Correct for staggered labels
                if (staggerLines) {
                  line = index / (step || 1) % staggerLines;
                  y += line * (axis.labelOffset / staggerLines);
                }
                return {
                  x: x,
                  y: mathRound(y)
                };
              },
              getMarkPath: function (x, y, tickLength, tickWidth, horiz, renderer) {
                return renderer.crispLine([
                  M,
                  x,
                  y,
                  L,
                  x + (horiz ? 0 : -tickLength),
                  y + (horiz ? tickLength : 0)
                ], tickWidth);
              },
              render: function (index, old, opacity) {
                var tick = this, axis = tick.axis, options = axis.options, chart = axis.chart, renderer = chart.renderer, horiz = axis.horiz, type = tick.type, label = tick.label, pos = tick.pos, labelOptions = options.labels, gridLine = tick.gridLine, gridPrefix = type ? type + 'Grid' : 'grid', tickPrefix = type ? type + 'Tick' : 'tick', gridLineWidth = options[gridPrefix + 'LineWidth'], gridLineColor = options[gridPrefix + 'LineColor'], dashStyle = options[gridPrefix + 'LineDashStyle'], tickLength = options[tickPrefix + 'Length'], tickWidth = pick(options[tickPrefix + 'Width'], !type && axis.isXAxis ? 1 : 0),
                  // X axis defaults to 1
                  tickColor = options[tickPrefix + 'Color'], tickPosition = options[tickPrefix + 'Position'], gridLinePath, mark = tick.mark, markPath, step = labelOptions.step, attribs, show = true, tickmarkOffset = axis.tickmarkOffset, xy = tick.getPosition(horiz, pos, tickmarkOffset, old), x = xy.x, y = xy.y, reverseCrisp = horiz && x === axis.pos + axis.len || !horiz && y === axis.pos ? -1 : 1;
                // #1480, #1687
                opacity = pick(opacity, 1);
                this.isActive = true;
                // create the grid line
                if (gridLineWidth) {
                  gridLinePath = axis.getPlotLinePath(pos + tickmarkOffset, gridLineWidth * reverseCrisp, old, true);
                  if (gridLine === UNDEFINED) {
                    attribs = {
                      stroke: gridLineColor,
                      'stroke-width': gridLineWidth
                    };
                    if (dashStyle) {
                      attribs.dashstyle = dashStyle;
                    }
                    if (!type) {
                      attribs.zIndex = 1;
                    }
                    if (old) {
                      attribs.opacity = 0;
                    }
                    tick.gridLine = gridLine = gridLineWidth ? renderer.path(gridLinePath).attr(attribs).add(axis.gridGroup) : null;
                  }
                  // If the parameter 'old' is set, the current call will be followed
                  // by another call, therefore do not do any animations this time
                  if (!old && gridLine && gridLinePath) {
                    gridLine[tick.isNew ? 'attr' : 'animate']({
                      d: gridLinePath,
                      opacity: opacity
                    });
                  }
                }
                // create the tick mark
                if (tickWidth && tickLength) {
                  // negate the length
                  if (tickPosition === 'inside') {
                    tickLength = -tickLength;
                  }
                  if (axis.opposite) {
                    tickLength = -tickLength;
                  }
                  markPath = tick.getMarkPath(x, y, tickLength, tickWidth * reverseCrisp, horiz, renderer);
                  if (mark) {
                    // updating
                    mark.animate({
                      d: markPath,
                      opacity: opacity
                    });
                  } else {
                    // first time
                    tick.mark = renderer.path(markPath).attr({
                      stroke: tickColor,
                      'stroke-width': tickWidth,
                      opacity: opacity
                    }).add(axis.axisGroup);
                  }
                }
                // the label is created on init - now move it into place
                if (label && !isNaN(x)) {
                  label.xy = xy = tick.getLabelPosition(x, y, label, horiz, labelOptions, tickmarkOffset, index, step);
                  // Apply show first and show last. If the tick is both first and last, it is
                  // a single centered tick, in which case we show the label anyway (#2100).
                  if (tick.isFirst && !tick.isLast && !pick(options.showFirstLabel, 1) || tick.isLast && !tick.isFirst && !pick(options.showLastLabel, 1)) {
                    show = false;  // Handle label overflow and show or hide accordingly
                  } else if (horiz && !axis.isRadial && !labelOptions.step && !labelOptions.rotation && !old && opacity !== 0) {
                    tick.handleOverflow(xy);
                  }
                  // apply step
                  if (step && index % step) {
                    // show those indices dividable by step
                    show = false;
                  }
                  // Set the new position, and show or hide
                  if (show && !isNaN(xy.y)) {
                    xy.opacity = opacity;
                    label[tick.isNew ? 'attr' : 'animate'](xy);
                    tick.isNew = false;
                  } else {
                    label.attr('y', -9999);  // #1338
                  }
                }
              },
              destroy: function () {
                destroyObjectProperties(this, this.axis);
              }
            };
            /**
		 * The object wrapper for plot lines and plot bands
		 * @param {Object} options
		 */
            Highcharts.PlotLineOrBand = function (axis, options) {
              this.axis = axis;
              if (options) {
                this.options = options;
                this.id = options.id;
              }
            };
            Highcharts.PlotLineOrBand.prototype = {
              render: function () {
                var plotLine = this, axis = plotLine.axis, horiz = axis.horiz, options = plotLine.options, optionsLabel = options.label, label = plotLine.label, width = options.width, to = options.to, from = options.from, isBand = defined(from) && defined(to), value = options.value, dashStyle = options.dashStyle, svgElem = plotLine.svgElem, path = [], addEvent, eventType, xs, ys, x, y, color = options.color, zIndex = options.zIndex, events = options.events, attribs = {}, renderer = axis.chart.renderer;
                // logarithmic conversion
                if (axis.isLog) {
                  from = log2lin(from);
                  to = log2lin(to);
                  value = log2lin(value);
                }
                // plot line
                if (width) {
                  path = axis.getPlotLinePath(value, width);
                  attribs = {
                    stroke: color,
                    'stroke-width': width
                  };
                  if (dashStyle) {
                    attribs.dashstyle = dashStyle;
                  }
                } else if (isBand) {
                  // plot band
                  path = axis.getPlotBandPath(from, to, options);
                  if (color) {
                    attribs.fill = color;
                  }
                  if (options.borderWidth) {
                    attribs.stroke = options.borderColor;
                    attribs['stroke-width'] = options.borderWidth;
                  }
                } else {
                  return;
                }
                // zIndex
                if (defined(zIndex)) {
                  attribs.zIndex = zIndex;
                }
                // common for lines and bands
                if (svgElem) {
                  if (path) {
                    svgElem.animate({ d: path }, null, svgElem.onGetPath);
                  } else {
                    svgElem.hide();
                    svgElem.onGetPath = function () {
                      svgElem.show();
                    };
                    if (label) {
                      plotLine.label = label = label.destroy();
                    }
                  }
                } else if (path && path.length) {
                  plotLine.svgElem = svgElem = renderer.path(path).attr(attribs).add();
                  // events
                  if (events) {
                    addEvent = function (eventType) {
                      svgElem.on(eventType, function (e) {
                        events[eventType].apply(plotLine, [e]);
                      });
                    };
                    for (eventType in events) {
                      addEvent(eventType);
                    }
                  }
                }
                // the plot band/line label
                if (optionsLabel && defined(optionsLabel.text) && path && path.length && axis.width > 0 && axis.height > 0) {
                  // apply defaults
                  optionsLabel = merge({
                    align: horiz && isBand && 'center',
                    x: horiz ? !isBand && 4 : 10,
                    verticalAlign: !horiz && isBand && 'middle',
                    y: horiz ? isBand ? 16 : 10 : isBand ? 6 : -4,
                    rotation: horiz && !isBand && 90
                  }, optionsLabel);
                  // add the SVG element
                  if (!label) {
                    attribs = {
                      align: optionsLabel.textAlign || optionsLabel.align,
                      rotation: optionsLabel.rotation
                    };
                    if (defined(zIndex)) {
                      attribs.zIndex = zIndex;
                    }
                    plotLine.label = label = renderer.text(optionsLabel.text, 0, 0, optionsLabel.useHTML).attr(attribs).css(optionsLabel.style).add();
                  }
                  // get the bounding box and align the label
                  // #3000 changed to better handle choice between plotband or plotline
                  xs = [
                    path[1],
                    path[4],
                    isBand ? path[6] : path[1]
                  ];
                  ys = [
                    path[2],
                    path[5],
                    isBand ? path[7] : path[2]
                  ];
                  x = arrayMin(xs);
                  y = arrayMin(ys);
                  label.align(optionsLabel, false, {
                    x: x,
                    y: y,
                    width: arrayMax(xs) - x,
                    height: arrayMax(ys) - y
                  });
                  label.show();
                } else if (label) {
                  // move out of sight
                  label.hide();
                }
                // chainable
                return plotLine;
              },
              destroy: function () {
                // remove it from the lookup
                erase(this.axis.plotLinesAndBands, this);
                delete this.axis;
                destroyObjectProperties(this);
              }
            };
            /**
		 * Object with members for extending the Axis prototype
		 */
            AxisPlotLineOrBandExtension = {
              getPlotBandPath: function (from, to) {
                var toPath = this.getPlotLinePath(to, null, null, true), path = this.getPlotLinePath(from, null, null, true);
                if (path && toPath && path.toString() !== toPath.toString()) {
                  // #3836
                  path.push(toPath[4], toPath[5], toPath[1], toPath[2]);
                } else {
                  // outside the axis area
                  path = null;
                }
                return path;
              },
              addPlotBand: function (options) {
                return this.addPlotBandOrLine(options, 'plotBands');
              },
              addPlotLine: function (options) {
                return this.addPlotBandOrLine(options, 'plotLines');
              },
              addPlotBandOrLine: function (options, coll) {
                var obj = new Highcharts.PlotLineOrBand(this, options).render(), userOptions = this.userOptions;
                if (obj) {
                  // #2189
                  // Add it to the user options for exporting and Axis.update
                  if (coll) {
                    userOptions[coll] = userOptions[coll] || [];
                    userOptions[coll].push(options);
                  }
                  this.plotLinesAndBands.push(obj);
                }
                return obj;
              },
              removePlotBandOrLine: function (id) {
                var plotLinesAndBands = this.plotLinesAndBands, options = this.options, userOptions = this.userOptions, i = plotLinesAndBands.length;
                while (i--) {
                  if (plotLinesAndBands[i].id === id) {
                    plotLinesAndBands[i].destroy();
                  }
                }
                each([
                  options.plotLines || [],
                  userOptions.plotLines || [],
                  options.plotBands || [],
                  userOptions.plotBands || []
                ], function (arr) {
                  i = arr.length;
                  while (i--) {
                    if (arr[i].id === id) {
                      erase(arr, arr[i]);
                    }
                  }
                });
              }
            };
            /**
		 * Create a new axis object
		 * @param {Object} chart
		 * @param {Object} options
		 */
            var Axis = Highcharts.Axis = function () {
                this.init.apply(this, arguments);
              };
            Axis.prototype = {
              defaultOptions: {
                dateTimeLabelFormats: {
                  millisecond: '%H:%M:%S.%L',
                  second: '%H:%M:%S',
                  minute: '%H:%M',
                  hour: '%H:%M',
                  day: '%e. %b',
                  week: '%e. %b',
                  month: '%b \'%y',
                  year: '%Y'
                },
                endOnTick: false,
                gridLineColor: '#D8D8D8',
                labels: {
                  enabled: true,
                  style: {
                    color: '#606060',
                    cursor: 'default',
                    fontSize: '11px'
                  },
                  x: 0,
                  y: 15
                },
                lineColor: '#C0D0E0',
                lineWidth: 1,
                minPadding: 0.01,
                maxPadding: 0.01,
                minorGridLineColor: '#E0E0E0',
                minorGridLineWidth: 1,
                minorTickColor: '#A0A0A0',
                minorTickLength: 2,
                minorTickPosition: 'outside',
                startOfWeek: 1,
                startOnTick: false,
                tickColor: '#C0D0E0',
                tickLength: 10,
                tickmarkPlacement: 'between',
                tickPixelInterval: 100,
                tickPosition: 'outside',
                title: {
                  align: 'middle',
                  style: { color: '#707070' }
                },
                type: 'linear'
              },
              defaultYAxisOptions: {
                endOnTick: true,
                gridLineWidth: 1,
                tickPixelInterval: 72,
                showLastLabel: true,
                labels: {
                  x: -8,
                  y: 3
                },
                lineWidth: 0,
                maxPadding: 0.05,
                minPadding: 0.05,
                startOnTick: true,
                title: {
                  rotation: 270,
                  text: 'Values'
                },
                stackLabels: {
                  enabled: false,
                  formatter: function () {
                    return Highcharts.numberFormat(this.total, -1);
                  },
                  style: merge(defaultPlotOptions.line.dataLabels.style, { color: '#000000' })
                }
              },
              defaultLeftAxisOptions: {
                labels: {
                  x: -15,
                  y: null
                },
                title: { rotation: 270 }
              },
              defaultRightAxisOptions: {
                labels: {
                  x: 15,
                  y: null
                },
                title: { rotation: 90 }
              },
              defaultBottomAxisOptions: {
                labels: {
                  autoRotation: [-45],
                  x: 0,
                  y: null
                },
                title: { rotation: 0 }
              },
              defaultTopAxisOptions: {
                labels: {
                  autoRotation: [-45],
                  x: 0,
                  y: -15
                },
                title: { rotation: 0 }
              },
              init: function (chart, userOptions) {
                var isXAxis = userOptions.isX, axis = this;
                axis.chart = chart;
                // Flag, is the axis horizontal
                axis.horiz = chart.inverted ? !isXAxis : isXAxis;
                // Flag, isXAxis
                axis.isXAxis = isXAxis;
                axis.coll = isXAxis ? 'xAxis' : 'yAxis';
                axis.opposite = userOptions.opposite;
                // needed in setOptions
                axis.side = userOptions.side || (axis.horiz ? axis.opposite ? 0 : 2 : axis.opposite ? 1 : 3);
                // right : left
                axis.setOptions(userOptions);
                var options = this.options, type = options.type, isDatetimeAxis = type === 'datetime';
                axis.labelFormatter = options.labels.formatter || axis.defaultLabelFormatter;
                // can be overwritten by dynamic format
                // Flag, stagger lines or not
                axis.userOptions = userOptions;
                //axis.axisTitleMargin = UNDEFINED,// = options.title.margin,
                axis.minPixelPadding = 0;
                axis.reversed = options.reversed;
                axis.visible = options.visible !== false;
                axis.zoomEnabled = options.zoomEnabled !== false;
                // Initial categories
                axis.categories = options.categories || type === 'category';
                axis.names = axis.names || [];
                // Preserve on update (#3830)
                // Elements
                //axis.axisGroup = UNDEFINED;
                //axis.gridGroup = UNDEFINED;
                //axis.axisTitle = UNDEFINED;
                //axis.axisLine = UNDEFINED;
                // Shorthand types
                axis.isLog = type === 'logarithmic';
                axis.isDatetimeAxis = isDatetimeAxis;
                // Flag, if axis is linked to another axis
                axis.isLinked = defined(options.linkedTo);
                // Linked axis.
                //axis.linkedParent = UNDEFINED;
                // Tick positions
                //axis.tickPositions = UNDEFINED; // array containing predefined positions
                // Tick intervals
                //axis.tickInterval = UNDEFINED;
                //axis.minorTickInterval = UNDEFINED;
                // Major ticks
                axis.ticks = {};
                axis.labelEdge = [];
                // Minor ticks
                axis.minorTicks = {};
                // List of plotLines/Bands
                axis.plotLinesAndBands = [];
                // Alternate bands
                axis.alternateBands = {};
                // Axis metrics
                //axis.left = UNDEFINED;
                //axis.top = UNDEFINED;
                //axis.width = UNDEFINED;
                //axis.height = UNDEFINED;
                //axis.bottom = UNDEFINED;
                //axis.right = UNDEFINED;
                //axis.transA = UNDEFINED;
                //axis.transB = UNDEFINED;
                //axis.oldTransA = UNDEFINED;
                axis.len = 0;
                //axis.oldMin = UNDEFINED;
                //axis.oldMax = UNDEFINED;
                //axis.oldUserMin = UNDEFINED;
                //axis.oldUserMax = UNDEFINED;
                //axis.oldAxisLength = UNDEFINED;
                axis.minRange = axis.userMinRange = options.minRange || options.maxZoom;
                axis.range = options.range;
                axis.offset = options.offset || 0;
                // Dictionary for stacks
                axis.stacks = {};
                axis.oldStacks = {};
                axis.stacksTouched = 0;
                // Min and max in the data
                //axis.dataMin = UNDEFINED,
                //axis.dataMax = UNDEFINED,
                // The axis range
                axis.max = null;
                axis.min = null;
                // User set min and max
                //axis.userMin = UNDEFINED,
                //axis.userMax = UNDEFINED,
                // Crosshair options
                axis.crosshair = pick(options.crosshair, splat(chart.options.tooltip.crosshairs)[isXAxis ? 0 : 1], false);
                // Run Axis
                var eventType, events = axis.options.events;
                // Register
                if (inArray(axis, chart.axes) === -1) {
                  // don't add it again on Axis.update()
                  if (isXAxis && !this.isColorAxis) {
                    // #2713
                    chart.axes.splice(chart.xAxis.length, 0, axis);
                  } else {
                    chart.axes.push(axis);
                  }
                  chart[axis.coll].push(axis);
                }
                axis.series = axis.series || [];
                // populated by Series
                // inverted charts have reversed xAxes as default
                if (chart.inverted && isXAxis && axis.reversed === UNDEFINED) {
                  axis.reversed = true;
                }
                axis.removePlotBand = axis.removePlotBandOrLine;
                axis.removePlotLine = axis.removePlotBandOrLine;
                // register event listeners
                for (eventType in events) {
                  addEvent(axis, eventType, events[eventType]);
                }
                // extend logarithmic axis
                if (axis.isLog) {
                  axis.val2lin = log2lin;
                  axis.lin2val = lin2log;
                }
              },
              setOptions: function (userOptions) {
                this.options = merge(this.defaultOptions, this.isXAxis ? {} : this.defaultYAxisOptions, [
                  this.defaultTopAxisOptions,
                  this.defaultRightAxisOptions,
                  this.defaultBottomAxisOptions,
                  this.defaultLeftAxisOptions
                ][this.side], merge(defaultOptions[this.coll], userOptions));
              },
              defaultLabelFormatter: function () {
                var axis = this.axis, value = this.value, categories = axis.categories, dateTimeLabelFormat = this.dateTimeLabelFormat, numericSymbols = defaultOptions.lang.numericSymbols, i = numericSymbols && numericSymbols.length, multi, ret, formatOption = axis.options.labels.format,
                  // make sure the same symbol is added for all labels on a linear axis
                  numericSymbolDetector = axis.isLog ? value : axis.tickInterval;
                if (formatOption) {
                  ret = format(formatOption, this);
                } else if (categories) {
                  ret = value;
                } else if (dateTimeLabelFormat) {
                  // datetime axis
                  ret = dateFormat(dateTimeLabelFormat, value);
                } else if (i && numericSymbolDetector >= 1000) {
                  // Decide whether we should add a numeric symbol like k (thousands) or M (millions).
                  // If we are to enable this in tooltip or other places as well, we can move this
                  // logic to the numberFormatter and enable it by a parameter.
                  while (i-- && ret === UNDEFINED) {
                    multi = Math.pow(1000, i + 1);
                    if (numericSymbolDetector >= multi && value * 10 % multi === 0 && numericSymbols[i] !== null) {
                      ret = Highcharts.numberFormat(value / multi, -1) + numericSymbols[i];
                    }
                  }
                }
                if (ret === UNDEFINED) {
                  if (mathAbs(value) >= 10000) {
                    // add thousands separators
                    ret = Highcharts.numberFormat(value, -1);
                  } else {
                    // small numbers
                    ret = Highcharts.numberFormat(value, -1, UNDEFINED, '');  // #2466
                  }
                }
                return ret;
              },
              getSeriesExtremes: function () {
                var axis = this, chart = axis.chart;
                axis.hasVisibleSeries = false;
                // Reset properties in case we're redrawing (#3353)
                axis.dataMin = axis.dataMax = axis.threshold = null;
                axis.softThreshold = !axis.isXAxis;
                if (axis.buildStacks) {
                  axis.buildStacks();
                }
                // loop through this axis' series
                each(axis.series, function (series) {
                  if (series.visible || !chart.options.chart.ignoreHiddenSeries) {
                    var seriesOptions = series.options, xData, threshold = seriesOptions.threshold, seriesDataMin, seriesDataMax;
                    axis.hasVisibleSeries = true;
                    // Validate threshold in logarithmic axes
                    if (axis.isLog && threshold <= 0) {
                      threshold = null;
                    }
                    // Get dataMin and dataMax for X axes
                    if (axis.isXAxis) {
                      xData = series.xData;
                      if (xData.length) {
                        axis.dataMin = mathMin(pick(axis.dataMin, xData[0]), arrayMin(xData));
                        axis.dataMax = mathMax(pick(axis.dataMax, xData[0]), arrayMax(xData));
                      }  // Get dataMin and dataMax for Y axes, as well as handle stacking and processed data
                    } else {
                      // Get this particular series extremes
                      series.getExtremes();
                      seriesDataMax = series.dataMax;
                      seriesDataMin = series.dataMin;
                      // Get the dataMin and dataMax so far. If percentage is used, the min and max are
                      // always 0 and 100. If seriesDataMin and seriesDataMax is null, then series
                      // doesn't have active y data, we continue with nulls
                      if (defined(seriesDataMin) && defined(seriesDataMax)) {
                        axis.dataMin = mathMin(pick(axis.dataMin, seriesDataMin), seriesDataMin);
                        axis.dataMax = mathMax(pick(axis.dataMax, seriesDataMax), seriesDataMax);
                      }
                      // Adjust to threshold
                      if (defined(threshold)) {
                        axis.threshold = threshold;
                      }
                      // If any series has a hard threshold, it takes precedence
                      if (!seriesOptions.softThreshold || axis.isLog) {
                        axis.softThreshold = false;
                      }
                    }
                  }
                });
              },
              translate: function (val, backwards, cvsCoord, old, handleLog, pointPlacement) {
                var axis = this.linkedParent || this,
                  // #1417
                  sign = 1, cvsOffset = 0, localA = old ? axis.oldTransA : axis.transA, localMin = old ? axis.oldMin : axis.min, returnValue, minPixelPadding = axis.minPixelPadding, doPostTranslate = (axis.doPostTranslate || axis.isLog && handleLog) && axis.lin2val;
                if (!localA) {
                  localA = axis.transA;
                }
                // In vertical axes, the canvas coordinates start from 0 at the top like in
                // SVG.
                if (cvsCoord) {
                  sign *= -1;
                  // canvas coordinates inverts the value
                  cvsOffset = axis.len;
                }
                // Handle reversed axis
                if (axis.reversed) {
                  sign *= -1;
                  cvsOffset -= sign * (axis.sector || axis.len);
                }
                // From pixels to value
                if (backwards) {
                  // reverse translation
                  val = val * sign + cvsOffset;
                  val -= minPixelPadding;
                  returnValue = val / localA + localMin;
                  // from chart pixel to value
                  if (doPostTranslate) {
                    // log and ordinal axes
                    returnValue = axis.lin2val(returnValue);
                  }  // From value to pixels
                } else {
                  if (doPostTranslate) {
                    // log and ordinal axes
                    val = axis.val2lin(val);
                  }
                  if (pointPlacement === 'between') {
                    pointPlacement = 0.5;
                  }
                  returnValue = sign * (val - localMin) * localA + cvsOffset + sign * minPixelPadding + (isNumber(pointPlacement) ? localA * pointPlacement * axis.pointRange : 0);
                }
                return returnValue;
              },
              toPixels: function (value, paneCoordinates) {
                return this.translate(value, false, !this.horiz, null, true) + (paneCoordinates ? 0 : this.pos);
              },
              toValue: function (pixel, paneCoordinates) {
                return this.translate(pixel - (paneCoordinates ? 0 : this.pos), true, !this.horiz, null, true);
              },
              getPlotLinePath: function (value, lineWidth, old, force, translatedValue) {
                var axis = this, chart = axis.chart, axisLeft = axis.left, axisTop = axis.top, x1, y1, x2, y2, cHeight = old && chart.oldChartHeight || chart.chartHeight, cWidth = old && chart.oldChartWidth || chart.chartWidth, skip, transB = axis.transB,
                  /**
					 * Check if x is between a and b. If not, either move to a/b or skip, 
					 * depending on the force parameter.
					 */
                  between = function (x, a, b) {
                    if (x < a || x > b) {
                      if (force) {
                        x = mathMin(mathMax(a, x), b);
                      } else {
                        skip = true;
                      }
                    }
                    return x;
                  };
                translatedValue = pick(translatedValue, axis.translate(value, null, null, old));
                x1 = x2 = mathRound(translatedValue + transB);
                y1 = y2 = mathRound(cHeight - translatedValue - transB);
                if (isNaN(translatedValue)) {
                  // no min or max
                  skip = true;
                } else if (axis.horiz) {
                  y1 = axisTop;
                  y2 = cHeight - axis.bottom;
                  x1 = x2 = between(x1, axisLeft, axisLeft + axis.width);
                } else {
                  x1 = axisLeft;
                  x2 = cWidth - axis.right;
                  y1 = y2 = between(y1, axisTop, axisTop + axis.height);
                }
                return skip && !force ? null : chart.renderer.crispLine([
                  M,
                  x1,
                  y1,
                  L,
                  x2,
                  y2
                ], lineWidth || 1);
              },
              getLinearTickPositions: function (tickInterval, min, max) {
                var pos, lastPos, roundedMin = correctFloat(mathFloor(min / tickInterval) * tickInterval), roundedMax = correctFloat(mathCeil(max / tickInterval) * tickInterval), tickPositions = [];
                // For single points, add a tick regardless of the relative position (#2662)
                if (min === max && isNumber(min)) {
                  return [min];
                }
                // Populate the intermediate values
                pos = roundedMin;
                while (pos <= roundedMax) {
                  // Place the tick on the rounded value
                  tickPositions.push(pos);
                  // Always add the raw tickInterval, not the corrected one.
                  pos = correctFloat(pos + tickInterval);
                  // If the interval is not big enough in the current min - max range to actually increase
                  // the loop variable, we need to break out to prevent endless loop. Issue #619
                  if (pos === lastPos) {
                    break;
                  }
                  // Record the last value
                  lastPos = pos;
                }
                return tickPositions;
              },
              getMinorTickPositions: function () {
                var axis = this, options = axis.options, tickPositions = axis.tickPositions, minorTickInterval = axis.minorTickInterval, minorTickPositions = [], pos, i, pointRangePadding = axis.pointRangePadding || 0, min = axis.min - pointRangePadding,
                  // #1498
                  max = axis.max + pointRangePadding,
                  // #1498
                  range = max - min, len;
                // If minor ticks get too dense, they are hard to read, and may cause long running script. So we don't draw them.
                if (range && range / minorTickInterval < axis.len / 3) {
                  // #3875
                  if (axis.isLog) {
                    len = tickPositions.length;
                    for (i = 1; i < len; i++) {
                      minorTickPositions = minorTickPositions.concat(axis.getLogTickPositions(minorTickInterval, tickPositions[i - 1], tickPositions[i], true));
                    }
                  } else if (axis.isDatetimeAxis && options.minorTickInterval === 'auto') {
                    // #1314
                    minorTickPositions = minorTickPositions.concat(axis.getTimeTicks(axis.normalizeTimeTickInterval(minorTickInterval), min, max, options.startOfWeek));
                  } else {
                    for (pos = min + (tickPositions[0] - min) % minorTickInterval; pos <= max; pos += minorTickInterval) {
                      minorTickPositions.push(pos);
                    }
                  }
                }
                if (minorTickPositions.length !== 0) {
                  // don't change the extremes, when there is no minor ticks
                  axis.trimTicks(minorTickPositions, options.startOnTick, options.endOnTick);  // #3652 #3743 #1498
                }
                return minorTickPositions;
              },
              adjustForMinRange: function () {
                var axis = this, options = axis.options, min = axis.min, max = axis.max, zoomOffset, spaceAvailable = axis.dataMax - axis.dataMin >= axis.minRange, closestDataRange, i, distance, xData, loopLength, minArgs, maxArgs, minRange;
                // Set the automatic minimum range based on the closest point distance
                if (axis.isXAxis && axis.minRange === UNDEFINED && !axis.isLog) {
                  if (defined(options.min) || defined(options.max)) {
                    axis.minRange = null;  // don't do this again
                  } else {
                    // Find the closest distance between raw data points, as opposed to
                    // closestPointRange that applies to processed points (cropped and grouped)
                    each(axis.series, function (series) {
                      xData = series.xData;
                      loopLength = series.xIncrement ? 1 : xData.length - 1;
                      for (i = loopLength; i > 0; i--) {
                        distance = xData[i] - xData[i - 1];
                        if (closestDataRange === UNDEFINED || distance < closestDataRange) {
                          closestDataRange = distance;
                        }
                      }
                    });
                    axis.minRange = mathMin(closestDataRange * 5, axis.dataMax - axis.dataMin);
                  }
                }
                // if minRange is exceeded, adjust
                if (max - min < axis.minRange) {
                  minRange = axis.minRange;
                  zoomOffset = (minRange - max + min) / 2;
                  // if min and max options have been set, don't go beyond it
                  minArgs = [
                    min - zoomOffset,
                    pick(options.min, min - zoomOffset)
                  ];
                  if (spaceAvailable) {
                    // if space is available, stay within the data range
                    minArgs[2] = axis.dataMin;
                  }
                  min = arrayMax(minArgs);
                  maxArgs = [
                    min + minRange,
                    pick(options.max, min + minRange)
                  ];
                  if (spaceAvailable) {
                    // if space is availabe, stay within the data range
                    maxArgs[2] = axis.dataMax;
                  }
                  max = arrayMin(maxArgs);
                  // now if the max is adjusted, adjust the min back
                  if (max - min < minRange) {
                    minArgs[0] = max - minRange;
                    minArgs[1] = pick(options.min, max - minRange);
                    min = arrayMax(minArgs);
                  }
                }
                // Record modified extremes
                axis.min = min;
                axis.max = max;
              },
              setAxisTranslation: function (saveOld) {
                var axis = this, range = axis.max - axis.min, pointRange = axis.axisPointRange || 0, closestPointRange, minPointOffset = 0, pointRangePadding = 0, linkedParent = axis.linkedParent, ordinalCorrection, hasCategories = !!axis.categories, transA = axis.transA, isXAxis = axis.isXAxis;
                // Adjust translation for padding. Y axis with categories need to go through the same (#1784).
                if (isXAxis || hasCategories || pointRange) {
                  if (linkedParent) {
                    minPointOffset = linkedParent.minPointOffset;
                    pointRangePadding = linkedParent.pointRangePadding;
                  } else {
                    each(axis.series, function (series) {
                      var seriesPointRange = hasCategories ? 1 : isXAxis ? series.pointRange : axis.axisPointRange || 0,
                        // #2806
                        pointPlacement = series.options.pointPlacement, seriesClosestPointRange = series.closestPointRange;
                      pointRange = mathMax(pointRange, seriesPointRange);
                      if (!axis.single) {
                        // minPointOffset is the value padding to the left of the axis in order to make
                        // room for points with a pointRange, typically columns. When the pointPlacement option
                        // is 'between' or 'on', this padding does not apply.
                        minPointOffset = mathMax(minPointOffset, isString(pointPlacement) ? 0 : seriesPointRange / 2);
                        // Determine the total padding needed to the length of the axis to make room for the
                        // pointRange. If the series' pointPlacement is 'on', no padding is added.
                        pointRangePadding = mathMax(pointRangePadding, pointPlacement === 'on' ? 0 : seriesPointRange);
                      }
                      // Set the closestPointRange
                      if (!series.noSharedTooltip && defined(seriesClosestPointRange)) {
                        closestPointRange = defined(closestPointRange) ? mathMin(closestPointRange, seriesClosestPointRange) : seriesClosestPointRange;
                      }
                    });
                  }
                  // Record minPointOffset and pointRangePadding
                  ordinalCorrection = axis.ordinalSlope && closestPointRange ? axis.ordinalSlope / closestPointRange : 1;
                  // #988, #1853
                  axis.minPointOffset = minPointOffset = minPointOffset * ordinalCorrection;
                  axis.pointRangePadding = pointRangePadding = pointRangePadding * ordinalCorrection;
                  // pointRange means the width reserved for each point, like in a column chart
                  axis.pointRange = mathMin(pointRange, range);
                  // closestPointRange means the closest distance between points. In columns
                  // it is mostly equal to pointRange, but in lines pointRange is 0 while closestPointRange
                  // is some other value
                  if (isXAxis) {
                    axis.closestPointRange = closestPointRange;
                  }
                }
                // Secondary values
                if (saveOld) {
                  axis.oldTransA = transA;
                }
                axis.translationSlope = axis.transA = transA = axis.len / (range + pointRangePadding || 1);
                axis.transB = axis.horiz ? axis.left : axis.bottom;
                // translation addend
                axis.minPixelPadding = transA * minPointOffset;
              },
              minFromRange: function () {
                return this.max - this.range;
              },
              setTickInterval: function (secondPass) {
                var axis = this, chart = axis.chart, options = axis.options, isLog = axis.isLog, isDatetimeAxis = axis.isDatetimeAxis, isXAxis = axis.isXAxis, isLinked = axis.isLinked, maxPadding = options.maxPadding, minPadding = options.minPadding, length, linkedParentExtremes, tickIntervalOption = options.tickInterval, minTickInterval, tickPixelIntervalOption = options.tickPixelInterval, categories = axis.categories, threshold = axis.threshold, softThreshold = axis.softThreshold, thresholdMin, thresholdMax, hardMin, hardMax;
                if (!isDatetimeAxis && !categories && !isLinked) {
                  this.getTickAmount();
                }
                // Min or max set either by zooming/setExtremes or initial options
                hardMin = pick(axis.userMin, options.min);
                hardMax = pick(axis.userMax, options.max);
                // Linked axis gets the extremes from the parent axis
                if (isLinked) {
                  axis.linkedParent = chart[axis.coll][options.linkedTo];
                  linkedParentExtremes = axis.linkedParent.getExtremes();
                  axis.min = pick(linkedParentExtremes.min, linkedParentExtremes.dataMin);
                  axis.max = pick(linkedParentExtremes.max, linkedParentExtremes.dataMax);
                  if (options.type !== axis.linkedParent.options.type) {
                    error(11, 1);  // Can't link axes of different type
                  }  // Initial min and max from the extreme data values
                } else {
                  // Adjust to hard threshold
                  if (!softThreshold && defined(threshold)) {
                    if (axis.dataMin >= threshold) {
                      thresholdMin = threshold;
                      minPadding = 0;
                    } else if (axis.dataMax <= threshold) {
                      thresholdMax = threshold;
                      maxPadding = 0;
                    }
                  }
                  axis.min = pick(hardMin, thresholdMin, axis.dataMin);
                  axis.max = pick(hardMax, thresholdMax, axis.dataMax);
                }
                if (isLog) {
                  if (!secondPass && mathMin(axis.min, pick(axis.dataMin, axis.min)) <= 0) {
                    // #978
                    error(10, 1);  // Can't plot negative values on log axis
                  }
                  // The correctFloat cures #934, float errors on full tens. But it
                  // was too aggressive for #4360 because of conversion back to lin,
                  // therefore use precision 15.
                  axis.min = correctFloat(log2lin(axis.min), 15);
                  axis.max = correctFloat(log2lin(axis.max), 15);
                }
                // handle zoomed range
                if (axis.range && defined(axis.max)) {
                  axis.userMin = axis.min = hardMin = mathMax(axis.min, axis.minFromRange());
                  // #618
                  axis.userMax = hardMax = axis.max;
                  axis.range = null;  // don't use it when running setExtremes
                }
                // Hook for adjusting this.min and this.max. Used by bubble series.
                if (axis.beforePadding) {
                  axis.beforePadding();
                }
                // adjust min and max for the minimum range
                axis.adjustForMinRange();
                // Pad the values to get clear of the chart's edges. To avoid tickInterval taking the padding
                // into account, we do this after computing tick interval (#1337).
                if (!categories && !axis.axisPointRange && !axis.usePercentage && !isLinked && defined(axis.min) && defined(axis.max)) {
                  length = axis.max - axis.min;
                  if (length) {
                    if (!defined(hardMin) && minPadding) {
                      axis.min -= length * minPadding;
                    }
                    if (!defined(hardMax) && maxPadding) {
                      axis.max += length * maxPadding;
                    }
                  }
                }
                // Stay within floor and ceiling
                if (isNumber(options.floor)) {
                  axis.min = mathMax(axis.min, options.floor);
                }
                if (isNumber(options.ceiling)) {
                  axis.max = mathMin(axis.max, options.ceiling);
                }
                // When the threshold is soft, adjust the extreme value only if 
                // the data extreme and the padded extreme land on either side of the threshold. For example,
                // a series of [0, 1, 2, 3] would make the yAxis add a tick for -1 because of the
                // default minPadding and startOnTick options. This is prevented by the softThreshold
                // option.
                if (softThreshold && defined(axis.dataMin)) {
                  threshold = threshold || 0;
                  if (!defined(hardMin) && axis.min < threshold && axis.dataMin >= threshold) {
                    axis.min = threshold;
                  } else if (!defined(hardMax) && axis.max > threshold && axis.dataMax <= threshold) {
                    axis.max = threshold;
                  }
                }
                // get tickInterval
                if (axis.min === axis.max || axis.min === undefined || axis.max === undefined) {
                  axis.tickInterval = 1;
                } else if (isLinked && !tickIntervalOption && tickPixelIntervalOption === axis.linkedParent.options.tickPixelInterval) {
                  axis.tickInterval = tickIntervalOption = axis.linkedParent.tickInterval;
                } else {
                  axis.tickInterval = pick(tickIntervalOption, this.tickAmount ? (axis.max - axis.min) / mathMax(this.tickAmount - 1, 1) : undefined, categories ? 1 : (axis.max - axis.min) * tickPixelIntervalOption / mathMax(axis.len, tickPixelIntervalOption));
                }
                // Now we're finished detecting min and max, crop and group series data. This
                // is in turn needed in order to find tick positions in ordinal axes.
                if (isXAxis && !secondPass) {
                  each(axis.series, function (series) {
                    series.processData(axis.min !== axis.oldMin || axis.max !== axis.oldMax);
                  });
                }
                // set the translation factor used in translate function
                axis.setAxisTranslation(true);
                // hook for ordinal axes and radial axes
                if (axis.beforeSetTickPositions) {
                  axis.beforeSetTickPositions();
                }
                // hook for extensions, used in Highstock ordinal axes
                if (axis.postProcessTickInterval) {
                  axis.tickInterval = axis.postProcessTickInterval(axis.tickInterval);
                }
                // In column-like charts, don't cramp in more ticks than there are points (#1943)
                if (axis.pointRange) {
                  axis.tickInterval = mathMax(axis.pointRange, axis.tickInterval);
                }
                // Before normalizing the tick interval, handle minimum tick interval. This applies only if tickInterval is not defined.
                minTickInterval = pick(options.minTickInterval, axis.isDatetimeAxis && axis.closestPointRange);
                if (!tickIntervalOption && axis.tickInterval < minTickInterval) {
                  axis.tickInterval = minTickInterval;
                }
                // for linear axes, get magnitude and normalize the interval
                if (!isDatetimeAxis && !isLog && !tickIntervalOption) {
                  axis.tickInterval = normalizeTickInterval(axis.tickInterval, null, getMagnitude(axis.tickInterval), pick(options.allowDecimals, !(axis.tickInterval > 0.5 && axis.tickInterval < 5 && axis.max > 1000 && axis.max < 9999)), !!this.tickAmount);
                }
                // Prevent ticks from getting so close that we can't draw the labels
                if (!this.tickAmount && this.len) {
                  // Color axis with disabled legend has no length
                  axis.tickInterval = axis.unsquish();
                }
                this.setTickPositions();
              },
              setTickPositions: function () {
                var options = this.options, tickPositions, tickPositionsOption = options.tickPositions, tickPositioner = options.tickPositioner, startOnTick = options.startOnTick, endOnTick = options.endOnTick, single;
                // Set the tickmarkOffset
                this.tickmarkOffset = this.categories && options.tickmarkPlacement === 'between' && this.tickInterval === 1 ? 0.5 : 0;
                // #3202
                // get minorTickInterval
                this.minorTickInterval = options.minorTickInterval === 'auto' && this.tickInterval ? this.tickInterval / 5 : options.minorTickInterval;
                // Find the tick positions
                this.tickPositions = tickPositions = tickPositionsOption && tickPositionsOption.slice();
                // Work on a copy (#1565)
                if (!tickPositions) {
                  if (this.isDatetimeAxis) {
                    tickPositions = this.getTimeTicks(this.normalizeTimeTickInterval(this.tickInterval, options.units), this.min, this.max, options.startOfWeek, this.ordinalPositions, this.closestPointRange, true);
                  } else if (this.isLog) {
                    tickPositions = this.getLogTickPositions(this.tickInterval, this.min, this.max);
                  } else {
                    tickPositions = this.getLinearTickPositions(this.tickInterval, this.min, this.max);
                  }
                  // Too dense ticks, keep only the first and last (#4477)
                  if (tickPositions.length > this.len) {
                    tickPositions = [
                      tickPositions[0],
                      tickPositions.pop()
                    ];
                  }
                  this.tickPositions = tickPositions;
                  // Run the tick positioner callback, that allows modifying auto tick positions.
                  if (tickPositioner) {
                    tickPositioner = tickPositioner.apply(this, [
                      this.min,
                      this.max
                    ]);
                    if (tickPositioner) {
                      this.tickPositions = tickPositions = tickPositioner;
                    }
                  }
                }
                if (!this.isLinked) {
                  // reset min/max or remove extremes based on start/end on tick
                  this.trimTicks(tickPositions, startOnTick, endOnTick);
                  // When there is only one point, or all points have the same value on this axis, then min
                  // and max are equal and tickPositions.length is 0 or 1. In this case, add some padding
                  // in order to center the point, but leave it with one tick. #1337.
                  if (this.min === this.max && defined(this.min) && !this.tickAmount) {
                    // Substract half a unit (#2619, #2846, #2515, #3390)
                    single = true;
                    this.min -= 0.5;
                    this.max += 0.5;
                  }
                  this.single = single;
                  if (!tickPositionsOption && !tickPositioner) {
                    this.adjustTickAmount();
                  }
                }
              },
              trimTicks: function (tickPositions, startOnTick, endOnTick) {
                var roundedMin = tickPositions[0], roundedMax = tickPositions[tickPositions.length - 1], minPointOffset = this.minPointOffset || 0;
                if (startOnTick) {
                  this.min = roundedMin;
                } else if (this.min - minPointOffset > roundedMin) {
                  tickPositions.shift();
                }
                if (endOnTick) {
                  this.max = roundedMax;
                } else if (this.max + minPointOffset < roundedMax) {
                  tickPositions.pop();
                }
                // If no tick are left, set one tick in the middle (#3195) 
                if (tickPositions.length === 0 && defined(roundedMin)) {
                  tickPositions.push((roundedMax + roundedMin) / 2);
                }
              },
              getTickAmount: function () {
                var others = {},
                  // Whether there is another axis to pair with this one
                  hasOther, options = this.options, tickAmount = options.tickAmount, tickPixelInterval = options.tickPixelInterval;
                if (!defined(options.tickInterval) && this.len < tickPixelInterval && !this.isRadial && !this.isLog && options.startOnTick && options.endOnTick) {
                  tickAmount = 2;
                }
                if (!tickAmount && this.chart.options.chart.alignTicks !== false && options.alignTicks !== false) {
                  // Check if there are multiple axes in the same pane
                  each(this.chart[this.coll], function (axis) {
                    var options = axis.options, horiz = axis.horiz, key = [
                        horiz ? options.left : options.top,
                        horiz ? options.width : options.height,
                        options.pane
                      ].join(',');
                    if (axis.series.length) {
                      // #4442
                      if (others[key]) {
                        hasOther = true;  // #4201
                      } else {
                        others[key] = 1;
                      }
                    }
                  });
                  if (hasOther) {
                    // Add 1 because 4 tick intervals require 5 ticks (including first and last)
                    tickAmount = mathCeil(this.len / tickPixelInterval) + 1;
                  }
                }
                // For tick amounts of 2 and 3, compute five ticks and remove the intermediate ones. This
                // prevents the axis from adding ticks that are too far away from the data extremes.
                if (tickAmount < 4) {
                  this.finalTickAmt = tickAmount;
                  tickAmount = 5;
                }
                this.tickAmount = tickAmount;
              },
              adjustTickAmount: function () {
                var tickInterval = this.tickInterval, tickPositions = this.tickPositions, tickAmount = this.tickAmount, finalTickAmt = this.finalTickAmt, currentTickAmount = tickPositions && tickPositions.length, i, len;
                if (currentTickAmount < tickAmount) {
                  // TODO: Check #3411
                  while (tickPositions.length < tickAmount) {
                    tickPositions.push(correctFloat(tickPositions[tickPositions.length - 1] + tickInterval));
                  }
                  this.transA *= (currentTickAmount - 1) / (tickAmount - 1);
                  this.max = tickPositions[tickPositions.length - 1];  // We have too many ticks, run second pass to try to reduce ticks
                } else if (currentTickAmount > tickAmount) {
                  this.tickInterval *= 2;
                  this.setTickPositions();
                }
                // The finalTickAmt property is set in getTickAmount
                if (defined(finalTickAmt)) {
                  i = len = tickPositions.length;
                  while (i--) {
                    if (finalTickAmt === 3 && i % 2 === 1 || finalTickAmt <= 2 && i > 0 && i < len - 1) {
                      tickPositions.splice(i, 1);
                    }
                  }
                  this.finalTickAmt = UNDEFINED;
                }
              },
              setScale: function () {
                var axis = this, isDirtyData, isDirtyAxisLength;
                axis.oldMin = axis.min;
                axis.oldMax = axis.max;
                axis.oldAxisLength = axis.len;
                // set the new axisLength
                axis.setAxisSize();
                //axisLength = horiz ? axisWidth : axisHeight;
                isDirtyAxisLength = axis.len !== axis.oldAxisLength;
                // is there new data?
                each(axis.series, function (series) {
                  if (series.isDirtyData || series.isDirty || series.xAxis.isDirty) {
                    // when x axis is dirty, we need new data extremes for y as well
                    isDirtyData = true;
                  }
                });
                // do we really need to go through all this?
                if (isDirtyAxisLength || isDirtyData || axis.isLinked || axis.forceRedraw || axis.userMin !== axis.oldUserMin || axis.userMax !== axis.oldUserMax) {
                  if (axis.resetStacks) {
                    axis.resetStacks();
                  }
                  axis.forceRedraw = false;
                  // get data extremes if needed
                  axis.getSeriesExtremes();
                  // get fixed positions based on tickInterval
                  axis.setTickInterval();
                  // record old values to decide whether a rescale is necessary later on (#540)
                  axis.oldUserMin = axis.userMin;
                  axis.oldUserMax = axis.userMax;
                  // Mark as dirty if it is not already set to dirty and extremes have changed. #595.
                  if (!axis.isDirty) {
                    axis.isDirty = isDirtyAxisLength || axis.min !== axis.oldMin || axis.max !== axis.oldMax;
                  }
                } else if (axis.cleanStacks) {
                  axis.cleanStacks();
                }
              },
              setExtremes: function (newMin, newMax, redraw, animation, eventArguments) {
                var axis = this, chart = axis.chart;
                redraw = pick(redraw, true);
                // defaults to true
                each(axis.series, function (serie) {
                  delete serie.kdTree;
                });
                // Extend the arguments with min and max
                eventArguments = extend(eventArguments, {
                  min: newMin,
                  max: newMax
                });
                // Fire the event
                fireEvent(axis, 'setExtremes', eventArguments, function () {
                  // the default event handler
                  axis.userMin = newMin;
                  axis.userMax = newMax;
                  axis.eventArgs = eventArguments;
                  if (redraw) {
                    chart.redraw(animation);
                  }
                });
              },
              zoom: function (newMin, newMax) {
                var dataMin = this.dataMin, dataMax = this.dataMax, options = this.options, min = mathMin(dataMin, pick(options.min, dataMin)), max = mathMax(dataMax, pick(options.max, dataMax));
                // Prevent pinch zooming out of range. Check for defined is for #1946. #1734.
                if (!this.allowZoomOutside) {
                  if (defined(dataMin) && newMin <= min) {
                    newMin = min;
                  }
                  if (defined(dataMax) && newMax >= max) {
                    newMax = max;
                  }
                }
                // In full view, displaying the reset zoom button is not required
                this.displayBtn = newMin !== UNDEFINED || newMax !== UNDEFINED;
                // Do it
                this.setExtremes(newMin, newMax, false, UNDEFINED, { trigger: 'zoom' });
                return true;
              },
              setAxisSize: function () {
                var chart = this.chart, options = this.options, offsetLeft = options.offsetLeft || 0, offsetRight = options.offsetRight || 0, horiz = this.horiz, width = pick(options.width, chart.plotWidth - offsetLeft + offsetRight), height = pick(options.height, chart.plotHeight), top = pick(options.top, chart.plotTop), left = pick(options.left, chart.plotLeft + offsetLeft), percentRegex = /%$/;
                // Check for percentage based input values
                if (percentRegex.test(height)) {
                  height = parseFloat(height) / 100 * chart.plotHeight;
                }
                if (percentRegex.test(top)) {
                  top = parseFloat(top) / 100 * chart.plotHeight + chart.plotTop;
                }
                // Expose basic values to use in Series object and navigator
                this.left = left;
                this.top = top;
                this.width = width;
                this.height = height;
                this.bottom = chart.chartHeight - height - top;
                this.right = chart.chartWidth - width - left;
                // Direction agnostic properties
                this.len = mathMax(horiz ? width : height, 0);
                // mathMax fixes #905
                this.pos = horiz ? left : top;  // distance from SVG origin
              },
              getExtremes: function () {
                var axis = this, isLog = axis.isLog;
                return {
                  min: isLog ? correctFloat(lin2log(axis.min)) : axis.min,
                  max: isLog ? correctFloat(lin2log(axis.max)) : axis.max,
                  dataMin: axis.dataMin,
                  dataMax: axis.dataMax,
                  userMin: axis.userMin,
                  userMax: axis.userMax
                };
              },
              getThreshold: function (threshold) {
                var axis = this, isLog = axis.isLog, realMin = isLog ? lin2log(axis.min) : axis.min, realMax = isLog ? lin2log(axis.max) : axis.max;
                // With a threshold of null, make the columns/areas rise from the top or bottom 
                // depending on the value, assuming an actual threshold of 0 (#4233).
                if (threshold === null) {
                  threshold = realMax < 0 ? realMax : realMin;
                } else if (realMin > threshold) {
                  threshold = realMin;
                } else if (realMax < threshold) {
                  threshold = realMax;
                }
                return axis.translate(threshold, 0, 1, 0, 1);
              },
              autoLabelAlign: function (rotation) {
                var ret, angle = (pick(rotation, 0) - this.side * 90 + 720) % 360;
                if (angle > 15 && angle < 165) {
                  ret = 'right';
                } else if (angle > 195 && angle < 345) {
                  ret = 'left';
                } else {
                  ret = 'center';
                }
                return ret;
              },
              unsquish: function () {
                var chart = this.chart, ticks = this.ticks, labelOptions = this.options.labels, horiz = this.horiz, tickInterval = this.tickInterval, newTickInterval = tickInterval, slotSize = this.len / (((this.categories ? 1 : 0) + this.max - this.min) / tickInterval), rotation, rotationOption = labelOptions.rotation, labelMetrics = chart.renderer.fontMetrics(labelOptions.style.fontSize, ticks[0] && ticks[0].label), step, bestScore = Number.MAX_VALUE, autoRotation,
                  // Return the multiple of tickInterval that is needed to avoid collision
                  getStep = function (spaceNeeded) {
                    var step = spaceNeeded / (slotSize || 1);
                    step = step > 1 ? mathCeil(step) : 1;
                    return step * tickInterval;
                  };
                if (horiz) {
                  autoRotation = !labelOptions.staggerLines && !labelOptions.step && (defined(rotationOption) ? [rotationOption] : slotSize < pick(labelOptions.autoRotationLimit, 80) && labelOptions.autoRotation);
                  if (autoRotation) {
                    // Loop over the given autoRotation options, and determine which gives the best score. The 
                    // best score is that with the lowest number of steps and a rotation closest to horizontal.
                    each(autoRotation, function (rot) {
                      var score;
                      if (rot === rotationOption || rot && rot >= -90 && rot <= 90) {
                        // #3891
                        step = getStep(mathAbs(labelMetrics.h / mathSin(deg2rad * rot)));
                        score = step + mathAbs(rot / 360);
                        if (score < bestScore) {
                          bestScore = score;
                          rotation = rot;
                          newTickInterval = step;
                        }
                      }
                    });
                  }
                } else if (!labelOptions.step) {
                  // #4411
                  newTickInterval = getStep(labelMetrics.h);
                }
                this.autoRotation = autoRotation;
                this.labelRotation = pick(rotation, rotationOption);
                return newTickInterval;
              },
              renderUnsquish: function () {
                var chart = this.chart, renderer = chart.renderer, tickPositions = this.tickPositions, ticks = this.ticks, labelOptions = this.options.labels, horiz = this.horiz, margin = chart.margin, slotCount = this.categories ? tickPositions.length : tickPositions.length - 1, slotWidth = this.slotWidth = horiz && !labelOptions.step && !labelOptions.rotation && (this.staggerLines || 1) * chart.plotWidth / slotCount || !horiz && (margin[3] && margin[3] - chart.spacing[3] || chart.chartWidth * 0.33),
                  // #1580, #1931,
                  innerWidth = mathMax(1, mathRound(slotWidth - 2 * (labelOptions.padding || 5))), attr = {}, labelMetrics = renderer.fontMetrics(labelOptions.style.fontSize, ticks[0] && ticks[0].label), textOverflowOption = labelOptions.style.textOverflow, css, labelLength = 0, label, i, pos;
                // Set rotation option unless it is "auto", like in gauges
                if (!isString(labelOptions.rotation)) {
                  attr.rotation = labelOptions.rotation || 0;  // #4443
                }
                // Handle auto rotation on horizontal axis
                if (this.autoRotation) {
                  // Get the longest label length
                  each(tickPositions, function (tick) {
                    tick = ticks[tick];
                    if (tick && tick.labelLength > labelLength) {
                      labelLength = tick.labelLength;
                    }
                  });
                  // Apply rotation only if the label is too wide for the slot, and
                  // the label is wider than its height.
                  if (labelLength > innerWidth && labelLength > labelMetrics.h) {
                    attr.rotation = this.labelRotation;
                  } else {
                    this.labelRotation = 0;
                  }  // Handle word-wrap or ellipsis on vertical axis
                } else if (slotWidth) {
                  // For word-wrap or ellipsis
                  css = { width: innerWidth + PX };
                  if (!textOverflowOption) {
                    css.textOverflow = 'clip';
                    // On vertical axis, only allow word wrap if there is room for more lines.
                    i = tickPositions.length;
                    while (!horiz && i--) {
                      pos = tickPositions[i];
                      label = ticks[pos].label;
                      if (label) {
                        // Reset ellipsis in order to get the correct bounding box (#4070)
                        if (label.styles.textOverflow === 'ellipsis') {
                          label.css({ textOverflow: 'clip' });
                        }
                        if (label.getBBox().height > this.len / tickPositions.length - (labelMetrics.h - labelMetrics.f)) {
                          label.specCss = { textOverflow: 'ellipsis' };
                        }
                      }
                    }
                  }
                }
                // Add ellipsis if the label length is significantly longer than ideal
                if (attr.rotation) {
                  css = { width: (labelLength > chart.chartHeight * 0.5 ? chart.chartHeight * 0.33 : chart.chartHeight) + PX };
                  if (!textOverflowOption) {
                    css.textOverflow = 'ellipsis';
                  }
                }
                // Set the explicit or automatic label alignment
                this.labelAlign = attr.align = labelOptions.align || this.autoLabelAlign(this.labelRotation);
                // Apply general and specific CSS
                each(tickPositions, function (pos) {
                  var tick = ticks[pos], label = tick && tick.label;
                  if (label) {
                    label.attr(attr);
                    // This needs to go before the CSS in old IE (#4502)
                    if (css) {
                      label.css(merge(css, label.specCss));
                    }
                    delete label.specCss;
                    tick.rotation = attr.rotation;
                  }
                });
                // TODO: Why not part of getLabelPosition?
                this.tickRotCorr = renderer.rotCorr(labelMetrics.b, this.labelRotation || 0, this.side === 2);
              },
              hasData: function () {
                return this.hasVisibleSeries || defined(this.min) && defined(this.max) && !!this.tickPositions;
              },
              getOffset: function () {
                var axis = this, chart = axis.chart, renderer = chart.renderer, options = axis.options, tickPositions = axis.tickPositions, ticks = axis.ticks, horiz = axis.horiz, side = axis.side, invertedSide = chart.inverted ? [
                    1,
                    0,
                    3,
                    2
                  ][side] : side, hasData, showAxis, titleOffset = 0, titleOffsetOption, titleMargin = 0, axisTitleOptions = options.title, labelOptions = options.labels, labelOffset = 0,
                  // reset
                  labelOffsetPadded, axisOffset = chart.axisOffset, clipOffset = chart.clipOffset, clip, directionFactor = [
                    -1,
                    1,
                    1,
                    -1
                  ][side], n, axisParent = axis.axisParent,
                  // Used in color axis
                  lineHeightCorrection;
                // For reuse in Axis.render
                hasData = axis.hasData();
                axis.showAxis = showAxis = hasData || pick(options.showEmpty, true);
                // Set/reset staggerLines
                axis.staggerLines = axis.horiz && labelOptions.staggerLines;
                // Create the axisGroup and gridGroup elements on first iteration
                if (!axis.axisGroup) {
                  axis.gridGroup = renderer.g('grid').attr({ zIndex: options.gridZIndex || 1 }).add(axisParent);
                  axis.axisGroup = renderer.g('axis').attr({ zIndex: options.zIndex || 2 }).add(axisParent);
                  axis.labelGroup = renderer.g('axis-labels').attr({ zIndex: labelOptions.zIndex || 7 }).addClass(PREFIX + axis.coll.toLowerCase() + '-labels').add(axisParent);
                }
                if (hasData || axis.isLinked) {
                  // Generate ticks
                  each(tickPositions, function (pos) {
                    if (!ticks[pos]) {
                      ticks[pos] = new Tick(axis, pos);
                    } else {
                      ticks[pos].addLabel();  // update labels depending on tick interval
                    }
                  });
                  axis.renderUnsquish();
                  each(tickPositions, function (pos) {
                    // left side must be align: right and right side must have align: left for labels
                    if (side === 0 || side === 2 || {
                        1: 'left',
                        3: 'right'
                      }[side] === axis.labelAlign) {
                      // get the highest offset
                      labelOffset = mathMax(ticks[pos].getLabelSize(), labelOffset);
                    }
                  });
                  if (axis.staggerLines) {
                    labelOffset *= axis.staggerLines;
                    axis.labelOffset = labelOffset;
                  }
                } else {
                  // doesn't have data
                  for (n in ticks) {
                    ticks[n].destroy();
                    delete ticks[n];
                  }
                }
                if (axisTitleOptions && axisTitleOptions.text && axisTitleOptions.enabled !== false) {
                  if (!axis.axisTitle) {
                    axis.axisTitle = renderer.text(axisTitleOptions.text, 0, 0, axisTitleOptions.useHTML).attr({
                      zIndex: 7,
                      rotation: axisTitleOptions.rotation || 0,
                      align: axisTitleOptions.textAlign || {
                        low: 'left',
                        middle: 'center',
                        high: 'right'
                      }[axisTitleOptions.align]
                    }).addClass(PREFIX + this.coll.toLowerCase() + '-title').css(axisTitleOptions.style).add(axis.axisGroup);
                    axis.axisTitle.isNew = true;
                  }
                  if (showAxis) {
                    titleOffset = axis.axisTitle.getBBox()[horiz ? 'height' : 'width'];
                    titleOffsetOption = axisTitleOptions.offset;
                    titleMargin = defined(titleOffsetOption) ? 0 : pick(axisTitleOptions.margin, horiz ? 5 : 10);
                  }
                  // hide or show the title depending on whether showEmpty is set
                  axis.axisTitle[showAxis ? 'show' : 'hide']();
                }
                // handle automatic or user set offset
                axis.offset = directionFactor * pick(options.offset, axisOffset[side]);
                axis.tickRotCorr = axis.tickRotCorr || {
                  x: 0,
                  y: 0
                };
                // polar
                lineHeightCorrection = side === 2 ? axis.tickRotCorr.y : 0;
                labelOffsetPadded = labelOffset + titleMargin + (labelOffset && directionFactor * (horiz ? pick(labelOptions.y, axis.tickRotCorr.y + 8) : labelOptions.x) - lineHeightCorrection);
                axis.axisTitleMargin = pick(titleOffsetOption, labelOffsetPadded);
                axisOffset[side] = mathMax(axisOffset[side], axis.axisTitleMargin + titleOffset + directionFactor * axis.offset, labelOffsetPadded);
                // Decide the clipping needed to keep the graph inside the plot area and axis lines
                clip = options.offset ? 0 : mathFloor(options.lineWidth / 2) * 2;
                // #4308, #4371
                clipOffset[invertedSide] = mathMax(clipOffset[invertedSide], clip);
              },
              getLinePath: function (lineWidth) {
                var chart = this.chart, opposite = this.opposite, offset = this.offset, horiz = this.horiz, lineLeft = this.left + (opposite ? this.width : 0) + offset, lineTop = chart.chartHeight - this.bottom - (opposite ? this.height : 0) + offset;
                if (opposite) {
                  lineWidth *= -1;  // crispify the other way - #1480, #1687
                }
                return chart.renderer.crispLine([
                  M,
                  horiz ? this.left : lineLeft,
                  horiz ? lineTop : this.top,
                  L,
                  horiz ? chart.chartWidth - this.right : lineLeft,
                  horiz ? lineTop : chart.chartHeight - this.bottom
                ], lineWidth);
              },
              getTitlePosition: function () {
                // compute anchor points for each of the title align options
                var horiz = this.horiz, axisLeft = this.left, axisTop = this.top, axisLength = this.len, axisTitleOptions = this.options.title, margin = horiz ? axisLeft : axisTop, opposite = this.opposite, offset = this.offset, xOption = axisTitleOptions.x || 0, yOption = axisTitleOptions.y || 0, fontSize = pInt(axisTitleOptions.style.fontSize || 12),
                  // the position in the length direction of the axis
                  alongAxis = {
                    low: margin + (horiz ? 0 : axisLength),
                    middle: margin + axisLength / 2,
                    high: margin + (horiz ? axisLength : 0)
                  }[axisTitleOptions.align],
                  // the position in the perpendicular direction of the axis
                  offAxis = (horiz ? axisTop + this.height : axisLeft) + (horiz ? 1 : -1) * (opposite ? -1 : 1) * this.axisTitleMargin + (this.side === 2 ? fontSize : 0);
                return {
                  x: horiz ? alongAxis + xOption : offAxis + (opposite ? this.width : 0) + offset + xOption,
                  y: horiz ? offAxis + yOption - (opposite ? this.height : 0) + offset : alongAxis + yOption
                };
              },
              render: function () {
                var axis = this, chart = axis.chart, renderer = chart.renderer, options = axis.options, isLog = axis.isLog, isLinked = axis.isLinked, tickPositions = axis.tickPositions, axisTitle = axis.axisTitle, ticks = axis.ticks, minorTicks = axis.minorTicks, alternateBands = axis.alternateBands, stackLabelOptions = options.stackLabels, alternateGridColor = options.alternateGridColor, tickmarkOffset = axis.tickmarkOffset, lineWidth = options.lineWidth, linePath, hasRendered = chart.hasRendered, slideInTicks = hasRendered && defined(axis.oldMin) && !isNaN(axis.oldMin), showAxis = axis.showAxis, globalAnimation = renderer.globalAnimation, from, to;
                // Reset
                axis.labelEdge.length = 0;
                //axis.justifyToPlot = overflow === 'justify';
                axis.overlap = false;
                // Mark all elements inActive before we go over and mark the active ones
                each([
                  ticks,
                  minorTicks,
                  alternateBands
                ], function (coll) {
                  var pos;
                  for (pos in coll) {
                    coll[pos].isActive = false;
                  }
                });
                // If the series has data draw the ticks. Else only the line and title
                if (axis.hasData() || isLinked) {
                  // minor ticks
                  if (axis.minorTickInterval && !axis.categories) {
                    each(axis.getMinorTickPositions(), function (pos) {
                      if (!minorTicks[pos]) {
                        minorTicks[pos] = new Tick(axis, pos, 'minor');
                      }
                      // render new ticks in old position
                      if (slideInTicks && minorTicks[pos].isNew) {
                        minorTicks[pos].render(null, true);
                      }
                      minorTicks[pos].render(null, false, 1);
                    });
                  }
                  // Major ticks. Pull out the first item and render it last so that
                  // we can get the position of the neighbour label. #808.
                  if (tickPositions.length) {
                    // #1300
                    each(tickPositions, function (pos, i) {
                      // linked axes need an extra check to find out if
                      if (!isLinked || pos >= axis.min && pos <= axis.max) {
                        if (!ticks[pos]) {
                          ticks[pos] = new Tick(axis, pos);
                        }
                        // render new ticks in old position
                        if (slideInTicks && ticks[pos].isNew) {
                          ticks[pos].render(i, true, 0.1);
                        }
                        ticks[pos].render(i);
                      }
                    });
                    // In a categorized axis, the tick marks are displayed between labels. So
                    // we need to add a tick mark and grid line at the left edge of the X axis.
                    if (tickmarkOffset && (axis.min === 0 || axis.single)) {
                      if (!ticks[-1]) {
                        ticks[-1] = new Tick(axis, -1, null, true);
                      }
                      ticks[-1].render(-1);
                    }
                  }
                  // alternate grid color
                  if (alternateGridColor) {
                    each(tickPositions, function (pos, i) {
                      to = tickPositions[i + 1] !== UNDEFINED ? tickPositions[i + 1] + tickmarkOffset : axis.max - tickmarkOffset;
                      if (i % 2 === 0 && pos < axis.max && to <= axis.max - tickmarkOffset) {
                        // #2248
                        if (!alternateBands[pos]) {
                          alternateBands[pos] = new Highcharts.PlotLineOrBand(axis);
                        }
                        from = pos + tickmarkOffset;
                        // #949
                        alternateBands[pos].options = {
                          from: isLog ? lin2log(from) : from,
                          to: isLog ? lin2log(to) : to,
                          color: alternateGridColor
                        };
                        alternateBands[pos].render();
                        alternateBands[pos].isActive = true;
                      }
                    });
                  }
                  // custom plot lines and bands
                  if (!axis._addedPlotLB) {
                    // only first time
                    each((options.plotLines || []).concat(options.plotBands || []), function (plotLineOptions) {
                      axis.addPlotBandOrLine(plotLineOptions);
                    });
                    axis._addedPlotLB = true;
                  }
                }
                // end if hasData
                // Remove inactive ticks
                each([
                  ticks,
                  minorTicks,
                  alternateBands
                ], function (coll) {
                  var pos, i, forDestruction = [], delay = globalAnimation ? globalAnimation.duration || 500 : 0, destroyInactiveItems = function () {
                      i = forDestruction.length;
                      while (i--) {
                        // When resizing rapidly, the same items may be destroyed in different timeouts,
                        // or the may be reactivated
                        if (coll[forDestruction[i]] && !coll[forDestruction[i]].isActive) {
                          coll[forDestruction[i]].destroy();
                          delete coll[forDestruction[i]];
                        }
                      }
                    };
                  for (pos in coll) {
                    if (!coll[pos].isActive) {
                      // Render to zero opacity
                      coll[pos].render(pos, false, 0);
                      coll[pos].isActive = false;
                      forDestruction.push(pos);
                    }
                  }
                  // When the objects are finished fading out, destroy them
                  if (coll === alternateBands || !chart.hasRendered || !delay) {
                    destroyInactiveItems();
                  } else if (delay) {
                    setTimeout(destroyInactiveItems, delay);
                  }
                });
                // Static items. As the axis group is cleared on subsequent calls
                // to render, these items are added outside the group.
                // axis line
                if (lineWidth) {
                  linePath = axis.getLinePath(lineWidth);
                  if (!axis.axisLine) {
                    axis.axisLine = renderer.path(linePath).attr({
                      stroke: options.lineColor,
                      'stroke-width': lineWidth,
                      zIndex: 7
                    }).add(axis.axisGroup);
                  } else {
                    axis.axisLine.animate({ d: linePath });
                  }
                  // show or hide the line depending on options.showEmpty
                  axis.axisLine[showAxis ? 'show' : 'hide']();
                }
                if (axisTitle && showAxis) {
                  axisTitle[axisTitle.isNew ? 'attr' : 'animate'](axis.getTitlePosition());
                  axisTitle.isNew = false;
                }
                // Stacked totals:
                if (stackLabelOptions && stackLabelOptions.enabled) {
                  axis.renderStackTotals();
                }
                // End stacked totals
                axis.isDirty = false;
              },
              redraw: function () {
                if (this.visible) {
                  // render the axis
                  this.render();
                  // move plot lines and bands
                  each(this.plotLinesAndBands, function (plotLine) {
                    plotLine.render();
                  });
                }
                // mark associated series as dirty and ready for redraw
                each(this.series, function (series) {
                  series.isDirty = true;
                });
              },
              destroy: function (keepEvents) {
                var axis = this, stacks = axis.stacks, stackKey, plotLinesAndBands = axis.plotLinesAndBands, i;
                // Remove the events
                if (!keepEvents) {
                  removeEvent(axis);
                }
                // Destroy each stack total
                for (stackKey in stacks) {
                  destroyObjectProperties(stacks[stackKey]);
                  stacks[stackKey] = null;
                }
                // Destroy collections
                each([
                  axis.ticks,
                  axis.minorTicks,
                  axis.alternateBands
                ], function (coll) {
                  destroyObjectProperties(coll);
                });
                i = plotLinesAndBands.length;
                while (i--) {
                  // #1975
                  plotLinesAndBands[i].destroy();
                }
                // Destroy local variables
                each([
                  'stackTotalGroup',
                  'axisLine',
                  'axisTitle',
                  'axisGroup',
                  'cross',
                  'gridGroup',
                  'labelGroup'
                ], function (prop) {
                  if (axis[prop]) {
                    axis[prop] = axis[prop].destroy();
                  }
                });
                // Destroy crosshair
                if (this.cross) {
                  this.cross.destroy();
                }
              },
              drawCrosshair: function (e, point) {
                // docs: Missing docs for Axis.crosshair. Also for properties.
                var path, options = this.crosshair, animation = options.animation, pos, attribs, categorized;
                if (!this.crosshair || (defined(point) || !pick(this.crosshair.snap, true)) === false || point && point.series && point.series[this.coll] !== this) {
                  this.hideCrosshair();
                } else {
                  // Get the path
                  if (!pick(options.snap, true)) {
                    pos = this.horiz ? e.chartX - this.pos : this.len - e.chartY + this.pos;
                  } else if (defined(point)) {
                    /*jslint eqeq: true*/
                    pos = this.isXAxis ? point.plotX : this.len - point.plotY;  // #3834
                                                                                /*jslint eqeq: false*/
                  }
                  if (this.isRadial) {
                    path = this.getPlotLinePath(this.isXAxis ? point.x : pick(point.stackY, point.y)) || null;  // #3189
                  } else {
                    path = this.getPlotLinePath(null, null, null, null, pos) || null;  // #3189
                  }
                  if (path === null) {
                    this.hideCrosshair();
                    return;
                  }
                  // Draw the cross
                  if (this.cross) {
                    this.cross.attr({ visibility: VISIBLE })[animation ? 'animate' : 'attr']({ d: path }, animation);
                  } else {
                    categorized = this.categories && !this.isRadial;
                    attribs = {
                      'stroke-width': options.width || (categorized ? this.transA : 1),
                      stroke: options.color || (categorized ? 'rgba(155,200,255,0.2)' : '#C0C0C0'),
                      zIndex: options.zIndex || 2
                    };
                    if (options.dashStyle) {
                      attribs.dashstyle = options.dashStyle;
                    }
                    this.cross = this.chart.renderer.path(path).attr(attribs).add();
                  }
                }
              },
              hideCrosshair: function () {
                if (this.cross) {
                  this.cross.hide();
                }
              }
            };
            // end Axis
            extend(Axis.prototype, AxisPlotLineOrBandExtension);
            /**
		 * Set the tick positions to a time unit that makes sense, for example
		 * on the first of each month or on every Monday. Return an array
		 * with the time positions. Used in datetime axes as well as for grouping
		 * data on a datetime axis.
		 *
		 * @param {Object} normalizedInterval The interval in axis values (ms) and the count
		 * @param {Number} min The minimum in axis values
		 * @param {Number} max The maximum in axis values
		 * @param {Number} startOfWeek
		 */
            Axis.prototype.getTimeTicks = function (normalizedInterval, min, max, startOfWeek) {
              var tickPositions = [], i, higherRanks = {}, useUTC = defaultOptions.global.useUTC, minYear,
                // used in months and years as a basis for Date.UTC()
                minDate = new Date(min - getTZOffset(min)), interval = normalizedInterval.unitRange, count = normalizedInterval.count;
              if (defined(min)) {
                // #1300
                minDate[setMilliseconds](interval >= timeUnits.second ? 0 : count * mathFloor(minDate.getMilliseconds() / count));
                // #3652, #3654
                if (interval >= timeUnits.second) {
                  // second
                  minDate[setSeconds](interval >= timeUnits.minute ? 0 : count * mathFloor(minDate.getSeconds() / count));
                }
                if (interval >= timeUnits.minute) {
                  // minute
                  minDate[setMinutes](interval >= timeUnits.hour ? 0 : count * mathFloor(minDate[getMinutes]() / count));
                }
                if (interval >= timeUnits.hour) {
                  // hour
                  minDate[setHours](interval >= timeUnits.day ? 0 : count * mathFloor(minDate[getHours]() / count));
                }
                if (interval >= timeUnits.day) {
                  // day
                  minDate[setDate](interval >= timeUnits.month ? 1 : count * mathFloor(minDate[getDate]() / count));
                }
                if (interval >= timeUnits.month) {
                  // month
                  minDate[setMonth](interval >= timeUnits.year ? 0 : count * mathFloor(minDate[getMonth]() / count));
                  minYear = minDate[getFullYear]();
                }
                if (interval >= timeUnits.year) {
                  // year
                  minYear -= minYear % count;
                  minDate[setFullYear](minYear);
                }
                // week is a special case that runs outside the hierarchy
                if (interval === timeUnits.week) {
                  // get start of current week, independent of count
                  minDate[setDate](minDate[getDate]() - minDate[getDay]() + pick(startOfWeek, 1));
                }
                // get tick positions
                i = 1;
                if (timezoneOffset || getTimezoneOffset) {
                  minDate = minDate.getTime();
                  minDate = new Date(minDate + getTZOffset(minDate));
                }
                minYear = minDate[getFullYear]();
                var time = minDate.getTime(), minMonth = minDate[getMonth](), minDateDate = minDate[getDate](), localTimezoneOffset = (timeUnits.day + (useUTC ? getTZOffset(minDate) : minDate.getTimezoneOffset() * 60 * 1000)) % timeUnits.day;
                // #950, #3359
                // iterate and add tick positions at appropriate values
                while (time < max) {
                  tickPositions.push(time);
                  // if the interval is years, use Date.UTC to increase years
                  if (interval === timeUnits.year) {
                    time = makeTime(minYear + i * count, 0);  // if the interval is months, use Date.UTC to increase months
                  } else if (interval === timeUnits.month) {
                    time = makeTime(minYear, minMonth + i * count);  // if we're using global time, the interval is not fixed as it jumps
                                                                     // one hour at the DST crossover
                  } else if (!useUTC && (interval === timeUnits.day || interval === timeUnits.week)) {
                    time = makeTime(minYear, minMonth, minDateDate + i * count * (interval === timeUnits.day ? 1 : 7));  // else, the interval is fixed and we use simple addition
                  } else {
                    time += interval * count;
                  }
                  i++;
                }
                // push the last time
                tickPositions.push(time);
                // mark new days if the time is dividible by day (#1649, #1760)
                each(grep(tickPositions, function (time) {
                  return interval <= timeUnits.hour && time % timeUnits.day === localTimezoneOffset;
                }), function (time) {
                  higherRanks[time] = 'day';
                });
              }
              // record information on the chosen unit - for dynamic label formatter
              tickPositions.info = extend(normalizedInterval, {
                higherRanks: higherRanks,
                totalRange: interval * count
              });
              return tickPositions;
            };
            /**
		 * Get a normalized tick interval for dates. Returns a configuration object with
		 * unit range (interval), count and name. Used to prepare data for getTimeTicks. 
		 * Previously this logic was part of getTimeTicks, but as getTimeTicks now runs
		 * of segments in stock charts, the normalizing logic was extracted in order to 
		 * prevent it for running over again for each segment having the same interval. 
		 * #662, #697.
		 */
            Axis.prototype.normalizeTimeTickInterval = function (tickInterval, unitsOption) {
              var units = unitsOption || [
                  [
                    'millisecond',
                    [
                      1,
                      2,
                      5,
                      10,
                      20,
                      25,
                      50,
                      100,
                      200,
                      500
                    ]
                  ],
                  [
                    'second',
                    [
                      1,
                      2,
                      5,
                      10,
                      15,
                      30
                    ]
                  ],
                  [
                    'minute',
                    [
                      1,
                      2,
                      5,
                      10,
                      15,
                      30
                    ]
                  ],
                  [
                    'hour',
                    [
                      1,
                      2,
                      3,
                      4,
                      6,
                      8,
                      12
                    ]
                  ],
                  [
                    'day',
                    [
                      1,
                      2
                    ]
                  ],
                  [
                    'week',
                    [
                      1,
                      2
                    ]
                  ],
                  [
                    'month',
                    [
                      1,
                      2,
                      3,
                      4,
                      6
                    ]
                  ],
                  [
                    'year',
                    null
                  ]
                ], unit = units[units.length - 1],
                // default unit is years
                interval = timeUnits[unit[0]], multiples = unit[1], count, i;
              // loop through the units to find the one that best fits the tickInterval
              for (i = 0; i < units.length; i++) {
                unit = units[i];
                interval = timeUnits[unit[0]];
                multiples = unit[1];
                if (units[i + 1]) {
                  // lessThan is in the middle between the highest multiple and the next unit.
                  var lessThan = (interval * multiples[multiples.length - 1] + timeUnits[units[i + 1][0]]) / 2;
                  // break and keep the current unit
                  if (tickInterval <= lessThan) {
                    break;
                  }
                }
              }
              // prevent 2.5 years intervals, though 25, 250 etc. are allowed
              if (interval === timeUnits.year && tickInterval < 5 * interval) {
                multiples = [
                  1,
                  2,
                  5
                ];
              }
              // get the count
              count = normalizeTickInterval(tickInterval / interval, multiples, unit[0] === 'year' ? mathMax(getMagnitude(tickInterval / interval), 1) : 1);
              return {
                unitRange: interval,
                count: count,
                unitName: unit[0]
              };
            };
            /**
		 * Methods defined on the Axis prototype
		 */
            /**
		 * Set the tick positions of a logarithmic axis
		 */
            Axis.prototype.getLogTickPositions = function (interval, min, max, minor) {
              var axis = this, options = axis.options, axisLength = axis.len,
                // Since we use this method for both major and minor ticks,
                // use a local variable and return the result
                positions = [];
              // Reset
              if (!minor) {
                axis._minorAutoInterval = null;
              }
              // First case: All ticks fall on whole logarithms: 1, 10, 100 etc.
              if (interval >= 0.5) {
                interval = mathRound(interval);
                positions = axis.getLinearTickPositions(interval, min, max);  // Second case: We need intermediary ticks. For example 
                                                                              // 1, 2, 4, 6, 8, 10, 20, 40 etc. 
              } else if (interval >= 0.08) {
                var roundedMin = mathFloor(min), intermediate, i, j, len, pos, lastPos, break2;
                if (interval > 0.3) {
                  intermediate = [
                    1,
                    2,
                    4
                  ];
                } else if (interval > 0.15) {
                  // 0.2 equals five minor ticks per 1, 10, 100 etc
                  intermediate = [
                    1,
                    2,
                    4,
                    6,
                    8
                  ];
                } else {
                  // 0.1 equals ten minor ticks per 1, 10, 100 etc
                  intermediate = [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                  ];
                }
                for (i = roundedMin; i < max + 1 && !break2; i++) {
                  len = intermediate.length;
                  for (j = 0; j < len && !break2; j++) {
                    pos = log2lin(lin2log(i) * intermediate[j]);
                    if (pos > min && (!minor || lastPos <= max) && lastPos !== UNDEFINED) {
                      // #1670, lastPos is #3113
                      positions.push(lastPos);
                    }
                    if (lastPos > max) {
                      break2 = true;
                    }
                    lastPos = pos;
                  }
                }  // Third case: We are so deep in between whole logarithmic values that
                   // we might as well handle the tick positions like a linear axis. For
                   // example 1.01, 1.02, 1.03, 1.04.
              } else {
                var realMin = lin2log(min), realMax = lin2log(max), tickIntervalOption = options[minor ? 'minorTickInterval' : 'tickInterval'], filteredTickIntervalOption = tickIntervalOption === 'auto' ? null : tickIntervalOption, tickPixelIntervalOption = options.tickPixelInterval / (minor ? 5 : 1), totalPixelLength = minor ? axisLength / axis.tickPositions.length : axisLength;
                interval = pick(filteredTickIntervalOption, axis._minorAutoInterval, (realMax - realMin) * tickPixelIntervalOption / (totalPixelLength || 1));
                interval = normalizeTickInterval(interval, null, getMagnitude(interval));
                positions = map(axis.getLinearTickPositions(interval, realMin, realMax), log2lin);
                if (!minor) {
                  axis._minorAutoInterval = interval / 5;
                }
              }
              // Set the axis-level tickInterval variable 
              if (!minor) {
                axis.tickInterval = interval;
              }
              return positions;
            };
            /**
		 * The tooltip object
		 * @param {Object} chart The chart instance
		 * @param {Object} options Tooltip options
		 */
            var Tooltip = Highcharts.Tooltip = function () {
                this.init.apply(this, arguments);
              };
            Tooltip.prototype = {
              init: function (chart, options) {
                var borderWidth = options.borderWidth, style = options.style, padding = pInt(style.padding);
                // Save the chart and options
                this.chart = chart;
                this.options = options;
                // Keep track of the current series
                //this.currentSeries = UNDEFINED;
                // List of crosshairs
                this.crosshairs = [];
                // Current values of x and y when animating
                this.now = {
                  x: 0,
                  y: 0
                };
                // The tooltip is initially hidden
                this.isHidden = true;
                // create the label		
                this.label = chart.renderer.label('', 0, 0, options.shape || 'callout', null, null, options.useHTML, null, 'tooltip').attr({
                  padding: padding,
                  fill: options.backgroundColor,
                  'stroke-width': borderWidth,
                  r: options.borderRadius,
                  zIndex: 8
                }).css(style).css({ padding: 0 }).add().attr({ y: -9999 });
                // #2301, #2657
                // When using canVG the shadow shows up as a gray circle
                // even if the tooltip is hidden.
                if (!useCanVG) {
                  this.label.shadow(options.shadow);
                }
                // Public property for getting the shared state.
                this.shared = options.shared;
              },
              destroy: function () {
                // Destroy and clear local variables
                if (this.label) {
                  this.label = this.label.destroy();
                }
                clearTimeout(this.hideTimer);
                clearTimeout(this.tooltipTimeout);
              },
              move: function (x, y, anchorX, anchorY) {
                var tooltip = this, now = tooltip.now, animate = tooltip.options.animation !== false && !tooltip.isHidden && (mathAbs(x - now.x) > 1 || mathAbs(y - now.y) > 1), skipAnchor = tooltip.followPointer || tooltip.len > 1;
                // Get intermediate values for animation
                extend(now, {
                  x: animate ? (2 * now.x + x) / 3 : x,
                  y: animate ? (now.y + y) / 2 : y,
                  anchorX: skipAnchor ? UNDEFINED : animate ? (2 * now.anchorX + anchorX) / 3 : anchorX,
                  anchorY: skipAnchor ? UNDEFINED : animate ? (now.anchorY + anchorY) / 2 : anchorY
                });
                // Move to the intermediate value
                tooltip.label.attr(now);
                // Run on next tick of the mouse tracker
                if (animate) {
                  // Never allow two timeouts
                  clearTimeout(this.tooltipTimeout);
                  // Set the fixed interval ticking for the smooth tooltip
                  this.tooltipTimeout = setTimeout(function () {
                    // The interval function may still be running during destroy, so check that the chart is really there before calling.
                    if (tooltip) {
                      tooltip.move(x, y, anchorX, anchorY);
                    }
                  }, 32);
                }
              },
              hide: function (delay) {
                var tooltip = this, hoverPoints;
                clearTimeout(this.hideTimer);
                // disallow duplicate timers (#1728, #1766)
                if (!this.isHidden) {
                  hoverPoints = this.chart.hoverPoints;
                  this.hideTimer = setTimeout(function () {
                    tooltip.label.fadeOut();
                    tooltip.isHidden = true;
                  }, pick(delay, this.options.hideDelay, 500));
                }
              },
              getAnchor: function (points, mouseEvent) {
                var ret, chart = this.chart, inverted = chart.inverted, plotTop = chart.plotTop, plotLeft = chart.plotLeft, plotX = 0, plotY = 0, yAxis, xAxis;
                points = splat(points);
                // Pie uses a special tooltipPos
                ret = points[0].tooltipPos;
                // When tooltip follows mouse, relate the position to the mouse
                if (this.followPointer && mouseEvent) {
                  if (mouseEvent.chartX === UNDEFINED) {
                    mouseEvent = chart.pointer.normalize(mouseEvent);
                  }
                  ret = [
                    mouseEvent.chartX - chart.plotLeft,
                    mouseEvent.chartY - plotTop
                  ];
                }
                // When shared, use the average position
                if (!ret) {
                  each(points, function (point) {
                    yAxis = point.series.yAxis;
                    xAxis = point.series.xAxis;
                    plotX += point.plotX + (!inverted && xAxis ? xAxis.left - plotLeft : 0);
                    plotY += (point.plotLow ? (point.plotLow + point.plotHigh) / 2 : point.plotY) + (!inverted && yAxis ? yAxis.top - plotTop : 0);  // #1151
                  });
                  plotX /= points.length;
                  plotY /= points.length;
                  ret = [
                    inverted ? chart.plotWidth - plotY : plotX,
                    this.shared && !inverted && points.length > 1 && mouseEvent ? mouseEvent.chartY - plotTop : inverted ? chart.plotHeight - plotX : plotY
                  ];
                }
                return map(ret, mathRound);
              },
              getPosition: function (boxWidth, boxHeight, point) {
                var chart = this.chart, distance = this.distance, ret = {}, h = point.h || 0,
                  // #4117
                  swapped, first = [
                    'y',
                    chart.chartHeight,
                    boxHeight,
                    point.plotY + chart.plotTop,
                    chart.plotTop,
                    chart.plotTop + chart.plotHeight
                  ], second = [
                    'x',
                    chart.chartWidth,
                    boxWidth,
                    point.plotX + chart.plotLeft,
                    chart.plotLeft,
                    chart.plotLeft + chart.plotWidth
                  ],
                  // The far side is right or bottom
                  preferFarSide = pick(point.ttBelow, chart.inverted && !point.negative || !chart.inverted && point.negative),
                  /**
					 * Handle the preferred dimension. When the preferred dimension is tooltip
					 * on top or bottom of the point, it will look for space there.
					 */
                  firstDimension = function (dim, outerSize, innerSize, point, min, max) {
                    var roomLeft = innerSize < point - distance, roomRight = point + distance + innerSize < outerSize, alignedLeft = point - distance - innerSize, alignedRight = point + distance;
                    if (preferFarSide && roomRight) {
                      ret[dim] = alignedRight;
                    } else if (!preferFarSide && roomLeft) {
                      ret[dim] = alignedLeft;
                    } else if (roomLeft) {
                      ret[dim] = mathMin(max - innerSize, alignedLeft - h < 0 ? alignedLeft : alignedLeft - h);
                    } else if (roomRight) {
                      ret[dim] = mathMax(min, alignedRight + h + innerSize > outerSize ? alignedRight : alignedRight + h);
                    } else {
                      return false;
                    }
                  },
                  /**
					 * Handle the secondary dimension. If the preferred dimension is tooltip
					 * on top or bottom of the point, the second dimension is to align the tooltip
					 * above the point, trying to align center but allowing left or right
					 * align within the chart box.
					 */
                  secondDimension = function (dim, outerSize, innerSize, point) {
                    // Too close to the edge, return false and swap dimensions
                    if (point < distance || point > outerSize - distance) {
                      return false;  // Align left/top
                    } else if (point < innerSize / 2) {
                      ret[dim] = 1;  // Align right/bottom
                    } else if (point > outerSize - innerSize / 2) {
                      ret[dim] = outerSize - innerSize - 2;  // Align center
                    } else {
                      ret[dim] = point - innerSize / 2;
                    }
                  },
                  /**
					 * Swap the dimensions 
					 */
                  swap = function (count) {
                    var temp = first;
                    first = second;
                    second = temp;
                    swapped = count;
                  }, run = function () {
                    if (firstDimension.apply(0, first) !== false) {
                      if (secondDimension.apply(0, second) === false && !swapped) {
                        swap(true);
                        run();
                      }
                    } else if (!swapped) {
                      swap(true);
                      run();
                    } else {
                      ret.x = ret.y = 0;
                    }
                  };
                // Under these conditions, prefer the tooltip on the side of the point
                if (chart.inverted || this.len > 1) {
                  swap();
                }
                run();
                return ret;
              },
              defaultFormatter: function (tooltip) {
                var items = this.points || splat(this), s;
                // build the header
                s = [tooltip.tooltipFooterHeaderFormatter(items[0])];
                //#3397: abstraction to enable formatting of footer and header
                // build the values
                s = s.concat(tooltip.bodyFormatter(items));
                // footer
                s.push(tooltip.tooltipFooterHeaderFormatter(items[0], true));
                //#3397: abstraction to enable formatting of footer and header
                return s.join('');
              },
              refresh: function (point, mouseEvent) {
                var tooltip = this, chart = tooltip.chart, label = tooltip.label, options = tooltip.options, x, y, anchor, textConfig = {}, text, pointConfig = [], formatter = options.formatter || tooltip.defaultFormatter, hoverPoints = chart.hoverPoints, borderColor, shared = tooltip.shared, currentSeries;
                clearTimeout(this.hideTimer);
                // get the reference point coordinates (pie charts use tooltipPos)
                tooltip.followPointer = splat(point)[0].series.tooltipOptions.followPointer;
                anchor = tooltip.getAnchor(point, mouseEvent);
                x = anchor[0];
                y = anchor[1];
                // shared tooltip, array is sent over
                if (shared && !(point.series && point.series.noSharedTooltip)) {
                  // hide previous hoverPoints and set new
                  chart.hoverPoints = point;
                  if (hoverPoints) {
                    each(hoverPoints, function (point) {
                      point.setState();
                    });
                  }
                  each(point, function (item) {
                    item.setState(HOVER_STATE);
                    pointConfig.push(item.getLabelConfig());
                  });
                  textConfig = {
                    x: point[0].category,
                    y: point[0].y
                  };
                  textConfig.points = pointConfig;
                  this.len = pointConfig.length;
                  point = point[0];  // single point tooltip
                } else {
                  textConfig = point.getLabelConfig();
                }
                text = formatter.call(textConfig, tooltip);
                // register the current series
                currentSeries = point.series;
                this.distance = pick(currentSeries.tooltipOptions.distance, 16);
                // update the inner HTML
                if (text === false) {
                  this.hide();
                } else {
                  // show it
                  if (tooltip.isHidden) {
                    stop(label);
                    label.attr('opacity', 1).show();
                  }
                  // update text
                  label.attr({ text: text });
                  // set the stroke color of the box
                  borderColor = options.borderColor || point.color || currentSeries.color || '#606060';
                  label.attr({ stroke: borderColor });
                  tooltip.updatePosition({
                    plotX: x,
                    plotY: y,
                    negative: point.negative,
                    ttBelow: point.ttBelow,
                    h: anchor[2] || 0
                  });
                  this.isHidden = false;
                }
                fireEvent(chart, 'tooltipRefresh', {
                  text: text,
                  x: x + chart.plotLeft,
                  y: y + chart.plotTop,
                  borderColor: borderColor
                });
              },
              updatePosition: function (point) {
                var chart = this.chart, label = this.label, pos = (this.options.positioner || this.getPosition).call(this, label.width, label.height, point);
                // do the move
                this.move(mathRound(pos.x), mathRound(pos.y || 0), point.plotX + chart.plotLeft, point.plotY + chart.plotTop);
              },
              getXDateFormat: function (point, options, xAxis) {
                var xDateFormat, dateTimeLabelFormats = options.dateTimeLabelFormats, closestPointRange = xAxis && xAxis.closestPointRange, n, blank = '01-01 00:00:00.000', strpos = {
                    millisecond: 15,
                    second: 12,
                    minute: 9,
                    hour: 6,
                    day: 3
                  }, date, lastN = 'millisecond';
                // for sub-millisecond data, #4223
                if (closestPointRange) {
                  date = dateFormat('%m-%d %H:%M:%S.%L', point.x);
                  for (n in timeUnits) {
                    // If the range is exactly one week and we're looking at a Sunday/Monday, go for the week format
                    if (closestPointRange === timeUnits.week && +dateFormat('%w', point.x) === xAxis.options.startOfWeek && date.substr(6) === blank.substr(6)) {
                      n = 'week';
                      break;  // The first format that is too great for the range
                    } else if (timeUnits[n] > closestPointRange) {
                      n = lastN;
                      break;  // If the point is placed every day at 23:59, we need to show
                              // the minutes as well. #2637.
                    } else if (strpos[n] && date.substr(strpos[n]) !== blank.substr(strpos[n])) {
                      break;
                    }
                    // Weeks are outside the hierarchy, only apply them on Mondays/Sundays like in the first condition
                    if (n !== 'week') {
                      lastN = n;
                    }
                  }
                  if (n) {
                    xDateFormat = dateTimeLabelFormats[n];
                  }
                } else {
                  xDateFormat = dateTimeLabelFormats.day;
                }
                return xDateFormat || dateTimeLabelFormats.year;  // #2546, 2581
              },
              tooltipFooterHeaderFormatter: function (point, isFooter) {
                var footOrHead = isFooter ? 'footer' : 'header', series = point.series, tooltipOptions = series.tooltipOptions, xDateFormat = tooltipOptions.xDateFormat, xAxis = series.xAxis, isDateTime = xAxis && xAxis.options.type === 'datetime' && isNumber(point.key), formatString = tooltipOptions[footOrHead + 'Format'];
                // Guess the best date format based on the closest point distance (#568, #3418)
                if (isDateTime && !xDateFormat) {
                  xDateFormat = this.getXDateFormat(point, tooltipOptions, xAxis);
                }
                // Insert the footer date format if any
                if (isDateTime && xDateFormat) {
                  formatString = formatString.replace('{point.key}', '{point.key:' + xDateFormat + '}');
                }
                return format(formatString, {
                  point: point,
                  series: series
                });
              },
              bodyFormatter: function (items) {
                return map(items, function (item) {
                  var tooltipOptions = item.series.tooltipOptions;
                  return (tooltipOptions.pointFormatter || item.point.tooltipFormatter).call(item.point, tooltipOptions.pointFormat);
                });
              }
            };
            var hoverChartIndex;
            // Global flag for touch support
            hasTouch = doc.documentElement.ontouchstart !== UNDEFINED;
            /**
		 * The mouse tracker object. All methods starting with "on" are primary DOM event handlers. 
		 * Subsequent methods should be named differently from what they are doing.
		 * @param {Object} chart The Chart instance
		 * @param {Object} options The root options object
		 */
            var Pointer = Highcharts.Pointer = function (chart, options) {
                this.init(chart, options);
              };
            Pointer.prototype = {
              init: function (chart, options) {
                var chartOptions = options.chart, chartEvents = chartOptions.events, zoomType = useCanVG ? '' : chartOptions.zoomType, inverted = chart.inverted, zoomX, zoomY;
                // Store references
                this.options = options;
                this.chart = chart;
                // Zoom status
                this.zoomX = zoomX = /x/.test(zoomType);
                this.zoomY = zoomY = /y/.test(zoomType);
                this.zoomHor = zoomX && !inverted || zoomY && inverted;
                this.zoomVert = zoomY && !inverted || zoomX && inverted;
                this.hasZoom = zoomX || zoomY;
                // Do we need to handle click on a touch device?
                this.runChartClick = chartEvents && !!chartEvents.click;
                this.pinchDown = [];
                this.lastValidTouch = {};
                if (Highcharts.Tooltip && options.tooltip.enabled) {
                  chart.tooltip = new Tooltip(chart, options.tooltip);
                  this.followTouchMove = pick(options.tooltip.followTouchMove, true);
                }
                this.setDOMEvents();
              },
              normalize: function (e, chartPosition) {
                var chartX, chartY, ePos;
                // common IE normalizing
                e = e || window.event;
                // Framework specific normalizing (#1165)
                e = washMouseEvent(e);
                // More IE normalizing, needs to go after washMouseEvent
                if (!e.target) {
                  e.target = e.srcElement;
                }
                // iOS (#2757)
                ePos = e.touches ? e.touches.length ? e.touches.item(0) : e.changedTouches[0] : e;
                // Get mouse position
                if (!chartPosition) {
                  this.chartPosition = chartPosition = offset(this.chart.container);
                }
                // chartX and chartY
                if (ePos.pageX === UNDEFINED) {
                  // IE < 9. #886.
                  chartX = mathMax(e.x, e.clientX - chartPosition.left);
                  // #2005, #2129: the second case is 
                  // for IE10 quirks mode within framesets
                  chartY = e.y;
                } else {
                  chartX = ePos.pageX - chartPosition.left;
                  chartY = ePos.pageY - chartPosition.top;
                }
                return extend(e, {
                  chartX: mathRound(chartX),
                  chartY: mathRound(chartY)
                });
              },
              getCoordinates: function (e) {
                var coordinates = {
                    xAxis: [],
                    yAxis: []
                  };
                each(this.chart.axes, function (axis) {
                  coordinates[axis.isXAxis ? 'xAxis' : 'yAxis'].push({
                    axis: axis,
                    value: axis.toValue(e[axis.horiz ? 'chartX' : 'chartY'])
                  });
                });
                return coordinates;
              },
              runPointActions: function (e) {
                var pointer = this, chart = pointer.chart, series = chart.series, tooltip = chart.tooltip, shared = tooltip ? tooltip.shared : false, followPointer, hoverPoint = chart.hoverPoint, hoverSeries = chart.hoverSeries, i, distance = Number.MAX_VALUE,
                  // #4511
                  anchor, noSharedTooltip, stickToHoverSeries, directTouch, kdpoints = [], kdpoint, kdpointT;
                // For hovering over the empty parts of the plot area (hoverSeries is undefined). 
                // If there is one series with point tracking (combo chart), don't go to nearest neighbour.
                if (!shared && !hoverSeries) {
                  for (i = 0; i < series.length; i++) {
                    if (series[i].directTouch || !series[i].options.stickyTracking) {
                      series = [];
                    }
                  }
                }
                // If it has a hoverPoint and that series requires direct touch (like columns, #3899), or we're on 
                // a noSharedTooltip series among shared tooltip series (#4546), use the hoverPoint . Otherwise, 
                // search the k-d tree.
                stickToHoverSeries = hoverSeries && (shared ? hoverSeries.noSharedTooltip : hoverSeries.directTouch);
                if (stickToHoverSeries && hoverPoint) {
                  kdpoint = hoverPoint;  // Handle shared tooltip or cases where a series is not yet hovered
                } else {
                  // Find nearest points on all series
                  each(series, function (s) {
                    // Skip hidden series
                    noSharedTooltip = s.noSharedTooltip && shared;
                    directTouch = !shared && s.directTouch;
                    if (s.visible && !noSharedTooltip && !directTouch && pick(s.options.enableMouseTracking, true)) {
                      // #3821
                      kdpointT = s.searchPoint(e, !noSharedTooltip && s.kdDimensions === 1);
                      // #3828
                      if (kdpointT) {
                        kdpoints.push(kdpointT);
                      }
                    }
                  });
                  // Find absolute nearest point
                  each(kdpoints, function (p) {
                    if (p && typeof p.dist === 'number' && p.dist < distance) {
                      distance = p.dist;
                      kdpoint = p;
                    }
                  });
                }
                // Refresh tooltip for kdpoint if new hover point or tooltip was hidden // #3926, #4200
                if (kdpoint && (kdpoint !== this.prevKDPoint || tooltip && tooltip.isHidden)) {
                  // Draw tooltip if necessary
                  if (shared && !kdpoint.series.noSharedTooltip) {
                    i = kdpoints.length;
                    while (i--) {
                      if (kdpoints[i].clientX !== kdpoint.clientX || kdpoints[i].series.noSharedTooltip) {
                        kdpoints.splice(i, 1);
                      }
                    }
                    if (kdpoints.length && tooltip) {
                      tooltip.refresh(kdpoints, e);
                    }
                    // Do mouseover on all points (#3919, #3985, #4410)
                    each(kdpoints, function (point) {
                      point.onMouseOver(e, point !== (hoverSeries && hoverSeries.directTouch && hoverPoint || kdpoint));
                    });
                  } else {
                    if (tooltip) {
                      tooltip.refresh(kdpoint, e);
                    }
                    if (!hoverSeries || !hoverSeries.directTouch) {
                      // #4448
                      kdpoint.onMouseOver(e);
                    }
                  }
                  this.prevKDPoint = kdpoint;  // Update positions (regardless of kdpoint or hoverPoint)
                } else {
                  followPointer = hoverSeries && hoverSeries.tooltipOptions.followPointer;
                  if (tooltip && followPointer && !tooltip.isHidden) {
                    anchor = tooltip.getAnchor([{}], e);
                    tooltip.updatePosition({
                      plotX: anchor[0],
                      plotY: anchor[1]
                    });
                  }
                }
                // Start the event listener to pick up the tooltip 
                if (tooltip && !pointer._onDocumentMouseMove) {
                  pointer._onDocumentMouseMove = function (e) {
                    if (charts[hoverChartIndex]) {
                      charts[hoverChartIndex].pointer.onDocumentMouseMove(e);
                    }
                  };
                  addEvent(doc, 'mousemove', pointer._onDocumentMouseMove);
                }
                // Crosshair
                each(chart.axes, function (axis) {
                  axis.drawCrosshair(e, pick(kdpoint, hoverPoint));
                });
              },
              reset: function (allowMove, delay) {
                var pointer = this, chart = pointer.chart, hoverSeries = chart.hoverSeries, hoverPoint = chart.hoverPoint, hoverPoints = chart.hoverPoints, tooltip = chart.tooltip, tooltipPoints = tooltip && tooltip.shared ? hoverPoints : hoverPoint;
                // Narrow in allowMove
                allowMove = allowMove && tooltip && tooltipPoints;
                // Check if the points have moved outside the plot area, #1003		
                if (allowMove && splat(tooltipPoints)[0].plotX === UNDEFINED) {
                  allowMove = false;
                }
                // Just move the tooltip, #349
                if (allowMove) {
                  tooltip.refresh(tooltipPoints);
                  if (hoverPoint) {
                    // #2500
                    hoverPoint.setState(hoverPoint.state, true);
                    each(chart.axes, function (axis) {
                      if (pick(axis.options.crosshair && axis.options.crosshair.snap, true)) {
                        axis.drawCrosshair(null, hoverPoint);
                      } else {
                        axis.hideCrosshair();
                      }
                    });
                  }  // Full reset
                } else {
                  if (hoverPoint) {
                    hoverPoint.onMouseOut();
                  }
                  if (hoverPoints) {
                    each(hoverPoints, function (point) {
                      point.setState();
                    });
                  }
                  if (hoverSeries) {
                    hoverSeries.onMouseOut();
                  }
                  if (tooltip) {
                    tooltip.hide(delay);
                  }
                  if (pointer._onDocumentMouseMove) {
                    removeEvent(doc, 'mousemove', pointer._onDocumentMouseMove);
                    pointer._onDocumentMouseMove = null;
                  }
                  // Remove crosshairs
                  each(chart.axes, function (axis) {
                    axis.hideCrosshair();
                  });
                  pointer.hoverX = chart.hoverPoints = chart.hoverPoint = null;
                }
              },
              scaleGroups: function (attribs, clip) {
                var chart = this.chart, seriesAttribs;
                // Scale each series
                each(chart.series, function (series) {
                  seriesAttribs = attribs || series.getPlotBox();
                  // #1701
                  if (series.xAxis && series.xAxis.zoomEnabled) {
                    series.group.attr(seriesAttribs);
                    if (series.markerGroup) {
                      series.markerGroup.attr(seriesAttribs);
                      series.markerGroup.clip(clip ? chart.clipRect : null);
                    }
                    if (series.dataLabelsGroup) {
                      series.dataLabelsGroup.attr(seriesAttribs);
                    }
                  }
                });
                // Clip
                chart.clipRect.attr(clip || chart.clipBox);
              },
              dragStart: function (e) {
                var chart = this.chart;
                // Record the start position
                chart.mouseIsDown = e.type;
                chart.cancelClick = false;
                chart.mouseDownX = this.mouseDownX = e.chartX;
                chart.mouseDownY = this.mouseDownY = e.chartY;
              },
              drag: function (e) {
                var chart = this.chart, chartOptions = chart.options.chart, chartX = e.chartX, chartY = e.chartY, zoomHor = this.zoomHor, zoomVert = this.zoomVert, plotLeft = chart.plotLeft, plotTop = chart.plotTop, plotWidth = chart.plotWidth, plotHeight = chart.plotHeight, clickedInside, size, selectionMarker = this.selectionMarker, mouseDownX = this.mouseDownX, mouseDownY = this.mouseDownY, panKey = chartOptions.panKey && e[chartOptions.panKey + 'Key'];
                // If the device supports both touch and mouse (like IE11), and we are touch-dragging
                // inside the plot area, don't handle the mouse event. #4339.
                if (selectionMarker && selectionMarker.touch) {
                  return;
                }
                // If the mouse is outside the plot area, adjust to cooordinates
                // inside to prevent the selection marker from going outside
                if (chartX < plotLeft) {
                  chartX = plotLeft;
                } else if (chartX > plotLeft + plotWidth) {
                  chartX = plotLeft + plotWidth;
                }
                if (chartY < plotTop) {
                  chartY = plotTop;
                } else if (chartY > plotTop + plotHeight) {
                  chartY = plotTop + plotHeight;
                }
                // determine if the mouse has moved more than 10px
                this.hasDragged = Math.sqrt(Math.pow(mouseDownX - chartX, 2) + Math.pow(mouseDownY - chartY, 2));
                if (this.hasDragged > 10) {
                  clickedInside = chart.isInsidePlot(mouseDownX - plotLeft, mouseDownY - plotTop);
                  // make a selection
                  if (chart.hasCartesianSeries && (this.zoomX || this.zoomY) && clickedInside && !panKey) {
                    if (!selectionMarker) {
                      this.selectionMarker = selectionMarker = chart.renderer.rect(plotLeft, plotTop, zoomHor ? 1 : plotWidth, zoomVert ? 1 : plotHeight, 0).attr({
                        fill: chartOptions.selectionMarkerFill || 'rgba(69,114,167,0.25)',
                        zIndex: 7
                      }).add();
                    }
                  }
                  // adjust the width of the selection marker
                  if (selectionMarker && zoomHor) {
                    size = chartX - mouseDownX;
                    selectionMarker.attr({
                      width: mathAbs(size),
                      x: (size > 0 ? 0 : size) + mouseDownX
                    });
                  }
                  // adjust the height of the selection marker
                  if (selectionMarker && zoomVert) {
                    size = chartY - mouseDownY;
                    selectionMarker.attr({
                      height: mathAbs(size),
                      y: (size > 0 ? 0 : size) + mouseDownY
                    });
                  }
                  // panning
                  if (clickedInside && !selectionMarker && chartOptions.panning) {
                    chart.pan(e, chartOptions.panning);
                  }
                }
              },
              drop: function (e) {
                var pointer = this, chart = this.chart, hasPinched = this.hasPinched;
                if (this.selectionMarker) {
                  var selectionData = {
                      xAxis: [],
                      yAxis: [],
                      originalEvent: e.originalEvent || e
                    }, selectionBox = this.selectionMarker, selectionLeft = selectionBox.attr ? selectionBox.attr('x') : selectionBox.x, selectionTop = selectionBox.attr ? selectionBox.attr('y') : selectionBox.y, selectionWidth = selectionBox.attr ? selectionBox.attr('width') : selectionBox.width, selectionHeight = selectionBox.attr ? selectionBox.attr('height') : selectionBox.height, runZoom;
                  // a selection has been made
                  if (this.hasDragged || hasPinched) {
                    // record each axis' min and max
                    each(chart.axes, function (axis) {
                      if (axis.zoomEnabled && defined(axis.min) && (hasPinched || pointer[{
                          xAxis: 'zoomX',
                          yAxis: 'zoomY'
                        }[axis.coll]])) {
                        // #859, #3569
                        var horiz = axis.horiz, minPixelPadding = e.type === 'touchend' ? axis.minPixelPadding : 0,
                          // #1207, #3075
                          selectionMin = axis.toValue((horiz ? selectionLeft : selectionTop) + minPixelPadding), selectionMax = axis.toValue((horiz ? selectionLeft + selectionWidth : selectionTop + selectionHeight) - minPixelPadding);
                        selectionData[axis.coll].push({
                          axis: axis,
                          min: mathMin(selectionMin, selectionMax),
                          max: mathMax(selectionMin, selectionMax)
                        });
                        runZoom = true;
                      }
                    });
                    if (runZoom) {
                      fireEvent(chart, 'selection', selectionData, function (args) {
                        chart.zoom(extend(args, hasPinched ? { animation: false } : null));
                      });
                    }
                  }
                  this.selectionMarker = this.selectionMarker.destroy();
                  // Reset scaling preview
                  if (hasPinched) {
                    this.scaleGroups();
                  }
                }
                // Reset all
                if (chart) {
                  // it may be destroyed on mouse up - #877
                  css(chart.container, { cursor: chart._cursor });
                  chart.cancelClick = this.hasDragged > 10;
                  // #370
                  chart.mouseIsDown = this.hasDragged = this.hasPinched = false;
                  this.pinchDown = [];
                }
              },
              onContainerMouseDown: function (e) {
                e = this.normalize(e);
                // issue #295, dragging not always working in Firefox
                if (e.preventDefault) {
                  e.preventDefault();
                }
                this.dragStart(e);
              },
              onDocumentMouseUp: function (e) {
                if (charts[hoverChartIndex]) {
                  charts[hoverChartIndex].pointer.drop(e);
                }
              },
              onDocumentMouseMove: function (e) {
                var chart = this.chart, chartPosition = this.chartPosition;
                e = this.normalize(e, chartPosition);
                // If we're outside, hide the tooltip
                if (chartPosition && !this.inClass(e.target, 'highcharts-tracker') && !chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) {
                  this.reset();
                }
              },
              onContainerMouseLeave: function () {
                var chart = charts[hoverChartIndex];
                if (chart) {
                  chart.pointer.reset();
                  chart.pointer.chartPosition = null;  // also reset the chart position, used in #149 fix
                }
              },
              onContainerMouseMove: function (e) {
                var chart = this.chart;
                hoverChartIndex = chart.index;
                e = this.normalize(e);
                e.returnValue = false;
                // #2251, #3224
                if (chart.mouseIsDown === 'mousedown') {
                  this.drag(e);
                }
                // Show the tooltip and run mouse over events (#977)
                if ((this.inClass(e.target, 'highcharts-tracker') || chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) && !chart.openMenu) {
                  this.runPointActions(e);
                }
              },
              inClass: function (element, className) {
                var elemClassName;
                while (element) {
                  elemClassName = attr(element, 'class');
                  if (elemClassName) {
                    if (elemClassName.indexOf(className) !== -1) {
                      return true;
                    } else if (elemClassName.indexOf(PREFIX + 'container') !== -1) {
                      return false;
                    }
                  }
                  element = element.parentNode;
                }
              },
              onTrackerMouseOut: function (e) {
                var series = this.chart.hoverSeries, relatedTarget = e.relatedTarget || e.toElement;
                if (series && !series.options.stickyTracking && !this.inClass(relatedTarget, PREFIX + 'tooltip') && !this.inClass(relatedTarget, PREFIX + 'series-' + series.index)) {
                  // #2499, #4465
                  series.onMouseOut();
                }
              },
              onContainerClick: function (e) {
                var chart = this.chart, hoverPoint = chart.hoverPoint, plotLeft = chart.plotLeft, plotTop = chart.plotTop;
                e = this.normalize(e);
                e.originalEvent = e;
                // #3913
                if (!chart.cancelClick) {
                  // On tracker click, fire the series and point events. #783, #1583
                  if (hoverPoint && this.inClass(e.target, PREFIX + 'tracker')) {
                    // the series click event
                    fireEvent(hoverPoint.series, 'click', extend(e, { point: hoverPoint }));
                    // the point click event
                    if (chart.hoverPoint) {
                      // it may be destroyed (#1844)
                      hoverPoint.firePointEvent('click', e);
                    }  // When clicking outside a tracker, fire a chart event
                  } else {
                    extend(e, this.getCoordinates(e));
                    // fire a click event in the chart
                    if (chart.isInsidePlot(e.chartX - plotLeft, e.chartY - plotTop)) {
                      fireEvent(chart, 'click', e);
                    }
                  }
                }
              },
              setDOMEvents: function () {
                var pointer = this, container = pointer.chart.container;
                container.onmousedown = function (e) {
                  pointer.onContainerMouseDown(e);
                };
                container.onmousemove = function (e) {
                  pointer.onContainerMouseMove(e);
                };
                container.onclick = function (e) {
                  pointer.onContainerClick(e);
                };
                addEvent(container, 'mouseleave', pointer.onContainerMouseLeave);
                if (chartCount === 1) {
                  addEvent(doc, 'mouseup', pointer.onDocumentMouseUp);
                }
                if (hasTouch) {
                  container.ontouchstart = function (e) {
                    pointer.onContainerTouchStart(e);
                  };
                  container.ontouchmove = function (e) {
                    pointer.onContainerTouchMove(e);
                  };
                  if (chartCount === 1) {
                    addEvent(doc, 'touchend', pointer.onDocumentTouchEnd);
                  }
                }
              },
              destroy: function () {
                var prop;
                removeEvent(this.chart.container, 'mouseleave', this.onContainerMouseLeave);
                if (!chartCount) {
                  removeEvent(doc, 'mouseup', this.onDocumentMouseUp);
                  removeEvent(doc, 'touchend', this.onDocumentTouchEnd);
                }
                // memory and CPU leak
                clearInterval(this.tooltipTimeout);
                for (prop in this) {
                  this[prop] = null;
                }
              }
            };
            /* Support for touch devices */
            extend(Highcharts.Pointer.prototype, {
              pinchTranslate: function (pinchDown, touches, transform, selectionMarker, clip, lastValidTouch) {
                if (this.zoomHor || this.pinchHor) {
                  this.pinchTranslateDirection(true, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);
                }
                if (this.zoomVert || this.pinchVert) {
                  this.pinchTranslateDirection(false, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);
                }
              },
              pinchTranslateDirection: function (horiz, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch, forcedScale) {
                var chart = this.chart, xy = horiz ? 'x' : 'y', XY = horiz ? 'X' : 'Y', sChartXY = 'chart' + XY, wh = horiz ? 'width' : 'height', plotLeftTop = chart['plot' + (horiz ? 'Left' : 'Top')], selectionWH, selectionXY, clipXY, scale = forcedScale || 1, inverted = chart.inverted, bounds = chart.bounds[horiz ? 'h' : 'v'], singleTouch = pinchDown.length === 1, touch0Start = pinchDown[0][sChartXY], touch0Now = touches[0][sChartXY], touch1Start = !singleTouch && pinchDown[1][sChartXY], touch1Now = !singleTouch && touches[1][sChartXY], outOfBounds, transformScale, scaleKey, setScale = function () {
                    if (!singleTouch && mathAbs(touch0Start - touch1Start) > 20) {
                      // Don't zoom if fingers are too close on this axis
                      scale = forcedScale || mathAbs(touch0Now - touch1Now) / mathAbs(touch0Start - touch1Start);
                    }
                    clipXY = (plotLeftTop - touch0Now) / scale + touch0Start;
                    selectionWH = chart['plot' + (horiz ? 'Width' : 'Height')] / scale;
                  };
                // Set the scale, first pass
                setScale();
                selectionXY = clipXY;
                // the clip position (x or y) is altered if out of bounds, the selection position is not
                // Out of bounds
                if (selectionXY < bounds.min) {
                  selectionXY = bounds.min;
                  outOfBounds = true;
                } else if (selectionXY + selectionWH > bounds.max) {
                  selectionXY = bounds.max - selectionWH;
                  outOfBounds = true;
                }
                // Is the chart dragged off its bounds, determined by dataMin and dataMax?
                if (outOfBounds) {
                  // Modify the touchNow position in order to create an elastic drag movement. This indicates
                  // to the user that the chart is responsive but can't be dragged further.
                  touch0Now -= 0.8 * (touch0Now - lastValidTouch[xy][0]);
                  if (!singleTouch) {
                    touch1Now -= 0.8 * (touch1Now - lastValidTouch[xy][1]);
                  }
                  // Set the scale, second pass to adapt to the modified touchNow positions
                  setScale();
                } else {
                  lastValidTouch[xy] = [
                    touch0Now,
                    touch1Now
                  ];
                }
                // Set geometry for clipping, selection and transformation
                if (!inverted) {
                  // TODO: implement clipping for inverted charts
                  clip[xy] = clipXY - plotLeftTop;
                  clip[wh] = selectionWH;
                }
                scaleKey = inverted ? horiz ? 'scaleY' : 'scaleX' : 'scale' + XY;
                transformScale = inverted ? 1 / scale : scale;
                selectionMarker[wh] = selectionWH;
                selectionMarker[xy] = selectionXY;
                transform[scaleKey] = scale;
                transform['translate' + XY] = transformScale * plotLeftTop + (touch0Now - transformScale * touch0Start);
              },
              pinch: function (e) {
                var self = this, chart = self.chart, pinchDown = self.pinchDown, touches = e.touches, touchesLength = touches.length, lastValidTouch = self.lastValidTouch, hasZoom = self.hasZoom, selectionMarker = self.selectionMarker, transform = {}, fireClickEvent = touchesLength === 1 && (self.inClass(e.target, PREFIX + 'tracker') && chart.runTrackerClick || self.runChartClick), clip = {};
                // Don't initiate panning until the user has pinched. This prevents us from 
                // blocking page scrolling as users scroll down a long page (#4210).
                if (touchesLength > 1) {
                  self.initiated = true;
                }
                // On touch devices, only proceed to trigger click if a handler is defined
                if (hasZoom && self.initiated && !fireClickEvent) {
                  e.preventDefault();
                }
                // Normalize each touch
                map(touches, function (e) {
                  return self.normalize(e);
                });
                // Register the touch start position
                if (e.type === 'touchstart') {
                  each(touches, function (e, i) {
                    pinchDown[i] = {
                      chartX: e.chartX,
                      chartY: e.chartY
                    };
                  });
                  lastValidTouch.x = [
                    pinchDown[0].chartX,
                    pinchDown[1] && pinchDown[1].chartX
                  ];
                  lastValidTouch.y = [
                    pinchDown[0].chartY,
                    pinchDown[1] && pinchDown[1].chartY
                  ];
                  // Identify the data bounds in pixels
                  each(chart.axes, function (axis) {
                    if (axis.zoomEnabled) {
                      var bounds = chart.bounds[axis.horiz ? 'h' : 'v'], minPixelPadding = axis.minPixelPadding, min = axis.toPixels(pick(axis.options.min, axis.dataMin)), max = axis.toPixels(pick(axis.options.max, axis.dataMax)), absMin = mathMin(min, max), absMax = mathMax(min, max);
                      // Store the bounds for use in the touchmove handler
                      bounds.min = mathMin(axis.pos, absMin - minPixelPadding);
                      bounds.max = mathMax(axis.pos + axis.len, absMax + minPixelPadding);
                    }
                  });
                  self.res = true;  // reset on next move
                                    // Event type is touchmove, handle panning and pinching
                } else if (pinchDown.length) {
                  // can be 0 when releasing, if touchend fires first
                  // Set the marker
                  if (!selectionMarker) {
                    self.selectionMarker = selectionMarker = extend({
                      destroy: noop,
                      touch: true
                    }, chart.plotBox);
                  }
                  self.pinchTranslate(pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);
                  self.hasPinched = hasZoom;
                  // Scale and translate the groups to provide visual feedback during pinching
                  self.scaleGroups(transform, clip);
                  // Optionally move the tooltip on touchmove
                  if (!hasZoom && self.followTouchMove && touchesLength === 1) {
                    this.runPointActions(self.normalize(e));
                  } else if (self.res) {
                    self.res = false;
                    this.reset(false, 0);
                  }
                }
              },
              touch: function (e, start) {
                var chart = this.chart;
                hoverChartIndex = chart.index;
                if (e.touches.length === 1) {
                  e = this.normalize(e);
                  if (chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop) && !chart.openMenu) {
                    // Run mouse events and display tooltip etc
                    if (start) {
                      this.runPointActions(e);
                    }
                    this.pinch(e);
                  } else if (start) {
                    // Hide the tooltip on touching outside the plot area (#1203)
                    this.reset();
                  }
                } else if (e.touches.length === 2) {
                  this.pinch(e);
                }
              },
              onContainerTouchStart: function (e) {
                this.touch(e, true);
              },
              onContainerTouchMove: function (e) {
                this.touch(e);
              },
              onDocumentTouchEnd: function (e) {
                if (charts[hoverChartIndex]) {
                  charts[hoverChartIndex].pointer.drop(e);
                }
              }
            });
            if (win.PointerEvent || win.MSPointerEvent) {
              // The touches object keeps track of the points being touched at all times
              var touches = {}, hasPointerEvent = !!win.PointerEvent, getWebkitTouches = function () {
                  var key, fake = [];
                  fake.item = function (i) {
                    return this[i];
                  };
                  for (key in touches) {
                    if (touches.hasOwnProperty(key)) {
                      fake.push({
                        pageX: touches[key].pageX,
                        pageY: touches[key].pageY,
                        target: touches[key].target
                      });
                    }
                  }
                  return fake;
                }, translateMSPointer = function (e, method, wktype, callback) {
                  var p;
                  e = e.originalEvent || e;
                  if ((e.pointerType === 'touch' || e.pointerType === e.MSPOINTER_TYPE_TOUCH) && charts[hoverChartIndex]) {
                    callback(e);
                    p = charts[hoverChartIndex].pointer;
                    p[method]({
                      type: wktype,
                      target: e.currentTarget,
                      preventDefault: noop,
                      touches: getWebkitTouches()
                    });
                  }
                };
              /**
			 * Extend the Pointer prototype with methods for each event handler and more
			 */
              extend(Pointer.prototype, {
                onContainerPointerDown: function (e) {
                  translateMSPointer(e, 'onContainerTouchStart', 'touchstart', function (e) {
                    touches[e.pointerId] = {
                      pageX: e.pageX,
                      pageY: e.pageY,
                      target: e.currentTarget
                    };
                  });
                },
                onContainerPointerMove: function (e) {
                  translateMSPointer(e, 'onContainerTouchMove', 'touchmove', function (e) {
                    touches[e.pointerId] = {
                      pageX: e.pageX,
                      pageY: e.pageY
                    };
                    if (!touches[e.pointerId].target) {
                      touches[e.pointerId].target = e.currentTarget;
                    }
                  });
                },
                onDocumentPointerUp: function (e) {
                  translateMSPointer(e, 'onDocumentTouchEnd', 'touchend', function (e) {
                    delete touches[e.pointerId];
                  });
                },
                batchMSEvents: function (fn) {
                  fn(this.chart.container, hasPointerEvent ? 'pointerdown' : 'MSPointerDown', this.onContainerPointerDown);
                  fn(this.chart.container, hasPointerEvent ? 'pointermove' : 'MSPointerMove', this.onContainerPointerMove);
                  fn(doc, hasPointerEvent ? 'pointerup' : 'MSPointerUp', this.onDocumentPointerUp);
                }
              });
              // Disable default IE actions for pinch and such on chart element
              wrap(Pointer.prototype, 'init', function (proceed, chart, options) {
                proceed.call(this, chart, options);
                if (this.hasZoom) {
                  // #4014
                  css(chart.container, {
                    '-ms-touch-action': NONE,
                    'touch-action': NONE
                  });
                }
              });
              // Add IE specific touch events to chart
              wrap(Pointer.prototype, 'setDOMEvents', function (proceed) {
                proceed.apply(this);
                if (this.hasZoom || this.followTouchMove) {
                  this.batchMSEvents(addEvent);
                }
              });
              // Destroy MS events also
              wrap(Pointer.prototype, 'destroy', function (proceed) {
                this.batchMSEvents(removeEvent);
                proceed.call(this);
              });
            }
            /**
		 * The overview of the chart's series
		 */
            var Legend = Highcharts.Legend = function (chart, options) {
                this.init(chart, options);
              };
            Legend.prototype = {
              init: function (chart, options) {
                var legend = this, itemStyle = options.itemStyle, padding, itemMarginTop = options.itemMarginTop || 0;
                this.options = options;
                if (!options.enabled) {
                  return;
                }
                legend.itemStyle = itemStyle;
                legend.itemHiddenStyle = merge(itemStyle, options.itemHiddenStyle);
                legend.itemMarginTop = itemMarginTop;
                legend.padding = padding = pick(options.padding, 8);
                legend.initialItemX = padding;
                legend.initialItemY = padding - 5;
                // 5 is the number of pixels above the text
                legend.maxItemWidth = 0;
                legend.chart = chart;
                legend.itemHeight = 0;
                legend.symbolWidth = pick(options.symbolWidth, 16);
                legend.pages = [];
                // Render it
                legend.render();
                // move checkboxes
                addEvent(legend.chart, 'endResize', function () {
                  legend.positionCheckboxes();
                });
              },
              colorizeItem: function (item, visible) {
                var legend = this, options = legend.options, legendItem = item.legendItem, legendLine = item.legendLine, legendSymbol = item.legendSymbol, hiddenColor = legend.itemHiddenStyle.color, textColor = visible ? options.itemStyle.color : hiddenColor, symbolColor = visible ? item.legendColor || item.color || '#CCC' : hiddenColor, markerOptions = item.options && item.options.marker, symbolAttr = { fill: symbolColor }, key, val;
                if (legendItem) {
                  legendItem.css({
                    fill: textColor,
                    color: textColor
                  });  // color for #1553, oldIE
                }
                if (legendLine) {
                  legendLine.attr({ stroke: symbolColor });
                }
                if (legendSymbol) {
                  // Apply marker options
                  if (markerOptions && legendSymbol.isMarker) {
                    // #585
                    symbolAttr.stroke = symbolColor;
                    markerOptions = item.convertAttribs(markerOptions);
                    for (key in markerOptions) {
                      val = markerOptions[key];
                      if (val !== UNDEFINED) {
                        symbolAttr[key] = val;
                      }
                    }
                  }
                  legendSymbol.attr(symbolAttr);
                }
              },
              positionItem: function (item) {
                var legend = this, options = legend.options, symbolPadding = options.symbolPadding, ltr = !options.rtl, legendItemPos = item._legendItemPos, itemX = legendItemPos[0], itemY = legendItemPos[1], checkbox = item.checkbox, legendGroup = item.legendGroup;
                if (legendGroup && legendGroup.element) {
                  legendGroup.translate(ltr ? itemX : legend.legendWidth - itemX - 2 * symbolPadding - 4, itemY);
                }
                if (checkbox) {
                  checkbox.x = itemX;
                  checkbox.y = itemY;
                }
              },
              destroyItem: function (item) {
                var checkbox = item.checkbox;
                // destroy SVG elements
                each([
                  'legendItem',
                  'legendLine',
                  'legendSymbol',
                  'legendGroup'
                ], function (key) {
                  if (item[key]) {
                    item[key] = item[key].destroy();
                  }
                });
                if (checkbox) {
                  discardElement(item.checkbox);
                }
              },
              destroy: function () {
                var legend = this, legendGroup = legend.group, box = legend.box;
                if (box) {
                  legend.box = box.destroy();
                }
                if (legendGroup) {
                  legend.group = legendGroup.destroy();
                }
              },
              positionCheckboxes: function (scrollOffset) {
                var alignAttr = this.group.alignAttr, translateY, clipHeight = this.clipHeight || this.legendHeight;
                if (alignAttr) {
                  translateY = alignAttr.translateY;
                  each(this.allItems, function (item) {
                    var checkbox = item.checkbox, top;
                    if (checkbox) {
                      top = translateY + checkbox.y + (scrollOffset || 0) + 3;
                      css(checkbox, {
                        left: alignAttr.translateX + item.checkboxOffset + checkbox.x - 20 + PX,
                        top: top + PX,
                        display: top > translateY - 6 && top < translateY + clipHeight - 6 ? '' : NONE
                      });
                    }
                  });
                }
              },
              renderTitle: function () {
                var options = this.options, padding = this.padding, titleOptions = options.title, titleHeight = 0, bBox;
                if (titleOptions.text) {
                  if (!this.title) {
                    this.title = this.chart.renderer.label(titleOptions.text, padding - 3, padding - 4, null, null, null, null, null, 'legend-title').attr({ zIndex: 1 }).css(titleOptions.style).add(this.group);
                  }
                  bBox = this.title.getBBox();
                  titleHeight = bBox.height;
                  this.offsetWidth = bBox.width;
                  // #1717
                  this.contentGroup.attr({ translateY: titleHeight });
                }
                this.titleHeight = titleHeight;
              },
              setText: function (item) {
                var options = this.options;
                item.legendItem.attr({ text: options.labelFormat ? format(options.labelFormat, item) : options.labelFormatter.call(item) });
              },
              renderItem: function (item) {
                var legend = this, chart = legend.chart, renderer = chart.renderer, options = legend.options, horizontal = options.layout === 'horizontal', symbolWidth = legend.symbolWidth, symbolPadding = options.symbolPadding, itemStyle = legend.itemStyle, itemHiddenStyle = legend.itemHiddenStyle, padding = legend.padding, itemDistance = horizontal ? pick(options.itemDistance, 20) : 0, ltr = !options.rtl, itemHeight, widthOption = options.width, itemMarginBottom = options.itemMarginBottom || 0, itemMarginTop = legend.itemMarginTop, initialItemX = legend.initialItemX, bBox, itemWidth, li = item.legendItem, series = item.series && item.series.drawLegendSymbol ? item.series : item, seriesOptions = series.options, showCheckbox = legend.createCheckboxForItem && seriesOptions && seriesOptions.showCheckbox, useHTML = options.useHTML;
                if (!li) {
                  // generate it once, later move it
                  // Generate the group box
                  // A group to hold the symbol and text. Text is to be appended in Legend class.
                  item.legendGroup = renderer.g('legend-item').attr({ zIndex: 1 }).add(legend.scrollGroup);
                  // Generate the list item text and add it to the group
                  item.legendItem = li = renderer.text('', ltr ? symbolWidth + symbolPadding : -symbolPadding, legend.baseline || 0, useHTML).css(merge(item.visible ? itemStyle : itemHiddenStyle)).attr({
                    align: ltr ? 'left' : 'right',
                    zIndex: 2
                  }).add(item.legendGroup);
                  // Get the baseline for the first item - the font size is equal for all
                  if (!legend.baseline) {
                    legend.fontMetrics = renderer.fontMetrics(itemStyle.fontSize, li);
                    legend.baseline = legend.fontMetrics.f + 3 + itemMarginTop;
                    li.attr('y', legend.baseline);
                  }
                  // Draw the legend symbol inside the group box
                  series.drawLegendSymbol(legend, item);
                  if (legend.setItemEvents) {
                    legend.setItemEvents(item, li, useHTML, itemStyle, itemHiddenStyle);
                  }
                  // Colorize the items
                  legend.colorizeItem(item, item.visible);
                  // add the HTML checkbox on top
                  if (showCheckbox) {
                    legend.createCheckboxForItem(item);
                  }
                }
                // Always update the text
                legend.setText(item);
                // calculate the positions for the next line
                bBox = li.getBBox();
                itemWidth = item.checkboxOffset = options.itemWidth || item.legendItemWidth || symbolWidth + symbolPadding + bBox.width + itemDistance + (showCheckbox ? 20 : 0);
                legend.itemHeight = itemHeight = mathRound(item.legendItemHeight || bBox.height);
                // if the item exceeds the width, start a new line
                if (horizontal && legend.itemX - initialItemX + itemWidth > (widthOption || chart.chartWidth - 2 * padding - initialItemX - options.x)) {
                  legend.itemX = initialItemX;
                  legend.itemY += itemMarginTop + legend.lastLineHeight + itemMarginBottom;
                  legend.lastLineHeight = 0;  // reset for next line (#915, #3976)
                }
                // If the item exceeds the height, start a new column
                /*if (!horizontal && legend.itemY + options.y + itemHeight > chart.chartHeight - spacingTop - spacingBottom) {
					legend.itemY = legend.initialItemY;
					legend.itemX += legend.maxItemWidth;
					legend.maxItemWidth = 0;
				}*/
                // Set the edge positions
                legend.maxItemWidth = mathMax(legend.maxItemWidth, itemWidth);
                legend.lastItemY = itemMarginTop + legend.itemY + itemMarginBottom;
                legend.lastLineHeight = mathMax(itemHeight, legend.lastLineHeight);
                // #915
                // cache the position of the newly generated or reordered items
                item._legendItemPos = [
                  legend.itemX,
                  legend.itemY
                ];
                // advance
                if (horizontal) {
                  legend.itemX += itemWidth;
                } else {
                  legend.itemY += itemMarginTop + itemHeight + itemMarginBottom;
                  legend.lastLineHeight = itemHeight;
                }
                // the width of the widest item
                legend.offsetWidth = widthOption || mathMax((horizontal ? legend.itemX - initialItemX - itemDistance : itemWidth) + padding, legend.offsetWidth);
              },
              getAllItems: function () {
                var allItems = [];
                each(this.chart.series, function (series) {
                  var seriesOptions = series.options;
                  // Handle showInLegend. If the series is linked to another series, defaults to false.
                  if (!pick(seriesOptions.showInLegend, !defined(seriesOptions.linkedTo) ? UNDEFINED : false, true)) {
                    return;
                  }
                  // use points or series for the legend item depending on legendType
                  allItems = allItems.concat(series.legendItems || (seriesOptions.legendType === 'point' ? series.data : series));
                });
                return allItems;
              },
              adjustMargins: function (margin, spacing) {
                var chart = this.chart, options = this.options,
                  // Use the first letter of each alignment option in order to detect the side 
                  alignment = options.align.charAt(0) + options.verticalAlign.charAt(0) + options.layout.charAt(0);
                // #4189 - use charAt(x) notation instead of [x] for IE7
                if (this.display && !options.floating) {
                  each([
                    /(lth|ct|rth)/,
                    /(rtv|rm|rbv)/,
                    /(rbh|cb|lbh)/,
                    /(lbv|lm|ltv)/
                  ], function (alignments, side) {
                    if (alignments.test(alignment) && !defined(margin[side])) {
                      // Now we have detected on which side of the chart we should reserve space for the legend
                      chart[marginNames[side]] = mathMax(chart[marginNames[side]], chart.legend[(side + 1) % 2 ? 'legendHeight' : 'legendWidth'] + [
                        1,
                        -1,
                        -1,
                        1
                      ][side] * options[side % 2 ? 'x' : 'y'] + pick(options.margin, 12) + spacing[side]);
                    }
                  });
                }
              },
              render: function () {
                var legend = this, chart = legend.chart, renderer = chart.renderer, legendGroup = legend.group, allItems, display, legendWidth, legendHeight, box = legend.box, options = legend.options, padding = legend.padding, legendBorderWidth = options.borderWidth, legendBackgroundColor = options.backgroundColor;
                legend.itemX = legend.initialItemX;
                legend.itemY = legend.initialItemY;
                legend.offsetWidth = 0;
                legend.lastItemY = 0;
                if (!legendGroup) {
                  legend.group = legendGroup = renderer.g('legend').attr({ zIndex: 7 }).add();
                  legend.contentGroup = renderer.g().attr({ zIndex: 1 }).add(legendGroup);
                  legend.scrollGroup = renderer.g().add(legend.contentGroup);
                }
                legend.renderTitle();
                // add each series or point
                allItems = legend.getAllItems();
                // sort by legendIndex
                stableSort(allItems, function (a, b) {
                  return (a.options && a.options.legendIndex || 0) - (b.options && b.options.legendIndex || 0);
                });
                // reversed legend
                if (options.reversed) {
                  allItems.reverse();
                }
                legend.allItems = allItems;
                legend.display = display = !!allItems.length;
                // render the items
                legend.lastLineHeight = 0;
                each(allItems, function (item) {
                  legend.renderItem(item);
                });
                // Get the box
                legendWidth = (options.width || legend.offsetWidth) + padding;
                legendHeight = legend.lastItemY + legend.lastLineHeight + legend.titleHeight;
                legendHeight = legend.handleOverflow(legendHeight);
                legendHeight += padding;
                // Draw the border and/or background
                if (legendBorderWidth || legendBackgroundColor) {
                  if (!box) {
                    legend.box = box = renderer.rect(0, 0, legendWidth, legendHeight, options.borderRadius, legendBorderWidth || 0).attr({
                      stroke: options.borderColor,
                      'stroke-width': legendBorderWidth || 0,
                      fill: legendBackgroundColor || NONE
                    }).add(legendGroup).shadow(options.shadow);
                    box.isNew = true;
                  } else if (legendWidth > 0 && legendHeight > 0) {
                    box[box.isNew ? 'attr' : 'animate'](box.crisp({
                      width: legendWidth,
                      height: legendHeight
                    }));
                    box.isNew = false;
                  }
                  // hide the border if no items
                  box[display ? 'show' : 'hide']();
                }
                legend.legendWidth = legendWidth;
                legend.legendHeight = legendHeight;
                // Now that the legend width and height are established, put the items in the 
                // final position
                each(allItems, function (item) {
                  legend.positionItem(item);
                });
                // 1.x compatibility: positioning based on style
                /*var props = ['left', 'right', 'top', 'bottom'],
					prop,
					i = 4;
				while (i--) {
					prop = props[i];
					if (options.style[prop] && options.style[prop] !== 'auto') {
						options[i < 2 ? 'align' : 'verticalAlign'] = prop;
						options[i < 2 ? 'x' : 'y'] = pInt(options.style[prop]) * (i % 2 ? -1 : 1);
					}
				}*/
                if (display) {
                  legendGroup.align(extend({
                    width: legendWidth,
                    height: legendHeight
                  }, options), true, 'spacingBox');
                }
                if (!chart.isResizing) {
                  this.positionCheckboxes();
                }
              },
              handleOverflow: function (legendHeight) {
                var legend = this, chart = this.chart, renderer = chart.renderer, options = this.options, optionsY = options.y, alignTop = options.verticalAlign === 'top', spaceHeight = chart.spacingBox.height + (alignTop ? -optionsY : optionsY) - this.padding, maxHeight = options.maxHeight, clipHeight, clipRect = this.clipRect, navOptions = options.navigation, animation = pick(navOptions.animation, true), arrowSize = navOptions.arrowSize || 12, nav = this.nav, pages = this.pages, padding = this.padding, lastY, allItems = this.allItems, clipToHeight = function (height) {
                    clipRect.attr({ height: height });
                    // useHTML
                    if (legend.contentGroup.div) {
                      legend.contentGroup.div.style.clip = 'rect(' + padding + 'px,9999px,' + (padding + height) + 'px,0)';
                    }
                  };
                // Adjust the height
                if (options.layout === 'horizontal') {
                  spaceHeight /= 2;
                }
                if (maxHeight) {
                  spaceHeight = mathMin(spaceHeight, maxHeight);
                }
                // Reset the legend height and adjust the clipping rectangle
                pages.length = 0;
                if (legendHeight > spaceHeight) {
                  this.clipHeight = clipHeight = mathMax(spaceHeight - 20 - this.titleHeight - padding, 0);
                  this.currentPage = pick(this.currentPage, 1);
                  this.fullHeight = legendHeight;
                  // Fill pages with Y positions so that the top of each a legend item defines
                  // the scroll top for each page (#2098)
                  each(allItems, function (item, i) {
                    var y = item._legendItemPos[1], h = mathRound(item.legendItem.getBBox().height), len = pages.length;
                    if (!len || y - pages[len - 1] > clipHeight && (lastY || y) !== pages[len - 1]) {
                      pages.push(lastY || y);
                      len++;
                    }
                    if (i === allItems.length - 1 && y + h - pages[len - 1] > clipHeight) {
                      pages.push(y);
                    }
                    if (y !== lastY) {
                      lastY = y;
                    }
                  });
                  // Only apply clipping if needed. Clipping causes blurred legend in PDF export (#1787)
                  if (!clipRect) {
                    clipRect = legend.clipRect = renderer.clipRect(0, padding, 9999, 0);
                    legend.contentGroup.clip(clipRect);
                  }
                  clipToHeight(clipHeight);
                  // Add navigation elements
                  if (!nav) {
                    this.nav = nav = renderer.g().attr({ zIndex: 1 }).add(this.group);
                    this.up = renderer.symbol('triangle', 0, 0, arrowSize, arrowSize).on('click', function () {
                      legend.scroll(-1, animation);
                    }).add(nav);
                    this.pager = renderer.text('', 15, 10).css(navOptions.style).add(nav);
                    this.down = renderer.symbol('triangle-down', 0, 0, arrowSize, arrowSize).on('click', function () {
                      legend.scroll(1, animation);
                    }).add(nav);
                  }
                  // Set initial position
                  legend.scroll(0);
                  legendHeight = spaceHeight;
                } else if (nav) {
                  clipToHeight(chart.chartHeight);
                  nav.hide();
                  this.scrollGroup.attr({ translateY: 1 });
                  this.clipHeight = 0;  // #1379
                }
                return legendHeight;
              },
              scroll: function (scrollBy, animation) {
                var pages = this.pages, pageCount = pages.length, currentPage = this.currentPage + scrollBy, clipHeight = this.clipHeight, navOptions = this.options.navigation, activeColor = navOptions.activeColor, inactiveColor = navOptions.inactiveColor, pager = this.pager, padding = this.padding, scrollOffset;
                // When resizing while looking at the last page
                if (currentPage > pageCount) {
                  currentPage = pageCount;
                }
                if (currentPage > 0) {
                  if (animation !== UNDEFINED) {
                    setAnimation(animation, this.chart);
                  }
                  this.nav.attr({
                    translateX: padding,
                    translateY: clipHeight + this.padding + 7 + this.titleHeight,
                    visibility: VISIBLE
                  });
                  this.up.attr({ fill: currentPage === 1 ? inactiveColor : activeColor }).css({ cursor: currentPage === 1 ? 'default' : 'pointer' });
                  pager.attr({ text: currentPage + '/' + pageCount });
                  this.down.attr({
                    x: 18 + this.pager.getBBox().width,
                    fill: currentPage === pageCount ? inactiveColor : activeColor
                  }).css({ cursor: currentPage === pageCount ? 'default' : 'pointer' });
                  scrollOffset = -pages[currentPage - 1] + this.initialItemY;
                  this.scrollGroup.animate({ translateY: scrollOffset });
                  this.currentPage = currentPage;
                  this.positionCheckboxes(scrollOffset);
                }
              }
            };
            /*
		 * LegendSymbolMixin
		 */
            var LegendSymbolMixin = Highcharts.LegendSymbolMixin = {
                drawRectangle: function (legend, item) {
                  var symbolHeight = legend.options.symbolHeight || legend.fontMetrics.f;
                  item.legendSymbol = this.chart.renderer.rect(0, legend.baseline - symbolHeight + 1, legend.symbolWidth, symbolHeight, legend.options.symbolRadius || 0).attr({ zIndex: 3 }).add(item.legendGroup);
                },
                drawLineMarker: function (legend) {
                  var options = this.options, markerOptions = options.marker, radius, legendSymbol, symbolWidth = legend.symbolWidth, renderer = this.chart.renderer, legendItemGroup = this.legendGroup, verticalCenter = legend.baseline - mathRound(legend.fontMetrics.b * 0.3), attr;
                  // Draw the line
                  if (options.lineWidth) {
                    attr = { 'stroke-width': options.lineWidth };
                    if (options.dashStyle) {
                      attr.dashstyle = options.dashStyle;
                    }
                    this.legendLine = renderer.path([
                      M,
                      0,
                      verticalCenter,
                      L,
                      symbolWidth,
                      verticalCenter
                    ]).attr(attr).add(legendItemGroup);
                  }
                  // Draw the marker
                  if (markerOptions && markerOptions.enabled !== false) {
                    radius = markerOptions.radius;
                    this.legendSymbol = legendSymbol = renderer.symbol(this.symbol, symbolWidth / 2 - radius, verticalCenter - radius, 2 * radius, 2 * radius).add(legendItemGroup);
                    legendSymbol.isMarker = true;
                  }
                }
              };
            // Workaround for #2030, horizontal legend items not displaying in IE11 Preview,
            // and for #2580, a similar drawing flaw in Firefox 26.
            // TODO: Explore if there's a general cause for this. The problem may be related 
            // to nested group elements, as the legend item texts are within 4 group elements.
            if (/Trident\/7\.0/.test(userAgent) || isFirefox) {
              wrap(Legend.prototype, 'positionItem', function (proceed, item) {
                var legend = this, runPositionItem = function () {
                    // If chart destroyed in sync, this is undefined (#2030)
                    if (item._legendItemPos) {
                      proceed.call(legend, item);
                    }
                  };
                // Do it now, for export and to get checkbox placement
                runPositionItem();
                // Do it after to work around the core issue
                setTimeout(runPositionItem);
              });
            }
            /**
		 * The chart class
		 * @param {Object} options
		 * @param {Function} callback Function to run when the chart has loaded
		 */
            var Chart = Highcharts.Chart = function () {
                this.init.apply(this, arguments);
              };
            Chart.prototype = {
              callbacks: [],
              init: function (userOptions, callback) {
                // Handle regular options
                var options, seriesOptions = userOptions.series;
                // skip merging data points to increase performance
                userOptions.series = null;
                options = merge(defaultOptions, userOptions);
                // do the merge
                options.series = userOptions.series = seriesOptions;
                // set back the series data
                this.userOptions = userOptions;
                var optionsChart = options.chart;
                // Create margin & spacing array
                this.margin = this.splashArray('margin', optionsChart);
                this.spacing = this.splashArray('spacing', optionsChart);
                var chartEvents = optionsChart.events;
                //this.runChartClick = chartEvents && !!chartEvents.click;
                this.bounds = {
                  h: {},
                  v: {}
                };
                // Pixel data bounds for touch zoom
                this.callback = callback;
                this.isResizing = 0;
                this.options = options;
                //chartTitleOptions = UNDEFINED;
                //chartSubtitleOptions = UNDEFINED;
                this.axes = [];
                this.series = [];
                this.hasCartesianSeries = optionsChart.showAxes;
                //this.axisOffset = UNDEFINED;
                //this.maxTicks = UNDEFINED; // handle the greatest amount of ticks on grouped axes
                //this.inverted = UNDEFINED;
                //this.loadingShown = UNDEFINED;
                //this.container = UNDEFINED;
                //this.chartWidth = UNDEFINED;
                //this.chartHeight = UNDEFINED;
                //this.marginRight = UNDEFINED;
                //this.marginBottom = UNDEFINED;
                //this.containerWidth = UNDEFINED;
                //this.containerHeight = UNDEFINED;
                //this.oldChartWidth = UNDEFINED;
                //this.oldChartHeight = UNDEFINED;
                //this.renderTo = UNDEFINED;
                //this.renderToClone = UNDEFINED;
                //this.spacingBox = UNDEFINED
                //this.legend = UNDEFINED;
                // Elements
                //this.chartBackground = UNDEFINED;
                //this.plotBackground = UNDEFINED;
                //this.plotBGImage = UNDEFINED;
                //this.plotBorder = UNDEFINED;
                //this.loadingDiv = UNDEFINED;
                //this.loadingSpan = UNDEFINED;
                var chart = this, eventType;
                // Add the chart to the global lookup
                chart.index = charts.length;
                charts.push(chart);
                chartCount++;
                // Set up auto resize
                if (optionsChart.reflow !== false) {
                  addEvent(chart, 'load', function () {
                    chart.initReflow();
                  });
                }
                // Chart event handlers
                if (chartEvents) {
                  for (eventType in chartEvents) {
                    addEvent(chart, eventType, chartEvents[eventType]);
                  }
                }
                chart.xAxis = [];
                chart.yAxis = [];
                // Expose methods and variables
                chart.animation = useCanVG ? false : pick(optionsChart.animation, true);
                chart.pointCount = chart.colorCounter = chart.symbolCounter = 0;
                chart.firstRender();
              },
              initSeries: function (options) {
                var chart = this, optionsChart = chart.options.chart, type = options.type || optionsChart.type || optionsChart.defaultSeriesType, series, constr = seriesTypes[type];
                // No such series type
                if (!constr) {
                  error(17, true);
                }
                series = new constr();
                series.init(this, options);
                return series;
              },
              isInsidePlot: function (plotX, plotY, inverted) {
                var x = inverted ? plotY : plotX, y = inverted ? plotX : plotY;
                return x >= 0 && x <= this.plotWidth && y >= 0 && y <= this.plotHeight;
              },
              redraw: function (animation) {
                var chart = this, axes = chart.axes, series = chart.series, pointer = chart.pointer, legend = chart.legend, redrawLegend = chart.isDirtyLegend, hasStackedSeries, hasDirtyStacks, hasCartesianSeries = chart.hasCartesianSeries, isDirtyBox = chart.isDirtyBox,
                  // todo: check if it has actually changed?
                  seriesLength = series.length, i = seriesLength, serie, renderer = chart.renderer, isHiddenChart = renderer.isHidden(), afterRedraw = [];
                setAnimation(animation, chart);
                if (isHiddenChart) {
                  chart.cloneRenderTo();
                }
                // Adjust title layout (reflow multiline text)
                chart.layOutTitles();
                // link stacked series
                while (i--) {
                  serie = series[i];
                  if (serie.options.stacking) {
                    hasStackedSeries = true;
                    if (serie.isDirty) {
                      hasDirtyStacks = true;
                      break;
                    }
                  }
                }
                if (hasDirtyStacks) {
                  // mark others as dirty
                  i = seriesLength;
                  while (i--) {
                    serie = series[i];
                    if (serie.options.stacking) {
                      serie.isDirty = true;
                    }
                  }
                }
                // Handle updated data in the series
                each(series, function (serie) {
                  if (serie.isDirty) {
                    if (serie.options.legendType === 'point') {
                      if (serie.updateTotals) {
                        serie.updateTotals();
                      }
                      redrawLegend = true;
                    }
                  }
                });
                // handle added or removed series
                if (redrawLegend && legend.options.enabled) {
                  // series or pie points are added or removed
                  // draw legend graphics
                  legend.render();
                  chart.isDirtyLegend = false;
                }
                // reset stacks
                if (hasStackedSeries) {
                  chart.getStacks();
                }
                if (hasCartesianSeries) {
                  if (!chart.isResizing) {
                    // reset maxTicks
                    chart.maxTicks = null;
                    // set axes scales
                    each(axes, function (axis) {
                      axis.setScale();
                    });
                  }
                }
                chart.getMargins();
                // #3098
                if (hasCartesianSeries) {
                  // If one axis is dirty, all axes must be redrawn (#792, #2169)
                  each(axes, function (axis) {
                    if (axis.isDirty) {
                      isDirtyBox = true;
                    }
                  });
                  // redraw axes
                  each(axes, function (axis) {
                    // Fire 'afterSetExtremes' only if extremes are set
                    var key = axis.min + ',' + axis.max;
                    if (axis.extKey !== key) {
                      // #821, #4452
                      axis.extKey = key;
                      afterRedraw.push(function () {
                        // prevent a recursive call to chart.redraw() (#1119)
                        fireEvent(axis, 'afterSetExtremes', extend(axis.eventArgs, axis.getExtremes()));
                        // #747, #751
                        delete axis.eventArgs;
                      });
                    }
                    if (isDirtyBox || hasStackedSeries) {
                      axis.redraw();
                    }
                  });
                }
                // the plot areas size has changed
                if (isDirtyBox) {
                  chart.drawChartBox();
                }
                // redraw affected series
                each(series, function (serie) {
                  if (serie.isDirty && serie.visible && (!serie.isCartesian || serie.xAxis)) {
                    // issue #153
                    serie.redraw();
                  }
                });
                // move tooltip or reset
                if (pointer) {
                  pointer.reset(true);
                }
                // redraw if canvas
                renderer.draw();
                // fire the event
                fireEvent(chart, 'redraw');
                // jQuery breaks this when calling it from addEvent. Overwrites chart.redraw
                if (isHiddenChart) {
                  chart.cloneRenderTo(true);
                }
                // Fire callbacks that are put on hold until after the redraw
                each(afterRedraw, function (callback) {
                  callback.call();
                });
              },
              get: function (id) {
                var chart = this, axes = chart.axes, series = chart.series;
                var i, j, points;
                // search axes
                for (i = 0; i < axes.length; i++) {
                  if (axes[i].options.id === id) {
                    return axes[i];
                  }
                }
                // search series
                for (i = 0; i < series.length; i++) {
                  if (series[i].options.id === id) {
                    return series[i];
                  }
                }
                // search points
                for (i = 0; i < series.length; i++) {
                  points = series[i].points || [];
                  for (j = 0; j < points.length; j++) {
                    if (points[j].id === id) {
                      return points[j];
                    }
                  }
                }
                return null;
              },
              getAxes: function () {
                var chart = this, options = this.options, xAxisOptions = options.xAxis = splat(options.xAxis || {}), yAxisOptions = options.yAxis = splat(options.yAxis || {}), optionsArray, axis;
                // make sure the options are arrays and add some members
                each(xAxisOptions, function (axis, i) {
                  axis.index = i;
                  axis.isX = true;
                });
                each(yAxisOptions, function (axis, i) {
                  axis.index = i;
                });
                // concatenate all axis options into one array
                optionsArray = xAxisOptions.concat(yAxisOptions);
                each(optionsArray, function (axisOptions) {
                  axis = new Axis(chart, axisOptions);
                });
              },
              getSelectedPoints: function () {
                var points = [];
                each(this.series, function (serie) {
                  points = points.concat(grep(serie.points || [], function (point) {
                    return point.selected;
                  }));
                });
                return points;
              },
              getSelectedSeries: function () {
                return grep(this.series, function (serie) {
                  return serie.selected;
                });
              },
              setTitle: function (titleOptions, subtitleOptions, redraw) {
                var chart = this, options = chart.options, chartTitleOptions, chartSubtitleOptions;
                chartTitleOptions = options.title = merge(options.title, titleOptions);
                chartSubtitleOptions = options.subtitle = merge(options.subtitle, subtitleOptions);
                // add title and subtitle
                each([
                  [
                    'title',
                    titleOptions,
                    chartTitleOptions
                  ],
                  [
                    'subtitle',
                    subtitleOptions,
                    chartSubtitleOptions
                  ]
                ], function (arr) {
                  var name = arr[0], title = chart[name], titleOptions = arr[1], chartTitleOptions = arr[2];
                  if (title && titleOptions) {
                    chart[name] = title = title.destroy();  // remove old
                  }
                  if (chartTitleOptions && chartTitleOptions.text && !title) {
                    chart[name] = chart.renderer.text(chartTitleOptions.text, 0, 0, chartTitleOptions.useHTML).attr({
                      align: chartTitleOptions.align,
                      'class': PREFIX + name,
                      zIndex: chartTitleOptions.zIndex || 4
                    }).css(chartTitleOptions.style).add();
                  }
                });
                chart.layOutTitles(redraw);
              },
              layOutTitles: function (redraw) {
                var titleOffset = 0, title = this.title, subtitle = this.subtitle, options = this.options, titleOptions = options.title, subtitleOptions = options.subtitle, requiresDirtyBox, renderer = this.renderer, autoWidth = this.spacingBox.width - 44;
                // 44 makes room for default context button
                if (title) {
                  title.css({ width: (titleOptions.width || autoWidth) + PX }).align(extend({ y: renderer.fontMetrics(titleOptions.style.fontSize, title).b - 3 }, titleOptions), false, 'spacingBox');
                  if (!titleOptions.floating && !titleOptions.verticalAlign) {
                    titleOffset = title.getBBox().height;
                  }
                }
                if (subtitle) {
                  subtitle.css({ width: (subtitleOptions.width || autoWidth) + PX }).align(extend({ y: titleOffset + (titleOptions.margin - 13) + renderer.fontMetrics(subtitleOptions.style.fontSize, title).b }, subtitleOptions), false, 'spacingBox');
                  if (!subtitleOptions.floating && !subtitleOptions.verticalAlign) {
                    titleOffset = mathCeil(titleOffset + subtitle.getBBox().height);
                  }
                }
                requiresDirtyBox = this.titleOffset !== titleOffset;
                this.titleOffset = titleOffset;
                // used in getMargins
                if (!this.isDirtyBox && requiresDirtyBox) {
                  this.isDirtyBox = requiresDirtyBox;
                  // Redraw if necessary (#2719, #2744)		
                  if (this.hasRendered && pick(redraw, true) && this.isDirtyBox) {
                    this.redraw();
                  }
                }
              },
              getChartSize: function () {
                var chart = this, optionsChart = chart.options.chart, widthOption = optionsChart.width, heightOption = optionsChart.height, renderTo = chart.renderToClone || chart.renderTo;
                // get inner width and height from jQuery (#824)
                if (!defined(widthOption)) {
                  chart.containerWidth = adapterRun(renderTo, 'width');
                }
                if (!defined(heightOption)) {
                  chart.containerHeight = adapterRun(renderTo, 'height');
                }
                chart.chartWidth = mathMax(0, widthOption || chart.containerWidth || 600);
                // #1393, 1460
                chart.chartHeight = mathMax(0, pick(heightOption, chart.containerHeight > 19 ? chart.containerHeight : 400));
              },
              cloneRenderTo: function (revert) {
                var clone = this.renderToClone, container = this.container;
                // Destroy the clone and bring the container back to the real renderTo div
                if (revert) {
                  if (clone) {
                    this.renderTo.appendChild(container);
                    discardElement(clone);
                    delete this.renderToClone;
                  }  // Set up the clone
                } else {
                  if (container && container.parentNode === this.renderTo) {
                    this.renderTo.removeChild(container);  // do not clone this
                  }
                  this.renderToClone = clone = this.renderTo.cloneNode(0);
                  css(clone, {
                    position: ABSOLUTE,
                    top: '-9999px',
                    display: 'block'
                  });
                  if (clone.style.setProperty) {
                    // #2631
                    clone.style.setProperty('display', 'block', 'important');
                  }
                  doc.body.appendChild(clone);
                  if (container) {
                    clone.appendChild(container);
                  }
                }
              },
              getContainer: function () {
                var chart = this, container, options = chart.options, optionsChart = options.chart, chartWidth, chartHeight, renderTo, indexAttrName = 'data-highcharts-chart', oldChartIndex, Ren, containerId;
                chart.renderTo = renderTo = optionsChart.renderTo;
                containerId = PREFIX + idCounter++;
                if (isString(renderTo)) {
                  chart.renderTo = renderTo = doc.getElementById(renderTo);
                }
                // Display an error if the renderTo is wrong
                if (!renderTo) {
                  error(13, true);
                }
                // If the container already holds a chart, destroy it. The check for hasRendered is there
                // because web pages that are saved to disk from the browser, will preserve the data-highcharts-chart
                // attribute and the SVG contents, but not an interactive chart. So in this case,
                // charts[oldChartIndex] will point to the wrong chart if any (#2609).
                oldChartIndex = pInt(attr(renderTo, indexAttrName));
                if (!isNaN(oldChartIndex) && charts[oldChartIndex] && charts[oldChartIndex].hasRendered) {
                  charts[oldChartIndex].destroy();
                }
                // Make a reference to the chart from the div
                attr(renderTo, indexAttrName, chart.index);
                // remove previous chart
                renderTo.innerHTML = '';
                // If the container doesn't have an offsetWidth, it has or is a child of a node
                // that has display:none. We need to temporarily move it out to a visible
                // state to determine the size, else the legend and tooltips won't render
                // properly. The allowClone option is used in sparklines as a micro optimization,
                // saving about 1-2 ms each chart.
                if (!optionsChart.skipClone && !renderTo.offsetWidth) {
                  chart.cloneRenderTo();
                }
                // get the width and height
                chart.getChartSize();
                chartWidth = chart.chartWidth;
                chartHeight = chart.chartHeight;
                // create the inner container
                chart.container = container = createElement(DIV, {
                  className: PREFIX + 'container' + (optionsChart.className ? ' ' + optionsChart.className : ''),
                  id: containerId
                }, extend({
                  position: RELATIVE,
                  overflow: HIDDEN,
                  width: chartWidth + PX,
                  height: chartHeight + PX,
                  textAlign: 'left',
                  lineHeight: 'normal',
                  zIndex: 0,
                  '-webkit-tap-highlight-color': 'rgba(0,0,0,0)'
                }, optionsChart.style), chart.renderToClone || renderTo);
                // cache the cursor (#1650)
                chart._cursor = container.style.cursor;
                // Initialize the renderer
                Ren = Highcharts[optionsChart.renderer] || Renderer;
                chart.renderer = new Ren(container, chartWidth, chartHeight, optionsChart.style, optionsChart.forExport, options.exporting && options.exporting.allowHTML);
                if (useCanVG) {
                  // If we need canvg library, extend and configure the renderer
                  // to get the tracker for translating mouse events
                  chart.renderer.create(chart, container, chartWidth, chartHeight);
                }
                // Add a reference to the charts index
                chart.renderer.chartIndex = chart.index;
              },
              getMargins: function (skipAxes) {
                var chart = this, spacing = chart.spacing, margin = chart.margin, titleOffset = chart.titleOffset;
                chart.resetMargins();
                // Adjust for title and subtitle
                if (titleOffset && !defined(margin[0])) {
                  chart.plotTop = mathMax(chart.plotTop, titleOffset + chart.options.title.margin + spacing[0]);
                }
                // Adjust for legend
                chart.legend.adjustMargins(margin, spacing);
                // adjust for scroller
                if (chart.extraBottomMargin) {
                  chart.marginBottom += chart.extraBottomMargin;
                }
                if (chart.extraTopMargin) {
                  chart.plotTop += chart.extraTopMargin;
                }
                if (!skipAxes) {
                  this.getAxisMargins();
                }
              },
              getAxisMargins: function () {
                var chart = this, axisOffset = chart.axisOffset = [
                    0,
                    0,
                    0,
                    0
                  ],
                  // top, right, bottom, left
                  margin = chart.margin;
                // pre-render axes to get labels offset width
                if (chart.hasCartesianSeries) {
                  each(chart.axes, function (axis) {
                    if (axis.visible) {
                      axis.getOffset();
                    }
                  });
                }
                // Add the axis offsets
                each(marginNames, function (m, side) {
                  if (!defined(margin[side])) {
                    chart[m] += axisOffset[side];
                  }
                });
                chart.setChartSize();
              },
              reflow: function (e) {
                var chart = this, optionsChart = chart.options.chart, renderTo = chart.renderTo, width = optionsChart.width || adapterRun(renderTo, 'width'), height = optionsChart.height || adapterRun(renderTo, 'height'), target = e ? e.target : win,
                  // #805 - MooTools doesn't supply e
                  doReflow = function () {
                    if (chart.container) {
                      // It may have been destroyed in the meantime (#1257)
                      chart.setSize(width, height, false);
                      chart.hasUserSize = null;
                    }
                  };
                // Width and height checks for display:none. Target is doc in IE8 and Opera,
                // win in Firefox, Chrome and IE9.
                if (!chart.hasUserSize && !chart.isPrinting && width && height && (target === win || target === doc)) {
                  // #1093
                  if (width !== chart.containerWidth || height !== chart.containerHeight) {
                    clearTimeout(chart.reflowTimeout);
                    if (e) {
                      // Called from window.resize
                      chart.reflowTimeout = setTimeout(doReflow, 100);
                    } else {
                      // Called directly (#2224)
                      doReflow();
                    }
                  }
                  chart.containerWidth = width;
                  chart.containerHeight = height;
                }
              },
              initReflow: function () {
                var chart = this, reflow = function (e) {
                    chart.reflow(e);
                  };
                addEvent(win, 'resize', reflow);
                addEvent(chart, 'destroy', function () {
                  removeEvent(win, 'resize', reflow);
                });
              },
              setSize: function (width, height, animation) {
                var chart = this, chartWidth, chartHeight, fireEndResize, renderer = chart.renderer, globalAnimation;
                // Handle the isResizing counter
                chart.isResizing += 1;
                fireEndResize = function () {
                  if (chart) {
                    fireEvent(chart, 'endResize', null, function () {
                      chart.isResizing -= 1;
                    });
                  }
                };
                // set the animation for the current process
                setAnimation(animation, chart);
                chart.oldChartHeight = chart.chartHeight;
                chart.oldChartWidth = chart.chartWidth;
                if (defined(width)) {
                  chart.chartWidth = chartWidth = mathMax(0, mathRound(width));
                  chart.hasUserSize = !!chartWidth;
                }
                if (defined(height)) {
                  chart.chartHeight = chartHeight = mathMax(0, mathRound(height));
                }
                // Resize the container with the global animation applied if enabled (#2503)
                globalAnimation = renderer.globalAnimation;
                (globalAnimation ? animate : css)(chart.container, {
                  width: chartWidth + PX,
                  height: chartHeight + PX
                }, globalAnimation);
                chart.setChartSize(true);
                renderer.setSize(chartWidth, chartHeight, animation);
                // handle axes
                chart.maxTicks = null;
                each(chart.axes, function (axis) {
                  axis.isDirty = true;
                  axis.setScale();
                });
                // make sure non-cartesian series are also handled
                each(chart.series, function (serie) {
                  serie.isDirty = true;
                });
                chart.isDirtyLegend = true;
                // force legend redraw
                chart.isDirtyBox = true;
                // force redraw of plot and chart border
                chart.layOutTitles();
                // #2857
                chart.getMargins();
                chart.redraw(animation);
                chart.oldChartHeight = null;
                fireEvent(chart, 'resize');
                // Fire endResize and set isResizing back. If animation is disabled, fire without delay
                globalAnimation = renderer.globalAnimation;
                // Reassign it before using it, it may have changed since the top of this function.
                if (globalAnimation === false) {
                  fireEndResize();
                } else {
                  // else set a timeout with the animation duration
                  setTimeout(fireEndResize, globalAnimation && globalAnimation.duration || 500);
                }
              },
              setChartSize: function (skipAxes) {
                var chart = this, inverted = chart.inverted, renderer = chart.renderer, chartWidth = chart.chartWidth, chartHeight = chart.chartHeight, optionsChart = chart.options.chart, spacing = chart.spacing, clipOffset = chart.clipOffset, clipX, clipY, plotLeft, plotTop, plotWidth, plotHeight, plotBorderWidth;
                chart.plotLeft = plotLeft = mathRound(chart.plotLeft);
                chart.plotTop = plotTop = mathRound(chart.plotTop);
                chart.plotWidth = plotWidth = mathMax(0, mathRound(chartWidth - plotLeft - chart.marginRight));
                chart.plotHeight = plotHeight = mathMax(0, mathRound(chartHeight - plotTop - chart.marginBottom));
                chart.plotSizeX = inverted ? plotHeight : plotWidth;
                chart.plotSizeY = inverted ? plotWidth : plotHeight;
                chart.plotBorderWidth = optionsChart.plotBorderWidth || 0;
                // Set boxes used for alignment
                chart.spacingBox = renderer.spacingBox = {
                  x: spacing[3],
                  y: spacing[0],
                  width: chartWidth - spacing[3] - spacing[1],
                  height: chartHeight - spacing[0] - spacing[2]
                };
                chart.plotBox = renderer.plotBox = {
                  x: plotLeft,
                  y: plotTop,
                  width: plotWidth,
                  height: plotHeight
                };
                plotBorderWidth = 2 * mathFloor(chart.plotBorderWidth / 2);
                clipX = mathCeil(mathMax(plotBorderWidth, clipOffset[3]) / 2);
                clipY = mathCeil(mathMax(plotBorderWidth, clipOffset[0]) / 2);
                chart.clipBox = {
                  x: clipX,
                  y: clipY,
                  width: mathFloor(chart.plotSizeX - mathMax(plotBorderWidth, clipOffset[1]) / 2 - clipX),
                  height: mathMax(0, mathFloor(chart.plotSizeY - mathMax(plotBorderWidth, clipOffset[2]) / 2 - clipY))
                };
                if (!skipAxes) {
                  each(chart.axes, function (axis) {
                    axis.setAxisSize();
                    axis.setAxisTranslation();
                  });
                }
              },
              resetMargins: function () {
                var chart = this;
                each(marginNames, function (m, side) {
                  chart[m] = pick(chart.margin[side], chart.spacing[side]);
                });
                chart.axisOffset = [
                  0,
                  0,
                  0,
                  0
                ];
                // top, right, bottom, left
                chart.clipOffset = [
                  0,
                  0,
                  0,
                  0
                ];
              },
              drawChartBox: function () {
                var chart = this, optionsChart = chart.options.chart, renderer = chart.renderer, chartWidth = chart.chartWidth, chartHeight = chart.chartHeight, chartBackground = chart.chartBackground, plotBackground = chart.plotBackground, plotBorder = chart.plotBorder, plotBGImage = chart.plotBGImage, chartBorderWidth = optionsChart.borderWidth || 0, chartBackgroundColor = optionsChart.backgroundColor, plotBackgroundColor = optionsChart.plotBackgroundColor, plotBackgroundImage = optionsChart.plotBackgroundImage, plotBorderWidth = optionsChart.plotBorderWidth || 0, mgn, bgAttr, plotLeft = chart.plotLeft, plotTop = chart.plotTop, plotWidth = chart.plotWidth, plotHeight = chart.plotHeight, plotBox = chart.plotBox, clipRect = chart.clipRect, clipBox = chart.clipBox;
                // Chart area
                mgn = chartBorderWidth + (optionsChart.shadow ? 8 : 0);
                if (chartBorderWidth || chartBackgroundColor) {
                  if (!chartBackground) {
                    bgAttr = { fill: chartBackgroundColor || NONE };
                    if (chartBorderWidth) {
                      // #980
                      bgAttr.stroke = optionsChart.borderColor;
                      bgAttr['stroke-width'] = chartBorderWidth;
                    }
                    chart.chartBackground = renderer.rect(mgn / 2, mgn / 2, chartWidth - mgn, chartHeight - mgn, optionsChart.borderRadius, chartBorderWidth).attr(bgAttr).addClass(PREFIX + 'background').add().shadow(optionsChart.shadow);
                  } else {
                    // resize
                    chartBackground.animate(chartBackground.crisp({
                      width: chartWidth - mgn,
                      height: chartHeight - mgn
                    }));
                  }
                }
                // Plot background
                if (plotBackgroundColor) {
                  if (!plotBackground) {
                    chart.plotBackground = renderer.rect(plotLeft, plotTop, plotWidth, plotHeight, 0).attr({ fill: plotBackgroundColor }).add().shadow(optionsChart.plotShadow);
                  } else {
                    plotBackground.animate(plotBox);
                  }
                }
                if (plotBackgroundImage) {
                  if (!plotBGImage) {
                    chart.plotBGImage = renderer.image(plotBackgroundImage, plotLeft, plotTop, plotWidth, plotHeight).add();
                  } else {
                    plotBGImage.animate(plotBox);
                  }
                }
                // Plot clip
                if (!clipRect) {
                  chart.clipRect = renderer.clipRect(clipBox);
                } else {
                  clipRect.animate({
                    width: clipBox.width,
                    height: clipBox.height
                  });
                }
                // Plot area border
                if (plotBorderWidth) {
                  if (!plotBorder) {
                    chart.plotBorder = renderer.rect(plotLeft, plotTop, plotWidth, plotHeight, 0, -plotBorderWidth).attr({
                      stroke: optionsChart.plotBorderColor,
                      'stroke-width': plotBorderWidth,
                      fill: NONE,
                      zIndex: 1
                    }).add();
                  } else {
                    plotBorder.animate(plotBorder.crisp({
                      x: plotLeft,
                      y: plotTop,
                      width: plotWidth,
                      height: plotHeight,
                      strokeWidth: -plotBorderWidth
                    }));
                  }
                }
                // reset
                chart.isDirtyBox = false;
              },
              propFromSeries: function () {
                var chart = this, optionsChart = chart.options.chart, klass, seriesOptions = chart.options.series, i, value;
                each([
                  'inverted',
                  'angular',
                  'polar'
                ], function (key) {
                  // The default series type's class
                  klass = seriesTypes[optionsChart.type || optionsChart.defaultSeriesType];
                  // Get the value from available chart-wide properties
                  value = chart[key] || optionsChart[key] || klass && klass.prototype[key];
                  // 4. Check if any the chart's series require it
                  i = seriesOptions && seriesOptions.length;
                  while (!value && i--) {
                    klass = seriesTypes[seriesOptions[i].type];
                    if (klass && klass.prototype[key]) {
                      value = true;
                    }
                  }
                  // Set the chart property
                  chart[key] = value;
                });
              },
              linkSeries: function () {
                var chart = this, chartSeries = chart.series;
                // Reset links
                each(chartSeries, function (series) {
                  series.linkedSeries.length = 0;
                });
                // Apply new links
                each(chartSeries, function (series) {
                  var linkedTo = series.options.linkedTo;
                  if (isString(linkedTo)) {
                    if (linkedTo === ':previous') {
                      linkedTo = chart.series[series.index - 1];
                    } else {
                      linkedTo = chart.get(linkedTo);
                    }
                    if (linkedTo) {
                      linkedTo.linkedSeries.push(series);
                      series.linkedParent = linkedTo;
                      series.visible = pick(series.options.visible, linkedTo.options.visible, series.visible);  // #3879
                    }
                  }
                });
              },
              renderSeries: function () {
                each(this.series, function (serie) {
                  serie.translate();
                  serie.render();
                });
              },
              renderLabels: function () {
                var chart = this, labels = chart.options.labels;
                if (labels.items) {
                  each(labels.items, function (label) {
                    var style = extend(labels.style, label.style), x = pInt(style.left) + chart.plotLeft, y = pInt(style.top) + chart.plotTop + 12;
                    // delete to prevent rewriting in IE
                    delete style.left;
                    delete style.top;
                    chart.renderer.text(label.html, x, y).attr({ zIndex: 2 }).css(style).add();
                  });
                }
              },
              render: function () {
                var chart = this, axes = chart.axes, renderer = chart.renderer, options = chart.options, tempWidth, tempHeight, redoHorizontal, redoVertical;
                // Title
                chart.setTitle();
                // Legend
                chart.legend = new Legend(chart, options.legend);
                // Get stacks
                if (chart.getStacks) {
                  chart.getStacks();
                }
                // Get chart margins
                chart.getMargins(true);
                chart.setChartSize();
                // Record preliminary dimensions for later comparison
                tempWidth = chart.plotWidth;
                tempHeight = chart.plotHeight = chart.plotHeight - 13;
                // 13 is the most common height of X axis labels
                // Get margins by pre-rendering axes
                each(axes, function (axis) {
                  axis.setScale();
                });
                chart.getAxisMargins();
                // If the plot area size has changed significantly, calculate tick positions again
                redoHorizontal = tempWidth / chart.plotWidth > 1.1;
                redoVertical = tempHeight / chart.plotHeight > 1.1;
                if (redoHorizontal || redoVertical) {
                  chart.maxTicks = null;
                  // reset for second pass
                  each(axes, function (axis) {
                    if (axis.horiz && redoHorizontal || !axis.horiz && redoVertical) {
                      axis.setTickInterval(true);  // update to reflect the new margins
                    }
                  });
                  chart.getMargins();  // second pass to check for new labels
                }
                // Draw the borders and backgrounds
                chart.drawChartBox();
                // Axes
                if (chart.hasCartesianSeries) {
                  each(axes, function (axis) {
                    if (axis.visible) {
                      axis.render();
                    }
                  });
                }
                // The series
                if (!chart.seriesGroup) {
                  chart.seriesGroup = renderer.g('series-group').attr({ zIndex: 3 }).add();
                }
                chart.renderSeries();
                // Labels
                chart.renderLabels();
                // Credits
                chart.showCredits(options.credits);
                // Set flag
                chart.hasRendered = true;
              },
              showCredits: function (credits) {
                if (credits.enabled && !this.credits) {
                  this.credits = this.renderer.text(credits.text, 0, 0).on('click', function () {
                    if (credits.href) {
                      location.href = credits.href;
                    }
                  }).attr({
                    align: credits.position.align,
                    zIndex: 8
                  }).css(credits.style).add().align(credits.position);
                }
              },
              destroy: function () {
                var chart = this, axes = chart.axes, series = chart.series, container = chart.container, i, parentNode = container && container.parentNode;
                // fire the chart.destoy event
                fireEvent(chart, 'destroy');
                // Delete the chart from charts lookup array
                charts[chart.index] = UNDEFINED;
                chartCount--;
                chart.renderTo.removeAttribute('data-highcharts-chart');
                // remove events
                removeEvent(chart);
                // ==== Destroy collections:
                // Destroy axes
                i = axes.length;
                while (i--) {
                  axes[i] = axes[i].destroy();
                }
                // Destroy each series
                i = series.length;
                while (i--) {
                  series[i] = series[i].destroy();
                }
                // ==== Destroy chart properties:
                each([
                  'title',
                  'subtitle',
                  'chartBackground',
                  'plotBackground',
                  'plotBGImage',
                  'plotBorder',
                  'seriesGroup',
                  'clipRect',
                  'credits',
                  'pointer',
                  'scroller',
                  'rangeSelector',
                  'legend',
                  'resetZoomButton',
                  'tooltip',
                  'renderer'
                ], function (name) {
                  var prop = chart[name];
                  if (prop && prop.destroy) {
                    chart[name] = prop.destroy();
                  }
                });
                // remove container and all SVG
                if (container) {
                  // can break in IE when destroyed before finished loading
                  container.innerHTML = '';
                  removeEvent(container);
                  if (parentNode) {
                    discardElement(container);
                  }
                }
                // clean it all up
                for (i in chart) {
                  delete chart[i];
                }
              },
              isReadyToRender: function () {
                var chart = this;
                // Note: in spite of JSLint's complaints, win == win.top is required
                /*jslint eqeq: true*/
                if (!hasSVG && (win == win.top && doc.readyState !== 'complete') || useCanVG && !win.canvg) {
                  /*jslint eqeq: false*/
                  if (useCanVG) {
                    // Delay rendering until canvg library is downloaded and ready
                    CanVGController.push(function () {
                      chart.firstRender();
                    }, chart.options.global.canvasToolsURL);
                  } else {
                    doc.attachEvent('onreadystatechange', function () {
                      doc.detachEvent('onreadystatechange', chart.firstRender);
                      if (doc.readyState === 'complete') {
                        chart.firstRender();
                      }
                    });
                  }
                  return false;
                }
                return true;
              },
              firstRender: function () {
                var chart = this, options = chart.options, callback = chart.callback;
                // Check whether the chart is ready to render
                if (!chart.isReadyToRender()) {
                  return;
                }
                // Create the container
                chart.getContainer();
                // Run an early event after the container and renderer are established
                fireEvent(chart, 'init');
                chart.resetMargins();
                chart.setChartSize();
                // Set the common chart properties (mainly invert) from the given series
                chart.propFromSeries();
                // get axes
                chart.getAxes();
                // Initialize the series
                each(options.series || [], function (serieOptions) {
                  chart.initSeries(serieOptions);
                });
                chart.linkSeries();
                // Run an event after axes and series are initialized, but before render. At this stage,
                // the series data is indexed and cached in the xData and yData arrays, so we can access
                // those before rendering. Used in Highstock. 
                fireEvent(chart, 'beforeRender');
                // depends on inverted and on margins being set
                if (Highcharts.Pointer) {
                  chart.pointer = new Pointer(chart, options);
                }
                chart.render();
                // add canvas
                chart.renderer.draw();
                // run callbacks
                if (callback) {
                  callback.apply(chart, [chart]);
                }
                each(chart.callbacks, function (fn) {
                  if (chart.index !== UNDEFINED) {
                    // Chart destroyed in its own callback (#3600)
                    fn.apply(chart, [chart]);
                  }
                });
                // Fire the load event
                fireEvent(chart, 'load');
                // If the chart was rendered outside the top container, put it back in (#3679)
                chart.cloneRenderTo(true);
              },
              splashArray: function (target, options) {
                var oVar = options[target], tArray = isObject(oVar) ? oVar : [
                    oVar,
                    oVar,
                    oVar,
                    oVar
                  ];
                return [
                  pick(options[target + 'Top'], tArray[0]),
                  pick(options[target + 'Right'], tArray[1]),
                  pick(options[target + 'Bottom'], tArray[2]),
                  pick(options[target + 'Left'], tArray[3])
                ];
              }
            };
            // end Chart
            var CenteredSeriesMixin = Highcharts.CenteredSeriesMixin = {
                getCenter: function () {
                  var options = this.options, chart = this.chart, slicingRoom = 2 * (options.slicedOffset || 0), handleSlicingRoom, plotWidth = chart.plotWidth - 2 * slicingRoom, plotHeight = chart.plotHeight - 2 * slicingRoom, centerOption = options.center, positions = [
                      pick(centerOption[0], '50%'),
                      pick(centerOption[1], '50%'),
                      options.size || '100%',
                      options.innerSize || 0
                    ], smallestSize = mathMin(plotWidth, plotHeight), i, value;
                  for (i = 0; i < 4; ++i) {
                    value = positions[i];
                    handleSlicingRoom = i < 2 || i === 2 && /%$/.test(value);
                    // i == 0: centerX, relative to width
                    // i == 1: centerY, relative to height
                    // i == 2: size, relative to smallestSize
                    // i == 3: innerSize, relative to size
                    positions[i] = relativeLength(value, [
                      plotWidth,
                      plotHeight,
                      smallestSize,
                      positions[2]
                    ][i]) + (handleSlicingRoom ? slicingRoom : 0);
                  }
                  // innerSize cannot be larger than size (#3632)
                  if (positions[3] > positions[2]) {
                    positions[3] = positions[2];
                  }
                  return positions;
                }
              };
            /**
		 * The Point object and prototype. Inheritable and used as base for PiePoint
		 */
            var Point = function () {
            };
            Point.prototype = {
              init: function (series, options, x) {
                var point = this, colors;
                point.series = series;
                point.color = series.color;
                // #3445
                point.applyOptions(options, x);
                point.pointAttr = {};
                if (series.options.colorByPoint) {
                  colors = series.options.colors || series.chart.options.colors;
                  point.color = point.color || colors[series.colorCounter++];
                  // loop back to zero
                  if (series.colorCounter === colors.length) {
                    series.colorCounter = 0;
                  }
                }
                series.chart.pointCount++;
                return point;
              },
              applyOptions: function (options, x) {
                var point = this, series = point.series, pointValKey = series.options.pointValKey || series.pointValKey;
                options = Point.prototype.optionsToObject.call(this, options);
                // copy options directly to point
                extend(point, options);
                point.options = point.options ? extend(point.options, options) : options;
                // For higher dimension series types. For instance, for ranges, point.y is mapped to point.low.
                if (pointValKey) {
                  point.y = point[pointValKey];
                }
                // If no x is set by now, get auto incremented value. All points must have an
                // x value, however the y value can be null to create a gap in the series
                if (point.x === UNDEFINED && series) {
                  point.x = x === UNDEFINED ? series.autoIncrement() : x;
                }
                return point;
              },
              optionsToObject: function (options) {
                var ret = {}, series = this.series, keys = series.options.keys, pointArrayMap = keys || series.pointArrayMap || ['y'], valueCount = pointArrayMap.length, firstItemType, i = 0, j = 0;
                if (typeof options === 'number' || options === null) {
                  ret[pointArrayMap[0]] = options;
                } else if (isArray(options)) {
                  // with leading x value
                  if (!keys && options.length > valueCount) {
                    firstItemType = typeof options[0];
                    if (firstItemType === 'string') {
                      ret.name = options[0];
                    } else if (firstItemType === 'number') {
                      ret.x = options[0];
                    }
                    i++;
                  }
                  while (j < valueCount) {
                    if (!keys || options[i] !== undefined) {
                      // Skip undefined positions for keys
                      ret[pointArrayMap[j]] = options[i];
                    }
                    i++;
                    j++;
                  }
                } else if (typeof options === 'object') {
                  ret = options;
                  // This is the fastest way to detect if there are individual point dataLabels that need
                  // to be considered in drawDataLabels. These can only occur in object configs.
                  if (options.dataLabels) {
                    series._hasPointLabels = true;
                  }
                  // Same approach as above for markers
                  if (options.marker) {
                    series._hasPointMarkers = true;
                  }
                }
                return ret;
              },
              destroy: function () {
                var point = this, series = point.series, chart = series.chart, hoverPoints = chart.hoverPoints, prop;
                chart.pointCount--;
                if (hoverPoints) {
                  point.setState();
                  erase(hoverPoints, point);
                  if (!hoverPoints.length) {
                    chart.hoverPoints = null;
                  }
                }
                if (point === chart.hoverPoint) {
                  point.onMouseOut();
                }
                // remove all events
                if (point.graphic || point.dataLabel) {
                  // removeEvent and destroyElements are performance expensive
                  removeEvent(point);
                  point.destroyElements();
                }
                if (point.legendItem) {
                  // pies have legend items
                  chart.legend.destroyItem(point);
                }
                for (prop in point) {
                  point[prop] = null;
                }
              },
              destroyElements: function () {
                var point = this, props = [
                    'graphic',
                    'dataLabel',
                    'dataLabelUpper',
                    'connector',
                    'shadowGroup'
                  ], prop, i = 6;
                while (i--) {
                  prop = props[i];
                  if (point[prop]) {
                    point[prop] = point[prop].destroy();
                  }
                }
              },
              getLabelConfig: function () {
                return {
                  x: this.category,
                  y: this.y,
                  color: this.color,
                  key: this.name || this.category,
                  series: this.series,
                  point: this,
                  percentage: this.percentage,
                  total: this.total || this.stackTotal
                };
              },
              tooltipFormatter: function (pointFormat) {
                // Insert options for valueDecimals, valuePrefix, and valueSuffix
                var series = this.series, seriesTooltipOptions = series.tooltipOptions, valueDecimals = pick(seriesTooltipOptions.valueDecimals, ''), valuePrefix = seriesTooltipOptions.valuePrefix || '', valueSuffix = seriesTooltipOptions.valueSuffix || '';
                // Loop over the point array map and replace unformatted values with sprintf formatting markup
                each(series.pointArrayMap || ['y'], function (key) {
                  key = '{point.' + key;
                  // without the closing bracket
                  if (valuePrefix || valueSuffix) {
                    pointFormat = pointFormat.replace(key + '}', valuePrefix + key + '}' + valueSuffix);
                  }
                  pointFormat = pointFormat.replace(key + '}', key + ':,.' + valueDecimals + 'f}');
                });
                return format(pointFormat, {
                  point: this,
                  series: this.series
                });
              },
              firePointEvent: function (eventType, eventArgs, defaultFunction) {
                var point = this, series = this.series, seriesOptions = series.options;
                // load event handlers on demand to save time on mouseover/out
                if (seriesOptions.point.events[eventType] || point.options && point.options.events && point.options.events[eventType]) {
                  this.importEvents();
                }
                // add default handler if in selection mode
                if (eventType === 'click' && seriesOptions.allowPointSelect) {
                  defaultFunction = function (event) {
                    // Control key is for Windows, meta (= Cmd key) for Mac, Shift for Opera
                    if (point.select) {
                      // Could be destroyed by prior event handlers (#2911)
                      point.select(null, event.ctrlKey || event.metaKey || event.shiftKey);
                    }
                  };
                }
                fireEvent(this, eventType, eventArgs, defaultFunction);
              },
              visible: true
            };
            /**
		 * @classDescription The base function which all other series types inherit from. The data in the series is stored
		 * in various arrays.
		 *
		 * - First, series.options.data contains all the original config options for
		 * each point whether added by options or methods like series.addPoint.
		 * - Next, series.data contains those values converted to points, but in case the series data length
		 * exceeds the cropThreshold, or if the data is grouped, series.data doesn't contain all the points. It
		 * only contains the points that have been created on demand.
		 * - Then there's series.points that contains all currently visible point objects. In case of cropping,
		 * the cropped-away points are not part of this array. The series.points array starts at series.cropStart
		 * compared to series.data and series.options.data. If however the series data is grouped, these can't
		 * be correlated one to one.
		 * - series.xData and series.processedXData contain clean x values, equivalent to series.data and series.points.
		 * - series.yData and series.processedYData contain clean x values, equivalent to series.data and series.points.
		 *
		 * @param {Object} chart
		 * @param {Object} options
		 */
            var Series = Highcharts.Series = function () {
              };
            Series.prototype = {
              isCartesian: true,
              type: 'line',
              pointClass: Point,
              sorted: true,
              requireSorting: true,
              pointAttrToOptions: {
                stroke: 'lineColor',
                'stroke-width': 'lineWidth',
                fill: 'fillColor',
                r: 'radius'
              },
              directTouch: false,
              axisTypes: [
                'xAxis',
                'yAxis'
              ],
              colorCounter: 0,
              parallelArrays: [
                'x',
                'y'
              ],
              init: function (chart, options) {
                var series = this, eventType, events, chartSeries = chart.series, sortByIndex = function (a, b) {
                    return pick(a.options.index, a._i) - pick(b.options.index, b._i);
                  };
                series.chart = chart;
                series.options = options = series.setOptions(options);
                // merge with plotOptions
                series.linkedSeries = [];
                // bind the axes
                series.bindAxes();
                // set some variables
                extend(series, {
                  name: options.name,
                  state: NORMAL_STATE,
                  pointAttr: {},
                  visible: options.visible !== false,
                  selected: options.selected === true
                });
                // special
                if (useCanVG) {
                  options.animation = false;
                }
                // register event listeners
                events = options.events;
                for (eventType in events) {
                  addEvent(series, eventType, events[eventType]);
                }
                if (events && events.click || options.point && options.point.events && options.point.events.click || options.allowPointSelect) {
                  chart.runTrackerClick = true;
                }
                series.getColor();
                series.getSymbol();
                // Set the data
                each(series.parallelArrays, function (key) {
                  series[key + 'Data'] = [];
                });
                series.setData(options.data, false);
                // Mark cartesian
                if (series.isCartesian) {
                  chart.hasCartesianSeries = true;
                }
                // Register it in the chart
                chartSeries.push(series);
                series._i = chartSeries.length - 1;
                // Sort series according to index option (#248, #1123, #2456)
                stableSort(chartSeries, sortByIndex);
                if (this.yAxis) {
                  stableSort(this.yAxis.series, sortByIndex);
                }
                each(chartSeries, function (series, i) {
                  series.index = i;
                  series.name = series.name || 'Series ' + (i + 1);
                });
              },
              bindAxes: function () {
                var series = this, seriesOptions = series.options, chart = series.chart, axisOptions;
                each(series.axisTypes || [], function (AXIS) {
                  // repeat for xAxis and yAxis
                  each(chart[AXIS], function (axis) {
                    // loop through the chart's axis objects
                    axisOptions = axis.options;
                    // apply if the series xAxis or yAxis option mathches the number of the
                    // axis, or if undefined, use the first axis
                    if (seriesOptions[AXIS] === axisOptions.index || seriesOptions[AXIS] !== UNDEFINED && seriesOptions[AXIS] === axisOptions.id || seriesOptions[AXIS] === UNDEFINED && axisOptions.index === 0) {
                      // register this series in the axis.series lookup
                      axis.series.push(series);
                      // set this series.xAxis or series.yAxis reference
                      series[AXIS] = axis;
                      // mark dirty for redraw
                      axis.isDirty = true;
                    }
                  });
                  // The series needs an X and an Y axis
                  if (!series[AXIS] && series.optionalAxis !== AXIS) {
                    error(18, true);
                  }
                });
              },
              updateParallelArrays: function (point, i) {
                var series = point.series, args = arguments, fn = typeof i === 'number' ? function (key) {
                    var val = key === 'y' && series.toYData ? series.toYData(point) : point[key];
                    series[key + 'Data'][i] = val;
                  } : function (key) {
                    Array.prototype[i].apply(series[key + 'Data'], Array.prototype.slice.call(args, 2));
                  };
                each(series.parallelArrays, fn);
              },
              autoIncrement: function () {
                var options = this.options, xIncrement = this.xIncrement, date, pointInterval, pointIntervalUnit = options.pointIntervalUnit;
                xIncrement = pick(xIncrement, options.pointStart, 0);
                this.pointInterval = pointInterval = pick(this.pointInterval, options.pointInterval, 1);
                // Added code for pointInterval strings
                if (pointIntervalUnit === 'month' || pointIntervalUnit === 'year') {
                  date = new Date(xIncrement);
                  date = pointIntervalUnit === 'month' ? +date[setMonth](date[getMonth]() + pointInterval) : +date[setFullYear](date[getFullYear]() + pointInterval);
                  pointInterval = date - xIncrement;
                }
                this.xIncrement = xIncrement + pointInterval;
                return xIncrement;
              },
              getSegments: function () {
                var series = this, lastNull = -1, segments = [], i, points = series.points, pointsLength = points.length;
                if (pointsLength) {
                  // no action required for []
                  // if connect nulls, just remove null points
                  if (series.options.connectNulls) {
                    i = pointsLength;
                    while (i--) {
                      if (points[i].y === null) {
                        points.splice(i, 1);
                      }
                    }
                    if (points.length) {
                      segments = [points];
                    }  // else, split on null points
                  } else {
                    each(points, function (point, i) {
                      if (point.y === null) {
                        if (i > lastNull + 1) {
                          segments.push(points.slice(lastNull + 1, i));
                        }
                        lastNull = i;
                      } else if (i === pointsLength - 1) {
                        // last value
                        segments.push(points.slice(lastNull + 1, i + 1));
                      }
                    });
                  }
                }
                // register it
                series.segments = segments;
              },
              setOptions: function (itemOptions) {
                var chart = this.chart, chartOptions = chart.options, plotOptions = chartOptions.plotOptions, userOptions = chart.userOptions || {}, userPlotOptions = userOptions.plotOptions || {}, typeOptions = plotOptions[this.type], options, zones;
                this.userOptions = itemOptions;
                // General series options take precedence over type options because otherwise, default
                // type options like column.animation would be overwritten by the general option.
                // But issues have been raised here (#3881), and the solution may be to distinguish 
                // between default option and userOptions like in the tooltip below.
                options = merge(typeOptions, plotOptions.series, itemOptions);
                // The tooltip options are merged between global and series specific options
                this.tooltipOptions = merge(defaultOptions.tooltip, defaultOptions.plotOptions[this.type].tooltip, userOptions.tooltip, userPlotOptions.series && userPlotOptions.series.tooltip, userPlotOptions[this.type] && userPlotOptions[this.type].tooltip, itemOptions.tooltip);
                // Delete marker object if not allowed (#1125)
                if (typeOptions.marker === null) {
                  delete options.marker;
                }
                // Handle color zones
                this.zoneAxis = options.zoneAxis;
                zones = this.zones = (options.zones || []).slice();
                if ((options.negativeColor || options.negativeFillColor) && !options.zones) {
                  zones.push({
                    value: options[this.zoneAxis + 'Threshold'] || options.threshold || 0,
                    color: options.negativeColor,
                    fillColor: options.negativeFillColor
                  });
                }
                if (zones.length) {
                  // Push one extra zone for the rest
                  if (defined(zones[zones.length - 1].value)) {
                    zones.push({
                      color: this.color,
                      fillColor: this.fillColor
                    });
                  }
                }
                return options;
              },
              getCyclic: function (prop, value, defaults) {
                var i, userOptions = this.userOptions, indexName = '_' + prop + 'Index', counterName = prop + 'Counter';
                if (!value) {
                  if (defined(userOptions[indexName])) {
                    // after Series.update()
                    i = userOptions[indexName];
                  } else {
                    userOptions[indexName] = i = this.chart[counterName] % defaults.length;
                    this.chart[counterName] += 1;
                  }
                  value = defaults[i];
                }
                this[prop] = value;
              },
              getColor: function () {
                if (this.options.colorByPoint) {
                  this.options.color = null;  // #4359, selected slice got series.color even when colorByPoint was set.
                } else {
                  this.getCyclic('color', this.options.color || defaultPlotOptions[this.type].color, this.chart.options.colors);
                }
              },
              getSymbol: function () {
                var seriesMarkerOption = this.options.marker;
                this.getCyclic('symbol', seriesMarkerOption.symbol, this.chart.options.symbols);
                // don't substract radius in image symbols (#604)
                if (/^url/.test(this.symbol)) {
                  seriesMarkerOption.radius = 0;
                }
              },
              drawLegendSymbol: LegendSymbolMixin.drawLineMarker,
              setData: function (data, redraw, animation, updatePoints) {
                var series = this, oldData = series.points, oldDataLength = oldData && oldData.length || 0, dataLength, options = series.options, chart = series.chart, firstPoint = null, xAxis = series.xAxis, hasCategories = xAxis && !!xAxis.categories, i, turboThreshold = options.turboThreshold, pt, xData = this.xData, yData = this.yData, pointArrayMap = series.pointArrayMap, valueCount = pointArrayMap && pointArrayMap.length;
                data = data || [];
                dataLength = data.length;
                redraw = pick(redraw, true);
                // If the point count is the same as is was, just run Point.update which is
                // cheaper, allows animation, and keeps references to points.
                if (updatePoints !== false && dataLength && oldDataLength === dataLength && !series.cropped && !series.hasGroupedData && series.visible) {
                  each(data, function (point, i) {
                    if (oldData[i].update) {
                      // Linked, previously hidden series (#3709)
                      oldData[i].update(point, false, null, false);
                    }
                  });
                } else {
                  // Reset properties
                  series.xIncrement = null;
                  series.pointRange = hasCategories ? 1 : options.pointRange;
                  series.colorCounter = 0;
                  // for series with colorByPoint (#1547)
                  // Update parallel arrays
                  each(this.parallelArrays, function (key) {
                    series[key + 'Data'].length = 0;
                  });
                  // In turbo mode, only one- or twodimensional arrays of numbers are allowed. The
                  // first value is tested, and we assume that all the rest are defined the same
                  // way. Although the 'for' loops are similar, they are repeated inside each
                  // if-else conditional for max performance.
                  if (turboThreshold && dataLength > turboThreshold) {
                    // find the first non-null point
                    i = 0;
                    while (firstPoint === null && i < dataLength) {
                      firstPoint = data[i];
                      i++;
                    }
                    if (isNumber(firstPoint)) {
                      // assume all points are numbers
                      var x = pick(options.pointStart, 0), pointInterval = pick(options.pointInterval, 1);
                      for (i = 0; i < dataLength; i++) {
                        xData[i] = x;
                        yData[i] = data[i];
                        x += pointInterval;
                      }
                      series.xIncrement = x;
                    } else if (isArray(firstPoint)) {
                      // assume all points are arrays
                      if (valueCount) {
                        // [x, low, high] or [x, o, h, l, c]
                        for (i = 0; i < dataLength; i++) {
                          pt = data[i];
                          xData[i] = pt[0];
                          yData[i] = pt.slice(1, valueCount + 1);
                        }
                      } else {
                        // [x, y]
                        for (i = 0; i < dataLength; i++) {
                          pt = data[i];
                          xData[i] = pt[0];
                          yData[i] = pt[1];
                        }
                      }
                    } else {
                      error(12);  // Highcharts expects configs to be numbers or arrays in turbo mode
                    }
                  } else {
                    for (i = 0; i < dataLength; i++) {
                      if (data[i] !== UNDEFINED) {
                        // stray commas in oldIE
                        pt = { series: series };
                        series.pointClass.prototype.applyOptions.apply(pt, [data[i]]);
                        series.updateParallelArrays(pt, i);
                        if (hasCategories && defined(pt.name)) {
                          // #4401
                          xAxis.names[pt.x] = pt.name;  // #2046
                        }
                      }
                    }
                  }
                  // Forgetting to cast strings to numbers is a common caveat when handling CSV or JSON
                  if (isString(yData[0])) {
                    error(14, true);
                  }
                  series.data = [];
                  series.options.data = data;
                  //series.zData = zData;
                  // destroy old points
                  i = oldDataLength;
                  while (i--) {
                    if (oldData[i] && oldData[i].destroy) {
                      oldData[i].destroy();
                    }
                  }
                  // reset minRange (#878)
                  if (xAxis) {
                    xAxis.minRange = xAxis.userMinRange;
                  }
                  // redraw
                  series.isDirty = series.isDirtyData = chart.isDirtyBox = true;
                  animation = false;
                }
                // Typically for pie series, points need to be processed and generated 
                // prior to rendering the legend
                if (options.legendType === 'point') {
                  // docs: legendType now supported on more series types (at least column and pie)
                  this.processData();
                  this.generatePoints();
                }
                if (redraw) {
                  chart.redraw(animation);
                }
              },
              processData: function (force) {
                var series = this, processedXData = series.xData,
                  // copied during slice operation below
                  processedYData = series.yData, dataLength = processedXData.length, croppedData, cropStart = 0, cropped, distance, closestPointRange, xAxis = series.xAxis, i,
                  // loop variable
                  options = series.options, cropThreshold = options.cropThreshold, getExtremesFromAll = series.getExtremesFromAll || options.getExtremesFromAll,
                  // #4599
                  isCartesian = series.isCartesian, xExtremes, min, max;
                // If the series data or axes haven't changed, don't go through this. Return false to pass
                // the message on to override methods like in data grouping.
                if (isCartesian && !series.isDirty && !xAxis.isDirty && !series.yAxis.isDirty && !force) {
                  return false;
                }
                if (xAxis) {
                  xExtremes = xAxis.getExtremes();
                  // corrected for log axis (#3053)
                  min = xExtremes.min;
                  max = xExtremes.max;
                }
                // optionally filter out points outside the plot area
                if (isCartesian && series.sorted && !getExtremesFromAll && (!cropThreshold || dataLength > cropThreshold || series.forceCrop)) {
                  // it's outside current extremes
                  if (processedXData[dataLength - 1] < min || processedXData[0] > max) {
                    processedXData = [];
                    processedYData = [];  // only crop if it's actually spilling out
                  } else if (processedXData[0] < min || processedXData[dataLength - 1] > max) {
                    croppedData = this.cropData(series.xData, series.yData, min, max);
                    processedXData = croppedData.xData;
                    processedYData = croppedData.yData;
                    cropStart = croppedData.start;
                    cropped = true;
                  }
                }
                // Find the closest distance between processed points
                for (i = processedXData.length - 1; i >= 0; i--) {
                  distance = processedXData[i] - processedXData[i - 1];
                  if (distance > 0 && (closestPointRange === UNDEFINED || distance < closestPointRange)) {
                    closestPointRange = distance;  // Unsorted data is not supported by the line tooltip, as well as data grouping and
                                                   // navigation in Stock charts (#725) and width calculation of columns (#1900)
                  } else if (distance < 0 && series.requireSorting) {
                    error(15);
                  }
                }
                // Record the properties
                series.cropped = cropped;
                // undefined or true
                series.cropStart = cropStart;
                series.processedXData = processedXData;
                series.processedYData = processedYData;
                if (options.pointRange === null) {
                  // null means auto, as for columns, candlesticks and OHLC
                  series.pointRange = closestPointRange || 1;
                }
                series.closestPointRange = closestPointRange;
              },
              cropData: function (xData, yData, min, max) {
                var dataLength = xData.length, cropStart = 0, cropEnd = dataLength, cropShoulder = pick(this.cropShoulder, 1),
                  // line-type series need one point outside
                  i;
                // iterate up to find slice start
                for (i = 0; i < dataLength; i++) {
                  if (xData[i] >= min) {
                    cropStart = mathMax(0, i - cropShoulder);
                    break;
                  }
                }
                // proceed to find slice end
                for (; i < dataLength; i++) {
                  if (xData[i] > max) {
                    cropEnd = i + cropShoulder;
                    break;
                  }
                }
                return {
                  xData: xData.slice(cropStart, cropEnd),
                  yData: yData.slice(cropStart, cropEnd),
                  start: cropStart,
                  end: cropEnd
                };
              },
              generatePoints: function () {
                var series = this, options = series.options, dataOptions = options.data, data = series.data, dataLength, processedXData = series.processedXData, processedYData = series.processedYData, pointClass = series.pointClass, processedDataLength = processedXData.length, cropStart = series.cropStart || 0, cursor, hasGroupedData = series.hasGroupedData, point, points = [], i;
                if (!data && !hasGroupedData) {
                  var arr = [];
                  arr.length = dataOptions.length;
                  data = series.data = arr;
                }
                for (i = 0; i < processedDataLength; i++) {
                  cursor = cropStart + i;
                  if (!hasGroupedData) {
                    if (data[cursor]) {
                      point = data[cursor];
                    } else if (dataOptions[cursor] !== UNDEFINED) {
                      // #970
                      data[cursor] = point = new pointClass().init(series, dataOptions[cursor], processedXData[i]);
                    }
                    points[i] = point;
                  } else {
                    // splat the y data in case of ohlc data array
                    points[i] = new pointClass().init(series, [processedXData[i]].concat(splat(processedYData[i])));
                  }
                  points[i].index = cursor;  // For faster access in Point.update
                }
                // Hide cropped-away points - this only runs when the number of points is above cropThreshold, or when
                // swithching view from non-grouped data to grouped data (#637)
                if (data && (processedDataLength !== (dataLength = data.length) || hasGroupedData)) {
                  for (i = 0; i < dataLength; i++) {
                    if (i === cropStart && !hasGroupedData) {
                      // when has grouped data, clear all points
                      i += processedDataLength;
                    }
                    if (data[i]) {
                      data[i].destroyElements();
                      data[i].plotX = UNDEFINED;  // #1003
                    }
                  }
                }
                series.data = data;
                series.points = points;
              },
              getExtremes: function (yData) {
                var xAxis = this.xAxis, yAxis = this.yAxis, xData = this.processedXData, yDataLength, activeYData = [], activeCounter = 0, xExtremes = xAxis.getExtremes(),
                  // #2117, need to compensate for log X axis
                  xMin = xExtremes.min, xMax = xExtremes.max, validValue, withinRange, x, y, i, j;
                yData = yData || this.stackedYData || this.processedYData;
                yDataLength = yData.length;
                for (i = 0; i < yDataLength; i++) {
                  x = xData[i];
                  y = yData[i];
                  // For points within the visible range, including the first point outside the
                  // visible range, consider y extremes
                  validValue = y !== null && y !== UNDEFINED && (!yAxis.isLog || (y.length || y > 0));
                  withinRange = this.getExtremesFromAll || this.options.getExtremesFromAll || this.cropped || (xData[i + 1] || x) >= xMin && (xData[i - 1] || x) <= xMax;
                  if (validValue && withinRange) {
                    j = y.length;
                    if (j) {
                      // array, like ohlc or range data
                      while (j--) {
                        if (y[j] !== null) {
                          activeYData[activeCounter++] = y[j];
                        }
                      }
                    } else {
                      activeYData[activeCounter++] = y;
                    }
                  }
                }
                this.dataMin = arrayMin(activeYData);
                this.dataMax = arrayMax(activeYData);
              },
              translate: function () {
                if (!this.processedXData) {
                  // hidden series
                  this.processData();
                }
                this.generatePoints();
                var series = this, options = series.options, stacking = options.stacking, xAxis = series.xAxis, categories = xAxis.categories, yAxis = series.yAxis, points = series.points, dataLength = points.length, hasModifyValue = !!series.modifyValue, i, pointPlacement = options.pointPlacement, dynamicallyPlaced = pointPlacement === 'between' || isNumber(pointPlacement), threshold = options.threshold, stackThreshold = options.startFromThreshold ? threshold : 0, plotX, plotY, lastPlotX, stackIndicator, closestPointRangePx = Number.MAX_VALUE;
                // Translate each point
                for (i = 0; i < dataLength; i++) {
                  var point = points[i], xValue = point.x, yValue = point.y, yBottom = point.low, stack = stacking && yAxis.stacks[(series.negStacks && yValue < (stackThreshold ? 0 : threshold) ? '-' : '') + series.stackKey], pointStack, stackValues;
                  // Discard disallowed y values for log axes (#3434)
                  if (yAxis.isLog && yValue !== null && yValue <= 0) {
                    point.y = yValue = null;
                    error(10);
                  }
                  // Get the plotX translation
                  point.plotX = plotX = mathMin(mathMax(-100000, xAxis.translate(xValue, 0, 0, 0, 1, pointPlacement, this.type === 'flags')), 100000);
                  // #3923
                  // Calculate the bottom y value for stacked series
                  if (stacking && series.visible && stack && stack[xValue]) {
                    stackIndicator = series.getStackIndicator(stackIndicator, xValue, series.index);
                    pointStack = stack[xValue];
                    stackValues = pointStack.points[stackIndicator.key];
                    yBottom = stackValues[0];
                    yValue = stackValues[1];
                    if (yBottom === stackThreshold) {
                      yBottom = pick(threshold, yAxis.min);
                    }
                    if (yAxis.isLog && yBottom <= 0) {
                      // #1200, #1232
                      yBottom = null;
                    }
                    point.total = point.stackTotal = pointStack.total;
                    point.percentage = pointStack.total && point.y / pointStack.total * 100;
                    point.stackY = yValue;
                    // Place the stack label
                    pointStack.setOffset(series.pointXOffset || 0, series.barW || 0);
                  }
                  // Set translated yBottom or remove it
                  point.yBottom = defined(yBottom) ? yAxis.translate(yBottom, 0, 1, 0, 1) : null;
                  // general hook, used for Highstock compare mode
                  if (hasModifyValue) {
                    yValue = series.modifyValue(yValue, point);
                  }
                  // Set the the plotY value, reset it for redraws
                  point.plotY = plotY = typeof yValue === 'number' && yValue !== Infinity ? mathMin(mathMax(-100000, yAxis.translate(yValue, 0, 1, 0, 1)), 100000) : UNDEFINED;
                  point.isInside = plotY !== UNDEFINED && plotY >= 0 && plotY <= yAxis.len && plotX >= 0 && plotX <= xAxis.len;
                  // Set client related positions for mouse tracking
                  point.clientX = dynamicallyPlaced ? xAxis.translate(xValue, 0, 0, 0, 1) : plotX;
                  // #1514
                  point.negative = point.y < (threshold || 0);
                  // some API data
                  point.category = categories && categories[point.x] !== UNDEFINED ? categories[point.x] : point.x;
                  // Determine auto enabling of markers (#3635)
                  if (i) {
                    closestPointRangePx = mathMin(closestPointRangePx, mathAbs(plotX - lastPlotX));
                  }
                  lastPlotX = plotX;
                }
                series.closestPointRangePx = closestPointRangePx;
                // now that we have the cropped data, build the segments
                series.getSegments();
              },
              setClip: function (animation) {
                var chart = this.chart, options = this.options, renderer = chart.renderer, inverted = chart.inverted, seriesClipBox = this.clipBox, clipBox = seriesClipBox || chart.clipBox, sharedClipKey = this.sharedClipKey || [
                    '_sharedClip',
                    animation && animation.duration,
                    animation && animation.easing,
                    clipBox.height,
                    options.xAxis,
                    options.yAxis
                  ].join(','),
                  // #4526
                  clipRect = chart[sharedClipKey], markerClipRect = chart[sharedClipKey + 'm'];
                // If a clipping rectangle with the same properties is currently present in the chart, use that.
                if (!clipRect) {
                  // When animation is set, prepare the initial positions
                  if (animation) {
                    clipBox.width = 0;
                    chart[sharedClipKey + 'm'] = markerClipRect = renderer.clipRect(-99, inverted ? -chart.plotLeft : -chart.plotTop, 99, inverted ? chart.chartWidth : chart.chartHeight);
                  }
                  chart[sharedClipKey] = clipRect = renderer.clipRect(clipBox);
                }
                if (animation) {
                  clipRect.count += 1;
                }
                if (options.clip !== false) {
                  this.group.clip(animation || seriesClipBox ? clipRect : chart.clipRect);
                  this.markerGroup.clip(markerClipRect);
                  this.sharedClipKey = sharedClipKey;
                }
                // Remove the shared clipping rectangle when all series are shown
                if (!animation) {
                  clipRect.count -= 1;
                  if (clipRect.count <= 0 && sharedClipKey && chart[sharedClipKey]) {
                    if (!seriesClipBox) {
                      chart[sharedClipKey] = chart[sharedClipKey].destroy();
                    }
                    if (chart[sharedClipKey + 'm']) {
                      chart[sharedClipKey + 'm'] = chart[sharedClipKey + 'm'].destroy();
                    }
                  }
                }
              },
              animate: function (init) {
                var series = this, chart = series.chart, clipRect, animation = series.options.animation, sharedClipKey;
                // Animation option is set to true
                if (animation && !isObject(animation)) {
                  animation = defaultPlotOptions[series.type].animation;
                }
                // Initialize the animation. Set up the clipping rectangle.
                if (init) {
                  series.setClip(animation);  // Run the animation
                } else {
                  sharedClipKey = this.sharedClipKey;
                  clipRect = chart[sharedClipKey];
                  if (clipRect) {
                    clipRect.animate({ width: chart.plotSizeX }, animation);
                  }
                  if (chart[sharedClipKey + 'm']) {
                    chart[sharedClipKey + 'm'].animate({ width: chart.plotSizeX + 99 }, animation);
                  }
                  // Delete this function to allow it only once
                  series.animate = null;
                }
              },
              afterAnimate: function () {
                this.setClip();
                fireEvent(this, 'afterAnimate');
              },
              drawPoints: function () {
                var series = this, pointAttr, points = series.points, chart = series.chart, plotX, plotY, i, point, radius, symbol, isImage, graphic, options = series.options, seriesMarkerOptions = options.marker, seriesPointAttr = series.pointAttr[''], pointMarkerOptions, hasPointMarker, enabled, isInside, markerGroup = series.markerGroup, xAxis = series.xAxis, globallyEnabled = pick(seriesMarkerOptions.enabled, xAxis.isRadial, series.closestPointRangePx > 2 * seriesMarkerOptions.radius);
                if (seriesMarkerOptions.enabled !== false || series._hasPointMarkers) {
                  i = points.length;
                  while (i--) {
                    point = points[i];
                    plotX = mathFloor(point.plotX);
                    // #1843
                    plotY = point.plotY;
                    graphic = point.graphic;
                    pointMarkerOptions = point.marker || {};
                    hasPointMarker = !!point.marker;
                    enabled = globallyEnabled && pointMarkerOptions.enabled === UNDEFINED || pointMarkerOptions.enabled;
                    isInside = point.isInside;
                    // only draw the point if y is defined
                    if (enabled && plotY !== UNDEFINED && !isNaN(plotY) && point.y !== null) {
                      // shortcuts
                      pointAttr = point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE] || seriesPointAttr;
                      radius = pointAttr.r;
                      symbol = pick(pointMarkerOptions.symbol, series.symbol);
                      isImage = symbol.indexOf('url') === 0;
                      if (graphic) {
                        // update
                        graphic[isInside ? 'show' : 'hide'](true).animate(extend({
                          x: plotX - radius,
                          y: plotY - radius
                        }, graphic.symbolName ? {
                          width: 2 * radius,
                          height: 2 * radius
                        } : {}));
                      } else if (isInside && (radius > 0 || isImage)) {
                        point.graphic = graphic = chart.renderer.symbol(symbol, plotX - radius, plotY - radius, 2 * radius, 2 * radius, hasPointMarker ? pointMarkerOptions : seriesMarkerOptions).attr(pointAttr).add(markerGroup);
                      }
                    } else if (graphic) {
                      point.graphic = graphic.destroy();  // #1269
                    }
                  }
                }
              },
              convertAttribs: function (options, base1, base2, base3) {
                var conversion = this.pointAttrToOptions, attr, option, obj = {};
                options = options || {};
                base1 = base1 || {};
                base2 = base2 || {};
                base3 = base3 || {};
                for (attr in conversion) {
                  option = conversion[attr];
                  obj[attr] = pick(options[option], base1[attr], base2[attr], base3[attr]);
                }
                return obj;
              },
              getAttribs: function () {
                var series = this, seriesOptions = series.options, normalOptions = defaultPlotOptions[series.type].marker ? seriesOptions.marker : seriesOptions, stateOptions = normalOptions.states, stateOptionsHover = stateOptions[HOVER_STATE], pointStateOptionsHover, seriesColor = series.color, seriesNegativeColor = series.options.negativeColor, normalDefaults = {
                    stroke: seriesColor,
                    fill: seriesColor
                  }, points = series.points || [],
                  // #927
                  i, j, threshold, point, seriesPointAttr = [], pointAttr, pointAttrToOptions = series.pointAttrToOptions, hasPointSpecificOptions = series.hasPointSpecificOptions, defaultLineColor = normalOptions.lineColor, defaultFillColor = normalOptions.fillColor, turboThreshold = seriesOptions.turboThreshold, zones = series.zones, zoneAxis = series.zoneAxis || 'y', attr, key;
                // series type specific modifications
                if (seriesOptions.marker) {
                  // line, spline, area, areaspline, scatter
                  // if no hover radius is given, default to normal radius + 2
                  stateOptionsHover.radius = stateOptionsHover.radius || normalOptions.radius + stateOptionsHover.radiusPlus;
                  stateOptionsHover.lineWidth = stateOptionsHover.lineWidth || normalOptions.lineWidth + stateOptionsHover.lineWidthPlus;
                } else {
                  // column, bar, pie
                  // if no hover color is given, brighten the normal color
                  stateOptionsHover.color = stateOptionsHover.color || Color(stateOptionsHover.color || seriesColor).brighten(stateOptionsHover.brightness).get();
                  // if no hover negativeColor is given, brighten the normal negativeColor
                  stateOptionsHover.negativeColor = stateOptionsHover.negativeColor || Color(stateOptionsHover.negativeColor || seriesNegativeColor).brighten(stateOptionsHover.brightness).get();
                }
                // general point attributes for the series normal state
                seriesPointAttr[NORMAL_STATE] = series.convertAttribs(normalOptions, normalDefaults);
                // HOVER_STATE and SELECT_STATE states inherit from normal state except the default radius
                each([
                  HOVER_STATE,
                  SELECT_STATE
                ], function (state) {
                  seriesPointAttr[state] = series.convertAttribs(stateOptions[state], seriesPointAttr[NORMAL_STATE]);
                });
                // set it
                series.pointAttr = seriesPointAttr;
                // Generate the point-specific attribute collections if specific point
                // options are given. If not, create a referance to the series wide point
                // attributes
                i = points.length;
                if (!turboThreshold || i < turboThreshold || hasPointSpecificOptions) {
                  while (i--) {
                    point = points[i];
                    normalOptions = point.options && point.options.marker || point.options;
                    if (normalOptions && normalOptions.enabled === false) {
                      normalOptions.radius = 0;
                    }
                    if (zones.length) {
                      j = 0;
                      threshold = zones[j];
                      while (point[zoneAxis] >= threshold.value) {
                        threshold = zones[++j];
                      }
                      point.color = point.fillColor = pick(threshold.color, series.color);  // #3636, #4267, #4430 - inherit color from series, when color is undefined
                    }
                    hasPointSpecificOptions = seriesOptions.colorByPoint || point.color;
                    // #868
                    // check if the point has specific visual options
                    if (point.options) {
                      for (key in pointAttrToOptions) {
                        if (defined(normalOptions[pointAttrToOptions[key]])) {
                          hasPointSpecificOptions = true;
                        }
                      }
                    }
                    // a specific marker config object is defined for the individual point:
                    // create it's own attribute collection
                    if (hasPointSpecificOptions) {
                      normalOptions = normalOptions || {};
                      pointAttr = [];
                      stateOptions = normalOptions.states || {};
                      // reassign for individual point
                      pointStateOptionsHover = stateOptions[HOVER_STATE] = stateOptions[HOVER_STATE] || {};
                      // Handle colors for column and pies
                      if (!seriesOptions.marker || point.negative && !pointStateOptionsHover.fillColor && !stateOptionsHover.fillColor) {
                        // column, bar, point or negative threshold for series with markers (#3636)
                        // If no hover color is given, brighten the normal color. #1619, #2579
                        pointStateOptionsHover[series.pointAttrToOptions.fill] = pointStateOptionsHover.color || !point.options.color && stateOptionsHover[point.negative && seriesNegativeColor ? 'negativeColor' : 'color'] || Color(point.color).brighten(pointStateOptionsHover.brightness || stateOptionsHover.brightness).get();
                      }
                      // normal point state inherits series wide normal state
                      attr = { color: point.color };
                      // #868
                      if (!defaultFillColor) {
                        // Individual point color or negative color markers (#2219)
                        attr.fillColor = point.color;
                      }
                      if (!defaultLineColor) {
                        attr.lineColor = point.color;  // Bubbles take point color, line markers use white
                      }
                      // Color is explicitly set to null or undefined (#1288, #4068)
                      if (normalOptions.hasOwnProperty('color') && !normalOptions.color) {
                        delete normalOptions.color;
                      }
                      pointAttr[NORMAL_STATE] = series.convertAttribs(extend(attr, normalOptions), seriesPointAttr[NORMAL_STATE]);
                      // inherit from point normal and series hover
                      pointAttr[HOVER_STATE] = series.convertAttribs(stateOptions[HOVER_STATE], seriesPointAttr[HOVER_STATE], pointAttr[NORMAL_STATE]);
                      // inherit from point normal and series hover
                      pointAttr[SELECT_STATE] = series.convertAttribs(stateOptions[SELECT_STATE], seriesPointAttr[SELECT_STATE], pointAttr[NORMAL_STATE]);  // no marker config object is created: copy a reference to the series-wide
                                                                                                                                                            // attribute collection
                    } else {
                      pointAttr = seriesPointAttr;
                    }
                    point.pointAttr = pointAttr;
                  }
                }
              },
              destroy: function () {
                var series = this, chart = series.chart, issue134 = /AppleWebKit\/533/.test(userAgent), destroy, i, data = series.data || [], point, prop, axis;
                // add event hook
                fireEvent(series, 'destroy');
                // remove all events
                removeEvent(series);
                // erase from axes
                each(series.axisTypes || [], function (AXIS) {
                  axis = series[AXIS];
                  if (axis) {
                    erase(axis.series, series);
                    axis.isDirty = axis.forceRedraw = true;
                  }
                });
                // remove legend items
                if (series.legendItem) {
                  series.chart.legend.destroyItem(series);
                }
                // destroy all points with their elements
                i = data.length;
                while (i--) {
                  point = data[i];
                  if (point && point.destroy) {
                    point.destroy();
                  }
                }
                series.points = null;
                // Clear the animation timeout if we are destroying the series during initial animation
                clearTimeout(series.animationTimeout);
                // Destroy all SVGElements associated to the series
                for (prop in series) {
                  if (series[prop] instanceof SVGElement && !series[prop].survive) {
                    // Survive provides a hook for not destroying
                    // issue 134 workaround
                    destroy = issue134 && prop === 'group' ? 'hide' : 'destroy';
                    series[prop][destroy]();
                  }
                }
                // remove from hoverSeries
                if (chart.hoverSeries === series) {
                  chart.hoverSeries = null;
                }
                erase(chart.series, series);
                // clear all members
                for (prop in series) {
                  delete series[prop];
                }
              },
              getSegmentPath: function (segment) {
                var series = this, segmentPath = [], step = series.options.step;
                // build the segment line
                each(segment, function (point, i) {
                  var plotX = point.plotX, plotY = point.plotY, lastPoint;
                  if (series.getPointSpline) {
                    // generate the spline as defined in the SplineSeries object
                    segmentPath.push.apply(segmentPath, series.getPointSpline(segment, point, i));
                  } else {
                    // moveTo or lineTo
                    segmentPath.push(i ? L : M);
                    // step line?
                    if (step && i) {
                      lastPoint = segment[i - 1];
                      if (step === 'right') {
                        segmentPath.push(lastPoint.plotX, plotY, L);
                      } else if (step === 'center') {
                        segmentPath.push((lastPoint.plotX + plotX) / 2, lastPoint.plotY, L, (lastPoint.plotX + plotX) / 2, plotY, L);
                      } else {
                        segmentPath.push(plotX, lastPoint.plotY, L);
                      }
                    }
                    // normal line to next point
                    segmentPath.push(point.plotX, point.plotY);
                  }
                });
                return segmentPath;
              },
              getGraphPath: function () {
                var series = this, graphPath = [], segmentPath, singlePoints = [];
                // used in drawTracker
                // Divide into segments and build graph and area paths
                each(series.segments, function (segment) {
                  segmentPath = series.getSegmentPath(segment);
                  // add the segment to the graph, or a single point for tracking
                  if (segment.length > 1) {
                    graphPath = graphPath.concat(segmentPath);
                  } else {
                    singlePoints.push(segment[0]);
                  }
                });
                // Record it for use in drawGraph and drawTracker, and return graphPath
                series.singlePoints = singlePoints;
                series.graphPath = graphPath;
                return graphPath;
              },
              drawGraph: function () {
                var series = this, options = this.options, props = [[
                      'graph',
                      options.lineColor || this.color,
                      options.dashStyle
                    ]], lineWidth = options.lineWidth, roundCap = options.linecap !== 'square', graphPath = this.getGraphPath(), fillColor = this.fillGraph && this.color || NONE,
                  // polygon series use filled graph
                  zones = this.zones;
                each(zones, function (threshold, i) {
                  props.push([
                    'zoneGraph' + i,
                    threshold.color || series.color,
                    threshold.dashStyle || options.dashStyle
                  ]);
                });
                // Draw the graph
                each(props, function (prop, i) {
                  var graphKey = prop[0], graph = series[graphKey], attribs;
                  if (graph) {
                    graph.animate({ d: graphPath });
                  } else if ((lineWidth || fillColor) && graphPath.length) {
                    // #1487
                    attribs = {
                      stroke: prop[1],
                      'stroke-width': lineWidth,
                      fill: fillColor,
                      zIndex: 1
                    };
                    if (prop[2]) {
                      attribs.dashstyle = prop[2];
                    } else if (roundCap) {
                      attribs['stroke-linecap'] = attribs['stroke-linejoin'] = 'round';
                    }
                    series[graphKey] = series.chart.renderer.path(graphPath).attr(attribs).add(series.group).shadow(i < 2 && options.shadow);  // add shadow to normal series (0) or to first zone (1) #3932
                  }
                });
              },
              applyZones: function () {
                var series = this, chart = this.chart, renderer = chart.renderer, zones = this.zones, translatedFrom, translatedTo, clips = this.clips || [], clipAttr, graph = this.graph, area = this.area, chartSizeMax = mathMax(chart.chartWidth, chart.chartHeight), axis = this[(this.zoneAxis || 'y') + 'Axis'], extremes, reversed = axis.reversed, inverted = chart.inverted, horiz = axis.horiz, pxRange, pxPosMin, pxPosMax, ignoreZones = false;
                if (zones.length && (graph || area) && axis.min !== UNDEFINED) {
                  // The use of the Color Threshold assumes there are no gaps
                  // so it is safe to hide the original graph and area
                  if (graph) {
                    graph.hide();
                  }
                  if (area) {
                    area.hide();
                  }
                  // Create the clips
                  extremes = axis.getExtremes();
                  each(zones, function (threshold, i) {
                    translatedFrom = reversed ? horiz ? chart.plotWidth : 0 : horiz ? 0 : axis.toPixels(extremes.min);
                    translatedFrom = mathMin(mathMax(pick(translatedTo, translatedFrom), 0), chartSizeMax);
                    translatedTo = mathMin(mathMax(mathRound(axis.toPixels(pick(threshold.value, extremes.max), true)), 0), chartSizeMax);
                    if (ignoreZones) {
                      translatedFrom = translatedTo = axis.toPixels(extremes.max);
                    }
                    pxRange = Math.abs(translatedFrom - translatedTo);
                    pxPosMin = mathMin(translatedFrom, translatedTo);
                    pxPosMax = mathMax(translatedFrom, translatedTo);
                    if (axis.isXAxis) {
                      clipAttr = {
                        x: inverted ? pxPosMax : pxPosMin,
                        y: 0,
                        width: pxRange,
                        height: chartSizeMax
                      };
                      if (!horiz) {
                        clipAttr.x = chart.plotHeight - clipAttr.x;
                      }
                    } else {
                      clipAttr = {
                        x: 0,
                        y: inverted ? pxPosMax : pxPosMin,
                        width: chartSizeMax,
                        height: pxRange
                      };
                      if (horiz) {
                        clipAttr.y = chart.plotWidth - clipAttr.y;
                      }
                    }
                    /// VML SUPPPORT
                    if (chart.inverted && renderer.isVML) {
                      if (axis.isXAxis) {
                        clipAttr = {
                          x: 0,
                          y: reversed ? pxPosMin : pxPosMax,
                          height: clipAttr.width,
                          width: chart.chartWidth
                        };
                      } else {
                        clipAttr = {
                          x: clipAttr.y - chart.plotLeft - chart.spacingBox.x,
                          y: 0,
                          width: clipAttr.height,
                          height: chart.chartHeight
                        };
                      }
                    }
                    /// END OF VML SUPPORT
                    if (clips[i]) {
                      clips[i].animate(clipAttr);
                    } else {
                      clips[i] = renderer.clipRect(clipAttr);
                      if (graph) {
                        series['zoneGraph' + i].clip(clips[i]);
                      }
                      if (area) {
                        series['zoneArea' + i].clip(clips[i]);
                      }
                    }
                    // if this zone extends out of the axis, ignore the others
                    ignoreZones = threshold.value > extremes.max;
                  });
                  this.clips = clips;
                }
              },
              invertGroups: function () {
                var series = this, chart = series.chart;
                // Pie, go away (#1736)
                if (!series.xAxis) {
                  return;
                }
                // A fixed size is needed for inversion to work
                function setInvert() {
                  var size = {
                      width: series.yAxis.len,
                      height: series.xAxis.len
                    };
                  each([
                    'group',
                    'markerGroup'
                  ], function (groupName) {
                    if (series[groupName]) {
                      series[groupName].attr(size).invert();
                    }
                  });
                }
                addEvent(chart, 'resize', setInvert);
                // do it on resize
                addEvent(series, 'destroy', function () {
                  removeEvent(chart, 'resize', setInvert);
                });
                // Do it now
                setInvert();
                // do it now
                // On subsequent render and redraw, just do setInvert without setting up events again
                series.invertGroups = setInvert;
              },
              plotGroup: function (prop, name, visibility, zIndex, parent) {
                var group = this[prop], isNew = !group;
                // Generate it on first call
                if (isNew) {
                  this[prop] = group = this.chart.renderer.g(name).attr({
                    visibility: visibility,
                    zIndex: zIndex || 0.1
                  }).add(parent);
                  group.addClass('highcharts-series-' + this.index);
                }
                // Place it on first and subsequent (redraw) calls
                group[isNew ? 'attr' : 'animate'](this.getPlotBox());
                return group;
              },
              getPlotBox: function () {
                var chart = this.chart, xAxis = this.xAxis, yAxis = this.yAxis;
                // Swap axes for inverted (#2339)
                if (chart.inverted) {
                  xAxis = yAxis;
                  yAxis = this.xAxis;
                }
                return {
                  translateX: xAxis ? xAxis.left : chart.plotLeft,
                  translateY: yAxis ? yAxis.top : chart.plotTop,
                  scaleX: 1,
                  scaleY: 1
                };
              },
              render: function () {
                var series = this, chart = series.chart, group, options = series.options, animation = options.animation,
                  // Animation doesn't work in IE8 quirks when the group div is hidden,
                  // and looks bad in other oldIE
                  animDuration = animation && !!series.animate && chart.renderer.isSVG && pick(animation.duration, 500) || 0, visibility = series.visible ? VISIBLE : HIDDEN, zIndex = options.zIndex, hasRendered = series.hasRendered, chartSeriesGroup = chart.seriesGroup;
                // the group
                group = series.plotGroup('group', 'series', visibility, zIndex, chartSeriesGroup);
                series.markerGroup = series.plotGroup('markerGroup', 'markers', visibility, zIndex, chartSeriesGroup);
                // initiate the animation
                if (animDuration) {
                  series.animate(true);
                }
                // cache attributes for shapes
                series.getAttribs();
                // SVGRenderer needs to know this before drawing elements (#1089, #1795)
                group.inverted = series.isCartesian ? chart.inverted : false;
                // draw the graph if any
                if (series.drawGraph) {
                  series.drawGraph();
                  series.applyZones();
                }
                each(series.points, function (point) {
                  if (point.redraw) {
                    point.redraw();
                  }
                });
                // draw the data labels (inn pies they go before the points)
                if (series.drawDataLabels) {
                  series.drawDataLabels();
                }
                // draw the points
                if (series.visible) {
                  series.drawPoints();
                }
                // draw the mouse tracking area
                if (series.drawTracker && series.options.enableMouseTracking !== false) {
                  series.drawTracker();
                }
                // Handle inverted series and tracker groups
                if (chart.inverted) {
                  series.invertGroups();
                }
                // Initial clipping, must be defined after inverting groups for VML. Applies to columns etc. (#3839).
                if (options.clip !== false && !series.sharedClipKey && !hasRendered) {
                  group.clip(chart.clipRect);
                }
                // Run the animation
                if (animDuration) {
                  series.animate();
                }
                // Call the afterAnimate function on animation complete (but don't overwrite the animation.complete option
                // which should be available to the user).
                if (!hasRendered) {
                  if (animDuration) {
                    series.animationTimeout = setTimeout(function () {
                      series.afterAnimate();
                    }, animDuration);
                  } else {
                    series.afterAnimate();
                  }
                }
                series.isDirty = series.isDirtyData = false;
                // means data is in accordance with what you see
                // (See #322) series.isDirty = series.isDirtyData = false; // means data is in accordance with what you see
                series.hasRendered = true;
              },
              redraw: function () {
                var series = this, chart = series.chart, wasDirtyData = series.isDirtyData,
                  // cache it here as it is set to false in render, but used after
                  wasDirty = series.isDirty, group = series.group, xAxis = series.xAxis, yAxis = series.yAxis;
                // reposition on resize
                if (group) {
                  if (chart.inverted) {
                    group.attr({
                      width: chart.plotWidth,
                      height: chart.plotHeight
                    });
                  }
                  group.animate({
                    translateX: pick(xAxis && xAxis.left, chart.plotLeft),
                    translateY: pick(yAxis && yAxis.top, chart.plotTop)
                  });
                }
                series.translate();
                series.render();
                if (wasDirtyData) {
                  fireEvent(series, 'updatedData');
                }
                if (wasDirty || wasDirtyData) {
                  // #3945 recalculate the kdtree when dirty
                  delete this.kdTree;  // #3868 recalculate the kdtree with dirty data
                }
              },
              kdDimensions: 1,
              kdAxisArray: [
                'clientX',
                'plotY'
              ],
              searchPoint: function (e, compareX) {
                var series = this, xAxis = series.xAxis, yAxis = series.yAxis, inverted = series.chart.inverted;
                return this.searchKDTree({
                  clientX: inverted ? xAxis.len - e.chartY + xAxis.pos : e.chartX - xAxis.pos,
                  plotY: inverted ? yAxis.len - e.chartX + yAxis.pos : e.chartY - yAxis.pos
                }, compareX);
              },
              buildKDTree: function () {
                var series = this, dimensions = series.kdDimensions;
                // Internal function
                function _kdtree(points, depth, dimensions) {
                  var axis, median, length = points && points.length;
                  if (length) {
                    // alternate between the axis
                    axis = series.kdAxisArray[depth % dimensions];
                    // sort point array
                    points.sort(function (a, b) {
                      return a[axis] - b[axis];
                    });
                    median = Math.floor(length / 2);
                    // build and return nod
                    return {
                      point: points[median],
                      left: _kdtree(points.slice(0, median), depth + 1, dimensions),
                      right: _kdtree(points.slice(median + 1), depth + 1, dimensions)
                    };
                  }
                }
                // Start the recursive build process with a clone of the points array and null points filtered out (#3873)
                function startRecursive() {
                  var points = grep(series.points || [], function (point) {
                      // #4390
                      return point.y !== null;
                    });
                  series.kdTree = _kdtree(points, dimensions, dimensions);
                }
                delete series.kdTree;
                if (series.options.kdSync) {
                  // For testing tooltips, don't build async
                  startRecursive();
                } else {
                  setTimeout(startRecursive);
                }
              },
              searchKDTree: function (point, compareX) {
                var series = this, kdX = this.kdAxisArray[0], kdY = this.kdAxisArray[1], kdComparer = compareX ? 'distX' : 'dist';
                // Set the one and two dimensional distance on the point object
                function setDistance(p1, p2) {
                  var x = defined(p1[kdX]) && defined(p2[kdX]) ? Math.pow(p1[kdX] - p2[kdX], 2) : null, y = defined(p1[kdY]) && defined(p2[kdY]) ? Math.pow(p1[kdY] - p2[kdY], 2) : null, r = (x || 0) + (y || 0);
                  p2.dist = defined(r) ? Math.sqrt(r) : Number.MAX_VALUE;
                  p2.distX = defined(x) ? Math.sqrt(x) : Number.MAX_VALUE;
                }
                function _search(search, tree, depth, dimensions) {
                  var point = tree.point, axis = series.kdAxisArray[depth % dimensions], tdist, sideA, sideB, ret = point, nPoint1, nPoint2;
                  setDistance(search, point);
                  // Pick side based on distance to splitting point
                  tdist = search[axis] - point[axis];
                  sideA = tdist < 0 ? 'left' : 'right';
                  sideB = tdist < 0 ? 'right' : 'left';
                  // End of tree
                  if (tree[sideA]) {
                    nPoint1 = _search(search, tree[sideA], depth + 1, dimensions);
                    ret = nPoint1[kdComparer] < ret[kdComparer] ? nPoint1 : point;
                  }
                  if (tree[sideB]) {
                    // compare distance to current best to splitting point to decide wether to check side B or not
                    if (Math.sqrt(tdist * tdist) < ret[kdComparer]) {
                      nPoint2 = _search(search, tree[sideB], depth + 1, dimensions);
                      ret = nPoint2[kdComparer] < ret[kdComparer] ? nPoint2 : ret;
                    }
                  }
                  return ret;
                }
                if (!this.kdTree) {
                  this.buildKDTree();
                }
                if (this.kdTree) {
                  return _search(point, this.kdTree, this.kdDimensions, this.kdDimensions);
                }
              }
            };
            // end Series prototype
            /**
		 * The class for stack items
		 */
            function StackItem(axis, options, isNegative, x, stackOption) {
              var inverted = axis.chart.inverted;
              this.axis = axis;
              // Tells if the stack is negative
              this.isNegative = isNegative;
              // Save the options to be able to style the label
              this.options = options;
              // Save the x value to be able to position the label later
              this.x = x;
              // Initialize total value
              this.total = null;
              // This will keep each points' extremes stored by series.index and point index
              this.points = {};
              // Save the stack option on the series configuration object, and whether to treat it as percent
              this.stack = stackOption;
              // The align options and text align varies on whether the stack is negative and
              // if the chart is inverted or not.
              // First test the user supplied value, then use the dynamic.
              this.alignOptions = {
                align: options.align || (inverted ? isNegative ? 'left' : 'right' : 'center'),
                verticalAlign: options.verticalAlign || (inverted ? 'middle' : isNegative ? 'bottom' : 'top'),
                y: pick(options.y, inverted ? 4 : isNegative ? 14 : -6),
                x: pick(options.x, inverted ? isNegative ? -6 : 6 : 0)
              };
              this.textAlign = options.textAlign || (inverted ? isNegative ? 'right' : 'left' : 'center');
            }
            StackItem.prototype = {
              destroy: function () {
                destroyObjectProperties(this, this.axis);
              },
              render: function (group) {
                var options = this.options, formatOption = options.format, str = formatOption ? format(formatOption, this) : options.formatter.call(this);
                // format the text in the label
                // Change the text to reflect the new total and set visibility to hidden in case the serie is hidden
                if (this.label) {
                  this.label.attr({
                    text: str,
                    visibility: HIDDEN
                  });  // Create new label
                } else {
                  this.label = this.axis.chart.renderer.text(str, null, null, options.useHTML).css(options.style).attr({
                    align: this.textAlign,
                    rotation: options.rotation,
                    visibility: HIDDEN
                  }).add(group);  // add to the labels-group
                }
              },
              setOffset: function (xOffset, xWidth) {
                var stackItem = this, axis = stackItem.axis, chart = axis.chart, inverted = chart.inverted, reversed = axis.reversed, neg = this.isNegative && !reversed || !this.isNegative && reversed,
                  // #4056
                  y = axis.translate(axis.usePercentage ? 100 : this.total, 0, 0, 0, 1),
                  // stack value translated mapped to chart coordinates
                  yZero = axis.translate(0),
                  // stack origin
                  h = mathAbs(y - yZero),
                  // stack height
                  x = chart.xAxis[0].translate(this.x) + xOffset,
                  // stack x position
                  plotHeight = chart.plotHeight, stackBox = {
                    x: inverted ? neg ? y : y - h : x,
                    y: inverted ? plotHeight - x - xWidth : neg ? plotHeight - y - h : plotHeight - y,
                    width: inverted ? h : xWidth,
                    height: inverted ? xWidth : h
                  }, label = this.label, alignAttr;
                if (label) {
                  label.align(this.alignOptions, null, stackBox);
                  // align the label to the box
                  // Set visibility (#678)
                  alignAttr = label.alignAttr;
                  label[this.options.crop === false || chart.isInsidePlot(alignAttr.x, alignAttr.y) ? 'show' : 'hide'](true);
                }
              }
            };
            /**
		 * Generate stacks for each series and calculate stacks total values
		 */
            Chart.prototype.getStacks = function () {
              var chart = this;
              // reset stacks for each yAxis
              each(chart.yAxis, function (axis) {
                if (axis.stacks && axis.hasVisibleSeries) {
                  axis.oldStacks = axis.stacks;
                }
              });
              each(chart.series, function (series) {
                if (series.options.stacking && (series.visible === true || chart.options.chart.ignoreHiddenSeries === false)) {
                  series.stackKey = series.type + pick(series.options.stack, '');
                }
              });
            };
            // Stacking methods defined on the Axis prototype
            /**
		 * Build the stacks from top down
		 */
            Axis.prototype.buildStacks = function () {
              var series = this.series, reversedStacks = pick(this.options.reversedStacks, true), i = series.length;
              if (!this.isXAxis) {
                this.usePercentage = false;
                while (i--) {
                  series[reversedStacks ? i : series.length - i - 1].setStackedPoints();
                }
                // Loop up again to compute percent stack
                if (this.usePercentage) {
                  for (i = 0; i < series.length; i++) {
                    series[i].setPercentStacks();
                  }
                }
              }
            };
            Axis.prototype.renderStackTotals = function () {
              var axis = this, chart = axis.chart, renderer = chart.renderer, stacks = axis.stacks, stackKey, oneStack, stackCategory, stackTotalGroup = axis.stackTotalGroup;
              // Create a separate group for the stack total labels
              if (!stackTotalGroup) {
                axis.stackTotalGroup = stackTotalGroup = renderer.g('stack-labels').attr({
                  visibility: VISIBLE,
                  zIndex: 6
                }).add();
              }
              // plotLeft/Top will change when y axis gets wider so we need to translate the
              // stackTotalGroup at every render call. See bug #506 and #516
              stackTotalGroup.translate(chart.plotLeft, chart.plotTop);
              // Render each stack total
              for (stackKey in stacks) {
                oneStack = stacks[stackKey];
                for (stackCategory in oneStack) {
                  oneStack[stackCategory].render(stackTotalGroup);
                }
              }
            };
            /**
		 * Set all the stacks to initial states and destroy unused ones.
		 */
            Axis.prototype.resetStacks = function () {
              var stacks = this.stacks, type, i;
              if (!this.isXAxis) {
                for (type in stacks) {
                  for (i in stacks[type]) {
                    // Clean up memory after point deletion (#1044, #4320)
                    if (stacks[type][i].touched < this.stacksTouched) {
                      stacks[type][i].destroy();
                      delete stacks[type][i];  // Reset stacks
                    } else {
                      stacks[type][i].total = null;
                      stacks[type][i].cum = 0;
                    }
                  }
                }
              }
            };
            Axis.prototype.cleanStacks = function () {
              var stacks, type, i;
              if (!this.isXAxis) {
                if (this.oldStacks) {
                  stacks = this.stacks = this.oldStacks;
                }
                // reset stacks
                for (type in stacks) {
                  for (i in stacks[type]) {
                    stacks[type][i].cum = stacks[type][i].total;
                  }
                }
              }
            };
            // Stacking methods defnied for Series prototype
            /**
		 * Adds series' points value to corresponding stack
		 */
            Series.prototype.setStackedPoints = function () {
              if (!this.options.stacking || this.visible !== true && this.chart.options.chart.ignoreHiddenSeries !== false) {
                return;
              }
              var series = this, xData = series.processedXData, yData = series.processedYData, stackedYData = [], yDataLength = yData.length, seriesOptions = series.options, threshold = seriesOptions.threshold, stackThreshold = seriesOptions.startFromThreshold ? threshold : 0, stackOption = seriesOptions.stack, stacking = seriesOptions.stacking, stackKey = series.stackKey, negKey = '-' + stackKey, negStacks = series.negStacks, yAxis = series.yAxis, stacks = yAxis.stacks, oldStacks = yAxis.oldStacks, stackIndicator, isNegative, stack, other, key, pointKey, i, x, y;
              yAxis.stacksTouched += 1;
              // loop over the non-null y values and read them into a local array
              for (i = 0; i < yDataLength; i++) {
                x = xData[i];
                y = yData[i];
                stackIndicator = series.getStackIndicator(stackIndicator, x, series.index);
                pointKey = stackIndicator.key;
                // Read stacked values into a stack based on the x value,
                // the sign of y and the stack key. Stacking is also handled for null values (#739)
                isNegative = negStacks && y < (stackThreshold ? 0 : threshold);
                key = isNegative ? negKey : stackKey;
                // Create empty object for this stack if it doesn't exist yet
                if (!stacks[key]) {
                  stacks[key] = {};
                }
                // Initialize StackItem for this x
                if (!stacks[key][x]) {
                  if (oldStacks[key] && oldStacks[key][x]) {
                    stacks[key][x] = oldStacks[key][x];
                    stacks[key][x].total = null;
                  } else {
                    stacks[key][x] = new StackItem(yAxis, yAxis.options.stackLabels, isNegative, x, stackOption);
                  }
                }
                // If the StackItem doesn't exist, create it first
                stack = stacks[key][x];
                //stack.points[pointKey] = [stack.cum || stackThreshold];
                stack.points[pointKey] = [pick(stack.cum, stackThreshold)];
                stack.touched = yAxis.stacksTouched;
                // Add value to the stack total
                if (stacking === 'percent') {
                  // Percent stacked column, totals are the same for the positive and negative stacks
                  other = isNegative ? stackKey : negKey;
                  if (negStacks && stacks[other] && stacks[other][x]) {
                    other = stacks[other][x];
                    stack.total = other.total = mathMax(other.total, stack.total) + mathAbs(y) || 0;  // Percent stacked areas
                  } else {
                    stack.total = correctFloat(stack.total + (mathAbs(y) || 0));
                  }
                } else {
                  stack.total = correctFloat(stack.total + (y || 0));
                }
                stack.cum = pick(stack.cum, stackThreshold) + (y || 0);
                stack.points[pointKey].push(stack.cum);
                stackedYData[i] = stack.cum;
              }
              if (stacking === 'percent') {
                yAxis.usePercentage = true;
              }
              this.stackedYData = stackedYData;
              // To be used in getExtremes
              // Reset old stacks
              yAxis.oldStacks = {};
            };
            /**
		 * Iterate over all stacks and compute the absolute values to percent
		 */
            Series.prototype.setPercentStacks = function () {
              var series = this, stackKey = series.stackKey, stacks = series.yAxis.stacks, processedXData = series.processedXData, stackIndicator;
              each([
                stackKey,
                '-' + stackKey
              ], function (key) {
                var i = processedXData.length, x, stack, pointExtremes, totalFactor;
                while (i--) {
                  x = processedXData[i];
                  stackIndicator = series.getStackIndicator(stackIndicator, x, series.index);
                  stack = stacks[key] && stacks[key][x];
                  pointExtremes = stack && stack.points[stackIndicator.key];
                  if (pointExtremes) {
                    totalFactor = stack.total ? 100 / stack.total : 0;
                    pointExtremes[0] = correctFloat(pointExtremes[0] * totalFactor);
                    // Y bottom value
                    pointExtremes[1] = correctFloat(pointExtremes[1] * totalFactor);
                    // Y value
                    series.stackedYData[i] = pointExtremes[1];
                  }
                }
              });
            };
            /**
		* Get stack indicator, according to it's x-value, to determine points with the same x-value
		*/
            Series.prototype.getStackIndicator = function (stackIndicator, x, index) {
              if (!defined(stackIndicator) || stackIndicator.x !== x) {
                stackIndicator = {
                  x: x,
                  index: 0
                };
              } else {
                stackIndicator.index++;
              }
              stackIndicator.key = [
                index,
                x,
                stackIndicator.index
              ].join(',');
              return stackIndicator;
            };
            // Extend the Chart prototype for dynamic methods
            extend(Chart.prototype, {
              addSeries: function (options, redraw, animation) {
                var series, chart = this;
                if (options) {
                  redraw = pick(redraw, true);
                  // defaults to true
                  fireEvent(chart, 'addSeries', { options: options }, function () {
                    series = chart.initSeries(options);
                    chart.isDirtyLegend = true;
                    // the series array is out of sync with the display
                    chart.linkSeries();
                    if (redraw) {
                      chart.redraw(animation);
                    }
                  });
                }
                return series;
              },
              addAxis: function (options, isX, redraw, animation) {
                var key = isX ? 'xAxis' : 'yAxis', chartOptions = this.options, axis;
                /*jslint unused: false*/
                axis = new Axis(this, merge(options, {
                  index: this[key].length,
                  isX: isX
                }));
                /*jslint unused: true*/
                // Push the new axis options to the chart options
                chartOptions[key] = splat(chartOptions[key] || {});
                chartOptions[key].push(options);
                if (pick(redraw, true)) {
                  this.redraw(animation);
                }
              },
              showLoading: function (str) {
                var chart = this, options = chart.options, loadingDiv = chart.loadingDiv, loadingOptions = options.loading, setLoadingSize = function () {
                    if (loadingDiv) {
                      css(loadingDiv, {
                        left: chart.plotLeft + PX,
                        top: chart.plotTop + PX,
                        width: chart.plotWidth + PX,
                        height: chart.plotHeight + PX
                      });
                    }
                  };
                // create the layer at the first call
                if (!loadingDiv) {
                  chart.loadingDiv = loadingDiv = createElement(DIV, { className: PREFIX + 'loading' }, extend(loadingOptions.style, {
                    zIndex: 10,
                    display: NONE
                  }), chart.container);
                  chart.loadingSpan = createElement('span', null, loadingOptions.labelStyle, loadingDiv);
                  addEvent(chart, 'redraw', setLoadingSize);  // #1080
                }
                // update text
                chart.loadingSpan.innerHTML = str || options.lang.loading;
                // show it
                if (!chart.loadingShown) {
                  css(loadingDiv, {
                    opacity: 0,
                    display: ''
                  });
                  animate(loadingDiv, { opacity: loadingOptions.style.opacity }, { duration: loadingOptions.showDuration || 0 });
                  chart.loadingShown = true;
                }
                setLoadingSize();
              },
              hideLoading: function () {
                var options = this.options, loadingDiv = this.loadingDiv;
                if (loadingDiv) {
                  animate(loadingDiv, { opacity: 0 }, {
                    duration: options.loading.hideDuration || 100,
                    complete: function () {
                      css(loadingDiv, { display: NONE });
                    }
                  });
                }
                this.loadingShown = false;
              }
            });
            // extend the Point prototype for dynamic methods
            extend(Point.prototype, {
              update: function (options, redraw, animation, runEvent) {
                var point = this, series = point.series, graphic = point.graphic, i, chart = series.chart, seriesOptions = series.options, names = series.xAxis && series.xAxis.names;
                redraw = pick(redraw, true);
                function update() {
                  point.applyOptions(options);
                  // Update visuals
                  if (point.y === null && graphic) {
                    // #4146
                    point.graphic = graphic.destroy();
                  }
                  if (isObject(options) && !isArray(options)) {
                    // Defer the actual redraw until getAttribs has been called (#3260)
                    point.redraw = function () {
                      if (graphic && graphic.element) {
                        if (options && options.marker && options.marker.symbol) {
                          point.graphic = graphic.destroy();
                        }
                      }
                      if (options && options.dataLabels && point.dataLabel) {
                        // #2468
                        point.dataLabel = point.dataLabel.destroy();
                      }
                      point.redraw = null;
                    };
                  }
                  // record changes in the parallel arrays
                  i = point.index;
                  series.updateParallelArrays(point, i);
                  if (names && point.name) {
                    names[point.x] = point.name;
                  }
                  seriesOptions.data[i] = point.options;
                  // redraw
                  series.isDirty = series.isDirtyData = true;
                  if (!series.fixedBox && series.hasCartesianSeries) {
                    // #1906, #2320
                    chart.isDirtyBox = true;
                  }
                  if (seriesOptions.legendType === 'point') {
                    // #1831, #1885
                    chart.isDirtyLegend = true;
                  }
                  if (redraw) {
                    chart.redraw(animation);
                  }
                }
                // Fire the event with a default handler of doing the update
                if (runEvent === false) {
                  // When called from setData
                  update();
                } else {
                  point.firePointEvent('update', { options: options }, update);
                }
              },
              remove: function (redraw, animation) {
                this.series.removePoint(inArray(this, this.series.data), redraw, animation);
              }
            });
            // Extend the series prototype for dynamic methods
            extend(Series.prototype, {
              addPoint: function (options, redraw, shift, animation) {
                var series = this, seriesOptions = series.options, data = series.data, graph = series.graph, area = series.area, chart = series.chart, names = series.xAxis && series.xAxis.names, currentShift = graph && graph.shift || 0, shiftShapes = [
                    'graph',
                    'area'
                  ], dataOptions = seriesOptions.data, point, isInTheMiddle, xData = series.xData, i, x;
                setAnimation(animation, chart);
                // Make graph animate sideways
                if (shift) {
                  i = series.zones.length;
                  while (i--) {
                    shiftShapes.push('zoneGraph' + i, 'zoneArea' + i);
                  }
                  each(shiftShapes, function (shape) {
                    if (series[shape]) {
                      series[shape].shift = currentShift + (seriesOptions.step ? 2 : 1);
                    }
                  });
                }
                if (area) {
                  area.isArea = true;  // needed in animation, both with and without shift
                }
                // Optional redraw, defaults to true
                redraw = pick(redraw, true);
                // Get options and push the point to xData, yData and series.options. In series.generatePoints
                // the Point instance will be created on demand and pushed to the series.data array.
                point = { series: series };
                series.pointClass.prototype.applyOptions.apply(point, [options]);
                x = point.x;
                // Get the insertion point
                i = xData.length;
                if (series.requireSorting && x < xData[i - 1]) {
                  isInTheMiddle = true;
                  while (i && xData[i - 1] > x) {
                    i--;
                  }
                }
                series.updateParallelArrays(point, 'splice', i, 0, 0);
                // insert undefined item
                series.updateParallelArrays(point, i);
                // update it
                if (names && point.name) {
                  names[x] = point.name;
                }
                dataOptions.splice(i, 0, options);
                if (isInTheMiddle) {
                  series.data.splice(i, 0, null);
                  series.processData();
                }
                // Generate points to be added to the legend (#1329)
                if (seriesOptions.legendType === 'point') {
                  series.generatePoints();
                }
                // Shift the first point off the parallel arrays
                // todo: consider series.removePoint(i) method
                if (shift) {
                  if (data[0] && data[0].remove) {
                    data[0].remove(false);
                  } else {
                    data.shift();
                    series.updateParallelArrays(point, 'shift');
                    dataOptions.shift();
                  }
                }
                // redraw
                series.isDirty = true;
                series.isDirtyData = true;
                if (redraw) {
                  series.getAttribs();
                  // #1937
                  chart.redraw();
                }
              },
              removePoint: function (i, redraw, animation) {
                var series = this, data = series.data, point = data[i], points = series.points, chart = series.chart, remove = function () {
                    if (data.length === points.length) {
                      points.splice(i, 1);
                    }
                    data.splice(i, 1);
                    series.options.data.splice(i, 1);
                    series.updateParallelArrays(point || { series: series }, 'splice', i, 1);
                    if (point) {
                      point.destroy();
                    }
                    // redraw
                    series.isDirty = true;
                    series.isDirtyData = true;
                    if (redraw) {
                      chart.redraw();
                    }
                  };
                setAnimation(animation, chart);
                redraw = pick(redraw, true);
                // Fire the event with a default handler of removing the point
                if (point) {
                  point.firePointEvent('remove', null, remove);
                } else {
                  remove();
                }
              },
              remove: function (redraw, animation) {
                var series = this, chart = series.chart;
                redraw = pick(redraw, true);
                if (!series.isRemoving) {
                  /* prevent triggering native event in jQuery
						(calling the remove function from the remove event) */
                  series.isRemoving = true;
                  // fire the event with a default handler of removing the point
                  fireEvent(series, 'remove', null, function () {
                    // destroy elements
                    series.destroy();
                    // redraw
                    chart.isDirtyLegend = chart.isDirtyBox = true;
                    chart.linkSeries();
                    if (redraw) {
                      chart.redraw(animation);
                    }
                  });
                }
                series.isRemoving = false;
              },
              update: function (newOptions, redraw) {
                var series = this, chart = this.chart,
                  // must use user options when changing type because this.options is merged
                  // in with type specific plotOptions
                  oldOptions = this.userOptions, oldType = this.type, proto = seriesTypes[oldType].prototype, preserve = [
                    'group',
                    'markerGroup',
                    'dataLabelsGroup'
                  ], n;
                // If we're changing type or zIndex, create new groups (#3380, #3404)
                if (newOptions.type && newOptions.type !== oldType || newOptions.zIndex !== undefined) {
                  preserve.length = 0;
                }
                // Make sure groups are not destroyed (#3094)
                each(preserve, function (prop) {
                  preserve[prop] = series[prop];
                  delete series[prop];
                });
                // Do the merge, with some forced options
                newOptions = merge(oldOptions, {
                  animation: false,
                  index: this.index,
                  pointStart: this.xData[0]
                }, { data: this.options.data }, newOptions);
                // Destroy the series and delete all properties. Reinsert all methods 
                // and properties from the new type prototype (#2270, #3719)
                this.remove(false);
                for (n in proto) {
                  this[n] = UNDEFINED;
                }
                extend(this, seriesTypes[newOptions.type || oldType].prototype);
                // Re-register groups (#3094)
                each(preserve, function (prop) {
                  series[prop] = preserve[prop];
                });
                this.init(chart, newOptions);
                chart.linkSeries();
                // Links are lost in this.remove (#3028)
                if (pick(redraw, true)) {
                  chart.redraw(false);
                }
              }
            });
            // Extend the Axis.prototype for dynamic methods
            extend(Axis.prototype, {
              update: function (newOptions, redraw) {
                var chart = this.chart;
                newOptions = chart.options[this.coll][this.options.index] = merge(this.userOptions, newOptions);
                this.destroy(true);
                this._addedPlotLB = this.chart._labelPanes = UNDEFINED;
                // #1611, #2887, #4314
                this.init(chart, extend(newOptions, { events: UNDEFINED }));
                chart.isDirtyBox = true;
                if (pick(redraw, true)) {
                  chart.redraw();
                }
              },
              remove: function (redraw) {
                var chart = this.chart, key = this.coll,
                  // xAxis or yAxis
                  axisSeries = this.series, i = axisSeries.length;
                // Remove associated series (#2687)
                while (i--) {
                  if (axisSeries[i]) {
                    axisSeries[i].remove(false);
                  }
                }
                // Remove the axis
                erase(chart.axes, this);
                erase(chart[key], this);
                chart.options[key].splice(this.options.index, 1);
                each(chart[key], function (axis, i) {
                  // Re-index, #1706
                  axis.options.index = i;
                });
                this.destroy();
                chart.isDirtyBox = true;
                if (pick(redraw, true)) {
                  chart.redraw();
                }
              },
              setTitle: function (newTitleOptions, redraw) {
                this.update({ title: newTitleOptions }, redraw);
              },
              setCategories: function (categories, redraw) {
                this.update({ categories: categories }, redraw);
              }
            });
            /**
		 * LineSeries object
		 */
            var LineSeries = extendClass(Series);
            seriesTypes.line = LineSeries;
            /**
		 * Set the default options for area
		 */
            defaultPlotOptions.area = merge(defaultSeriesOptions, {
              softThreshold: false,
              threshold: 0
            });
            /**
		 * AreaSeries object
		 */
            var AreaSeries = extendClass(Series, {
                type: 'area',
                getSegments: function () {
                  var series = this, segments = [], segment = [], keys = [], xAxis = this.xAxis, yAxis = this.yAxis, stack = yAxis.stacks[this.stackKey], pointMap = {}, plotX, plotY, points = this.points, connectNulls = this.options.connectNulls, stackIndicator, i, x;
                  if (this.options.stacking && !this.cropped) {
                    // cropped causes artefacts in Stock, and perf issue
                    // Create a map where we can quickly look up the points by their X value.
                    for (i = 0; i < points.length; i++) {
                      pointMap[points[i].x] = points[i];
                    }
                    // Sort the keys (#1651)
                    for (x in stack) {
                      if (stack[x].total !== null) {
                        // nulled after switching between grouping and not (#1651, #2336)
                        keys.push(+x);
                      }
                    }
                    keys.sort(function (a, b) {
                      return a - b;
                    });
                    each(keys, function (x) {
                      var threshold = null, stackPoint;
                      if (connectNulls && (!pointMap[x] || pointMap[x].y === null)) {
                        // #1836
                        return;  // The point exists, push it to the segment
                      } else if (pointMap[x]) {
                        segment.push(pointMap[x]);  // There is no point for this X value in this series, so we 
                                                    // insert a dummy point in order for the areas to be drawn
                                                    // correctly.
                      } else {
                        // Loop down the stack to find the series below this one that has
                        // a value (#1991)
                        for (i = series.index; i <= yAxis.series.length; i++) {
                          stackIndicator = series.getStackIndicator(null, x, i);
                          stackPoint = stack[x].points[stackIndicator.key];
                          if (stackPoint) {
                            threshold = stackPoint[1];
                            break;
                          }
                        }
                        plotX = xAxis.translate(x);
                        plotY = yAxis.getThreshold(threshold);
                        segment.push({
                          y: null,
                          plotX: plotX,
                          clientX: plotX,
                          plotY: plotY,
                          yBottom: plotY,
                          onMouseOver: noop
                        });
                      }
                    });
                    if (segment.length) {
                      segments.push(segment);
                    }
                  } else {
                    Series.prototype.getSegments.call(this);
                    segments = this.segments;
                  }
                  this.segments = segments;
                },
                getSegmentPath: function (segment) {
                  var segmentPath = Series.prototype.getSegmentPath.call(this, segment),
                    // call base method
                    areaSegmentPath = [].concat(segmentPath),
                    // work on a copy for the area path
                    i, options = this.options, segLength = segmentPath.length, translatedThreshold = this.yAxis.getThreshold(options.threshold),
                    // #2181
                    yBottom;
                  if (segLength === 3) {
                    // for animation from 1 to two points
                    areaSegmentPath.push(L, segmentPath[1], segmentPath[2]);
                  }
                  if (options.stacking && !this.closedStacks) {
                    // Follow stack back. Todo: implement areaspline. A general solution could be to 
                    // reverse the entire graphPath of the previous series, though may be hard with
                    // splines and with series with different extremes
                    for (i = segment.length - 1; i >= 0; i--) {
                      yBottom = pick(segment[i].yBottom, translatedThreshold);
                      // step line?
                      if (i < segment.length - 1 && options.step) {
                        areaSegmentPath.push(segment[i + 1].plotX, yBottom);
                      }
                      areaSegmentPath.push(segment[i].plotX, yBottom);
                    }
                  } else {
                    // follow zero line back
                    this.closeSegment(areaSegmentPath, segment, translatedThreshold);
                  }
                  this.areaPath = this.areaPath.concat(areaSegmentPath);
                  return segmentPath;
                },
                closeSegment: function (path, segment, translatedThreshold) {
                  path.push(L, segment[segment.length - 1].plotX, translatedThreshold, L, segment[0].plotX, translatedThreshold);
                },
                drawGraph: function () {
                  // Define or reset areaPath
                  this.areaPath = [];
                  // Call the base method
                  Series.prototype.drawGraph.apply(this);
                  // Define local variables
                  var series = this, areaPath = this.areaPath, options = this.options, zones = this.zones, props = [[
                        'area',
                        this.color,
                        options.fillColor
                      ]];
                  // area name, main color, fill color
                  each(zones, function (threshold, i) {
                    props.push([
                      'zoneArea' + i,
                      threshold.color || series.color,
                      threshold.fillColor || options.fillColor
                    ]);
                  });
                  each(props, function (prop) {
                    var areaKey = prop[0], area = series[areaKey];
                    // Create or update the area
                    if (area) {
                      // update
                      area.animate({ d: areaPath });
                    } else {
                      // create
                      series[areaKey] = series.chart.renderer.path(areaPath).attr({
                        fill: pick(prop[2], Color(prop[1]).setOpacity(pick(options.fillOpacity, 0.75)).get()),
                        zIndex: 0
                      }).add(series.group);
                    }
                  });
                },
                drawLegendSymbol: LegendSymbolMixin.drawRectangle
              });
            seriesTypes.area = AreaSeries;
            /**
		 * Set the default options for spline
		 */
            defaultPlotOptions.spline = merge(defaultSeriesOptions);
            /**
		 * SplineSeries object
		 */
            var SplineSeries = extendClass(Series, {
                type: 'spline',
                getPointSpline: function (segment, point, i) {
                  var smoothing = 1.5,
                    // 1 means control points midway between points, 2 means 1/3 from the point, 3 is 1/4 etc
                    denom = smoothing + 1, plotX = point.plotX, plotY = point.plotY, lastPoint = segment[i - 1], nextPoint = segment[i + 1], leftContX, leftContY, rightContX, rightContY, ret;
                  // find control points
                  if (lastPoint && nextPoint) {
                    var lastX = lastPoint.plotX, lastY = lastPoint.plotY, nextX = nextPoint.plotX, nextY = nextPoint.plotY, correction;
                    leftContX = (smoothing * plotX + lastX) / denom;
                    leftContY = (smoothing * plotY + lastY) / denom;
                    rightContX = (smoothing * plotX + nextX) / denom;
                    rightContY = (smoothing * plotY + nextY) / denom;
                    // have the two control points make a straight line through main point
                    correction = (rightContY - leftContY) * (rightContX - plotX) / (rightContX - leftContX) + plotY - rightContY;
                    leftContY += correction;
                    rightContY += correction;
                    // to prevent false extremes, check that control points are between
                    // neighbouring points' y values
                    if (leftContY > lastY && leftContY > plotY) {
                      leftContY = mathMax(lastY, plotY);
                      rightContY = 2 * plotY - leftContY;  // mirror of left control point
                    } else if (leftContY < lastY && leftContY < plotY) {
                      leftContY = mathMin(lastY, plotY);
                      rightContY = 2 * plotY - leftContY;
                    }
                    if (rightContY > nextY && rightContY > plotY) {
                      rightContY = mathMax(nextY, plotY);
                      leftContY = 2 * plotY - rightContY;
                    } else if (rightContY < nextY && rightContY < plotY) {
                      rightContY = mathMin(nextY, plotY);
                      leftContY = 2 * plotY - rightContY;
                    }
                    // record for drawing in next point
                    point.rightContX = rightContX;
                    point.rightContY = rightContY;
                  }
                  // Visualize control points for debugging
                  /*
				if (leftContX) {
					this.chart.renderer.circle(leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop, 2)
						.attr({
							stroke: 'red',
							'stroke-width': 1,
							fill: 'none'
						})
						.add();
					this.chart.renderer.path(['M', leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop,
						'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])
						.attr({
							stroke: 'red',
							'stroke-width': 1
						})
						.add();
					this.chart.renderer.circle(rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop, 2)
						.attr({
							stroke: 'green',
							'stroke-width': 1,
							fill: 'none'
						})
						.add();
					this.chart.renderer.path(['M', rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop,
						'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])
						.attr({
							stroke: 'green',
							'stroke-width': 1
						})
						.add();
				}
				*/
                  // moveTo or lineTo
                  if (!i) {
                    ret = [
                      M,
                      plotX,
                      plotY
                    ];
                  } else {
                    // curve from last point to this
                    ret = [
                      'C',
                      lastPoint.rightContX || lastPoint.plotX,
                      lastPoint.rightContY || lastPoint.plotY,
                      leftContX || plotX,
                      leftContY || plotY,
                      plotX,
                      plotY
                    ];
                    lastPoint.rightContX = lastPoint.rightContY = null;  // reset for updating series later
                  }
                  return ret;
                }
              });
            seriesTypes.spline = SplineSeries;
            /**
		 * Set the default options for areaspline
		 */
            defaultPlotOptions.areaspline = merge(defaultPlotOptions.area);
            /**
		 * AreaSplineSeries object
		 */
            var areaProto = AreaSeries.prototype, AreaSplineSeries = extendClass(SplineSeries, {
                type: 'areaspline',
                closedStacks: true,
                getSegmentPath: areaProto.getSegmentPath,
                closeSegment: areaProto.closeSegment,
                drawGraph: areaProto.drawGraph,
                drawLegendSymbol: LegendSymbolMixin.drawRectangle
              });
            seriesTypes.areaspline = AreaSplineSeries;
            /**
		 * Set the default options for column
		 */
            defaultPlotOptions.column = merge(defaultSeriesOptions, {
              borderColor: '#FFFFFF',
              borderRadius: 0,
              groupPadding: 0.2,
              marker: null,
              pointPadding: 0.1,
              minPointLength: 0,
              cropThreshold: 50,
              pointRange: null,
              states: {
                hover: {
                  brightness: 0.1,
                  shadow: false,
                  halo: false
                },
                select: {
                  color: '#C0C0C0',
                  borderColor: '#000000',
                  shadow: false
                }
              },
              dataLabels: {
                align: null,
                verticalAlign: null,
                y: null
              },
              softThreshold: false,
              startFromThreshold: true,
              stickyTracking: false,
              tooltip: { distance: 6 },
              threshold: 0
            });
            /**
		 * ColumnSeries object
		 */
            var ColumnSeries = extendClass(Series, {
                type: 'column',
                pointAttrToOptions: {
                  stroke: 'borderColor',
                  fill: 'color',
                  r: 'borderRadius'
                },
                cropShoulder: 0,
                directTouch: true,
                trackerGroups: [
                  'group',
                  'dataLabelsGroup'
                ],
                negStacks: true,
                init: function () {
                  Series.prototype.init.apply(this, arguments);
                  var series = this, chart = series.chart;
                  // if the series is added dynamically, force redraw of other
                  // series affected by a new column
                  if (chart.hasRendered) {
                    each(chart.series, function (otherSeries) {
                      if (otherSeries.type === series.type) {
                        otherSeries.isDirty = true;
                      }
                    });
                  }
                },
                getColumnMetrics: function () {
                  var series = this, options = series.options, xAxis = series.xAxis, yAxis = series.yAxis, reversedXAxis = xAxis.reversed, stackKey, stackGroups = {}, columnIndex, columnCount = 0;
                  // Get the total number of column type series.
                  // This is called on every series. Consider moving this logic to a
                  // chart.orderStacks() function and call it on init, addSeries and removeSeries
                  if (options.grouping === false) {
                    columnCount = 1;
                  } else {
                    each(series.chart.series, function (otherSeries) {
                      var otherOptions = otherSeries.options, otherYAxis = otherSeries.yAxis;
                      if (otherSeries.type === series.type && otherSeries.visible && yAxis.len === otherYAxis.len && yAxis.pos === otherYAxis.pos) {
                        // #642, #2086
                        if (otherOptions.stacking) {
                          stackKey = otherSeries.stackKey;
                          if (stackGroups[stackKey] === UNDEFINED) {
                            stackGroups[stackKey] = columnCount++;
                          }
                          columnIndex = stackGroups[stackKey];
                        } else if (otherOptions.grouping !== false) {
                          // #1162
                          columnIndex = columnCount++;
                        }
                        otherSeries.columnIndex = columnIndex;
                      }
                    });
                  }
                  var categoryWidth = mathMin(mathAbs(xAxis.transA) * (xAxis.ordinalSlope || options.pointRange || xAxis.closestPointRange || xAxis.tickInterval || 1), xAxis.len), groupPadding = categoryWidth * options.groupPadding, groupWidth = categoryWidth - 2 * groupPadding, pointOffsetWidth = groupWidth / columnCount, pointWidth = mathMin(options.maxPointWidth || xAxis.len, pick(options.pointWidth, pointOffsetWidth * (1 - 2 * options.pointPadding))), pointPadding = (pointOffsetWidth - pointWidth) / 2, colIndex = (reversedXAxis ? columnCount - (series.columnIndex || 0) : series.columnIndex) || 0, pointXOffset = pointPadding + (groupPadding + colIndex * pointOffsetWidth - categoryWidth / 2) * (reversedXAxis ? -1 : 1);
                  // Save it for reading in linked series (Error bars particularly)
                  return series.columnMetrics = {
                    width: pointWidth,
                    offset: pointXOffset
                  };
                },
                crispCol: function (x, y, w, h) {
                  var chart = this.chart, borderWidth = this.borderWidth, xCrisp = -(borderWidth % 2 ? 0.5 : 0), yCrisp = borderWidth % 2 ? 0.5 : 1, right, bottom, fromTop;
                  if (chart.inverted && chart.renderer.isVML) {
                    yCrisp += 1;
                  }
                  // Horizontal. We need to first compute the exact right edge, then round it
                  // and compute the width from there.
                  right = Math.round(x + w) + xCrisp;
                  x = Math.round(x) + xCrisp;
                  w = right - x;
                  // Vertical
                  fromTop = mathAbs(y) <= 0.5;
                  // #4504
                  bottom = Math.round(y + h) + yCrisp;
                  y = Math.round(y) + yCrisp;
                  h = bottom - y;
                  // Top edges are exceptions
                  if (fromTop) {
                    y -= 1;
                    h += 1;
                  }
                  return {
                    x: x,
                    y: y,
                    width: w,
                    height: h
                  };
                },
                translate: function () {
                  var series = this, chart = series.chart, options = series.options, borderWidth = series.borderWidth = pick(options.borderWidth, series.closestPointRange * series.xAxis.transA < 2 ? 0 : 1), yAxis = series.yAxis, threshold = options.threshold, translatedThreshold = series.translatedThreshold = yAxis.getThreshold(threshold), minPointLength = pick(options.minPointLength, 5), metrics = series.getColumnMetrics(), pointWidth = metrics.width, seriesBarW = series.barW = mathMax(pointWidth, 1 + 2 * borderWidth),
                    // postprocessed for border width
                    pointXOffset = series.pointXOffset = metrics.offset;
                  if (chart.inverted) {
                    translatedThreshold -= 0.5;  // #3355
                  }
                  // When the pointPadding is 0, we want the columns to be packed tightly, so we allow individual
                  // columns to have individual sizes. When pointPadding is greater, we strive for equal-width
                  // columns (#2694).
                  if (options.pointPadding) {
                    seriesBarW = mathCeil(seriesBarW);
                  }
                  Series.prototype.translate.apply(series);
                  // Record the new values
                  each(series.points, function (point) {
                    var yBottom = mathMin(pick(point.yBottom, translatedThreshold), 90000),
                      // #3575
                      safeDistance = 999 + mathAbs(yBottom), plotY = mathMin(mathMax(-safeDistance, point.plotY), yAxis.len + safeDistance),
                      // Don't draw too far outside plot area (#1303, #2241, #4264)
                      barX = point.plotX + pointXOffset, barW = seriesBarW, barY = mathMin(plotY, yBottom), up, barH = mathMax(plotY, yBottom) - barY;
                    // Handle options.minPointLength
                    if (mathAbs(barH) < minPointLength) {
                      if (minPointLength) {
                        barH = minPointLength;
                        up = !yAxis.reversed && !point.negative || yAxis.reversed && point.negative;
                        barY = mathAbs(barY - translatedThreshold) > minPointLength ? yBottom - minPointLength : translatedThreshold - (up ? minPointLength : 0);  // #1485, #4051
                      }
                    }
                    // Cache for access in polar
                    point.barX = barX;
                    point.pointWidth = pointWidth;
                    // Fix the tooltip on center of grouped columns (#1216, #424, #3648)
                    point.tooltipPos = chart.inverted ? [
                      yAxis.len + yAxis.pos - chart.plotLeft - plotY,
                      series.xAxis.len - barX - barW / 2,
                      barH
                    ] : [
                      barX + barW / 2,
                      plotY + yAxis.pos - chart.plotTop,
                      barH
                    ];
                    // Register shape type and arguments to be used in drawPoints
                    point.shapeType = 'rect';
                    point.shapeArgs = series.crispCol(barX, barY, barW, barH);
                  });
                },
                getSymbol: noop,
                drawLegendSymbol: LegendSymbolMixin.drawRectangle,
                drawGraph: noop,
                drawPoints: function () {
                  var series = this, chart = this.chart, options = series.options, renderer = chart.renderer, animationLimit = options.animationLimit || 250, shapeArgs, pointAttr;
                  // draw the columns
                  each(series.points, function (point) {
                    var plotY = point.plotY, graphic = point.graphic, borderAttr;
                    if (plotY !== UNDEFINED && !isNaN(plotY) && point.y !== null) {
                      shapeArgs = point.shapeArgs;
                      borderAttr = defined(series.borderWidth) ? { 'stroke-width': series.borderWidth } : {};
                      pointAttr = point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE] || series.pointAttr[NORMAL_STATE];
                      if (graphic) {
                        // update
                        stop(graphic);
                        graphic.attr(borderAttr)[chart.pointCount < animationLimit ? 'animate' : 'attr'](merge(shapeArgs));
                      } else {
                        point.graphic = graphic = renderer[point.shapeType](shapeArgs).attr(borderAttr).attr(pointAttr).add(point.group || series.group).shadow(options.shadow, null, options.stacking && !options.borderRadius);
                      }
                    } else if (graphic) {
                      point.graphic = graphic.destroy();  // #1269
                    }
                  });
                },
                animate: function (init) {
                  var series = this, yAxis = this.yAxis, options = series.options, inverted = this.chart.inverted, attr = {}, translatedThreshold;
                  if (hasSVG) {
                    // VML is too slow anyway
                    if (init) {
                      attr.scaleY = 0.001;
                      translatedThreshold = mathMin(yAxis.pos + yAxis.len, mathMax(yAxis.pos, yAxis.toPixels(options.threshold)));
                      if (inverted) {
                        attr.translateX = translatedThreshold - yAxis.len;
                      } else {
                        attr.translateY = translatedThreshold;
                      }
                      series.group.attr(attr);
                    } else {
                      // run the animation
                      attr.scaleY = 1;
                      attr[inverted ? 'translateX' : 'translateY'] = yAxis.pos;
                      series.group.animate(attr, series.options.animation);
                      // delete this function to allow it only once
                      series.animate = null;
                    }
                  }
                },
                remove: function () {
                  var series = this, chart = series.chart;
                  // column and bar series affects other series of the same type
                  // as they are either stacked or grouped
                  if (chart.hasRendered) {
                    each(chart.series, function (otherSeries) {
                      if (otherSeries.type === series.type) {
                        otherSeries.isDirty = true;
                      }
                    });
                  }
                  Series.prototype.remove.apply(series, arguments);
                }
              });
            seriesTypes.column = ColumnSeries;
            /**
		 * Set the default options for bar
		 */
            defaultPlotOptions.bar = merge(defaultPlotOptions.column);
            /**
		 * The Bar series class
		 */
            var BarSeries = extendClass(ColumnSeries, {
                type: 'bar',
                inverted: true
              });
            seriesTypes.bar = BarSeries;
            /**
		 * Set the default options for scatter
		 */
            defaultPlotOptions.scatter = merge(defaultSeriesOptions, {
              lineWidth: 0,
              marker: { enabled: true },
              tooltip: {
                headerFormat: '<span style="color:{point.color}">\u25cf</span> <span style="font-size: 10px;"> {series.name}</span><br/>',
                pointFormat: 'x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>'
              }
            });
            /**
		 * The scatter series class
		 */
            var ScatterSeries = extendClass(Series, {
                type: 'scatter',
                sorted: false,
                requireSorting: false,
                noSharedTooltip: true,
                trackerGroups: [
                  'group',
                  'markerGroup',
                  'dataLabelsGroup'
                ],
                takeOrdinalPosition: false,
                kdDimensions: 2,
                drawGraph: function () {
                  if (this.options.lineWidth) {
                    Series.prototype.drawGraph.call(this);
                  }
                }
              });
            seriesTypes.scatter = ScatterSeries;
            /**
		 * Set the default options for pie
		 */
            defaultPlotOptions.pie = merge(defaultSeriesOptions, {
              borderColor: '#FFFFFF',
              borderWidth: 1,
              center: [
                null,
                null
              ],
              clip: false,
              colorByPoint: true,
              dataLabels: {
                distance: 30,
                enabled: true,
                formatter: function () {
                  // #2945
                  return this.y === null ? undefined : this.point.name;
                },
                x: 0
              },
              ignoreHiddenPoint: true,
              legendType: 'point',
              marker: null,
              size: null,
              showInLegend: false,
              slicedOffset: 10,
              states: {
                hover: {
                  brightness: 0.1,
                  shadow: false
                }
              },
              stickyTracking: false,
              tooltip: { followPointer: true }
            });
            /**
		 * Extended point object for pies
		 */
            var PiePoint = extendClass(Point, {
                init: function () {
                  Point.prototype.init.apply(this, arguments);
                  var point = this, toggleSlice;
                  point.name = pick(point.name, 'Slice');
                  // add event listener for select
                  toggleSlice = function (e) {
                    point.slice(e.type === 'select');
                  };
                  addEvent(point, 'select', toggleSlice);
                  addEvent(point, 'unselect', toggleSlice);
                  return point;
                },
                setVisible: function (vis, redraw) {
                  var point = this, series = point.series, chart = series.chart, ignoreHiddenPoint = series.options.ignoreHiddenPoint;
                  redraw = pick(redraw, ignoreHiddenPoint);
                  if (vis !== point.visible) {
                    // If called without an argument, toggle visibility
                    point.visible = point.options.visible = vis = vis === UNDEFINED ? !point.visible : vis;
                    series.options.data[inArray(point, series.data)] = point.options;
                    // update userOptions.data
                    // Show and hide associated elements. This is performed regardless of redraw or not,
                    // because chart.redraw only handles full series.
                    each([
                      'graphic',
                      'dataLabel',
                      'connector',
                      'shadowGroup'
                    ], function (key) {
                      if (point[key]) {
                        point[key][vis ? 'show' : 'hide'](true);
                      }
                    });
                    if (point.legendItem) {
                      chart.legend.colorizeItem(point, vis);
                    }
                    // #4170, hide halo after hiding point
                    if (!vis && point.state === 'hover') {
                      point.setState('');
                    }
                    // Handle ignore hidden slices
                    if (ignoreHiddenPoint) {
                      series.isDirty = true;
                    }
                    if (redraw) {
                      chart.redraw();
                    }
                  }
                },
                slice: function (sliced, redraw, animation) {
                  var point = this, series = point.series, chart = series.chart, translation;
                  setAnimation(animation, chart);
                  // redraw is true by default
                  redraw = pick(redraw, true);
                  // if called without an argument, toggle
                  point.sliced = point.options.sliced = sliced = defined(sliced) ? sliced : !point.sliced;
                  series.options.data[inArray(point, series.data)] = point.options;
                  // update userOptions.data
                  translation = sliced ? point.slicedTranslation : {
                    translateX: 0,
                    translateY: 0
                  };
                  point.graphic.animate(translation);
                  if (point.shadowGroup) {
                    point.shadowGroup.animate(translation);
                  }
                },
                haloPath: function (size) {
                  var shapeArgs = this.shapeArgs, chart = this.series.chart;
                  return this.sliced || !this.visible ? [] : this.series.chart.renderer.symbols.arc(chart.plotLeft + shapeArgs.x, chart.plotTop + shapeArgs.y, shapeArgs.r + size, shapeArgs.r + size, {
                    innerR: this.shapeArgs.r,
                    start: shapeArgs.start,
                    end: shapeArgs.end
                  });
                }
              });
            /**
		 * The Pie series class
		 */
            var PieSeries = {
                type: 'pie',
                isCartesian: false,
                pointClass: PiePoint,
                requireSorting: false,
                directTouch: true,
                noSharedTooltip: true,
                trackerGroups: [
                  'group',
                  'dataLabelsGroup'
                ],
                axisTypes: [],
                pointAttrToOptions: {
                  stroke: 'borderColor',
                  'stroke-width': 'borderWidth',
                  fill: 'color'
                },
                animate: function (init) {
                  var series = this, points = series.points, startAngleRad = series.startAngleRad;
                  if (!init) {
                    each(points, function (point) {
                      var graphic = point.graphic, args = point.shapeArgs;
                      if (graphic) {
                        // start values
                        graphic.attr({
                          r: point.startR || series.center[3] / 2,
                          start: startAngleRad,
                          end: startAngleRad
                        });
                        // animate
                        graphic.animate({
                          r: args.r,
                          start: args.start,
                          end: args.end
                        }, series.options.animation);
                      }
                    });
                    // delete this function to allow it only once
                    series.animate = null;
                  }
                },
                updateTotals: function () {
                  var i, total = 0, points = this.points, len = points.length, point, ignoreHiddenPoint = this.options.ignoreHiddenPoint;
                  // Get the total sum
                  for (i = 0; i < len; i++) {
                    point = points[i];
                    total += ignoreHiddenPoint && !point.visible ? 0 : point.y;
                  }
                  this.total = total;
                  // Set each point's properties
                  for (i = 0; i < len; i++) {
                    point = points[i];
                    point.percentage = total > 0 && (point.visible || !ignoreHiddenPoint) ? point.y / total * 100 : 0;
                    point.total = total;
                  }
                },
                generatePoints: function () {
                  Series.prototype.generatePoints.call(this);
                  this.updateTotals();
                },
                translate: function (positions) {
                  this.generatePoints();
                  var series = this, cumulative = 0, precision = 1000,
                    // issue #172
                    options = series.options, slicedOffset = options.slicedOffset, connectorOffset = slicedOffset + options.borderWidth, start, end, angle, startAngle = options.startAngle || 0, startAngleRad = series.startAngleRad = mathPI / 180 * (startAngle - 90), endAngleRad = series.endAngleRad = mathPI / 180 * (pick(options.endAngle, startAngle + 360) - 90), circ = endAngleRad - startAngleRad,
                    //2 * mathPI,
                    points = series.points, radiusX,
                    // the x component of the radius vector for a given point
                    radiusY, labelDistance = options.dataLabels.distance, ignoreHiddenPoint = options.ignoreHiddenPoint, i, len = points.length, point;
                  // Get positions - either an integer or a percentage string must be given.
                  // If positions are passed as a parameter, we're in a recursive loop for adjusting
                  // space for data labels.
                  if (!positions) {
                    series.center = positions = series.getCenter();
                  }
                  // utility for getting the x value from a given y, used for anticollision logic in data labels
                  series.getX = function (y, left) {
                    angle = math.asin(mathMin((y - positions[1]) / (positions[2] / 2 + labelDistance), 1));
                    return positions[0] + (left ? -1 : 1) * (mathCos(angle) * (positions[2] / 2 + labelDistance));
                  };
                  // Calculate the geometry for each point
                  for (i = 0; i < len; i++) {
                    point = points[i];
                    // set start and end angle
                    start = startAngleRad + cumulative * circ;
                    if (!ignoreHiddenPoint || point.visible) {
                      cumulative += point.percentage / 100;
                    }
                    end = startAngleRad + cumulative * circ;
                    // set the shape
                    point.shapeType = 'arc';
                    point.shapeArgs = {
                      x: positions[0],
                      y: positions[1],
                      r: positions[2] / 2,
                      innerR: positions[3] / 2,
                      start: mathRound(start * precision) / precision,
                      end: mathRound(end * precision) / precision
                    };
                    // The angle must stay within -90 and 270 (#2645)
                    angle = (end + start) / 2;
                    if (angle > 1.5 * mathPI) {
                      angle -= 2 * mathPI;
                    } else if (angle < -mathPI / 2) {
                      angle += 2 * mathPI;
                    }
                    // Center for the sliced out slice
                    point.slicedTranslation = {
                      translateX: mathRound(mathCos(angle) * slicedOffset),
                      translateY: mathRound(mathSin(angle) * slicedOffset)
                    };
                    // set the anchor point for tooltips
                    radiusX = mathCos(angle) * positions[2] / 2;
                    radiusY = mathSin(angle) * positions[2] / 2;
                    point.tooltipPos = [
                      positions[0] + radiusX * 0.7,
                      positions[1] + radiusY * 0.7
                    ];
                    point.half = angle < -mathPI / 2 || angle > mathPI / 2 ? 1 : 0;
                    point.angle = angle;
                    // set the anchor point for data labels
                    connectorOffset = mathMin(connectorOffset, labelDistance / 2);
                    // #1678
                    point.labelPos = [
                      positions[0] + radiusX + mathCos(angle) * labelDistance,
                      positions[1] + radiusY + mathSin(angle) * labelDistance,
                      positions[0] + radiusX + mathCos(angle) * connectorOffset,
                      positions[1] + radiusY + mathSin(angle) * connectorOffset,
                      positions[0] + radiusX,
                      positions[1] + radiusY,
                      labelDistance < 0 ? 'center' : point.half ? 'right' : 'left',
                      angle
                    ];
                  }
                },
                drawGraph: null,
                drawPoints: function () {
                  var series = this, chart = series.chart, renderer = chart.renderer, groupTranslation,
                    //center,
                    graphic,
                    //group,
                    shadow = series.options.shadow, shadowGroup, shapeArgs, attr;
                  if (shadow && !series.shadowGroup) {
                    series.shadowGroup = renderer.g('shadow').add(series.group);
                  }
                  // draw the slices
                  each(series.points, function (point) {
                    if (point.y !== null) {
                      graphic = point.graphic;
                      shapeArgs = point.shapeArgs;
                      shadowGroup = point.shadowGroup;
                      // put the shadow behind all points
                      if (shadow && !shadowGroup) {
                        shadowGroup = point.shadowGroup = renderer.g('shadow').add(series.shadowGroup);
                      }
                      // if the point is sliced, use special translation, else use plot area traslation
                      groupTranslation = point.sliced ? point.slicedTranslation : {
                        translateX: 0,
                        translateY: 0
                      };
                      //group.translate(groupTranslation[0], groupTranslation[1]);
                      if (shadowGroup) {
                        shadowGroup.attr(groupTranslation);
                      }
                      // draw the slice
                      if (graphic) {
                        graphic.setRadialReference(series.center).animate(extend(shapeArgs, groupTranslation));
                      } else {
                        attr = { 'stroke-linejoin': 'round' };
                        if (!point.visible) {
                          attr.visibility = 'hidden';
                        }
                        point.graphic = graphic = renderer[point.shapeType](shapeArgs).setRadialReference(series.center).attr(point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE]).attr(attr).attr(groupTranslation).add(series.group).shadow(shadow, shadowGroup);
                      }
                    }
                  });
                },
                searchPoint: noop,
                sortByAngle: function (points, sign) {
                  points.sort(function (a, b) {
                    return a.angle !== undefined && (b.angle - a.angle) * sign;
                  });
                },
                drawLegendSymbol: LegendSymbolMixin.drawRectangle,
                getCenter: CenteredSeriesMixin.getCenter,
                getSymbol: noop
              };
            PieSeries = extendClass(Series, PieSeries);
            seriesTypes.pie = PieSeries;
            /**
		 * Draw the data labels
		 */
            Series.prototype.drawDataLabels = function () {
              var series = this, seriesOptions = series.options, cursor = seriesOptions.cursor, options = seriesOptions.dataLabels, points = series.points, pointOptions, generalOptions, hasRendered = series.hasRendered || 0, str, dataLabelsGroup, renderer = series.chart.renderer;
              if (options.enabled || series._hasPointLabels) {
                // Process default alignment of data labels for columns
                if (series.dlProcessOptions) {
                  series.dlProcessOptions(options);
                }
                // Create a separate group for the data labels to avoid rotation
                dataLabelsGroup = series.plotGroup('dataLabelsGroup', 'data-labels', options.defer ? HIDDEN : VISIBLE, options.zIndex || 6);
                if (pick(options.defer, true)) {
                  dataLabelsGroup.attr({ opacity: +hasRendered });
                  // #3300
                  if (!hasRendered) {
                    addEvent(series, 'afterAnimate', function () {
                      if (series.visible) {
                        // #3023, #3024
                        dataLabelsGroup.show();
                      }
                      dataLabelsGroup[seriesOptions.animation ? 'animate' : 'attr']({ opacity: 1 }, { duration: 200 });
                    });
                  }
                }
                // Make the labels for each point
                generalOptions = options;
                each(points, function (point) {
                  var enabled, dataLabel = point.dataLabel, labelConfig, attr, name, rotation, connector = point.connector, isNew = true, style, moreStyle = {};
                  // Determine if each data label is enabled
                  pointOptions = point.dlOptions || point.options && point.options.dataLabels;
                  // dlOptions is used in treemaps
                  enabled = pick(pointOptions && pointOptions.enabled, generalOptions.enabled);
                  // #2282
                  // If the point is outside the plot area, destroy it. #678, #820
                  if (dataLabel && !enabled) {
                    point.dataLabel = dataLabel.destroy();  // Individual labels are disabled if the are explicitly disabled
                                                            // in the point options, or if they fall outside the plot area.
                  } else if (enabled) {
                    // Create individual options structure that can be extended without
                    // affecting others
                    options = merge(generalOptions, pointOptions);
                    style = options.style;
                    rotation = options.rotation;
                    // Get the string
                    labelConfig = point.getLabelConfig();
                    str = options.format ? format(options.format, labelConfig) : options.formatter.call(labelConfig, options);
                    // Determine the color
                    style.color = pick(options.color, style.color, series.color, 'black');
                    // update existing label
                    if (dataLabel) {
                      if (defined(str)) {
                        dataLabel.attr({ text: str });
                        isNew = false;
                      } else {
                        // #1437 - the label is shown conditionally
                        point.dataLabel = dataLabel = dataLabel.destroy();
                        if (connector) {
                          point.connector = connector.destroy();
                        }
                      }  // create new label
                    } else if (defined(str)) {
                      attr = {
                        fill: options.backgroundColor,
                        stroke: options.borderColor,
                        'stroke-width': options.borderWidth,
                        r: options.borderRadius || 0,
                        rotation: rotation,
                        padding: options.padding,
                        zIndex: 1
                      };
                      // Get automated contrast color
                      if (style.color === 'contrast') {
                        moreStyle.color = options.inside || options.distance < 0 || !!seriesOptions.stacking ? renderer.getContrast(point.color || series.color) : '#000000';
                      }
                      if (cursor) {
                        moreStyle.cursor = cursor;
                      }
                      // Remove unused attributes (#947)
                      for (name in attr) {
                        if (attr[name] === UNDEFINED) {
                          delete attr[name];
                        }
                      }
                      dataLabel = point.dataLabel = renderer[rotation ? 'text' : 'label'](str, 0, -999, options.shape, null, null, options.useHTML).attr(attr).css(extend(style, moreStyle)).add(dataLabelsGroup).shadow(options.shadow);
                    }
                    if (dataLabel) {
                      // Now the data label is created and placed at 0,0, so we need to align it
                      series.alignDataLabel(point, dataLabel, options, null, isNew);
                    }
                  }
                });
              }
            };
            /**
		 * Align each individual data label
		 */
            Series.prototype.alignDataLabel = function (point, dataLabel, options, alignTo, isNew) {
              var chart = this.chart, inverted = chart.inverted, plotX = pick(point.plotX, -999), plotY = pick(point.plotY, -999), bBox = dataLabel.getBBox(), baseline = chart.renderer.fontMetrics(options.style.fontSize).b, rotCorr,
                // rotation correction
                // Math.round for rounding errors (#2683), alignTo to allow column labels (#2700)
                visible = this.visible && (point.series.forceDL || chart.isInsidePlot(plotX, mathRound(plotY), inverted) || alignTo && chart.isInsidePlot(plotX, inverted ? alignTo.x + 1 : alignTo.y + alignTo.height - 1, inverted)), alignAttr;
              // the final position;
              if (visible) {
                // The alignment box is a singular point
                alignTo = extend({
                  x: inverted ? chart.plotWidth - plotY : plotX,
                  y: mathRound(inverted ? chart.plotHeight - plotX : plotY),
                  width: 0,
                  height: 0
                }, alignTo);
                // Add the text size for alignment calculation
                extend(options, {
                  width: bBox.width,
                  height: bBox.height
                });
                // Allow a hook for changing alignment in the last moment, then do the alignment
                if (options.rotation) {
                  // Fancy box alignment isn't supported for rotated text
                  rotCorr = chart.renderer.rotCorr(baseline, options.rotation);
                  // #3723
                  dataLabel[isNew ? 'attr' : 'animate']({
                    x: alignTo.x + options.x + alignTo.width / 2 + rotCorr.x,
                    y: alignTo.y + options.y + alignTo.height / 2
                  }).attr({ align: options.align });
                } else {
                  dataLabel.align(options, null, alignTo);
                  alignAttr = dataLabel.alignAttr;
                  // Handle justify or crop
                  if (pick(options.overflow, 'justify') === 'justify') {
                    this.justifyDataLabel(dataLabel, options, alignAttr, bBox, alignTo, isNew);
                  } else if (pick(options.crop, true)) {
                    // Now check that the data label is within the plot area
                    visible = chart.isInsidePlot(alignAttr.x, alignAttr.y) && chart.isInsidePlot(alignAttr.x + bBox.width, alignAttr.y + bBox.height);
                  }
                  // When we're using a shape, make it possible with a connector or an arrow pointing to thie point
                  if (options.shape) {
                    dataLabel.attr({
                      anchorX: point.plotX,
                      anchorY: point.plotY
                    });
                  }
                }
              }
              // Show or hide based on the final aligned position
              if (!visible) {
                stop(dataLabel);
                dataLabel.attr({ y: -999 });
                dataLabel.placed = false;  // don't animate back in
              }
            };
            /**
		 * If data labels fall partly outside the plot area, align them back in, in a way that
		 * doesn't hide the point.
		 */
            Series.prototype.justifyDataLabel = function (dataLabel, options, alignAttr, bBox, alignTo, isNew) {
              var chart = this.chart, align = options.align, verticalAlign = options.verticalAlign, off, justified, padding = dataLabel.box ? 0 : dataLabel.padding || 0;
              // Off left
              off = alignAttr.x + padding;
              if (off < 0) {
                if (align === 'right') {
                  options.align = 'left';
                } else {
                  options.x = -off;
                }
                justified = true;
              }
              // Off right
              off = alignAttr.x + bBox.width - padding;
              if (off > chart.plotWidth) {
                if (align === 'left') {
                  options.align = 'right';
                } else {
                  options.x = chart.plotWidth - off;
                }
                justified = true;
              }
              // Off top
              off = alignAttr.y + padding;
              if (off < 0) {
                if (verticalAlign === 'bottom') {
                  options.verticalAlign = 'top';
                } else {
                  options.y = -off;
                }
                justified = true;
              }
              // Off bottom
              off = alignAttr.y + bBox.height - padding;
              if (off > chart.plotHeight) {
                if (verticalAlign === 'top') {
                  options.verticalAlign = 'bottom';
                } else {
                  options.y = chart.plotHeight - off;
                }
                justified = true;
              }
              if (justified) {
                dataLabel.placed = !isNew;
                dataLabel.align(options, null, alignTo);
              }
            };
            /**
		 * Override the base drawDataLabels method by pie specific functionality
		 */
            if (seriesTypes.pie) {
              seriesTypes.pie.prototype.drawDataLabels = function () {
                var series = this, data = series.data, point, chart = series.chart, options = series.options.dataLabels, connectorPadding = pick(options.connectorPadding, 10), connectorWidth = pick(options.connectorWidth, 1), plotWidth = chart.plotWidth, plotHeight = chart.plotHeight, connector, connectorPath, softConnector = pick(options.softConnector, true), distanceOption = options.distance, seriesCenter = series.center, radius = seriesCenter[2] / 2, centerY = seriesCenter[1], outside = distanceOption > 0, dataLabel, dataLabelWidth, labelPos, labelHeight, halves = [
                    [],
                    []
                  ], x, y, visibility, rankArr, i, j, overflow = [
                    0,
                    0,
                    0,
                    0
                  ],
                  // top, right, bottom, left
                  sort = function (a, b) {
                    return b.y - a.y;
                  };
                // get out if not enabled
                if (!series.visible || !options.enabled && !series._hasPointLabels) {
                  return;
                }
                // run parent method
                Series.prototype.drawDataLabels.apply(series);
                // arrange points for detection collision
                each(data, function (point) {
                  if (point.dataLabel && point.visible) {
                    // #407, #2510
                    halves[point.half].push(point);
                  }
                });
                /* Loop over the points in each half, starting from the top and bottom
				 * of the pie to detect overlapping labels.
				 */
                i = 2;
                while (i--) {
                  var slots = [], slotsLength, usedSlots = [], points = halves[i], pos, bottom, length = points.length, slotIndex;
                  if (!length) {
                    continue;
                  }
                  // Sort by angle
                  series.sortByAngle(points, i - 0.5);
                  // Assume equal label heights on either hemisphere (#2630)
                  j = labelHeight = 0;
                  while (!labelHeight && points[j]) {
                    // #1569
                    labelHeight = points[j] && points[j].dataLabel && (points[j].dataLabel.getBBox().height || 21);
                    // 21 is for #968
                    j++;
                  }
                  // Only do anti-collision when we are outside the pie and have connectors (#856)
                  if (distanceOption > 0) {
                    // Build the slots
                    bottom = mathMin(centerY + radius + distanceOption, chart.plotHeight);
                    for (pos = mathMax(0, centerY - radius - distanceOption); pos <= bottom; pos += labelHeight) {
                      slots.push(pos);
                    }
                    slotsLength = slots.length;
                    /* Visualize the slots
						if (!series.slotElements) {
							series.slotElements = [];
						}
						if (i === 1) {
							series.slotElements.forEach(function (elem) {
								elem.destroy();
							});
							series.slotElements.length = 0;
						}
							
						slots.forEach(function (pos, no) {
							var slotX = series.getX(pos, i) + chart.plotLeft - (i ? 100 : 0),
								slotY = pos + chart.plotTop;
							
							if (!isNaN(slotX)) {
								series.slotElements.push(chart.renderer.rect(slotX, slotY - 7, 100, labelHeight, 1)
									.attr({
										'stroke-width': 1,
										stroke: 'silver',
										fill: 'rgba(0,0,255,0.1)'
									})
									.add());
								series.slotElements.push(chart.renderer.text('Slot '+ no, slotX, slotY + 4)
									.attr({
										fill: 'silver'
									}).add());
							}
						});
						// */
                    // if there are more values than available slots, remove lowest values
                    if (length > slotsLength) {
                      // create an array for sorting and ranking the points within each quarter
                      rankArr = [].concat(points);
                      rankArr.sort(sort);
                      j = length;
                      while (j--) {
                        rankArr[j].rank = j;
                      }
                      j = length;
                      while (j--) {
                        if (points[j].rank >= slotsLength) {
                          points.splice(j, 1);
                        }
                      }
                      length = points.length;
                    }
                    // The label goes to the nearest open slot, but not closer to the edge than
                    // the label's index.
                    for (j = 0; j < length; j++) {
                      point = points[j];
                      labelPos = point.labelPos;
                      var closest = 9999, distance, slotI;
                      // find the closest slot index
                      for (slotI = 0; slotI < slotsLength; slotI++) {
                        distance = mathAbs(slots[slotI] - labelPos[1]);
                        if (distance < closest) {
                          closest = distance;
                          slotIndex = slotI;
                        }
                      }
                      // if that slot index is closer to the edges of the slots, move it
                      // to the closest appropriate slot
                      if (slotIndex < j && slots[j] !== null) {
                        // cluster at the top
                        slotIndex = j;
                      } else if (slotsLength < length - j + slotIndex && slots[j] !== null) {
                        // cluster at the bottom
                        slotIndex = slotsLength - length + j;
                        while (slots[slotIndex] === null) {
                          // make sure it is not taken
                          slotIndex++;
                        }
                      } else {
                        // Slot is taken, find next free slot below. In the next run, the next slice will find the
                        // slot above these, because it is the closest one
                        while (slots[slotIndex] === null) {
                          // make sure it is not taken
                          slotIndex++;
                        }
                      }
                      usedSlots.push({
                        i: slotIndex,
                        y: slots[slotIndex]
                      });
                      slots[slotIndex] = null;  // mark as taken
                    }
                    // sort them in order to fill in from the top
                    usedSlots.sort(sort);
                  }
                  // now the used slots are sorted, fill them up sequentially
                  for (j = 0; j < length; j++) {
                    var slot, naturalY;
                    point = points[j];
                    labelPos = point.labelPos;
                    dataLabel = point.dataLabel;
                    visibility = point.visible === false ? HIDDEN : 'inherit';
                    naturalY = labelPos[1];
                    if (distanceOption > 0) {
                      slot = usedSlots.pop();
                      slotIndex = slot.i;
                      // if the slot next to currrent slot is free, the y value is allowed
                      // to fall back to the natural position
                      y = slot.y;
                      if (naturalY > y && slots[slotIndex + 1] !== null || naturalY < y && slots[slotIndex - 1] !== null) {
                        y = mathMin(mathMax(0, naturalY), chart.plotHeight);
                      }
                    } else {
                      y = naturalY;
                    }
                    // get the x - use the natural x position for first and last slot, to prevent the top
                    // and botton slice connectors from touching each other on either side
                    x = options.justify ? seriesCenter[0] + (i ? -1 : 1) * (radius + distanceOption) : series.getX(y === centerY - radius - distanceOption || y === centerY + radius + distanceOption ? naturalY : y, i);
                    // Record the placement and visibility
                    dataLabel._attr = {
                      visibility: visibility,
                      align: labelPos[6]
                    };
                    dataLabel._pos = {
                      x: x + options.x + ({
                        left: connectorPadding,
                        right: -connectorPadding
                      }[labelPos[6]] || 0),
                      y: y + options.y - 10
                    };
                    dataLabel.connX = x;
                    dataLabel.connY = y;
                    // Detect overflowing data labels
                    if (this.options.size === null) {
                      dataLabelWidth = dataLabel.width;
                      // Overflow left
                      if (x - dataLabelWidth < connectorPadding) {
                        overflow[3] = mathMax(mathRound(dataLabelWidth - x + connectorPadding), overflow[3]);  // Overflow right
                      } else if (x + dataLabelWidth > plotWidth - connectorPadding) {
                        overflow[1] = mathMax(mathRound(x + dataLabelWidth - plotWidth + connectorPadding), overflow[1]);
                      }
                      // Overflow top
                      if (y - labelHeight / 2 < 0) {
                        overflow[0] = mathMax(mathRound(-y + labelHeight / 2), overflow[0]);  // Overflow left
                      } else if (y + labelHeight / 2 > plotHeight) {
                        overflow[2] = mathMax(mathRound(y + labelHeight / 2 - plotHeight), overflow[2]);
                      }
                    }
                  }  // for each point
                }
                // for each half
                // Do not apply the final placement and draw the connectors until we have verified
                // that labels are not spilling over.
                if (arrayMax(overflow) === 0 || this.verifyDataLabelOverflow(overflow)) {
                  // Place the labels in the final position
                  this.placeDataLabels();
                  // Draw the connectors
                  if (outside && connectorWidth) {
                    each(this.points, function (point) {
                      connector = point.connector;
                      labelPos = point.labelPos;
                      dataLabel = point.dataLabel;
                      if (dataLabel && dataLabel._pos && point.visible) {
                        visibility = dataLabel._attr.visibility;
                        x = dataLabel.connX;
                        y = dataLabel.connY;
                        connectorPath = softConnector ? [
                          M,
                          x + (labelPos[6] === 'left' ? 5 : -5),
                          y,
                          'C',
                          x,
                          y,
                          2 * labelPos[2] - labelPos[4],
                          2 * labelPos[3] - labelPos[5],
                          labelPos[2],
                          labelPos[3],
                          L,
                          labelPos[4],
                          labelPos[5]
                        ] : [
                          M,
                          x + (labelPos[6] === 'left' ? 5 : -5),
                          y,
                          L,
                          labelPos[2],
                          labelPos[3],
                          L,
                          labelPos[4],
                          labelPos[5]
                        ];
                        if (connector) {
                          connector.animate({ d: connectorPath });
                          connector.attr('visibility', visibility);
                        } else {
                          point.connector = connector = series.chart.renderer.path(connectorPath).attr({
                            'stroke-width': connectorWidth,
                            stroke: options.connectorColor || point.color || '#606060',
                            visibility: visibility
                          }).add(series.dataLabelsGroup);
                        }
                      } else if (connector) {
                        point.connector = connector.destroy();
                      }
                    });
                  }
                }
              };
              /**
			 * Perform the final placement of the data labels after we have verified that they
			 * fall within the plot area.
			 */
              seriesTypes.pie.prototype.placeDataLabels = function () {
                each(this.points, function (point) {
                  var dataLabel = point.dataLabel, _pos;
                  if (dataLabel && point.visible) {
                    _pos = dataLabel._pos;
                    if (_pos) {
                      dataLabel.attr(dataLabel._attr);
                      dataLabel[dataLabel.moved ? 'animate' : 'attr'](_pos);
                      dataLabel.moved = true;
                    } else if (dataLabel) {
                      dataLabel.attr({ y: -999 });
                    }
                  }
                });
              };
              seriesTypes.pie.prototype.alignDataLabel = noop;
              /**
			 * Verify whether the data labels are allowed to draw, or we should run more translation and data
			 * label positioning to keep them inside the plot area. Returns true when data labels are ready
			 * to draw.
			 */
              seriesTypes.pie.prototype.verifyDataLabelOverflow = function (overflow) {
                var center = this.center, options = this.options, centerOption = options.center, minSize = options.minSize || 80, newSize = minSize, ret;
                // Handle horizontal size and center
                if (centerOption[0] !== null) {
                  // Fixed center
                  newSize = mathMax(center[2] - mathMax(overflow[1], overflow[3]), minSize);
                } else {
                  // Auto center
                  newSize = mathMax(center[2] - overflow[1] - overflow[3], minSize);
                  center[0] += (overflow[3] - overflow[1]) / 2;  // horizontal center
                }
                // Handle vertical size and center
                if (centerOption[1] !== null) {
                  // Fixed center
                  newSize = mathMax(mathMin(newSize, center[2] - mathMax(overflow[0], overflow[2])), minSize);
                } else {
                  // Auto center
                  newSize = mathMax(mathMin(newSize, center[2] - overflow[0] - overflow[2]), minSize);
                  center[1] += (overflow[0] - overflow[2]) / 2;  // vertical center
                }
                // If the size must be decreased, we need to run translate and drawDataLabels again
                if (newSize < center[2]) {
                  center[2] = newSize;
                  center[3] = Math.min(relativeLength(options.innerSize || 0, newSize), newSize);
                  // #3632
                  this.translate(center);
                  each(this.points, function (point) {
                    if (point.dataLabel) {
                      point.dataLabel._pos = null;  // reset
                    }
                  });
                  if (this.drawDataLabels) {
                    this.drawDataLabels();
                  }  // Else, return true to indicate that the pie and its labels is within the plot area
                } else {
                  ret = true;
                }
                return ret;
              };
            }
            if (seriesTypes.column) {
              /**
			 * Override the basic data label alignment by adjusting for the position of the column
			 */
              seriesTypes.column.prototype.alignDataLabel = function (point, dataLabel, options, alignTo, isNew) {
                var inverted = this.chart.inverted, series = point.series, dlBox = point.dlBox || point.shapeArgs,
                  // data label box for alignment
                  below = pick(point.below, point.plotY > pick(this.translatedThreshold, series.yAxis.len)),
                  // point.below is used in range series
                  inside = pick(options.inside, !!this.options.stacking);
                // draw it inside the box?
                // Align to the column itself, or the top of it
                if (dlBox) {
                  // Area range uses this method but not alignTo
                  alignTo = merge(dlBox);
                  if (inverted) {
                    alignTo = {
                      x: series.yAxis.len - alignTo.y - alignTo.height,
                      y: series.xAxis.len - alignTo.x - alignTo.width,
                      width: alignTo.height,
                      height: alignTo.width
                    };
                  }
                  // Compute the alignment box
                  if (!inside) {
                    if (inverted) {
                      alignTo.x += below ? 0 : alignTo.width;
                      alignTo.width = 0;
                    } else {
                      alignTo.y += below ? alignTo.height : 0;
                      alignTo.height = 0;
                    }
                  }
                }
                // When alignment is undefined (typically columns and bars), display the individual
                // point below or above the point depending on the threshold
                options.align = pick(options.align, !inverted || inside ? 'center' : below ? 'right' : 'left');
                options.verticalAlign = pick(options.verticalAlign, inverted || inside ? 'middle' : below ? 'top' : 'bottom');
                // Call the parent method
                Series.prototype.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);
              };
            }
            /**
		 * Highcharts JS v4.1.9 (2015-10-07)
		 * Highcharts module to hide overlapping data labels. This module is included by default in Highmaps.
		 *
		 * (c) 2010-2014 Torstein Honsi
		 *
		 * License: www.highcharts.com/license
		 */
            /*global Highcharts, HighchartsAdapter */
            (function (H) {
              var Chart = H.Chart, each = H.each, pick = H.pick, addEvent = HighchartsAdapter.addEvent;
              // Collect potensial overlapping data labels. Stack labels probably don't need to be 
              // considered because they are usually accompanied by data labels that lie inside the columns.
              Chart.prototype.callbacks.push(function (chart) {
                function collectAndHide() {
                  var labels = [];
                  each(chart.series, function (series) {
                    var dlOptions = series.options.dataLabels, collections = series.dataLabelCollections || ['dataLabel'];
                    // Range series have two collections
                    if ((dlOptions.enabled || series._hasPointLabels) && !dlOptions.allowOverlap && series.visible) {
                      // #3866
                      each(collections, function (coll) {
                        each(series.points, function (point) {
                          if (point[coll]) {
                            point[coll].labelrank = pick(point.labelrank, point.shapeArgs && point.shapeArgs.height);
                            // #4118
                            labels.push(point[coll]);
                          }
                        });
                      });
                    }
                  });
                  chart.hideOverlappingLabels(labels);
                }
                // Do it now ...
                collectAndHide();
                // ... and after each chart redraw
                addEvent(chart, 'redraw', collectAndHide);
              });
              /**
			 * Hide overlapping labels. Labels are moved and faded in and out on zoom to provide a smooth 
			 * visual imression.
			 */
              Chart.prototype.hideOverlappingLabels = function (labels) {
                var len = labels.length, label, i, j, label1, label2, isIntersecting, pos1, pos2, padding, intersectRect = function (x1, y1, w1, h1, x2, y2, w2, h2) {
                    return !(x2 > x1 + w1 || x2 + w2 < x1 || y2 > y1 + h1 || y2 + h2 < y1);
                  };
                // Mark with initial opacity
                for (i = 0; i < len; i++) {
                  label = labels[i];
                  if (label) {
                    label.oldOpacity = label.opacity;
                    label.newOpacity = 1;
                  }
                }
                // Prevent a situation in a gradually rising slope, that each label
                // will hide the previous one because the previous one always has
                // lower rank.
                labels.sort(function (a, b) {
                  return (b.labelrank || 0) - (a.labelrank || 0);
                });
                // Detect overlapping labels
                for (i = 0; i < len; i++) {
                  label1 = labels[i];
                  for (j = i + 1; j < len; ++j) {
                    label2 = labels[j];
                    if (label1 && label2 && label1.placed && label2.placed && label1.newOpacity !== 0 && label2.newOpacity !== 0) {
                      pos1 = label1.alignAttr;
                      pos2 = label2.alignAttr;
                      padding = 2 * (label1.box ? 0 : label1.padding);
                      // Substract the padding if no background or border (#4333)
                      isIntersecting = intersectRect(pos1.x, pos1.y, label1.width - padding, label1.height - padding, pos2.x, pos2.y, label2.width - padding, label2.height - padding);
                      if (isIntersecting) {
                        (label1.labelrank < label2.labelrank ? label1 : label2).newOpacity = 0;
                      }
                    }
                  }
                }
                // Hide or show
                each(labels, function (label) {
                  var complete, newOpacity;
                  if (label) {
                    newOpacity = label.newOpacity;
                    if (label.oldOpacity !== newOpacity && label.placed) {
                      // Make sure the label is completely hidden to avoid catching clicks (#4362)
                      if (newOpacity) {
                        label.show(true);
                      } else {
                        complete = function () {
                          label.hide();
                        };
                      }
                      // Animate or set the opacity					
                      label.alignAttr.opacity = newOpacity;
                      label[label.isOld ? 'animate' : 'attr'](label.alignAttr, null, complete);
                    }
                    label.isOld = true;
                  }
                });
              };
            }(Highcharts));
            /**
		 * TrackerMixin for points and graphs
		 */
            var TrackerMixin = Highcharts.TrackerMixin = {
                drawTrackerPoint: function () {
                  var series = this, chart = series.chart, pointer = chart.pointer, cursor = series.options.cursor, css = cursor && { cursor: cursor }, onMouseOver = function (e) {
                      var target = e.target, point;
                      while (target && !point) {
                        point = target.point;
                        target = target.parentNode;
                      }
                      if (point !== UNDEFINED && point !== chart.hoverPoint) {
                        // undefined on graph in scatterchart
                        point.onMouseOver(e);
                      }
                    };
                  // Add reference to the point
                  each(series.points, function (point) {
                    if (point.graphic) {
                      point.graphic.element.point = point;
                    }
                    if (point.dataLabel) {
                      point.dataLabel.element.point = point;
                    }
                  });
                  // Add the event listeners, we need to do this only once
                  if (!series._hasTracking) {
                    each(series.trackerGroups, function (key) {
                      if (series[key]) {
                        // we don't always have dataLabelsGroup
                        series[key].addClass(PREFIX + 'tracker').on('mouseover', onMouseOver).on('mouseout', function (e) {
                          pointer.onTrackerMouseOut(e);
                        }).css(css);
                        if (hasTouch) {
                          series[key].on('touchstart', onMouseOver);
                        }
                      }
                    });
                    series._hasTracking = true;
                  }
                },
                drawTrackerGraph: function () {
                  var series = this, options = series.options, trackByArea = options.trackByArea, trackerPath = [].concat(trackByArea ? series.areaPath : series.graphPath), trackerPathLength = trackerPath.length, chart = series.chart, pointer = chart.pointer, renderer = chart.renderer, snap = chart.options.tooltip.snap, tracker = series.tracker, cursor = options.cursor, css = cursor && { cursor: cursor }, singlePoints = series.singlePoints, singlePoint, i, onMouseOver = function () {
                      if (chart.hoverSeries !== series) {
                        series.onMouseOver();
                      }
                    },
                    /*
					 * Empirical lowest possible opacities for TRACKER_FILL for an element to stay invisible but clickable
					 * IE6: 0.002
					 * IE7: 0.002
					 * IE8: 0.002
					 * IE9: 0.00000000001 (unlimited)
					 * IE10: 0.0001 (exporting only)
					 * FF: 0.00000000001 (unlimited)
					 * Chrome: 0.000001
					 * Safari: 0.000001
					 * Opera: 0.00000000001 (unlimited)
					 */
                    TRACKER_FILL = 'rgba(192,192,192,' + (hasSVG ? 0.0001 : 0.002) + ')';
                  // Extend end points. A better way would be to use round linecaps,
                  // but those are not clickable in VML.
                  if (trackerPathLength && !trackByArea) {
                    i = trackerPathLength + 1;
                    while (i--) {
                      if (trackerPath[i] === M) {
                        // extend left side
                        trackerPath.splice(i + 1, 0, trackerPath[i + 1] - snap, trackerPath[i + 2], L);
                      }
                      if (i && trackerPath[i] === M || i === trackerPathLength) {
                        // extend right side
                        trackerPath.splice(i, 0, L, trackerPath[i - 2] + snap, trackerPath[i - 1]);
                      }
                    }
                  }
                  // handle single points
                  for (i = 0; i < singlePoints.length; i++) {
                    singlePoint = singlePoints[i];
                    trackerPath.push(M, singlePoint.plotX - snap, singlePoint.plotY, L, singlePoint.plotX + snap, singlePoint.plotY);
                  }
                  // draw the tracker
                  if (tracker) {
                    tracker.attr({ d: trackerPath });
                  } else {
                    // create
                    series.tracker = renderer.path(trackerPath).attr({
                      'stroke-linejoin': 'round',
                      visibility: series.visible ? VISIBLE : HIDDEN,
                      stroke: TRACKER_FILL,
                      fill: trackByArea ? TRACKER_FILL : NONE,
                      'stroke-width': options.lineWidth + (trackByArea ? 0 : 2 * snap),
                      zIndex: 2
                    }).add(series.group);
                    // The tracker is added to the series group, which is clipped, but is covered
                    // by the marker group. So the marker group also needs to capture events.
                    each([
                      series.tracker,
                      series.markerGroup
                    ], function (tracker) {
                      tracker.addClass(PREFIX + 'tracker').on('mouseover', onMouseOver).on('mouseout', function (e) {
                        pointer.onTrackerMouseOut(e);
                      }).css(css);
                      if (hasTouch) {
                        tracker.on('touchstart', onMouseOver);
                      }
                    });
                  }
                }
              };
            /* End TrackerMixin */
            /**
		 * Add tracking event listener to the series group, so the point graphics
		 * themselves act as trackers
		 */
            if (seriesTypes.column) {
              ColumnSeries.prototype.drawTracker = TrackerMixin.drawTrackerPoint;
            }
            if (seriesTypes.pie) {
              seriesTypes.pie.prototype.drawTracker = TrackerMixin.drawTrackerPoint;
            }
            if (seriesTypes.scatter) {
              ScatterSeries.prototype.drawTracker = TrackerMixin.drawTrackerPoint;
            }
            /* 
		 * Extend Legend for item events 
		 */
            extend(Legend.prototype, {
              setItemEvents: function (item, legendItem, useHTML, itemStyle, itemHiddenStyle) {
                var legend = this;
                // Set the events on the item group, or in case of useHTML, the item itself (#1249)
                (useHTML ? legendItem : item.legendGroup).on('mouseover', function () {
                  item.setState(HOVER_STATE);
                  legendItem.css(legend.options.itemHoverStyle);
                }).on('mouseout', function () {
                  legendItem.css(item.visible ? itemStyle : itemHiddenStyle);
                  item.setState();
                }).on('click', function (event) {
                  var strLegendItemClick = 'legendItemClick', fnLegendItemClick = function () {
                      if (item.setVisible) {
                        item.setVisible();
                      }
                    };
                  // Pass over the click/touch event. #4.
                  event = { browserEvent: event };
                  // click the name or symbol
                  if (item.firePointEvent) {
                    // point
                    item.firePointEvent(strLegendItemClick, event, fnLegendItemClick);
                  } else {
                    fireEvent(item, strLegendItemClick, event, fnLegendItemClick);
                  }
                });
              },
              createCheckboxForItem: function (item) {
                var legend = this;
                item.checkbox = createElement('input', {
                  type: 'checkbox',
                  checked: item.selected,
                  defaultChecked: item.selected
                }, legend.options.itemCheckboxStyle, legend.chart.container);
                addEvent(item.checkbox, 'click', function (event) {
                  var target = event.target;
                  fireEvent(item.series || item, 'checkboxClick', {
                    checked: target.checked,
                    item: item
                  }, function () {
                    item.select();
                  });
                });
              }
            });
            /* 
		 * Add pointer cursor to legend itemstyle in defaultOptions
		 */
            defaultOptions.legend.itemStyle.cursor = 'pointer';
            /* 
		 * Extend the Chart object with interaction
		 */
            extend(Chart.prototype, {
              showResetZoom: function () {
                var chart = this, lang = defaultOptions.lang, btnOptions = chart.options.chart.resetZoomButton, theme = btnOptions.theme, states = theme.states, alignTo = btnOptions.relativeTo === 'chart' ? null : 'plotBox';
                this.resetZoomButton = chart.renderer.button(lang.resetZoom, null, null, function () {
                  chart.zoomOut();
                }, theme, states && states.hover).attr({
                  align: btnOptions.position.align,
                  title: lang.resetZoomTitle
                }).add().align(btnOptions.position, false, alignTo);
              },
              zoomOut: function () {
                var chart = this;
                fireEvent(chart, 'selection', { resetSelection: true }, function () {
                  chart.zoom();
                });
              },
              zoom: function (event) {
                var chart = this, hasZoomed, pointer = chart.pointer, displayButton = false, resetZoomButton;
                // If zoom is called with no arguments, reset the axes
                if (!event || event.resetSelection) {
                  each(chart.axes, function (axis) {
                    hasZoomed = axis.zoom();
                  });
                } else {
                  // else, zoom in on all axes
                  each(event.xAxis.concat(event.yAxis), function (axisData) {
                    var axis = axisData.axis, isXAxis = axis.isXAxis;
                    // don't zoom more than minRange
                    if (pointer[isXAxis ? 'zoomX' : 'zoomY'] || pointer[isXAxis ? 'pinchX' : 'pinchY']) {
                      hasZoomed = axis.zoom(axisData.min, axisData.max);
                      if (axis.displayBtn) {
                        displayButton = true;
                      }
                    }
                  });
                }
                // Show or hide the Reset zoom button
                resetZoomButton = chart.resetZoomButton;
                if (displayButton && !resetZoomButton) {
                  chart.showResetZoom();
                } else if (!displayButton && isObject(resetZoomButton)) {
                  chart.resetZoomButton = resetZoomButton.destroy();
                }
                // Redraw
                if (hasZoomed) {
                  chart.redraw(pick(chart.options.chart.animation, event && event.animation, chart.pointCount < 100));
                }
              },
              pan: function (e, panning) {
                var chart = this, hoverPoints = chart.hoverPoints, doRedraw;
                // remove active points for shared tooltip
                if (hoverPoints) {
                  each(hoverPoints, function (point) {
                    point.setState();
                  });
                }
                each(panning === 'xy' ? [
                  1,
                  0
                ] : [1], function (isX) {
                  // xy is used in maps
                  var mousePos = e[isX ? 'chartX' : 'chartY'], axis = chart[isX ? 'xAxis' : 'yAxis'][0], startPos = chart[isX ? 'mouseDownX' : 'mouseDownY'], halfPointRange = (axis.pointRange || 0) / 2, extremes = axis.getExtremes(), newMin = axis.toValue(startPos - mousePos, true) + halfPointRange, newMax = axis.toValue(startPos + chart[isX ? 'plotWidth' : 'plotHeight'] - mousePos, true) - halfPointRange, goingLeft = startPos > mousePos;
                  // #3613
                  if (axis.series.length && (goingLeft || newMin > mathMin(extremes.dataMin, extremes.min)) && (!goingLeft || newMax < mathMax(extremes.dataMax, extremes.max))) {
                    axis.setExtremes(newMin, newMax, false, false, { trigger: 'pan' });
                    doRedraw = true;
                  }
                  chart[isX ? 'mouseDownX' : 'mouseDownY'] = mousePos;  // set new reference for next run
                });
                if (doRedraw) {
                  chart.redraw(false);
                }
                css(chart.container, { cursor: 'move' });
              }
            });
            /*
		 * Extend the Point object with interaction
		 */
            extend(Point.prototype, {
              select: function (selected, accumulate) {
                var point = this, series = point.series, chart = series.chart;
                selected = pick(selected, !point.selected);
                // fire the event with the defalut handler
                point.firePointEvent(selected ? 'select' : 'unselect', { accumulate: accumulate }, function () {
                  point.selected = point.options.selected = selected;
                  series.options.data[inArray(point, series.data)] = point.options;
                  point.setState(selected && SELECT_STATE);
                  // unselect all other points unless Ctrl or Cmd + click
                  if (!accumulate) {
                    each(chart.getSelectedPoints(), function (loopPoint) {
                      if (loopPoint.selected && loopPoint !== point) {
                        loopPoint.selected = loopPoint.options.selected = false;
                        series.options.data[inArray(loopPoint, series.data)] = loopPoint.options;
                        loopPoint.setState(NORMAL_STATE);
                        loopPoint.firePointEvent('unselect');
                      }
                    });
                  }
                });
              },
              onMouseOver: function (e, byProximity) {
                var point = this, series = point.series, chart = series.chart, tooltip = chart.tooltip, hoverPoint = chart.hoverPoint;
                if (chart.hoverSeries !== series) {
                  series.onMouseOver();
                }
                // set normal state to previous series
                if (hoverPoint && hoverPoint !== point) {
                  hoverPoint.onMouseOut();
                }
                if (point.series) {
                  // It may have been destroyed, #4130
                  // trigger the event
                  point.firePointEvent('mouseOver');
                  // update the tooltip
                  if (tooltip && (!tooltip.shared || series.noSharedTooltip)) {
                    tooltip.refresh(point, e);
                  }
                  // hover this
                  point.setState(HOVER_STATE);
                  if (!byProximity) {
                    chart.hoverPoint = point;
                  }
                }
              },
              onMouseOut: function () {
                var chart = this.series.chart, hoverPoints = chart.hoverPoints;
                this.firePointEvent('mouseOut');
                if (!hoverPoints || inArray(this, hoverPoints) === -1) {
                  // #887, #2240
                  this.setState();
                  chart.hoverPoint = null;
                }
              },
              importEvents: function () {
                if (!this.hasImportedEvents) {
                  var point = this, options = merge(point.series.options.point, point.options), events = options.events, eventType;
                  point.events = events;
                  for (eventType in events) {
                    addEvent(point, eventType, events[eventType]);
                  }
                  this.hasImportedEvents = true;
                }
              },
              setState: function (state, move) {
                var point = this, plotX = mathFloor(point.plotX),
                  // #4586
                  plotY = point.plotY, series = point.series, stateOptions = series.options.states, markerOptions = defaultPlotOptions[series.type].marker && series.options.marker, normalDisabled = markerOptions && !markerOptions.enabled, markerStateOptions = markerOptions && markerOptions.states[state], stateDisabled = markerStateOptions && markerStateOptions.enabled === false, stateMarkerGraphic = series.stateMarkerGraphic, pointMarker = point.marker || {}, chart = series.chart, radius, halo = series.halo, haloOptions, newSymbol, pointAttr;
                state = state || NORMAL_STATE;
                // empty string
                pointAttr = point.pointAttr[state] || series.pointAttr[state];
                if (state === point.state && !move || point.selected && state !== SELECT_STATE || stateOptions[state] && stateOptions[state].enabled === false || state && (stateDisabled || normalDisabled && markerStateOptions.enabled === false) || state && pointMarker.states && pointMarker.states[state] && pointMarker.states[state].enabled === false) {
                  return;
                }
                // apply hover styles to the existing point
                if (point.graphic) {
                  radius = markerOptions && point.graphic.symbolName && pointAttr.r;
                  point.graphic.attr(merge(pointAttr, radius ? {
                    x: plotX - radius,
                    y: plotY - radius,
                    width: 2 * radius,
                    height: 2 * radius
                  } : {}));
                  // Zooming in from a range with no markers to a range with markers
                  if (stateMarkerGraphic) {
                    stateMarkerGraphic.hide();
                  }
                } else {
                  // if a graphic is not applied to each point in the normal state, create a shared
                  // graphic for the hover state
                  if (state && markerStateOptions) {
                    radius = markerStateOptions.radius;
                    newSymbol = pointMarker.symbol || series.symbol;
                    // If the point has another symbol than the previous one, throw away the
                    // state marker graphic and force a new one (#1459)
                    if (stateMarkerGraphic && stateMarkerGraphic.currentSymbol !== newSymbol) {
                      stateMarkerGraphic = stateMarkerGraphic.destroy();
                    }
                    // Add a new state marker graphic
                    if (!stateMarkerGraphic) {
                      if (newSymbol) {
                        series.stateMarkerGraphic = stateMarkerGraphic = chart.renderer.symbol(newSymbol, plotX - radius, plotY - radius, 2 * radius, 2 * radius).attr(pointAttr).add(series.markerGroup);
                        stateMarkerGraphic.currentSymbol = newSymbol;
                      }  // Move the existing graphic
                    } else {
                      stateMarkerGraphic[move ? 'animate' : 'attr']({
                        x: plotX - radius,
                        y: plotY - radius
                      });
                    }
                  }
                  if (stateMarkerGraphic) {
                    stateMarkerGraphic[state && chart.isInsidePlot(plotX, plotY, chart.inverted) ? 'show' : 'hide']();
                    // #2450
                    stateMarkerGraphic.element.point = point;  // #4310
                  }
                }
                // Show me your halo
                haloOptions = stateOptions[state] && stateOptions[state].halo;
                if (haloOptions && haloOptions.size) {
                  if (!halo) {
                    series.halo = halo = chart.renderer.path().add(chart.seriesGroup);
                  }
                  halo.attr(extend({ fill: Color(point.color || series.color).setOpacity(haloOptions.opacity).get() }, haloOptions.attributes))[move ? 'animate' : 'attr']({ d: point.haloPath(haloOptions.size) });
                } else if (halo) {
                  halo.attr({ d: [] });
                }
                point.state = state;
              },
              haloPath: function (size) {
                var series = this.series, chart = series.chart, plotBox = series.getPlotBox(), inverted = chart.inverted;
                return chart.renderer.symbols.circle(plotBox.translateX + (inverted ? series.yAxis.len - this.plotY : this.plotX) - size, plotBox.translateY + (inverted ? series.xAxis.len - this.plotX : this.plotY) - size, size * 2, size * 2);
              }
            });
            /*
		 * Extend the Series object with interaction
		 */
            extend(Series.prototype, {
              onMouseOver: function () {
                var series = this, chart = series.chart, hoverSeries = chart.hoverSeries;
                // set normal state to previous series
                if (hoverSeries && hoverSeries !== series) {
                  hoverSeries.onMouseOut();
                }
                // trigger the event, but to save processing time,
                // only if defined
                if (series.options.events.mouseOver) {
                  fireEvent(series, 'mouseOver');
                }
                // hover this
                series.setState(HOVER_STATE);
                chart.hoverSeries = series;
              },
              onMouseOut: function () {
                // trigger the event only if listeners exist
                var series = this, options = series.options, chart = series.chart, tooltip = chart.tooltip, hoverPoint = chart.hoverPoint;
                chart.hoverSeries = null;
                // #182, set to null before the mouseOut event fires
                // trigger mouse out on the point, which must be in this series
                if (hoverPoint) {
                  hoverPoint.onMouseOut();
                }
                // fire the mouse out event
                if (series && options.events.mouseOut) {
                  fireEvent(series, 'mouseOut');
                }
                // hide the tooltip
                if (tooltip && !options.stickyTracking && (!tooltip.shared || series.noSharedTooltip)) {
                  tooltip.hide();
                }
                // set normal state
                series.setState();
              },
              setState: function (state) {
                var series = this, options = series.options, graph = series.graph, stateOptions = options.states, lineWidth = options.lineWidth, attribs, i = 0;
                state = state || NORMAL_STATE;
                if (series.state !== state) {
                  series.state = state;
                  if (stateOptions[state] && stateOptions[state].enabled === false) {
                    return;
                  }
                  if (state) {
                    lineWidth = stateOptions[state].lineWidth || lineWidth + (stateOptions[state].lineWidthPlus || 0);  // #4035
                  }
                  if (graph && !graph.dashstyle) {
                    // hover is turned off for dashed lines in VML
                    attribs = { 'stroke-width': lineWidth };
                    // use attr because animate will cause any other animation on the graph to stop
                    graph.attr(attribs);
                    while (series['zoneGraph' + i]) {
                      series['zoneGraph' + i].attr(attribs);
                      i = i + 1;
                    }
                  }
                }
              },
              setVisible: function (vis, redraw) {
                var series = this, chart = series.chart, legendItem = series.legendItem, showOrHide, ignoreHiddenSeries = chart.options.chart.ignoreHiddenSeries, oldVisibility = series.visible;
                // if called without an argument, toggle visibility
                series.visible = vis = series.userOptions.visible = vis === UNDEFINED ? !oldVisibility : vis;
                showOrHide = vis ? 'show' : 'hide';
                // show or hide elements
                each([
                  'group',
                  'dataLabelsGroup',
                  'markerGroup',
                  'tracker'
                ], function (key) {
                  if (series[key]) {
                    series[key][showOrHide]();
                  }
                });
                // hide tooltip (#1361)
                if (chart.hoverSeries === series || (chart.hoverPoint && chart.hoverPoint.series) === series) {
                  series.onMouseOut();
                }
                if (legendItem) {
                  chart.legend.colorizeItem(series, vis);
                }
                // rescale or adapt to resized chart
                series.isDirty = true;
                // in a stack, all other series are affected
                if (series.options.stacking) {
                  each(chart.series, function (otherSeries) {
                    if (otherSeries.options.stacking && otherSeries.visible) {
                      otherSeries.isDirty = true;
                    }
                  });
                }
                // show or hide linked series
                each(series.linkedSeries, function (otherSeries) {
                  otherSeries.setVisible(vis, false);
                });
                if (ignoreHiddenSeries) {
                  chart.isDirtyBox = true;
                }
                if (redraw !== false) {
                  chart.redraw();
                }
                fireEvent(series, showOrHide);
              },
              show: function () {
                this.setVisible(true);
              },
              hide: function () {
                this.setVisible(false);
              },
              select: function (selected) {
                var series = this;
                // if called without an argument, toggle
                series.selected = selected = selected === UNDEFINED ? !series.selected : selected;
                if (series.checkbox) {
                  series.checkbox.checked = selected;
                }
                fireEvent(series, selected ? 'select' : 'unselect');
              },
              drawTracker: TrackerMixin.drawTrackerGraph
            });
            // global variables
            extend(Highcharts, {
              Color: Color,
              Point: Point,
              Tick: Tick,
              Renderer: Renderer,
              SVGElement: SVGElement,
              SVGRenderer: SVGRenderer,
              arrayMin: arrayMin,
              arrayMax: arrayMax,
              charts: charts,
              dateFormat: dateFormat,
              error: error,
              format: format,
              pathAnim: pathAnim,
              getOptions: getOptions,
              hasBidiBug: hasBidiBug,
              isTouchDevice: isTouchDevice,
              setOptions: setOptions,
              addEvent: addEvent,
              removeEvent: removeEvent,
              createElement: createElement,
              discardElement: discardElement,
              css: css,
              each: each,
              map: map,
              merge: merge,
              splat: splat,
              extendClass: extendClass,
              pInt: pInt,
              svg: hasSVG,
              canvas: useCanVG,
              vml: !hasSVG && !useCanVG,
              product: PRODUCT,
              version: VERSION
            });
          }());  /***/
        },
        function (module, exports, __webpack_require__) {
          'use strict';
          var chartFactory = __webpack_require__(4);
          module.exports = chartFactory(Highcharts, 'Chart');  /***/
        },
        function (module, exports, __webpack_require__) {
          'use strict';
          var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
          var React = __webpack_require__(5);
          if (typeof Highcharts === 'undefined') {
            throw Error('Starting with version 3 of react-highcharts, Highcharts is not bundled by default. ' + ' use "react-highcharts/dist/bundle/highcharts" instead, or include highcharts. ');
          }
          module.exports = function (Highcharts, chartType) {
            var displayName = 'Highcharts' + chartType;
            var result = React.createClass({
                displayName: displayName,
                propTypes: {
                  config: React.PropTypes.object.isRequired,
                  isPureConfig: React.PropTypes.bool
                },
                renderChart: function renderChart(config) {
                  if (!config) {
                    throw new Error('Config must be specified for the ' + displayName + ' component');
                  }
                  var chartConfig = config.chart;
                  this.chart = new Highcharts[chartType](_extends({}, config, { chart: _extends({}, chartConfig, { renderTo: this.refs.chart }) }));
                },
                shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
                  if (!this.props.isPureConfig || !(this.props.config === nextProps.config)) {
                    this.renderChart(nextProps.config);
                  }
                  return true;
                },
                getChart: function getChart() {
                  if (!this.chart) {
                    throw new Error('getChart() should not be called before the component is mounted');
                  }
                  return this.chart;
                },
                componentDidMount: function componentDidMount() {
                  this.renderChart(this.props.config);
                },
                render: function render() {
                  var props = this.props;
                  props = _extends({}, props, { ref: 'chart' });
                  return React.createElement('div', props);
                }
              });
            result.Highcharts = Highcharts;
            return result;
          };  /***/
        },
        function (module, exports) {
          module.exports = __WEBPACK_EXTERNAL_MODULE_5__;  /***/
        }  /******/
      ]);
    }));
    ;  /***/
  }  /******/
]));
//# sourceMappingURL=bundle.js.map